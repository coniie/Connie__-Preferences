{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"YouTubeâ„¢ Multi Downloader v7.7 ðŸš€ðŸ’¯ - yt1s.com (MP3, FHD, MP4, HD, SD, 3GP / NO ADS ðŸš«)","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.youtube.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1655061376915,"data":{}},"enabled":false,"position":1,"file_url":"https://greasyfork.org/scripts/34613-youtube-multi-downloader-v7-6-yt1s-com-mp3-fhd-mp4-hd-sd-3gp-no-ads/code/YouTube%E2%84%A2%20Multi%20Downloader%20v76%20%F0%9F%9A%80%F0%9F%92%AF%20-%20yt1scom%20(MP3,%20FHD,%20MP4,%20HD,%20SD,%203GP%20%20NO%20ADS%20%F0%9F%9A%AB).user.js","uuid":"c22991ec-e2e7-4793-b28e-53da544cb5a9","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgWW91VHViZeKEoiBNdWx0aSBEb3dubG9hZGVyIHY3Ljcg8J+agPCfkq8gLSB5dDFzLmNvbSAoTVAzLCBGSEQsIE1QNCwgSEQsIFNELCAzR1AgLyBOTyBBRFMg8J+aqykKLy8gQG5hbWU6cHQtQlIgWW91VHViZeKEoiBNdWx0aSBEb3dubG9hZGVyIHY3Ljcg8J+agPCfkq8gLSB5dDFzLmNvbSAoTVAzLCBGSEQsIE1QNCwgSEQsIFNELCAzR1AgLyBTRU0gQU7Dmk5DSU9TIPCfmqspCi8vIEBuYW1lOmFyIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmJnIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmNzIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmRhIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmRlIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmVsIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmVvIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmVzIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmZpIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmZyIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmZyLUNBIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmhlIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmh1IFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmlkIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOml0IFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmphIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOmtvIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOm5iIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOm5sIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnBsIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnJvIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnJ1IFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnNrIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnNyIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnN2IFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnRoIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnRyIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnVrIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnVnIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnZpIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnpoLUNOIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBuYW1lOnpoLVRXIFlvdVR1YmXihKIgTXVsdGkgRG93bmxvYWRlciB2Ny43IPCfmoDwn5KvIC0geXQxcy5jb20gKE1QMywgRkhELCBNUDQsIEhELCBTRCwgM0dQIC8gTk8gQURTIPCfmqspCi8vIEBkZXNjcmlwdGlvbiBDb21wYXRpYmxlIHdpdGggWW91VHViZSBNUDMgRG93bmxvYWRlciEgVGhpcyBzY3JpcHQgaGVscHMgdG8gYWRkIGEgZG93bmxvYWQgYnV0dG9uIG1vcmUgcXVpY2tseSB0byBkb3dubG9hZCB2aWRlb3MgYW5kIGF1ZGlvcyBmcm9tIFlvdVR1YmUuCi8vIEBkZXNjcmlwdGlvbjpwdC1CUiBDb21wYXTDrXZlbCBjb20gbyBZb3VUdWJlIE1QMyBEb3dubG9hZGVyISBFc3NlIHNjcmlwdCBhanVkYSBhIGFkaWNpb25hciB1bSBib3TDo28gZGUgZG93bmxvYWQgbWFpcyByYXBpZGFtZW50ZSBwYXJhIGJhaXhhciB2w61kZW9zIGUgw6F1ZGlvcyBkbyBZb3VUdWJlLgovLyBAZGVzY3JpcHRpb246YXIg2YXYqtmI2KfZgdmCINmF2Lkg2YrZiNiq2YrZiNioIE1QMyDYqtmG2LLZitmEISDZitiz2KfYudivINmH2LDYpyDYp9mE2KjYsdmG2KfZhdisINin2YTZhti12Yog2LnZhNmJINil2LbYp9mB2Kkg2LLYsSDYqtmG2LLZitmEINio2LTZg9mEINij2LPYsdi5INmE2KrZhtiy2YrZhCDZhdmC2KfYt9i5INin2YTZgdmK2K/ZitmIINmI2KfZhNiq2LPYrNmK2YTYp9iqINin2YTYtdmI2KrZitipINmF2YYgWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOmJnINCh0YrQstC80LXRgdGC0LjQvCDRgSBNUDMgRG93bmxvYWRlciDQvdCwIFlvdVR1YmUhINCi0L7Qt9C4INGB0LrRgNC40L/RgiDQv9C+0LzQsNCz0LAg0LTQsCDQtNC+0LHQsNCy0LjRgtC1INC/0L4t0LHRitGA0LfQviDQsdGD0YLQvtC9INC30LAg0LjQt9GC0LXQs9C70Y/QvdC1LCDQt9CwINC00LAg0LjQt9GC0LXQs9C70LjRgtC1INCy0LjQtNC10L7QutC70LjQv9C+0LLQtSDQuCDQsNGD0LTQuNC+INC+0YIgWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOmNzIEtvbXBhdGliaWxuw60gcyBZb3VUdWJlIE1QMyBEb3dubG9hZGVyISBUZW50byBza3JpcHQgcG9tw6Fow6EgcnljaGxlamkgcMWZaWRhdCB0bGHEjcOtdGtvIHBybyBzdGFob3bDoW7DrSB2aWRlw60gYSBhdWRpYSB6IFlvdVR1YmUuCi8vIEBkZXNjcmlwdGlvbjpkYSBLb21wYXRpYmVsIG1lZCBZb3VUdWJlIE1QMyBEb3dubG9hZGVyISBEZXR0ZSBzY3JpcHQgaGrDpmxwZXIgbWVkIGF0IHRpbGbDuGplIGVuIGRvd25sb2FkLWtuYXAgaHVydGlnZXJlIGZvciBhdCBkb3dubG9hZGUgdmlkZW9lciBvZyBhdWRpb3MgZnJhIFlvdVR1YmUuCi8vIEBkZXNjcmlwdGlvbjpkZSBLb21wYXRpYmVsIG1pdCBZb3VUdWJlIE1QMyBEb3dubG9hZGVyISBNaXQgZGllc2VtIFNrcmlwdCBrw7ZubmVuIFNpZSBzY2huZWxsZXIgZWluZSBEb3dubG9hZC1TY2hhbHRmbMOkY2hlIGhpbnp1ZsO8Z2VuLCB1bSBWaWRlb3MgdW5kIEF1ZGlvcyB2b24gWW91VHViZSBoZXJ1bnRlcnp1bGFkZW4uCi8vIEBkZXNjcmlwdGlvbjplbCDOo8+FzrzOss6xz4TPjCDOvM61IM+Ezr8gWW91VHViZSBNUDMgRG93bmxvYWRlciEgzpHPhc+Ez4wgz4TOvyDPg861zr3OrM+BzrnOvyDOss6/zrfOuM6sIM69zrEgz4DPgc6/z4POuM6tz4POtc+EzrUgzq3Ovc6xIM66zr/Phc68z4DOryDOu86uz4jOt8+CIM+AzrnOvyDOs8+Bzq7Os86/z4HOsSDOs865zrEgzr3OsSDOus6xz4TOtc6yzqzPg861z4TOtSDOss6vzr3PhM61zr8gzrrOsc65IM6uz4fOv8+Fz4IgzrHPgM+MIM+Ezr8gWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOmVvIEtvbmdydWEga3VuIFlvdVR1YmUgTVAzIERvd25sb2FkZXIhIMSIaSB0aXUgc2tyaXB0byBoZWxwYXMgYWxkb25pIGVsxZ11dGFuIGJ1dG9ub24gcGxpIHJhcGlkZSBwb3IgZWzFnXV0aSBmaWxtZXRvam4ga2FqIHNvbm9qbiBkZSBZb3VUdWJlLgovLyBAZGVzY3JpcHRpb246ZXMgQ29tcGF0aWJsZSBjb24gWW91VHViZSBNUDMgRG93bmxvYWRlciEgRXN0ZSBzY3JpcHQgYXl1ZGEgYSBhZ3JlZ2FyIHVuIGJvdMOzbiBkZSBkZXNjYXJnYSBtw6FzIHLDoXBpZGFtZW50ZSBwYXJhIGRlc2NhcmdhciB2aWRlb3MgeSBhdWRpb3MgZGUgWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOmZpIFlodGVlbnNvcGl2YSBZb3VUdWJlIE1QMyBEb3dubG9hZGVyIC1zb3ZlbGx1a3NlbiBrYW5zc2EhIFTDpG3DpCBza3JpcHRpIGF1dHRhYSBsaXPDpMOkbcOkw6RuIGxhdGF1c3BhaW5pa2tlZW4gbm9wZWFtbWluIHZpZGVvaWRlbiBqYSDDpMOkbmllbiBsYXRhYW1pc2VlbiBZb3VUdWJlc3RhLgovLyBAZGVzY3JpcHRpb246ZnIgQ29tcGF0aWJsZSBhdmVjIFlvdVR1YmUgTVAzIERvd25sb2FkZXIhIENlIHNjcmlwdCBwZXJtZXQgZCdham91dGVyIHVuIGJvdXRvbiBkZSB0w6lsw6ljaGFyZ2VtZW50IHBsdXMgcmFwaWRlbWVudCBwb3VyIHTDqWzDqWNoYXJnZXIgZGVzIHZpZMOpb3MgZXQgZGVzIGZpY2hpZXJzIGF1ZGlvIMOgIHBhcnRpciBkZSBZb3VUdWJlLgovLyBAZGVzY3JpcHRpb246ZnItQ0EgQ29tcGF0aWJsZSBhdmVjIFlvdVR1YmUgTVAzIERvd25sb2FkZXIhIENlIHNjcmlwdCBwZXJtZXQgZCdham91dGVyIHVuIGJvdXRvbiBkZSB0w6lsw6ljaGFyZ2VtZW50IHBsdXMgcmFwaWRlbWVudCBwb3VyIHTDqWzDqWNoYXJnZXIgZGVzIHZpZMOpb3MgZXQgZGVzIGZpY2hpZXJzIGF1ZGlvIMOgIHBhcnRpciBkZSBZb3VUdWJlLgovLyBAZGVzY3JpcHRpb246aGUg16rXldeQ150g15zXlNeV16jXk9eqIE1QMyDXqdecIFlvdVR1YmUhINeh16fXqNeZ16TXmCDXlteUINei15XXlteoINec15TXldeh15nXoyDXnNeX16bXnyDXlNeV16jXk9eUINeR157XlNeZ16jXldeqINeo15HXlCDXmdeV16rXqCDXnNeU15XXqNeT16og16HXqNeY15XXoNeZ150g15XXqdee16LXmdedINeeLSBZb3VUdWJlLgovLyBAZGVzY3JpcHRpb246aHUgS29tcGF0aWJpbGlzIGEgWW91VHViZSBNUDMgRG93bmxvYWRlci1yZWwhIEV6IGEgc3prcmlwdCBzZWfDrXQgYSBsZXTDtmx0w6lzaSBnb21iIGd5b3JzYWJiIGhvenrDoWFkw6Fzw6FiYW4gYSB2aWRlw7NrIMOpcyBhdWRpw7NrIGxldMO2bHTDqXPDqWhleiBhIFlvdVR1YmUtcsOzbC4KLy8gQGRlc2NyaXB0aW9uOmlkIEtvbXBhdGliZWwgZGVuZ2FuIFlvdVR1YmUgTVAzIERvd25sb2FkZXIhIFNrcmlwIGluaSBtZW1iYW50dSBtZW5hbWJhaGthbiB0b21ib2wgdW5kdWhhbiBsZWJpaCBjZXBhdCB1bnR1ayBtZW5ndW5kdWggdmlkZW8gZGFuIGF1ZGlvIGRhcmkgWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOml0IENvbXBhdGliaWxlIGNvbiBZb3VUdWJlIE1QMyBEb3dubG9hZGVyISBRdWVzdG8gc2NyaXB0IGFpdXRhIGFkIGFnZ2l1bmdlcmUgdW4gcHVsc2FudGUgZGkgZG93bmxvYWQgcGnDuSByYXBpZGFtZW50ZSBwZXIgc2NhcmljYXJlIHZpZGVvIGUgYXVkaW8gZGEgWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOmphIFlvdVR1YmUgTVAz44OA44Km44Oz44Ot44O844OA44O844Go5LqS5o+b5oCn44GM44GC44KK44G+44GZ77yB44GT44Gu44K544Kv44Oq44OX44OI44Gv44CBWW91VHViZeOBi+OCieODk+ODh+OCquOChOOCquODvOODh+OCo+OCquOCkuODgOOCpuODs+ODreODvOODieOBmeOCi+OBn+OCgeOBruODgOOCpuODs+ODreODvOODieODnOOCv+ODs+OCkuOCiOOCiui/hemAn+OBq+i/veWKoOOBmeOCi+OBruOBq+W9ueeri+OBoeOBvuOBmeOAggovLyBAZGVzY3JpcHRpb246a28gWW91VHViZSBNUDMg64uk7Jq066Gc642U7JmAIO2YuO2ZmCEg7J20IOyKpO2BrOumve2KuOuKlCBZb3VUdWJl7JeQ7IScIOu5hOuUlOyYpCDrsI8g7Jik65SU7Jik66W8IOuLpOyatOuhnOuTnO2VmOq4sCDsnITtlbQg64uk7Jq066Gc65OcIOuyhO2KvOydhCDrjZQg67mo66asIOy2lOqwgO2VmOuKlCDrjbAg64+E7JuA7J2065Cp64uI64ukLgovLyBAZGVzY3JpcHRpb246bmIgS29tcGF0aWJlbCBtZWQgWW91VHViZSBNUDMgRG93bmxvYWRlciEgRGV0dGUgc2tyaXB0ZXQgaGplbHBlciBkZWcgbWVkIMOlIGxlZ2dlIHRpbCBlbiBuZWRsYXN0bmluZ3NrbmFwcCByYXNrZXJlIGZvciDDpSBsYXN0ZSBuZWQgdmlkZW9lciBvZyBseWRiw6VuZCBmcmEgWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOm5sIENvbXBhdGliZWwgbWV0IFlvdVR1YmUgTVAzIERvd25sb2FkZXIhIERpdCBzY3JpcHQgaGVscHQgb20gZWVuIGRvd25sb2Fka25vcCBzbmVsbGVyIHRvZSB0ZSB2b2VnZW4gb20gdmlkZW8ncyBlbiBhdWRpbyB2YW4gWW91VHViZSB0ZSBkb3dubG9hZGVuLgovLyBAZGVzY3JpcHRpb246cGwgS29tcGF0eWJpbG55IHogWW91VHViZSBNUDMgRG93bmxvYWRlciEgVGVuIHNrcnlwdCBwb21hZ2Egc3p5YmNpZWogZG9kYcSHIHByenljaXNrIHBvYmllcmFuaWEsIGFieSBwb2JpZXJhxIcgZmlsbXkgaSBwbGlraSBhdWRpbyB6IFlvdVR1YmUuCi8vIEBkZXNjcmlwdGlvbjpybyBDb21wYXRpYmlsIGN1IFlvdVR1YmUgTVAzIERvd25sb2FkZXIhIEFjZXN0IHNjcmlwdCB2xIMgYWp1dMSDIHPEgyBhZMSDdWdhyJtpIG1haSByYXBpZCB1biBidXRvbiBkZSBkZXNjxINyY2FyZSBwZW50cnUgYSBkZXNjxINyY2EgdmlkZW9jbGlwdXJpIMiZaSBhdWRpbyBkZSBwZSBZb3VUdWJlLgovLyBAZGVzY3JpcHRpb246cnUg0KHQvtCy0LzQtdGB0YLQuNC80L4g0YEgWW91VHViZSBNUDMgRG93bmxvYWRlciEg0K3RgtC+0YIg0YHQutGA0LjQv9GCINC/0L7QvNC+0LPQsNC10YIg0LHRi9GB0YLRgNC10LUg0LTQvtCx0LDQstC40YLRjCDQutC90L7Qv9C60YMg0LfQsNCz0YDRg9C30LrQuCDQtNC70Y8g0LfQsNCz0YDRg9C30LrQuCDQstC40LTQtdC+INC4INCw0YPQtNC40L4g0YEgWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOnNrIEtvbXBhdGliaWxuw6kgcyBhcGxpa8OhY2lvdSBZb3VUdWJlIG5hIHN0aWFobnV0aWUgTVAzISBUZW50byBza3JpcHQgcG9tw6FoYSByw71jaGxlasWhaWUgcHJpZMOhdmHFpSB0bGHEjWlkbG8gbmEgc8WlYWhvdmFuaWUgdmlkZcOtIGEgYXVkaWEgeiBZb3VUdWJlLgovLyBAZGVzY3JpcHRpb246c3IgS29tcGF0aWJpbGFuIHMgWW91VHViZSBNUDMgRG93bmxvYWRlci1vbSEgT3ZhIHNrcmlwdGEgcG9tYcW+ZSBicsW+ZW0gZG9kYXZhbmp1IGd1bWJhIHphIHByZXV6aW1hbmplIHphIHByZXV6aW1hbmplIHZpZGVvemFwaXNhIGkgYXVkaW8gemFwaXNhIHMgWW91VHViZWEuCi8vIEBkZXNjcmlwdGlvbjpzdiBLb21wYXRpYmVsIG1lZCBZb3VUdWJlIE1QMyBEb3dubG9hZGVyISBEZXR0YSBza3JpcHQgaGrDpGxwZXIgdGlsbCBhdHQgbMOkZ2dhIHRpbGwgZW4gbmVkbGFkZG5pbmdza25hcHAgc25hYmJhcmUgZsO2ciBhdHQgbGFkZGEgbmVyIHZpZGVvciBvY2ggbGp1ZCBmcsOlbiBZb3VUdWJlLgovLyBAZGVzY3JpcHRpb246dGgg4LmA4LiC4LmJ4Liy4LiB4Lix4LiZ4LmE4LiU4LmJ4LiB4Lix4LiaIFlvdVR1YmUgTVAzIERvd25sb2FkZXIhIOC4quC4hOC4o+C4tOC4m+C4leC5jOC4meC4teC5ieC4iuC5iOC4p+C4ouC5gOC4nuC4tOC5iOC4oeC4m+C4uOC5iOC4oeC4lOC4suC4p+C4meC5jOC5guC4q+C4peC4lOC5hOC4lOC5ieC5gOC4o+C5h+C4p+C4guC4tuC5ieC4meC5gOC4nuC4t+C5iOC4reC4lOC4suC4p+C4meC5jOC5guC4q+C4peC4lOC4p+C4tOC4lOC4teC5guC4reC5geC4peC4sOC5hOC4n+C4peC5jOC5gOC4quC4teC4ouC4h+C4iOC4suC4gSBZb3VUdWJlCi8vIEBkZXNjcmlwdGlvbjp0ciBZb3VUdWJlIE1QMyBEb3dubG9hZGVyIGlsZSB1eXVtbHUhIEJ1IGtvbXV0IGRvc3lhc8SxLCBZb3VUdWJlJ2RhbiB2aWRlbyB2ZSBzZXMgaW5kaXJtZWsgacOnaW4gYmlyIGluZGlybWUgZMO8xJ9tZXNpIGRhaGEgaMSxemzEsSBla2xlbWVuaXplIHlhcmTEsW1jxLEgb2x1ci4KLy8gQGRlc2NyaXB0aW9uOnVrINCh0YPQvNGW0YHQvdC40Lkg0LcgWW91VHViZSBNUDMgRG93bmxvYWRlciEg0KbQtdC5INGB0YbQtdC90LDRgNGW0Lkg0LTQvtC/0L7QvNCw0LPQsNGUINGI0LLQuNC00YjQtSDQtNC+0LTQsNGC0Lgg0LrQvdC+0L/QutGDINC30LDQstCw0L3RgtCw0LbQtdC90L3RjyDQtNC70Y8g0LfQsNCy0LDQvdGC0LDQttC10L3QvdGPINCy0ZbQtNC10L4g0YLQsCDQsNGD0LTRltC+INC3IFlvdVR1YmUuCi8vIEBkZXNjcmlwdGlvbjp1ZyBZb3VUdWJlIE1QMyBEb3dubG9hZGVyINio2YnZhNuV2YYg2YXYp9iz2YTZidi02KfZhNin2YrYr9uHISDYqNuHINmC2YjZhNmK2KfYstmF2KcgWW91VHViZSDYr9mJ2YYg2LPZidmGINuL25Ug2KbbiNmG2KbYp9mE2Lrbh9mG2Ykg2obbiNi024jYsduI2LQg2KbbiNqG24jZhiDahtuI2LTbiNix24jYtCDZg9uH2Ybbh9m+2YPZidiz2YnZhtmJINiq25DYstix25XZgyDZgtmI2LTbh9i02YLYpyDZitin2LHYr9uV2YUg2KjbkNix2YnYr9uHLgovLyBAZGVzY3JpcHRpb246dmkgVMawxqFuZyB0aMOtY2ggduG7m2kgWW91VHViZSBNUDMgRG93bmxvYWRlciEgS+G7i2NoIGLhuqNuIG7DoHkgZ2nDunAgdGjDqm0gbsO6dCB04bqjaSB4deG7kW5nIG5oYW5oIGjGoW4gxJHhu4MgdOG6o2kgeHXhu5FuZyB2aWRlbyB2w6Agw6JtIHRoYW5oIHThu6sgWW91VHViZS4KLy8gQGRlc2NyaXB0aW9uOnpoLUNOIOS4jllvdVR1YmUgTVAz5LiL6L295Zmo5YW85a6577yB6K+l6ISa5pys5pyJ5Yqp5LqO5pu05b+r5Zyw5re75Yqg5LiL6L295oyJ6ZKu77yM5Lul5LuOWW91VHViZeS4i+i9veinhumikeWSjOmfs+mikeOAggovLyBAZGVzY3JpcHRpb246emgtVFcg6IiHWW91VHViZSBNUDPkuIvovInlmajlhbzlrrnvvIHoqbLohbPmnKzmnInliqnmlrzmm7Tlv6vlnLDmt7vliqDkuIvovInmjInpiJXvvIzku6Xlvp5Zb3VUdWJl5LiL6LyJ6KaW6aC75ZKM6Z+z6aC744CCCi8vIEBuYW1lc3BhY2UgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy91c2Vycy8xNTI5MjQKLy8gQGhvbWVwYWdlVVJMIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zNDYxMwovLyBAc3VwcG9ydFVSTCBodHRwczovL2dyZWFzeWZvcmsub3JnL3NjcmlwdHMvMzQ2MTMvZmVlZGJhY2sKLy8gQGF1dGhvciBQdW5pc2hlcgovLyBAdmVyc2lvbiA3LjcKLy8gQGRhdGUgMjAyMi0wMi0yNwovLyBAaWNvbiBodHRwczovL2kuaW1ndXIuY29tL0ludUREVksucG5nCi8vIEBjb21wYXRpYmxlIGNocm9tZQovLyBAY29tcGF0aWJsZSBmaXJlZm94Ci8vIEBjb21wYXRpYmxlIG9wZXJhCi8vIEBjb21wYXRpYmxlIHNhZmFyaQovLyBAY29tcGF0aWJsZSBlZGdlCi8vIEBhbnRpZmVhdHVyZSByZWZlcnJhbC1saW5rCi8vIEBsaWNlbnNlIENDLUJZLU5DLU5ELTQuMAovLyBAbWF0Y2ggKjovLyoueW91dHViZS5jb20vKgovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYnJvd3Nlci1hcHAiKSB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFzdGhlYWQiKSB8fCB3aW5kb3cuUG9seW1lcikgewogICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoIndhdGNoP3Y9IikgPCAwKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXRhLWNvbnRlbnRzIikgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInB1bmlzaGVyIikgPT09IG51bGwpIHsKICAgICAgICAgICAgQWRkWVQoKTsKICAgICAgICB9CiAgICB9LCAxKTsKCiAgICBzZXRFbGVtZW50ID0gZnVuY3Rpb24odXJsKSB7CiAgICAgICB2YXIgcmVnRXhwID0gL14uKigoeW91dHUuYmVcLyl8KHZcLyl8KFwvdVwvXHdcLyl8KGVtYmVkXC8pfCh3YXRjaFw/KSlcPz92Pz0/KFteI1wmXD9dKikuKi87CiAgICAgICB2YXIgbWF0Y2ggPSBTdHJpbmcodXJsKS5tYXRjaChyZWdFeHApOwogICAgICAgcmV0dXJuIChtYXRjaCYmbWF0Y2hbN10ubGVuZ3RoPT0xMSk/IG1hdGNoWzddOiBmYWxzZTsKICAgIH07Cn0KCmZ1bmN0aW9uIEFkZFlUKCkgewogICAgdmFyIGJ1dHRvbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgIGJ1dHRvbkRpdi5pZCA9ICJwdW5pc2hlciI7CiAgICBidXR0b25EaXYuc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICBidXR0b25EaXYuc3R5bGUubWFyZ2luVG9wID0gIjNweCI7CiAgICBidXR0b25EaXYuc3R5bGUucGFkZGluZyA9ICIxMHB4IDAiOwogICAgdmFyIGFkZEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgIGFkZEJ1dHRvbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgiRE9XTkxPQUQiKSk7CiAgICBhZGRCdXR0b24uc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICBhZGRCdXR0b24uc3R5bGUuY3Vyc29yID0gInBvaW50ZXIiOwogICAgYWRkQnV0dG9uLnN0eWxlLmhlaWdodCA9ICJpbmhlcml0IjsKICAgIGFkZEJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiIzM5MzkzOSI7CiAgICBhZGRCdXR0b24uc3R5bGUuY29sb3IgPSAiI2ZmZmZmZiI7CiAgICBhZGRCdXR0b24uc3R5bGUucGFkZGluZyA9ICIxMHB4IDIycHgiOwogICAgYWRkQnV0dG9uLnN0eWxlLm1hcmdpbiA9ICIwcHggMHB4IjsKICAgIGFkZEJ1dHRvbi5zdHlsZS5ib3JkZXIgPSAiMCI7CiAgICBhZGRCdXR0b24uc3R5bGUuYm9yZGVyUmFkaXVzID0gIjJweCI7CiAgICBhZGRCdXR0b24uc3R5bGUuZm9udFNpemUgPSAiMS40cmVtIjsKICAgIGFkZEJ1dHRvbi5zdHlsZS5mb250RmFtaWx5ID0gImluaGVyaXQiOwogICAgYWRkQnV0dG9uLnN0eWxlLnRleHRBbGlnbiA9ICJjZW50ZXIiOwogICAgYWRkQnV0dG9uLnN0eWxlLnRleHREZWNvcmF0aW9uID0gIm5vbmUiOwogICAgYWRkQnV0dG9uLmhyZWYgPSAiLy95dDFzLmNvbS9lbi95b3V0dWJlLXRvLW1wMz9xPSIgKyBlbmNvZGVVUklDb21wb25lbnQobG9jYXRpb24uaHJlZik7CiAgICBhZGRCdXR0b24udGFyZ2V0ID0gIl9ibGFuayI7CiAgICBidXR0b25EaXYuYXBwZW5kQ2hpbGQoYWRkQnV0dG9uKTsKICAgIHZhciB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiW2lkPSdzdWJzY3JpYmUtYnV0dG9uJ10iKTsKICAgIGlmKHRhcmdldEVsZW1lbnQpewogICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGFyZ2V0RWxlbWVudC5sZW5ndGg7IGkrKyl7CiAgICAgICAgaWYodGFyZ2V0RWxlbWVudFtpXS5jbGFzc05hbWUuaW5kZXhPZigieXRkLXZpZGVvLXNlY29uZGFyeS1pbmZvLXJlbmRlcmVyIikgPiAtMSl7CiAgICAgICAgICAgIHRhcmdldEVsZW1lbnRbaV0uYXBwZW5kQ2hpbGQoYnV0dG9uRGl2KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHZhciBkZXNjcmlwdGlvbkJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInl0ZC12aWRlby1zZWNvbmRhcnktaW5mby1yZW5kZXJlciIpOwogICAgaWYoZGVzY3JpcHRpb25Cb3hbMF0uY2xhc3NOYW1lLmluZGV4T2YoImxvYWRpbmciKSA+IC0xKXsKICAgICAgICBkZXNjcmlwdGlvbkJveFswXS5jbGFzc0xpc3QucmVtb3ZlKCJsb2FkaW5nIik7CiAgICB9Cn0KfSkoKTs="},{"name":"MyAnimeList Manga/Anime search and stream links","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/myanimelist\\.net\\/(anime|manga)(\\/)\\d+/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["api.malsync.moe"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1657656984965,"data":{"pageSearchCache":"o{}","pageSearchCacheTime":"n1657656984965"}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/399109-myanimelist-manga-anime-search-and-stream-links/code/MyAnimeList%20MangaAnime%20search%20and%20stream%20links.user.js","uuid":"fd0378b1-1e33-4503-8119-338fbefa6f8b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIE15QW5pbWVMaXN0IE1hbmdhL0FuaW1lIHNlYXJjaCBhbmQgc3RyZWFtIGxpbmtzCi8vIEBuYW1lc3BhY2UgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3VzZXJzLzQxMjMxOAovLyBAaW5jbHVkZSAgICAgL15odHRwcz86XC9cL215YW5pbWVsaXN0XC5uZXRcLyhhbmltZXxtYW5nYSkoXC8pXGQrLwovLyBAZ3JhbnQgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gQGdyYW50ICAgICAgIEdNLnNldFZhbHVlCi8vIEBncmFudCAgICAgICBHTS5nZXRWYWx1ZQovLyBAcmVxdWlyZSAgICAgaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMy40LjEvanF1ZXJ5Lm1pbi5qcwovLyBAdmVyc2lvbiAgICAgMS43Ci8vIEBhdXRob3IgICAgICBoZW5yaWs5OTk5Ci8vIEBydW4tYXQgICAgICBkb2N1bWVudC1pZGxlCi8vIEBkZXNjcmlwdGlvbiBUaGlzIHNjcmlwdCBhZGRzIHNlYXJjaCBhbmQgc3RyZWFtIGxpbmtzIGZvciBtYW5nYSBhbmQgYW5pbWUgcGFnZXMgb24gTXlBbmltZUxpc3QKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgcGFnZVR5cGU7CnZhciBwYWdlSWQ7CgoKZnVuY3Rpb24gZmF2aWNvbihkb21haW4pewogIHJldHVybiAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9kb21haW49Jytkb21haW47Cn0KCmFzeW5jIGZ1bmN0aW9uIGdldFBhZ2VTZWFyY2goKXsKICBjb25zb2xlLmxvZygiZ2V0UGFnZVNlYXJjaCIpCiAgdmFyIGNhY2hlID0gYXdhaXQgR00uZ2V0VmFsdWUoInBhZ2VTZWFyY2hDYWNoZSIpOwogIHZhciBjYWNoZVRpbWUgPSBhd2FpdCBHTS5nZXRWYWx1ZSgicGFnZVNlYXJjaENhY2hlVGltZSIpOwogIGlmKGNhY2hlICE9IG51bGwgJiYgISQuaXNFbXB0eU9iamVjdChjYWNoZSkgJiYgY2FjaGVUaW1lICE9IG51bGwgJiYgbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBwYXJzZUludChjYWNoZVRpbWUpIDwgMTIqNjAqNjAqMTAwMCkgewogICAgY29uc29sZS5sb2coImNhY2hlIGdldHBhZ2VzZWFyY2giKTsKICAgIHJldHVybiBjYWNoZTsKICB9IGVsc2UgewogICAgY29uc29sZS5sb2coIm5ldyBnZXRwYWdlc2VhcmNoIik7CiAgICBsZXQgcGFnZVNlYXJjaCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkubWFsc3luYy5tb2UvZ2VuZXJhbC9wYWdlc2VhcmNoJywKICAgICAgb25sb2FkOiBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgIGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwICYmIHJlc3BvbnNlLnJlc3BvbnNlVGV4dCkgewogICAgICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKHJlc3BvbnNlLnJlc3BvbnNlVGV4dCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvbHZlKHt9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0pCiAgICBhd2FpdCBHTS5zZXRWYWx1ZSgicGFnZVNlYXJjaENhY2hlVGltZSIsbmV3IERhdGUoKS5nZXRUaW1lKCkpOwogICAgYXdhaXQgR00uc2V0VmFsdWUoInBhZ2VTZWFyY2hDYWNoZSIscGFnZVNlYXJjaCk7CiAgICByZXR1cm4gcGFnZVNlYXJjaDsKICB9Cn0KCmFzeW5jIGZ1bmN0aW9uIHNpdGVTZWFyY2goKSB7CiAgY29uc29sZS5sb2coJ1NpdGUgU2VhcmNoJyk7CiAgJCgnaDI6Y29udGFpbnMoIkluZm9ybWF0aW9uIiknKS5iZWZvcmUoJzxoMiBpZD0ibWFsLXN5bmMtc2VhcmNoLWxpbmtzIiBjbGFzcz0ibWFsX2xpbmtzIj5TZWFyY2g8L2gyPjxkaXYgY2xhc3M9Ik1BTFN5bmMtc2VhcmNoIj48YT5bU2hvd108L2E+PC9kaXY+PGJyIGNsYXNzPSJtYWxfbGlua3MiIC8+Jyk7CiAgdmFyIHBhZ2VTZWFyY2ggPSBhd2FpdCBnZXRQYWdlU2VhcmNoKCk7CiAgJCgnLk1BTFN5bmMtc2VhcmNoJykub25lKCdjbGljaycsIGFzeW5jICgpID0+IHsKICAgICQoJy5NQUxTeW5jLXNlYXJjaCcpLnJlbW92ZSgpOwogICAgY29uc29sZS5sb2cocGFnZVNlYXJjaCkKICAgIHZhciB0aXRsZSA9ICQoJ21ldGFbcHJvcGVydHk9Im9nOnRpdGxlIl0nKS5maXJzdCgpLmF0dHIoJ2NvbnRlbnQnKS50cmltKCk7CiAgICB2YXIgdGl0bGVFbmNvZGVkID0gZW5jb2RlVVJJKHRpdGxlKTsKICAgIHZhciBodG1sID0gJyc7CiAgICB2YXIgaW1nU3R5bGUgPSAncG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IDRweDsnCgogICAgZm9yICh2YXIga2V5IGluIHBhZ2VTZWFyY2gpIHsKICAgICAgdmFyIHBhZ2UgPSBwYWdlU2VhcmNoW2tleV07CiAgICAgIGlmKHBhZ2UudHlwZSAhPT0gcGFnZVR5cGUpIGNvbnRpbnVlOwoKICAgICAgdmFyIGxpbmtDb250ZW50ID0gYDxpbWcgc3R5bGU9IiR7aW1nU3R5bGV9IiBzcmM9IiR7ZmF2aWNvbihwYWdlLmRvbWFpbil9Ij4gJHtwYWdlLm5hbWV9YDsKICAgICAgaWYodHlwZW9mIHBhZ2UuY29tcGxldGVTZWFyY2hUYWcgPT09ICd1bmRlZmluZWQnKXsKICAgICAgICB2YXIgbGluayA9CiAgICAgICAgYDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSIke3BhZ2Uuc2VhcmNoVXJsLnJlcGxhY2UoIiMjc2VhcmNoa2V5IyMiLHRpdGxlRW5jb2RlZCl9Ij4KICAgICAgICAke2xpbmtDb250ZW50fQogICAgICAgIDwvYT5gCiAgICAgIH1lbHNlewogICAgICAgIHZhciBsaW5rID0gcGFnZS5jb21wbGV0ZVNlYXJjaFRhZyh0aXRsZSwgbGlua0NvbnRlbnQpOwogICAgICB9CgogICAgICB2YXIgZ29vZ2xlU2VhY2ggPSAnJzsKICAgICAgaWYoIHR5cGVvZiBwYWdlLmdvb2dsZVNlYXJjaERvbWFpbiAhPT0gJ3VuZGVmaW5lZCcpewogICAgICAgIGdvb2dsZVNlYWNoID1gPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9JHt0aXRsZUVuY29kZWR9K3NpdGU6JHtwYWdlLmdvb2dsZVNlYXJjaERvbWFpbn0iPgogICAgICAgIDxpbWcgc3R5bGU9IiR7aW1nU3R5bGV9IiBzcmM9IiR7ZmF2aWNvbignZ29vZ2xlLmNvbScpfSI+CiAgICAgICAgPC9hPmA7CiAgICAgIH0KCiAgICAgIGh0bWwgKz0KICAgICAgYDxkaXYgY2xhc3M9Im1hbF9saW5rcyIgaWQ9IiR7a2V5fSIgc3R5bGU9InBhZGRpbmc6IDFweCAwOyI+CiAgICAgICR7bGlua30KICAgICAgJHtnb29nbGVTZWFjaH0KICAgICAgPC9kaXY+YDsKICAgIH0KCiAgICAkKCcjbWFsLXN5bmMtc2VhcmNoLWxpbmtzJykuYWZ0ZXIoaHRtbCk7CiAgfSk7Cn0KCmFzeW5jIGZ1bmN0aW9uIGdldE1hbFRvU3RyZWFtQXBpKHR5cGUsIGlkKXsKICBpZighaWQpIHJldHVybiB7fTsKICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICBtZXRob2Q6ICJHRVQiLAogICAgICB1cmw6ICdodHRwczovL2FwaS5tYWxzeW5jLm1vZS9tYWwvJyt0eXBlKycvJytpZCwKICAgICAgb25sb2FkOiBhc3luYyBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgIGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UucmVzcG9uc2VUZXh0KTsKICAgICAgICAgIGZvcih2YXIgcGFnZUtleSBpbiBkYXRhLlNpdGVzKXsKICAgICAgICAgICAgaWYoYXdhaXQgR00uZ2V0VmFsdWUocGFnZUtleSkgIT0gbnVsbCAmJiAhYXdhaXQgR00uZ2V0VmFsdWUocGFnZUtleSkpewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBhZ2VLZXkrJyBpcyBkZWFjdGl2YXRlZCcpOwogICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLlNpdGVzW3BhZ2VLZXldOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZihkYXRhICYmIGRhdGEuU2l0ZXMpIHJlc29sdmUoZGF0YS5TaXRlcyk7CiAgICAgICAgICByZXNvbHZlKHt9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZSh7fSk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9KQp9Cgphc3luYyBmdW5jdGlvbiBtYWxUb1N0cmVhbSgpewogIGNvbnNvbGUubG9nKCdtYWxUb1N0cmVhbScpOwogIGdldE1hbFRvU3RyZWFtQXBpKHBhZ2VUeXBlLCBwYWdlSWQpLnRoZW4oKGxpbmtzKSA9PiB7CiAgICBjb25zb2xlLmxvZyhsaW5rcykKICAgIHZhciBodG1sID0gJyc7CiAgICBmb3IodmFyIHBhZ2VLZXkgaW4gbGlua3MpewogICAgICB2YXIgcGFnZSA9IGxpbmtzW3BhZ2VLZXldOwoKICAgICAgdmFyIHRlbXBIdG1sID0gJyc7CiAgICAgIHZhciB0ZW1wVXJsID0gJyc7CiAgICAgIGZvcih2YXIgc3RyZWFtS2V5IGluIHBhZ2UpewogICAgICAgIHZhciBzdHJlYW0gPSBwYWdlW3N0cmVhbUtleV07CiAgICAgICAgdGVtcEh0bWwgKz0gJzxkaXYgY2xhc3M9Im1hbF9saW5rcyI+PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Iicrc3RyZWFtWyd1cmwnXSsnIj4nK3N0cmVhbVsndGl0bGUnXSsnPC9hPjwvZGl2Pic7CiAgICAgICAgdGVtcFVybCA9IHN0cmVhbVsndXJsJ107CiAgICAgIH0KICAgICAgaHRtbCArPSAnPGgyIGlkPSInK3BhZ2VLZXkrJ0xpbmtzIiBjbGFzcz0ibWFsX2xpbmtzIj48aW1nIHNyYz0iJytmYXZpY29uKHRlbXBVcmwuc3BsaXQoJy8nKVsyXSkrJyI+ICcrcGFnZUtleSsnPHNwYW4gdGl0bGU9IicrcGFnZUtleSsnIiBjbGFzcz0icmVtb3ZlLW1hbC1zeW5jIiBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBmb250LXdlaWdodDogMTAwOyBsaW5lLWhlaWdodDogMjsgY3Vyc29yOiBwb2ludGVyOyBjb2xvcjogZ3JleTsiPng8L3NwYW4+PC9oMj4nOwogICAgICBodG1sICs9IHRlbXBIdG1sOwogICAgICBodG1sICs9ICc8YnIgY2xhc3M9Im1hbF9saW5rcyIgLz4nOwoKICAgIH0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICQoJ2gyOmNvbnRhaW5zKCJJbmZvcm1hdGlvbiIpJykuYmVmb3JlKGh0bWwpOwogICAgICAgICQoJy5yZW1vdmUtbWFsLXN5bmMnKS5jbGljayhhc3luYyBmdW5jdGlvbigpewogICAgICAgICAgdmFyIGtleSA9ICQodGhpcykuYXR0cigndGl0bGUnKTsKICAgICAgICAgIGNvbnNvbGUubG9nKGtleSkKICAgICAgICAgIGF3YWl0IEdNLnNldFZhbHVlKGtleSwgZmFsc2UpOwogICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgfSk7CiAgICB9KTsKICB9KQp9CgoKJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICBwYWdlVHlwZSA9IGRvY3VtZW50LlVSTC5zcGxpdCgiLyIpWzNdLnRvTG93ZXJDYXNlKCk7CiAgcGFnZUlkID0gZG9jdW1lbnQuVVJMLnNwbGl0KCIvIilbNF07CiAgc2l0ZVNlYXJjaCgpOwogIG1hbFRvU3RyZWFtKCk7Cn0pOw==","requires":[{"meta":{"name":"jquery.min.js","url":"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js","ts":1655061376918,"mimetype":"text/javascript"},"source":""}]},{"name":"Linkify Plus Plus","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["https://www.google.*/search*","https://www.google.*/webhp*","https://music.google.com/*","https://mail.google.com/*","https://docs.google.com/*","https://encrypted.google.com/*","https://*101weiqi.com/*","https://w3c*.github.io/*","https://www.paypal.com/*","https://term.ptt.cc/*","https://mastodon.social/*"],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1655061376926,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/4255-linkify-plus-plus/code/Linkify%20Plus%20Plus.user.js","uuid":"aa5e6994-ab7d-4b0b-b708-cc5b012d73a2","source":""},{"name":"Twitch Auto Channel Points Claimer","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.twitch.tv/*","https://dashboard.twitch.tv/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1655061376927,"data":{}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/392348-twitch-auto-channel-points-claimer/code/Twitch%20Auto%20Channel%20Points%20Claimer.user.js","uuid":"8861c5e5-3ee2-44fd-bc46-d541e0be79b8","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgVHdpdGNoIEF1dG8gQ2hhbm5lbCBQb2ludHMgQ2xhaW1lcgovLyBAdmVyc2lvbiAxLjYKLy8gQGF1dGhvciBQYXJ0TWVudAovLyBAZGVzY3JpcHRpb24gQXV0b21hdGljYWxseSBjbGFpbSBjaGFubmVsIHBvaW50cy4KLy8gQG1hdGNoIGh0dHBzOi8vd3d3LnR3aXRjaC50di8qCi8vIEBtYXRjaCBodHRwczovL2Rhc2hib2FyZC50d2l0Y2gudHYvKgovLyBAbGljZW5zZSBNSVQKLy8gQGdyYW50IG5vbmUKLy8gQG5hbWVzcGFjZSBodHRwczovL2dyZWFzeWZvcmsub3JnL3VzZXJzLzMxMDQzNwovLyA9PS9Vc2VyU2NyaXB0PT0KCmxldCBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXI7CmxldCBjbGFpbWluZyA9IGZhbHNlOwppZiAoTXV0YXRpb25PYnNlcnZlcikgY29uc29sZS5sb2coJ0F1dG8gY2xhaW1lciBpcyBlbmFibGVkLicpOwpsZXQgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihlID0+IHsKICAgIGxldCBib251cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbGFpbWFibGUtYm9udXNfX2ljb24nKTsKICAgIGlmIChib251cyAmJiAhY2xhaW1pbmcpIHsKICAgICAgICBib251cy5jbGljaygpOwogICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoKTsKICAgICAgICBjbGFpbWluZyA9IHRydWU7CiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDbGFpbWVkIGF0ICcrZGF0ZSk7CiAgICAgICAgICAgIGNsYWltaW5nID0gZmFsc2U7CiAgICAgICAgfSwgTWF0aC5yYW5kb20oKSAqIDEwMDAgKyAyMDAwKTsKICAgIH0KfSk7Cm9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pOw=="},{"name":"musescore-downloader","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://musescore.com/*/*","https://s.musescore.com/*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null}},"storage":{"ts":1657658576834,"data":{}},"enabled":true,"position":5,"file_url":"https://msdl.librescore.org/install.user.js","uuid":"1a6c08a7-6c80-41e7-8d48-1e4ebebae0e5","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBtdXNlc2NvcmUtZG93bmxvYWRlcgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vd3d3LnhtYWRlci5jb20vCi8vIEBob21lcGFnZVVSTCAgaHR0cHM6Ly9naXRodWIuY29tL1htYWRlci9tdXNlc2NvcmUtZG93bmxvYWRlci8KLy8gQHN1cHBvcnRVUkwgICBodHRwczovL2dpdGh1Yi5jb20vWG1hZGVyL211c2VzY29yZS1kb3dubG9hZGVyL2lzc3VlcwovLyBAdXBkYXRlVVJMICAgIGh0dHBzOi8vbXNkbC5saWJyZXNjb3JlLm9yZy9pbnN0YWxsLnVzZXIuanMKLy8gQGRvd25sb2FkVVJMICBodHRwczovL21zZGwubGlicmVzY29yZS5vcmcvaW5zdGFsbC51c2VyLmpzCi8vIEB2ZXJzaW9uICAgICAgMC4yNi4wCi8vIEBkZXNjcmlwdGlvbiAgZG93bmxvYWQgc2hlZXQgbXVzaWMgZnJvbSBtdXNlc2NvcmUuY29tIGZvciBmcmVlLCBubyBsb2dpbiBvciBNdXNlc2NvcmUgUHJvIHJlcXVpcmVkIHwg5YWN55m75b2V44CB5YWNIE11c2VzY29yZSBQcm/vvIzlhY3otLnkuIvovb0gbXVzZXNjb3JlLmNvbSDkuIrnmoTmm7LosLEKLy8gQGF1dGhvciAgICAgICBYbWFkZXIKLy8gQGljb24gICAgICAgICBodHRwczovL2xpYnJlc2NvcmUub3JnL2ltZy9pY29ucy9sb2dvLnN2ZwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vbXVzZXNjb3JlLmNvbS8qLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL3MubXVzZXNjb3JlLmNvbS8qLyoKLy8gQGxpY2Vuc2UgICAgICBNSVQKLy8gQGNvcHlyaWdodCAgICBDb3B5cmlnaHQgKGMpIDIwMTktMjAyMSBYbWFkZXIKLy8gQGdyYW50ICAgICAgICB1bnNhZmVXaW5kb3cKLy8gQGdyYW50ICAgICAgICBHTS5yZWdpc3Rlck1lbnVDb21tYW5kCi8vIEBncmFudCAgICAgICAgR00uYWRkRWxlbWVudAovLyBAZ3JhbnQgICAgICAgIEdNLm9wZW5JblRhYgovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLwogICAgY29uc3QgdyA9IHR5cGVvZiB1bnNhZmVXaW5kb3cgPT0gJ29iamVjdCcgPyB1bnNhZmVXaW5kb3cgOiB3aW5kb3c7CgogICAgLy8gR00gQVBJcyBnbHVlCiAgICBjb25zdCBfR00gPSB0eXBlb2YgR00gPT0gJ29iamVjdCcgPyBHTSA6IHVuZGVmaW5lZDsKICAgIGNvbnN0IGdtSWQgPSAnJyArIE1hdGgucmFuZG9tKCk7CiAgICB3W2dtSWRdID0gX0dNOwoKICAgIGlmIChfR00gJiYgX0dNLnJlZ2lzdGVyTWVudUNvbW1hbmQgJiYgX0dNLm9wZW5JblRhYikgewogICAgICAvLyBhZGQgYnV0dG9ucyB0byB0aGUgdXNlcnNjcmlwdCBtYW5hZ2VyIG1lbnUKICAgICAgX0dNLnJlZ2lzdGVyTWVudUNvbW1hbmQoCiAgICAgICAgYCoqIFZlcnNpb246ICR7X0dNLmluZm8uc2NyaXB0LnZlcnNpb259ICoqYCwKICAgICAgICAoKSA9PiBfR00ub3BlbkluVGFiKCJodHRwczovL2dpdGh1Yi5jb20vWG1hZGVyL211c2VzY29yZS1kb3dubG9hZGVyL3JlbGVhc2VzIiwgeyBhY3RpdmU6IHRydWUgfSkKICAgICAgKQoKICAgICAgX0dNLnJlZ2lzdGVyTWVudUNvbW1hbmQoCiAgICAgICAgJyoqIFNvdXJjZSBDb2RlICoqJywKICAgICAgICAoKSA9PiBfR00ub3BlbkluVGFiKF9HTS5pbmZvLnNjcmlwdC5ob21lcGFnZSwgeyBhY3RpdmU6IHRydWUgfSkKICAgICAgKQoKICAgICAgX0dNLnJlZ2lzdGVyTWVudUNvbW1hbmQoCiAgICAgICAgJyoqIERpc2NvcmQgKionLAogICAgICAgICgpID0+IF9HTS5vcGVuSW5UYWIoImh0dHBzOi8vZGlzY29yZC5nZy9ES3U3Y1VaNFhRIiwgeyBhY3RpdmU6IHRydWUgfSkKICAgICAgKQogICAgfQoKICAgIGZ1bmN0aW9uIGdldFJhbmRMICgpIHsKICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNikpCiAgICB9CgogICAgLy8gc2NyaXB0IGxvYWRlcgogICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7CiAgICAgIGNvbnN0IGlkID0gJycgKyBNYXRoLnJhbmRvbSgpOwogICAgICB3W2lkXSA9IHJlc29sdmU7CgogICAgICBjb25zdCBzdGFja04gPSA5CiAgICAgIGxldCBsb2FkZXJJbnRybyA9ICcnCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhY2tOOyBpKyspIHsKICAgICAgICBsb2FkZXJJbnRybyArPSBgKGZ1bmN0aW9uICR7Z2V0UmFuZEwoKX0oKXtgCiAgICAgIH0KICAgICAgY29uc3QgbG9hZGVyT3V0cm8gPSAnfSkoKScucmVwZWF0KHN0YWNrTikKICAgICAgY29uc3QgbW9ja1VybCA9ICJodHRwczovL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fwc3RhZy5qcyIKCiAgICAgIEZ1bmN0aW9uKGAke2xvYWRlckludHJvfWNvbnN0IGQ9bmV3IEltYWdlKCk7d2luZG93Wycke2lkfSddKGQpO2RlbGV0ZSB3aW5kb3dbJyR7aWR9J107ZG9jdW1lbnQuYm9keS5wcmVwZW5kKGQpJHtsb2FkZXJPdXRyb30vLyMgc291cmNlVVJMPSR7bW9ja1VybH1gKSgpCiAgICB9KS50aGVuKGQgPT4gewogICAgICBkLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgIGQuc3JjID0gJ2RhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUFBQUNINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09JzsKICAgICAgZC5vbmNlID0gZmFsc2U7CiAgICAgIGQuc2V0QXR0cmlidXRlKCdvbmxvYWQnLCBgaWYodGhpcy5vbmNlKXJldHVybjt0aGlzLm9uY2U9dHJ1ZTt0aGlzLnJlbW92ZSgpO2NvbnN0IEdNPXdpbmRvd1snJHtnbUlkfSddO2RlbGV0ZSB3aW5kb3dbJyR7Z21JZH0nXTsoYCArIGZ1bmN0aW9uIGEgKCkgewogICAgICAvKiogc2NyaXB0IGNvZGUgaGVyZSAqLwoKCiAgICBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7CiAgICAgICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9CiAgICAgICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH0KICAgICAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbInRocm93Il0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfQogICAgICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfQogICAgICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgdmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307CgogICAgZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkgewogICAgCXJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0czsKICAgIH0KCiAgICB2YXIgRmlsZVNhdmVyX21pbiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgIChmdW5jdGlvbihhLGIpe2IoKTt9KShjb21tb25qc0dsb2JhbCxmdW5jdGlvbigpe2Z1bmN0aW9uIGIoYSxiKXtyZXR1cm4gInVuZGVmaW5lZCI9PXR5cGVvZiBiP2I9e2F1dG9Cb206ITF9OiJvYmplY3QiIT10eXBlb2YgYiYmKGNvbnNvbGUud2FybigiRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3QiKSxiPXthdXRvQm9tOiFifSksYi5hdXRvQm9tJiYvXlxzKig/OnRleHRcL1xTKnxhcHBsaWNhdGlvblwveG1sfFxTKlwvXFMqXCt4bWwpXHMqOy4qY2hhcnNldFxzKj1ccyp1dGYtOC9pLnRlc3QoYS50eXBlKT9uZXcgQmxvYihbIlx1RkVGRiIsYV0se3R5cGU6YS50eXBlfSk6YX1mdW5jdGlvbiBjKGEsYixjKXt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKCJHRVQiLGEpLGQucmVzcG9uc2VUeXBlPSJibG9iIixkLm9ubG9hZD1mdW5jdGlvbigpe2coZC5yZXNwb25zZSxiLGMpO30sZC5vbmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcigiY291bGQgbm90IGRvd25sb2FkIGZpbGUiKTt9LGQuc2VuZCgpO31mdW5jdGlvbiBkKGEpe3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oIkhFQUQiLGEsITEpO3RyeXtiLnNlbmQoKTt9Y2F0Y2goYSl7fXJldHVybiAyMDA8PWIuc3RhdHVzJiYyOTk+PWIuc3RhdHVzfWZ1bmN0aW9uIGUoYSl7dHJ5e2EuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudCgiY2xpY2siKSk7fWNhdGNoKGMpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUV2ZW50KCJNb3VzZUV2ZW50cyIpO2IuaW5pdE1vdXNlRXZlbnQoImNsaWNrIiwhMCwhMCx3aW5kb3csMCwwLDAsODAsMjAsITEsITEsITEsITEsMCxudWxsKSxhLmRpc3BhdGNoRXZlbnQoYik7fX12YXIgZj0ib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93LndpbmRvdz09PXdpbmRvdz93aW5kb3c6Im9iamVjdCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmP3NlbGY6Im9iamVjdCI9PXR5cGVvZiBjb21tb25qc0dsb2JhbCYmY29tbW9uanNHbG9iYWwuZ2xvYmFsPT09Y29tbW9uanNHbG9iYWw/Y29tbW9uanNHbG9iYWw6dm9pZCAwLGE9Zi5uYXZpZ2F0b3ImJi9NYWNpbnRvc2gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9BcHBsZVdlYktpdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZz1mLnNhdmVBc3x8KCJvYmplY3QiIT10eXBlb2Ygd2luZG93fHx3aW5kb3chPT1mP2Z1bmN0aW9uKCl7fToiZG93bmxvYWQiaW4gSFRNTEFuY2hvckVsZW1lbnQucHJvdG90eXBlJiYhYT9mdW5jdGlvbihiLGcsaCl7dmFyIGk9Zi5VUkx8fGYud2Via2l0VVJMLGo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpO2c9Z3x8Yi5uYW1lfHwiZG93bmxvYWQiLGouZG93bmxvYWQ9ZyxqLnJlbD0ibm9vcGVuZXIiLCJzdHJpbmciPT10eXBlb2YgYj8oai5ocmVmPWIsai5vcmlnaW49PT1sb2NhdGlvbi5vcmlnaW4/ZShqKTpkKGouaHJlZik/YyhiLGcsaCk6ZShqLGoudGFyZ2V0PSJfYmxhbmsiKSk6KGouaHJlZj1pLmNyZWF0ZU9iamVjdFVSTChiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5yZXZva2VPYmplY3RVUkwoai5ocmVmKTt9LDRFNCksc2V0VGltZW91dChmdW5jdGlvbigpe2Uoaik7fSwwKSk7fToibXNTYXZlT3JPcGVuQmxvYiJpbiBuYXZpZ2F0b3I/ZnVuY3Rpb24oZixnLGgpe2lmKGc9Z3x8Zi5uYW1lfHwiZG93bmxvYWQiLCJzdHJpbmciIT10eXBlb2YgZiluYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihiKGYsaCksZyk7ZWxzZSBpZihkKGYpKWMoZixnLGgpO2Vsc2Uge3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTtpLmhyZWY9ZixpLnRhcmdldD0iX2JsYW5rIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShpKTt9KTt9fTpmdW5jdGlvbihiLGQsZSxnKXtpZihnPWd8fG9wZW4oIiIsIl9ibGFuayIpLGcmJihnLmRvY3VtZW50LnRpdGxlPWcuZG9jdW1lbnQuYm9keS5pbm5lclRleHQ9ImRvd25sb2FkaW5nLi4uIiksInN0cmluZyI9PXR5cGVvZiBiKXJldHVybiBjKGIsZCxlKTt2YXIgaD0iYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtIj09PWIudHlwZSxpPS9jb25zdHJ1Y3Rvci9pLnRlc3QoZi5IVE1MRWxlbWVudCl8fGYuc2FmYXJpLGo9L0NyaU9TXC9bXGRdKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZigoanx8aCYmaXx8YSkmJiJ1bmRlZmluZWQiIT10eXBlb2YgRmlsZVJlYWRlcil7dmFyIGs9bmV3IEZpbGVSZWFkZXI7ay5vbmxvYWRlbmQ9ZnVuY3Rpb24oKXt2YXIgYT1rLnJlc3VsdDthPWo/YTphLnJlcGxhY2UoL15kYXRhOlteO10qOy8sImRhdGE6YXR0YWNobWVudC9maWxlOyIpLGc/Zy5sb2NhdGlvbi5ocmVmPWE6bG9jYXRpb249YSxnPW51bGw7fSxrLnJlYWRBc0RhdGFVUkwoYik7fWVsc2Uge3ZhciBsPWYuVVJMfHxmLndlYmtpdFVSTCxtPWwuY3JlYXRlT2JqZWN0VVJMKGIpO2c/Zy5sb2NhdGlvbj1tOmxvY2F0aW9uLmhyZWY9bSxnPW51bGwsc2V0VGltZW91dChmdW5jdGlvbigpe2wucmV2b2tlT2JqZWN0VVJMKG0pO30sNEU0KTt9fSk7Zi5zYXZlQXM9Zy5zYXZlQXM9ZywobW9kdWxlLmV4cG9ydHM9Zyk7fSk7CgoKICAgIH0pOwoKICAgIHZhciBnbG9iYWwkMSA9ICh0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6CiAgICAgICAgICAgICAgICB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDoKICAgICAgICAgICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pOwoKICAgIC8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlcgogICAgLy8gYmFzZWQgb2ZmIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWZ1bmN0em9tYmllL25vZGUtcHJvY2Vzcy9ibG9iL21hc3Rlci9icm93c2VyLmpzCgogICAgZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTsKICAgIH0KICAgIGZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7CiAgICB9CiAgICB2YXIgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7CiAgICB2YXIgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDsKICAgIGlmICh0eXBlb2YgZ2xvYmFsJDEuc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0OwogICAgfQogICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5jbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7CiAgICB9CgogICAgZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHsKICAgICAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkgewogICAgICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnMKICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTsKICAgICAgICB9CiAgICAgICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWQKICAgICAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHsKICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3MKICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTsKICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7CiAgICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvcgogICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKCiAgICB9CiAgICBmdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7CiAgICAgICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7CiAgICAgICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICAgICAgfQogICAgICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWQKICAgICAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHsKICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3MKICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpOwogICAgICAgIH0gY2F0Y2ggKGUpewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseQogICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpewogICAgICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuCiAgICAgICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0CiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCgoKICAgIH0KICAgIHZhciBxdWV1ZSA9IFtdOwogICAgdmFyIGRyYWluaW5nID0gZmFsc2U7CiAgICB2YXIgY3VycmVudFF1ZXVlOwogICAgdmFyIHF1ZXVlSW5kZXggPSAtMTsKCiAgICBmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7CiAgICAgICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgICAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHF1ZXVlSW5kZXggPSAtMTsKICAgICAgICB9CiAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICBkcmFpblF1ZXVlKCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRyYWluUXVldWUoKSB7CiAgICAgICAgaWYgKGRyYWluaW5nKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7CiAgICAgICAgZHJhaW5pbmcgPSB0cnVlOwoKICAgICAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoOwogICAgICAgIHdoaWxlKGxlbikgewogICAgICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTsKICAgICAgICAgICAgcXVldWUgPSBbXTsKICAgICAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikgewogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkgewogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBxdWV1ZUluZGV4ID0gLTE7CiAgICAgICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgY3VycmVudFF1ZXVlID0gbnVsbDsKICAgICAgICBkcmFpbmluZyA9IGZhbHNlOwogICAgICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG5leHRUaWNrKGZ1bikgewogICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTsKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7CiAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHsKICAgICAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTsKICAgICAgICB9CiAgICB9CiAgICAvLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzCiAgICBmdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHsKICAgICAgICB0aGlzLmZ1biA9IGZ1bjsKICAgICAgICB0aGlzLmFycmF5ID0gYXJyYXk7CiAgICB9CiAgICBJdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7CiAgICB9OwogICAgdmFyIHRpdGxlID0gJ2Jyb3dzZXInOwogICAgdmFyIHBsYXRmb3JtID0gJ2Jyb3dzZXInOwogICAgdmFyIGJyb3dzZXIgPSB0cnVlOwogICAgdmFyIGVudiA9IHt9OwogICAgdmFyIGFyZ3YgPSBbXTsKICAgIHZhciB2ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzCiAgICB2YXIgdmVyc2lvbnMgPSB7fTsKICAgIHZhciByZWxlYXNlID0ge307CiAgICB2YXIgY29uZmlnID0ge307CgogICAgZnVuY3Rpb24gbm9vcCgpIHt9CgogICAgdmFyIG9uID0gbm9vcDsKICAgIHZhciBhZGRMaXN0ZW5lciA9IG5vb3A7CiAgICB2YXIgb25jZSA9IG5vb3A7CiAgICB2YXIgb2ZmID0gbm9vcDsKICAgIHZhciByZW1vdmVMaXN0ZW5lciA9IG5vb3A7CiAgICB2YXIgcmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDsKICAgIHZhciBlbWl0ID0gbm9vcDsKCiAgICBmdW5jdGlvbiBiaW5kaW5nKG5hbWUpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7CiAgICB9CgogICAgZnVuY3Rpb24gY3dkICgpIHsgcmV0dXJuICcvJyB9CiAgICBmdW5jdGlvbiBjaGRpciAoZGlyKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTsKICAgIH1mdW5jdGlvbiB1bWFzaygpIHsgcmV0dXJuIDA7IH0KCiAgICAvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9rdW1hdmlzL2Jyb3dzZXItcHJvY2Vzcy1ocnRpbWUvYmxvYi9tYXN0ZXIvaW5kZXguanMKICAgIHZhciBwZXJmb3JtYW5jZSA9IGdsb2JhbCQxLnBlcmZvcm1hbmNlIHx8IHt9OwogICAgdmFyIHBlcmZvcm1hbmNlTm93ID0KICAgICAgcGVyZm9ybWFuY2Uubm93ICAgICAgICB8fAogICAgICBwZXJmb3JtYW5jZS5tb3pOb3cgICAgIHx8CiAgICAgIHBlcmZvcm1hbmNlLm1zTm93ICAgICAgfHwKICAgICAgcGVyZm9ybWFuY2Uub05vdyAgICAgICB8fAogICAgICBwZXJmb3JtYW5jZS53ZWJraXROb3cgIHx8CiAgICAgIGZ1bmN0aW9uKCl7IHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpIH07CgogICAgLy8gZ2VuZXJhdGUgdGltZXN0YW1wIG9yIGRlbHRhCiAgICAvLyBzZWUgaHR0cDovL25vZGVqcy5vcmcvYXBpL3Byb2Nlc3MuaHRtbCNwcm9jZXNzX3Byb2Nlc3NfaHJ0aW1lCiAgICBmdW5jdGlvbiBocnRpbWUocHJldmlvdXNUaW1lc3RhbXApewogICAgICB2YXIgY2xvY2t0aW1lID0gcGVyZm9ybWFuY2VOb3cuY2FsbChwZXJmb3JtYW5jZSkqMWUtMzsKICAgICAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKGNsb2NrdGltZSk7CiAgICAgIHZhciBuYW5vc2Vjb25kcyA9IE1hdGguZmxvb3IoKGNsb2NrdGltZSUxKSoxZTkpOwogICAgICBpZiAocHJldmlvdXNUaW1lc3RhbXApIHsKICAgICAgICBzZWNvbmRzID0gc2Vjb25kcyAtIHByZXZpb3VzVGltZXN0YW1wWzBdOwogICAgICAgIG5hbm9zZWNvbmRzID0gbmFub3NlY29uZHMgLSBwcmV2aW91c1RpbWVzdGFtcFsxXTsKICAgICAgICBpZiAobmFub3NlY29uZHM8MCkgewogICAgICAgICAgc2Vjb25kcy0tOwogICAgICAgICAgbmFub3NlY29uZHMgKz0gMWU5OwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gW3NlY29uZHMsbmFub3NlY29uZHNdCiAgICB9CgogICAgdmFyIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7CiAgICBmdW5jdGlvbiB1cHRpbWUoKSB7CiAgICAgIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBkaWYgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTsKICAgICAgcmV0dXJuIGRpZiAvIDEwMDA7CiAgICB9CgogICAgdmFyIHByb2Nlc3MkMSA9IHsKICAgICAgbmV4dFRpY2s6IG5leHRUaWNrLAogICAgICB0aXRsZTogdGl0bGUsCiAgICAgIGJyb3dzZXI6IGJyb3dzZXIsCiAgICAgIGVudjogZW52LAogICAgICBhcmd2OiBhcmd2LAogICAgICB2ZXJzaW9uOiB2ZXJzaW9uLAogICAgICB2ZXJzaW9uczogdmVyc2lvbnMsCiAgICAgIG9uOiBvbiwKICAgICAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLAogICAgICBvbmNlOiBvbmNlLAogICAgICBvZmY6IG9mZiwKICAgICAgcmVtb3ZlTGlzdGVuZXI6IHJlbW92ZUxpc3RlbmVyLAogICAgICByZW1vdmVBbGxMaXN0ZW5lcnM6IHJlbW92ZUFsbExpc3RlbmVycywKICAgICAgZW1pdDogZW1pdCwKICAgICAgYmluZGluZzogYmluZGluZywKICAgICAgY3dkOiBjd2QsCiAgICAgIGNoZGlyOiBjaGRpciwKICAgICAgdW1hc2s6IHVtYXNrLAogICAgICBocnRpbWU6IGhydGltZSwKICAgICAgcGxhdGZvcm06IHBsYXRmb3JtLAogICAgICByZWxlYXNlOiByZWxlYXNlLAogICAgICBjb25maWc6IGNvbmZpZywKICAgICAgdXB0aW1lOiB1cHRpbWUKICAgIH07CgogICAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2VzcwogICAgdmFyIGRldGVjdE5vZGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MkMSAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzJDEgOiAwKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nOwoKICAgIGNvbnN0IF9HTSA9ICh0eXBlb2YgR00gPT09ICdvYmplY3QnID8gR00gOiB1bmRlZmluZWQpOwogICAgY29uc3QgaXNHbUF2YWlsYWJsZSA9IChyZXF1aXJlZE1ldGhvZCA9ICdpbmZvJykgPT4gewogICAgICAgIHJldHVybiB0eXBlb2YgR00gIT09ICd1bmRlZmluZWQnICYmCiAgICAgICAgICAgIHR5cGVvZiBHTVtyZXF1aXJlZE1ldGhvZF0gIT09ICd1bmRlZmluZWQnOwogICAgfTsKCiAgICBjb25zdCBESVNDT1JEX1VSTCA9ICdodHRwczovL2Rpc2NvcmQuZ2cvZ1NzVFV2Sm1EOCc7CiAgICBjb25zdCBlc2NhcGVGaWxlbmFtZSA9IChzKSA9PiB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvW1xzPD46e30iL1xcfD8qfi5cMFxjQS1cY1pdKy9nLCAnXycpOwogICAgfTsKICAgIGNvbnN0IE5PREVfRkVUQ0hfSEVBREVSUyA9IHsKICAgICAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjo4MS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzgxLjAnLAogICAgICAgICdBY2NlcHQtTGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjgnLAogICAgfTsKICAgIGNvbnN0IGdldEZldGNoID0gKCkgPT4gewogICAgICAgIGlmICghZGV0ZWN0Tm9kZSkgewogICAgICAgICAgICByZXR1cm4gZmV0Y2g7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcwogICAgICAgICAgICBjb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKCdub2RlLWZldGNoJyk7CiAgICAgICAgICAgIHJldHVybiAoaW5wdXQsIGluaXQpID0+IHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnICYmICFpbnB1dC5zdGFydHNXaXRoKCdodHRwJykpIHsgLy8gZml4OiBPbmx5IGFic29sdXRlIFVSTHMgYXJlIHN1cHBvcnRlZAogICAgICAgICAgICAgICAgICAgIGlucHV0ID0gJ2h0dHBzOi8vbXVzZXNjb3JlLmNvbScgKyBpbnB1dDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGluaXQgPSBPYmplY3QuYXNzaWduKHsgaGVhZGVyczogTk9ERV9GRVRDSF9IRUFERVJTIH0sIGluaXQpOwogICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuCiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZUZldGNoKGlucHV0LCBpbml0KTsKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9OwogICAgY29uc3QgZmV0Y2hEYXRhID0gKHVybCwgaW5pdCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgY29uc3QgX2ZldGNoID0gZ2V0RmV0Y2goKTsKICAgICAgICBjb25zdCByID0geWllbGQgX2ZldGNoKHVybCwgaW5pdCk7CiAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHIuYXJyYXlCdWZmZXIoKTsKICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7CiAgICB9KTsKICAgIGNvbnN0IGZldGNoQnVmZmVyID0gKHVybCwgaW5pdCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgY29uc3QgZCA9IHlpZWxkIGZldGNoRGF0YSh1cmwsIGluaXQpOwogICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShkLmJ1ZmZlcik7CiAgICB9KTsKICAgIGNvbnN0IGFzc2VydFJlcyA9IChyKSA9PiB7CiAgICAgICAgaWYgKCFyLm9rKQogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ci51cmx9ICR7ci5zdGF0dXN9ICR7ci5zdGF0dXNUZXh0fWApOwogICAgfTsKICAgIGNvbnN0IHVzZVRpbWVvdXQgPSAocHJvbWlzZSwgbXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgIGlmICghKHByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSkgewogICAgICAgICAgICByZXR1cm4gcHJvbWlzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAgICAgY29uc3QgaSA9IHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigndGltZW91dCcpKTsKICAgICAgICAgICAgfSwgbXMpOwogICAgICAgICAgICBwcm9taXNlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KS5maW5hbGx5KCgpID0+IGNsZWFyVGltZW91dChpKSk7CiAgICAgICAgfSk7CiAgICB9KTsKICAgIGNvbnN0IGdldFNhbmRib3hXaW5kb3dBc3luYyA9ICh0YXJnZXRFbCA9IHVuZGVmaW5lZCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpCiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICBpZiAoaXNHbUF2YWlsYWJsZSgnYWRkRWxlbWVudCcpKSB7CiAgICAgICAgICAgIC8vIGNyZWF0ZSBpZnJhbWUgdXNpbmcgR01fYWRkRWxlbWVudCBBUEkKICAgICAgICAgICAgY29uc3QgaWZyYW1lID0geWllbGQgX0dNLmFkZEVsZW1lbnQoJ2lmcmFtZScsIHt9KTsKICAgICAgICAgICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgIHJldHVybiBpZnJhbWUuY29udGVudFdpbmRvdzsKICAgICAgICB9CiAgICAgICAgaWYgKCF0YXJnZXRFbCkgewogICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICAgICAgICAgIC8vIFlvdSBuZWVkIGFkcyBpbiB5b3VyIHBhZ2VzLCByaWdodD8KICAgICAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2luZG93LmZyYW1lcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIGlmcmFtZSB3aW5kb3dzIGNyZWF0ZWQgYnkgYWRzCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lID0gZnJhbWVzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHJlZiA9IGZyYW1lLmxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZiA9PT0gbG9jYXRpb24uaHJlZiB8fCBocmVmID09PSAnYWJvdXQ6YmxhbmsnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmcmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChfYSkgeyB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHsgc3VidHJlZTogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9ICdvbm1vdXNlbW92ZSc7CiAgICAgICAgICAgIGNvbnN0IGlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygpOwogICAgICAgICAgICB0YXJnZXRFbFtpZF0gPSAoaWZyYW1lKSA9PiB7CiAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0RWxbaWRdOwogICAgICAgICAgICAgICAgdGFyZ2V0RWwucmVtb3ZlQXR0cmlidXRlKGV2ZW50TmFtZSk7CiAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgIHRhcmdldEVsLmFwcGVuZChpZnJhbWUpOwogICAgICAgICAgICAgICAgY29uc3QgdyA9IGlmcmFtZS5jb250ZW50V2luZG93OwogICAgICAgICAgICAgICAgcmVzb2x2ZSh3KTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGFyZ2V0RWwuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgYHRoaXNbJyR7aWR9J10oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJykpYCk7CiAgICAgICAgfSk7CiAgICB9KTsKICAgIGNvbnN0IGNvbnNvbGUkMSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuY29uc29sZTsgLy8gT2JqZWN0LmlzKHdpbmRvdy5jb25zb2xlLCB1bnNhZmVXaW5kb3cuY29uc29sZSkgPT0gZmFsc2UKICAgIGNvbnN0IHdpbmRvd09wZW5Bc3luYyA9ICh0YXJnZXRFbCwgLi4uYXJncykgPT4gewogICAgICAgIHJldHVybiBnZXRTYW5kYm94V2luZG93QXN5bmModGFyZ2V0RWwpLnRoZW4odyA9PiB3Lm9wZW4oLi4uYXJncykpOwogICAgfTsKICAgIGNvbnN0IGF0dGFjaFNoYWRvdyA9IChlbCkgPT4gewogICAgICAgIHJldHVybiBFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3cuY2FsbChlbCwgeyBtb2RlOiAnY2xvc2VkJyB9KTsKICAgIH07CiAgICAvKioKICAgICAqIFJ1biBzY3JpcHQgYmVmb3JlIHRoZSBwYWdlIGlzIGZ1bGx5IGxvYWRlZAogICAgICovCiAgICBjb25zdCB3YWl0Rm9yU2hlZXRMb2FkZWQgPSAoKSA9PiB7CiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZScpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gewogICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW1nJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGltZykgewogICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgICB9CiAgICB9OwoKICAgIGNvbnN0IFBERldvcmtlciA9IGZ1bmN0aW9uICgpIHsgCiAgICB2YXIgd29ya2VyID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7CgogICAgICAgIGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHsKICAgICAgICAgICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9CiAgICAgICAgICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbInRocm93Il0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH0KICAgICAgICAgICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgZ2xvYmFsJDEkMSA9ICh0eXBlb2YgZ2xvYmFsJDEgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsJDEgOgogICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOgogICAgICAgICAgICAgICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pOwoKICAgICAgICB2YXIgbG9va3VwID0gW107CiAgICAgICAgdmFyIHJldkxvb2t1cCA9IFtdOwogICAgICAgIHZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXk7CiAgICAgICAgdmFyIGluaXRlZCA9IGZhbHNlOwogICAgICAgIGZ1bmN0aW9uIGluaXQgKCkgewogICAgICAgICAgaW5pdGVkID0gdHJ1ZTsKICAgICAgICAgIHZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nOwogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgbG9va3VwW2ldID0gY29kZVtpXTsKICAgICAgICAgICAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MjsKICAgICAgICAgIHJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2MzsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHsKICAgICAgICAgIGlmICghaW5pdGVkKSB7CiAgICAgICAgICAgIGluaXQoKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyOwogICAgICAgICAgdmFyIGxlbiA9IGI2NC5sZW5ndGg7CgogICAgICAgICAgaWYgKGxlbiAlIDQgPiAwKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpCiAgICAgICAgICB9CgogICAgICAgICAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycykKICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXQKICAgICAgICAgIC8vIHJlcHJlc2VudCBvbmUgYnl0ZQogICAgICAgICAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzCiAgICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlCiAgICAgICAgICBwbGFjZUhvbGRlcnMgPSBiNjRbbGVuIC0gMl0gPT09ICc9JyA/IDIgOiBiNjRbbGVuIC0gMV0gPT09ICc9JyA/IDEgOiAwOwoKICAgICAgICAgIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YQogICAgICAgICAgYXJyID0gbmV3IEFycihsZW4gKiAzIC8gNCAtIHBsYWNlSG9sZGVycyk7CgogICAgICAgICAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFycwogICAgICAgICAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuOwoKICAgICAgICAgIHZhciBMID0gMDsKCiAgICAgICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7CiAgICAgICAgICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXTsKICAgICAgICAgICAgYXJyW0wrK10gPSAodG1wID4+IDE2KSAmIDB4RkY7CiAgICAgICAgICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkY7CiAgICAgICAgICAgIGFycltMKytdID0gdG1wICYgMHhGRjsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7CiAgICAgICAgICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpOwogICAgICAgICAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkY7CiAgICAgICAgICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkgewogICAgICAgICAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMik7CiAgICAgICAgICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkY7CiAgICAgICAgICAgIGFycltMKytdID0gdG1wICYgMHhGRjsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gYXJyCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkgewogICAgICAgICAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHsKICAgICAgICAgIHZhciB0bXA7CiAgICAgICAgICB2YXIgb3V0cHV0ID0gW107CiAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykgewogICAgICAgICAgICB0bXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pOwogICAgICAgICAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkgewogICAgICAgICAgaWYgKCFpbml0ZWQpIHsKICAgICAgICAgICAgaW5pdCgpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHRtcDsKICAgICAgICAgIHZhciBsZW4gPSB1aW50OC5sZW5ndGg7CiAgICAgICAgICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDM7IC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzCiAgICAgICAgICB2YXIgb3V0cHV0ID0gJyc7CiAgICAgICAgICB2YXIgcGFydHMgPSBbXTsKICAgICAgICAgIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzOyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDMKCiAgICAgICAgICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyCiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7CiAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXMKICAgICAgICAgIGlmIChleHRyYUJ5dGVzID09PSAxKSB7CiAgICAgICAgICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdOwogICAgICAgICAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAyXTsKICAgICAgICAgICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl07CiAgICAgICAgICAgIG91dHB1dCArPSAnPT0nOwogICAgICAgICAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7CiAgICAgICAgICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSk7CiAgICAgICAgICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXTsKICAgICAgICAgICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl07CiAgICAgICAgICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdOwogICAgICAgICAgICBvdXRwdXQgKz0gJz0nOwogICAgICAgICAgfQoKICAgICAgICAgIHBhcnRzLnB1c2gob3V0cHV0KTsKCiAgICAgICAgICByZXR1cm4gcGFydHMuam9pbignJykKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlYWQgKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHsKICAgICAgICAgIHZhciBlLCBtOwogICAgICAgICAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7CiAgICAgICAgICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTsKICAgICAgICAgIHZhciBlQmlhcyA9IGVNYXggPj4gMTsKICAgICAgICAgIHZhciBuQml0cyA9IC03OwogICAgICAgICAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMDsKICAgICAgICAgIHZhciBkID0gaXNMRSA/IC0xIDogMTsKICAgICAgICAgIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldOwoKICAgICAgICAgIGkgKz0gZDsKCiAgICAgICAgICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKTsKICAgICAgICAgIHMgPj49ICgtbkJpdHMpOwogICAgICAgICAgbkJpdHMgKz0gZUxlbjsKICAgICAgICAgIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9CgogICAgICAgICAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7CiAgICAgICAgICBlID4+PSAoLW5CaXRzKTsKICAgICAgICAgIG5CaXRzICs9IG1MZW47CiAgICAgICAgICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fQoKICAgICAgICAgIGlmIChlID09PSAwKSB7CiAgICAgICAgICAgIGUgPSAxIC0gZUJpYXM7CiAgICAgICAgICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHsKICAgICAgICAgICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pOwogICAgICAgICAgICBlID0gZSAtIGVCaWFzOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbikKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHdyaXRlIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykgewogICAgICAgICAgdmFyIGUsIG0sIGM7CiAgICAgICAgICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTsKICAgICAgICAgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxOwogICAgICAgICAgdmFyIGVCaWFzID0gZU1heCA+PiAxOwogICAgICAgICAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKTsKICAgICAgICAgIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSk7CiAgICAgICAgICB2YXIgZCA9IGlzTEUgPyAxIDogLTE7CiAgICAgICAgICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMDsKCiAgICAgICAgICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKTsKCiAgICAgICAgICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkgewogICAgICAgICAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDA7CiAgICAgICAgICAgIGUgPSBlTWF4OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpOwogICAgICAgICAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7CiAgICAgICAgICAgICAgZS0tOwogICAgICAgICAgICAgIGMgKj0gMjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZSArIGVCaWFzID49IDEpIHsKICAgICAgICAgICAgICB2YWx1ZSArPSBydCAvIGM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2YWx1ZSAqIGMgPj0gMikgewogICAgICAgICAgICAgIGUrKzsKICAgICAgICAgICAgICBjIC89IDI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkgewogICAgICAgICAgICAgIG0gPSAwOwogICAgICAgICAgICAgIGUgPSBlTWF4OwogICAgICAgICAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7CiAgICAgICAgICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pOwogICAgICAgICAgICAgIGUgPSBlICsgZUJpYXM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pOwogICAgICAgICAgICAgIGUgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge30KCiAgICAgICAgICBlID0gKGUgPDwgbUxlbikgfCBtOwogICAgICAgICAgZUxlbiArPSBtTGVuOwogICAgICAgICAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fQoKICAgICAgICAgIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODsKICAgICAgICB9CgogICAgICAgIHZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nOwoKICAgICAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikgewogICAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nOwogICAgICAgIH07CgogICAgICAgIHZhciBJTlNQRUNUX01BWF9CWVRFUyA9IDUwOwoKICAgICAgICAvKioKICAgICAgICAgKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOgogICAgICAgICAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpCiAgICAgICAgICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KQogICAgICAgICAqCiAgICAgICAgICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLAogICAgICAgICAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy4KICAgICAgICAgKgogICAgICAgICAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW4KICAgICAgICAgKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy4KICAgICAgICAgKgogICAgICAgICAqIE5vdGU6CiAgICAgICAgICoKICAgICAgICAgKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLAogICAgICAgICAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC4KICAgICAgICAgKgogICAgICAgICAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLgogICAgICAgICAqCiAgICAgICAgICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2YKICAgICAgICAgKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuCgogICAgICAgICAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5CiAgICAgICAgICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuCiAgICAgICAgICovCiAgICAgICAgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwkMSQxLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZAogICAgICAgICAgPyBnbG9iYWwkMSQxLlRZUEVEX0FSUkFZX1NVUFBPUlQKICAgICAgICAgIDogdHJ1ZTsKCiAgICAgICAgZnVuY3Rpb24ga01heExlbmd0aCAoKSB7CiAgICAgICAgICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQKICAgICAgICAgICAgPyAweDdmZmZmZmZmCiAgICAgICAgICAgIDogMHgzZmZmZmZmZgogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHsKICAgICAgICAgIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJykKICAgICAgICAgIH0KICAgICAgICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgICAgICAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2UKICAgICAgICAgICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7CiAgICAgICAgICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3MKICAgICAgICAgICAgaWYgKHRoYXQgPT09IG51bGwpIHsKICAgICAgICAgICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB0aGF0CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXIKICAgICAgICAgKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mCiAgICAgICAgICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kcwogICAgICAgICAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0CiAgICAgICAgICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC4KICAgICAgICAgKgogICAgICAgICAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC4KICAgICAgICAgKi8KCiAgICAgICAgZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkgewogICAgICAgICAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKQogICAgICAgICAgfQoKICAgICAgICAgIC8vIENvbW1vbiBjYXNlLgogICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpCiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKICAgICAgICB9CgogICAgICAgIEJ1ZmZlci5wb29sU2l6ZSA9IDgxOTI7IC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb24KCiAgICAgICAgLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uCiAgICAgICAgQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikgewogICAgICAgICAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGU7CiAgICAgICAgICByZXR1cm4gYXJyCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkgewogICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignInZhbHVlIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpCiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewogICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpCiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpCiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpCiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvcgogICAgICAgICAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLgogICAgICAgICAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSkKICAgICAgICAgKiBCdWZmZXIuZnJvbShhcnJheSkKICAgICAgICAgKiBCdWZmZXIuZnJvbShidWZmZXIpCiAgICAgICAgICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pCiAgICAgICAgICoqLwogICAgICAgIEJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKICAgICAgICAgIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpCiAgICAgICAgfTsKCiAgICAgICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICAgICAgICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlOwogICAgICAgICAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7CiAgICAgICAgICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJzaXplIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJykKICAgICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJyJzaXplIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKICAgICAgICAgIGFzc2VydFNpemUoc2l6ZSk7CiAgICAgICAgICBpZiAoc2l6ZSA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkKICAgICAgICAgIH0KICAgICAgICAgIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXMKICAgICAgICAgICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZAogICAgICAgICAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuCiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnCiAgICAgICAgICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZykKICAgICAgICAgICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpCiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpCiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuCiAgICAgICAgICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKQogICAgICAgICAqKi8KICAgICAgICBCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKICAgICAgICAgIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZykKICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkgewogICAgICAgICAgYXNzZXJ0U2l6ZShzaXplKTsKICAgICAgICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApOwogICAgICAgICAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkgewogICAgICAgICAgICAgIHRoYXRbaV0gPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhhdAogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS4KICAgICAgICAgKiAqLwogICAgICAgIEJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7CiAgICAgICAgICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSkKICAgICAgICB9OwogICAgICAgIC8qKgogICAgICAgICAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLgogICAgICAgICAqLwogICAgICAgIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkgewogICAgICAgICAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykgewogICAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7CiAgICAgICAgICAgIGVuY29kaW5nID0gJ3V0ZjgnOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJlbmNvZGluZyIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpCiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwOwogICAgICAgICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpOwoKICAgICAgICAgIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpOwoKICAgICAgICAgIGlmIChhY3R1YWwgIT09IGxlbmd0aCkgewogICAgICAgICAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGwKICAgICAgICAgICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy4KICAgICAgICAgICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpCiAgICAgICAgICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbCk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHRoYXQKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7CiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwOwogICAgICAgICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTU7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhhdAogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7CiAgICAgICAgICBhcnJheS5ieXRlTGVuZ3RoOyAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyCgogICAgICAgICAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcJ29mZnNldFwnIGlzIG91dCBvZiBib3VuZHMnKQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wnbGVuZ3RoXCcgaXMgb3V0IG9mIGJvdW5kcycpCiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KTsKICAgICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgICAgICAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2UKICAgICAgICAgICAgdGhhdCA9IGFycmF5OwogICAgICAgICAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzCiAgICAgICAgICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGF0CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHsKICAgICAgICAgIGlmIChpbnRlcm5hbElzQnVmZmVyKG9iaikpIHsKICAgICAgICAgICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwOwogICAgICAgICAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbik7CgogICAgICAgICAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gdGhhdAogICAgICAgICAgICB9CgogICAgICAgICAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pOwogICAgICAgICAgICByZXR1cm4gdGhhdAogICAgICAgICAgfQoKICAgICAgICAgIGlmIChvYmopIHsKICAgICAgICAgICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmCiAgICAgICAgICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikgewogICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJykKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkgewogICAgICAgICAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuCiAgICAgICAgICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLikKICAgICAgICAgIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGxlbmd0aCB8IDAKICAgICAgICB9CiAgICAgICAgQnVmZmVyLmlzQnVmZmVyID0gaXNCdWZmZXI7CiAgICAgICAgZnVuY3Rpb24gaW50ZXJuYWxJc0J1ZmZlciAoYikgewogICAgICAgICAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcikKICAgICAgICB9CgogICAgICAgIEJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikgewogICAgICAgICAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGEpIHx8ICFpbnRlcm5hbElzQnVmZmVyKGIpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChhID09PSBiKSByZXR1cm4gMAoKICAgICAgICAgIHZhciB4ID0gYS5sZW5ndGg7CiAgICAgICAgICB2YXIgeSA9IGIubGVuZ3RoOwoKICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7CiAgICAgICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7CiAgICAgICAgICAgICAgeCA9IGFbaV07CiAgICAgICAgICAgICAgeSA9IGJbaV07CiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmICh4IDwgeSkgcmV0dXJuIC0xCiAgICAgICAgICBpZiAoeSA8IHgpIHJldHVybiAxCiAgICAgICAgICByZXR1cm4gMAogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHsKICAgICAgICAgIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7CiAgICAgICAgICAgIGNhc2UgJ2hleCc6CiAgICAgICAgICAgIGNhc2UgJ3V0ZjgnOgogICAgICAgICAgICBjYXNlICd1dGYtOCc6CiAgICAgICAgICAgIGNhc2UgJ2FzY2lpJzoKICAgICAgICAgICAgY2FzZSAnbGF0aW4xJzoKICAgICAgICAgICAgY2FzZSAnYmluYXJ5JzoKICAgICAgICAgICAgY2FzZSAnYmFzZTY0JzoKICAgICAgICAgICAgY2FzZSAndWNzMic6CiAgICAgICAgICAgIGNhc2UgJ3Vjcy0yJzoKICAgICAgICAgICAgY2FzZSAndXRmMTZsZSc6CiAgICAgICAgICAgIGNhc2UgJ3V0Zi0xNmxlJzoKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkgewogICAgICAgICAgaWYgKCFpc0FycmF5KGxpc3QpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0IiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApCiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGk7CiAgICAgICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgbGVuZ3RoID0gMDsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCk7CiAgICAgICAgICB2YXIgcG9zID0gMDsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIHZhciBidWYgPSBsaXN0W2ldOwogICAgICAgICAgICBpZiAoIWludGVybmFsSXNCdWZmZXIoYnVmKSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0IiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKTsKICAgICAgICAgICAgcG9zICs9IGJ1Zi5sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gYnVmZmVyCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykgewogICAgICAgICAgaWYgKGludGVybmFsSXNCdWZmZXIoc3RyaW5nKSkgewogICAgICAgICAgICByZXR1cm4gc3RyaW5nLmxlbmd0aAogICAgICAgICAgfQogICAgICAgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJgogICAgICAgICAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHsKICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoCiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgc3RyaW5nID0gJycgKyBzdHJpbmc7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGg7CiAgICAgICAgICBpZiAobGVuID09PSAwKSByZXR1cm4gMAoKICAgICAgICAgIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvbgogICAgICAgICAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2U7CiAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgIHN3aXRjaCAoZW5jb2RpbmcpIHsKICAgICAgICAgICAgICBjYXNlICdhc2NpaSc6CiAgICAgICAgICAgICAgY2FzZSAnbGF0aW4xJzoKICAgICAgICAgICAgICBjYXNlICdiaW5hcnknOgogICAgICAgICAgICAgICAgcmV0dXJuIGxlbgogICAgICAgICAgICAgIGNhc2UgJ3V0ZjgnOgogICAgICAgICAgICAgIGNhc2UgJ3V0Zi04JzoKICAgICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDoKICAgICAgICAgICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aAogICAgICAgICAgICAgIGNhc2UgJ3VjczInOgogICAgICAgICAgICAgIGNhc2UgJ3Vjcy0yJzoKICAgICAgICAgICAgICBjYXNlICd1dGYxNmxlJzoKICAgICAgICAgICAgICBjYXNlICd1dGYtMTZsZSc6CiAgICAgICAgICAgICAgICByZXR1cm4gbGVuICogMgogICAgICAgICAgICAgIGNhc2UgJ2hleCc6CiAgICAgICAgICAgICAgICByZXR1cm4gbGVuID4+PiAxCiAgICAgICAgICAgICAgY2FzZSAnYmFzZTY0JzoKICAgICAgICAgICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoCiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4CiAgICAgICAgICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIEJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDsKCiAgICAgICAgZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkgewogICAgICAgICAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2U7CgogICAgICAgICAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCAidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMiIgc2luY2UgaXQncyBhIHJlYWQtb25seQogICAgICAgICAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS4KCiAgICAgICAgICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmQKICAgICAgICAgIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS4KICAgICAgICAgIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sCiAgICAgICAgICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi4KICAgICAgICAgIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkgewogICAgICAgICAgICBzdGFydCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMgogICAgICAgICAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy4KICAgICAgICAgIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7CiAgICAgICAgICAgIHJldHVybiAnJwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkgewogICAgICAgICAgICBlbmQgPSB0aGlzLmxlbmd0aDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZW5kIDw9IDApIHsKICAgICAgICAgICAgcmV0dXJuICcnCiAgICAgICAgICB9CgogICAgICAgICAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC4KICAgICAgICAgIGVuZCA+Pj49IDA7CiAgICAgICAgICBzdGFydCA+Pj49IDA7CgogICAgICAgICAgaWYgKGVuZCA8PSBzdGFydCkgewogICAgICAgICAgICByZXR1cm4gJycKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4JzsKCiAgICAgICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgICAgICBzd2l0Y2ggKGVuY29kaW5nKSB7CiAgICAgICAgICAgICAgY2FzZSAnaGV4JzoKICAgICAgICAgICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKICAgICAgICAgICAgICBjYXNlICd1dGY4JzoKICAgICAgICAgICAgICBjYXNlICd1dGYtOCc6CiAgICAgICAgICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICAgICAgICAgIGNhc2UgJ2FzY2lpJzoKICAgICAgICAgICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICAgICAgICAgIGNhc2UgJ2xhdGluMSc6CiAgICAgICAgICAgICAgY2FzZSAnYmluYXJ5JzoKICAgICAgICAgICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKICAgICAgICAgICAgICBjYXNlICdiYXNlNjQnOgogICAgICAgICAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICAgICAgICAgIGNhc2UgJ3VjczInOgogICAgICAgICAgICAgIGNhc2UgJ3Vjcy0yJzoKICAgICAgICAgICAgICBjYXNlICd1dGYxNmxlJzoKICAgICAgICAgICAgICBjYXNlICd1dGYtMTZsZSc6CiAgICAgICAgICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZykKICAgICAgICAgICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0CiAgICAgICAgLy8gQnVmZmVyIGluc3RhbmNlcy4KICAgICAgICBCdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWU7CgogICAgICAgIGZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHsKICAgICAgICAgIHZhciBpID0gYltuXTsKICAgICAgICAgIGJbbl0gPSBiW21dOwogICAgICAgICAgYlttXSA9IGk7CiAgICAgICAgfQoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7CiAgICAgICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7CiAgICAgICAgICBpZiAobGVuICUgMiAhPT0gMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKQogICAgICAgICAgfQogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikgewogICAgICAgICAgICBzd2FwKHRoaXMsIGksIGkgKyAxKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkgewogICAgICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoOwogICAgICAgICAgaWYgKGxlbiAlIDQgIT09IDApIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJykKICAgICAgICAgIH0KICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHsKICAgICAgICAgICAgc3dhcCh0aGlzLCBpLCBpICsgMyk7CiAgICAgICAgICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkgewogICAgICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoOwogICAgICAgICAgaWYgKGxlbiAlIDggIT09IDApIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJykKICAgICAgICAgIH0KICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHsKICAgICAgICAgICAgc3dhcCh0aGlzLCBpLCBpICsgNyk7CiAgICAgICAgICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KTsKICAgICAgICAgICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpOwogICAgICAgICAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7CiAgICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwOwogICAgICAgICAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnCiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpCiAgICAgICAgICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikgewogICAgICAgICAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJykKICAgICAgICAgIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZQogICAgICAgICAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7CiAgICAgICAgICB2YXIgc3RyID0gJyc7CiAgICAgICAgICB2YXIgbWF4ID0gSU5TUEVDVF9NQVhfQllURVM7CiAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpOwogICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPicKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkgewogICAgICAgICAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKHRhcmdldCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpCiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgc3RhcnQgPSAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXNTdGFydCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpCiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkgewogICAgICAgICAgICByZXR1cm4gMAogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7CiAgICAgICAgICAgIHJldHVybiAtMQogICAgICAgICAgfQogICAgICAgICAgaWYgKHN0YXJ0ID49IGVuZCkgewogICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgfQoKICAgICAgICAgIHN0YXJ0ID4+Pj0gMDsKICAgICAgICAgIGVuZCA+Pj49IDA7CiAgICAgICAgICB0aGlzU3RhcnQgPj4+PSAwOwogICAgICAgICAgdGhpc0VuZCA+Pj49IDA7CgogICAgICAgICAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDAKCiAgICAgICAgICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnQ7CiAgICAgICAgICB2YXIgeSA9IGVuZCAtIHN0YXJ0OwogICAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpOwoKICAgICAgICAgIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKTsKICAgICAgICAgIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpOwoKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7CiAgICAgICAgICAgICAgeCA9IHRoaXNDb3B5W2ldOwogICAgICAgICAgICAgIHkgPSB0YXJnZXRDb3B5W2ldOwogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoeCA8IHkpIHJldHVybiAtMQogICAgICAgICAgaWYgKHkgPCB4KSByZXR1cm4gMQogICAgICAgICAgcmV0dXJuIDAKICAgICAgICB9OwoKICAgICAgICAvLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsCiAgICAgICAgLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC4KICAgICAgICAvLwogICAgICAgIC8vIEFyZ3VtZW50czoKICAgICAgICAvLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaAogICAgICAgIC8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyCiAgICAgICAgLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyCiAgICAgICAgLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmcKICAgICAgICAvLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZgogICAgICAgIGZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikgewogICAgICAgICAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoCiAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xCgogICAgICAgICAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQKICAgICAgICAgIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0OwogICAgICAgICAgICBieXRlT2Zmc2V0ID0gMDsKICAgICAgICAgIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHsKICAgICAgICAgICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmY7CiAgICAgICAgICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkgewogICAgICAgICAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDA7CiAgICAgICAgICB9CiAgICAgICAgICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQ7ICAvLyBDb2VyY2UgdG8gTnVtYmVyLgogICAgICAgICAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7CiAgICAgICAgICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sICJmb28iLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXIKICAgICAgICAgICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyCiAgICAgICAgICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldDsKICAgICAgICAgIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHsKICAgICAgICAgICAgaWYgKGRpcikgcmV0dXJuIC0xCiAgICAgICAgICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxOwogICAgICAgICAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkgewogICAgICAgICAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMDsKICAgICAgICAgICAgZWxzZSByZXR1cm4gLTEKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBOb3JtYWxpemUgdmFsCiAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZyk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2YKICAgICAgICAgIGlmIChpbnRlcm5hbElzQnVmZmVyKHZhbCkpIHsKICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlscwogICAgICAgICAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgIHJldHVybiAtMQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpCiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIHZhbCA9IHZhbCAmIDB4RkY7IC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV0KICAgICAgICAgICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmCiAgICAgICAgICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgIGlmIChkaXIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpCiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikKICAgICAgICAgIH0KCiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikgewogICAgICAgICAgdmFyIGluZGV4U2l6ZSA9IDE7CiAgICAgICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDsKICAgICAgICAgIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoOwoKICAgICAgICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fAogICAgICAgICAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykgewogICAgICAgICAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikgewogICAgICAgICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGluZGV4U2l6ZSA9IDI7CiAgICAgICAgICAgICAgYXJyTGVuZ3RoIC89IDI7CiAgICAgICAgICAgICAgdmFsTGVuZ3RoIC89IDI7CiAgICAgICAgICAgICAgYnl0ZU9mZnNldCAvPSAyOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7CiAgICAgICAgICAgIGlmIChpbmRleFNpemUgPT09IDEpIHsKICAgICAgICAgICAgICByZXR1cm4gYnVmW2ldCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSkKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHZhciBpOwogICAgICAgICAgaWYgKGRpcikgewogICAgICAgICAgICB2YXIgZm91bmRJbmRleCA9IC0xOwogICAgICAgICAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7CiAgICAgICAgICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpOwogICAgICAgICAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXg7CiAgICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gLTE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aDsKICAgICAgICAgICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgICAgICB2YXIgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHsKICAgICAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgfQoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgewogICAgICAgICAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7CiAgICAgICAgICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogICAgICAgICAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMDsKICAgICAgICAgIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0OwogICAgICAgICAgaWYgKCFsZW5ndGgpIHsKICAgICAgICAgICAgbGVuZ3RoID0gcmVtYWluaW5nOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aCk7CiAgICAgICAgICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHsKICAgICAgICAgICAgICBsZW5ndGggPSByZW1haW5pbmc7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0cwogICAgICAgICAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGg7CiAgICAgICAgICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJykKCiAgICAgICAgICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikgewogICAgICAgICAgICBsZW5ndGggPSBzdHJMZW4gLyAyOwogICAgICAgICAgfQogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KTsKICAgICAgICAgICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpCiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogICAgICAgICAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogICAgICAgICAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgICAgICAgICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgICAgICAgICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogICAgICAgICAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCkKICAgICAgICB9CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHsKICAgICAgICAgIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpCiAgICAgICAgICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgZW5jb2RpbmcgPSAndXRmOCc7CiAgICAgICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoOwogICAgICAgICAgICBvZmZzZXQgPSAwOwogICAgICAgICAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpCiAgICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIGVuY29kaW5nID0gb2Zmc2V0OwogICAgICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDsKICAgICAgICAgICAgb2Zmc2V0ID0gMDsKICAgICAgICAgIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pCiAgICAgICAgICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHsKICAgICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDsKICAgICAgICAgICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHsKICAgICAgICAgICAgICBsZW5ndGggPSBsZW5ndGggfCAwOwogICAgICAgICAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4JzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBlbmNvZGluZyA9IGxlbmd0aDsKICAgICAgICAgICAgICBsZW5ndGggPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTMKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnCiAgICAgICAgICAgICkKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXQ7CiAgICAgICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmc7CgogICAgICAgICAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJykKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4JzsKCiAgICAgICAgICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZTsKICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgc3dpdGNoIChlbmNvZGluZykgewogICAgICAgICAgICAgIGNhc2UgJ2hleCc6CiAgICAgICAgICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgICAgICAgICAgY2FzZSAndXRmOCc6CiAgICAgICAgICAgICAgY2FzZSAndXRmLTgnOgogICAgICAgICAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgICAgICAgICBjYXNlICdhc2NpaSc6CiAgICAgICAgICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgICAgICAgICBjYXNlICdsYXRpbjEnOgogICAgICAgICAgICAgIGNhc2UgJ2JpbmFyeSc6CiAgICAgICAgICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgICAgICAgICAgY2FzZSAnYmFzZTY0JzoKICAgICAgICAgICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlCiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgICAgICAgICAgY2FzZSAndWNzMic6CiAgICAgICAgICAgICAgY2FzZSAndWNzLTInOgogICAgICAgICAgICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICAgICAgICAgIGNhc2UgJ3V0Zi0xNmxlJzoKICAgICAgICAgICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKQogICAgICAgICAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHR5cGU6ICdCdWZmZXInLAogICAgICAgICAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMCkKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgICAgICAgICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7CiAgICAgICAgICAgIHJldHVybiBmcm9tQnl0ZUFycmF5KGJ1ZikKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSkKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgICAgICAgICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpOwogICAgICAgICAgdmFyIHJlcyA9IFtdOwoKICAgICAgICAgIHZhciBpID0gc3RhcnQ7CiAgICAgICAgICB3aGlsZSAoaSA8IGVuZCkgewogICAgICAgICAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldOwogICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gbnVsbDsKICAgICAgICAgICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0CiAgICAgICAgICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzCiAgICAgICAgICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyCiAgICAgICAgICAgICAgOiAxOwoKICAgICAgICAgICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkgewogICAgICAgICAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnQ7CgogICAgICAgICAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkgewogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkgewogICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTsKICAgICAgICAgICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKICAgICAgICAgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRik7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7CiAgICAgICAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTsKICAgICAgICAgICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXTsKICAgICAgICAgICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7CiAgICAgICAgICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpOwogICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHsKICAgICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdOwogICAgICAgICAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdOwogICAgICAgICAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXTsKICAgICAgICAgICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKICAgICAgICAgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRik7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkgewogICAgICAgICAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGEKICAgICAgICAgICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlCiAgICAgICAgICAgICAgY29kZVBvaW50ID0gMHhGRkZEOwogICAgICAgICAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxOwogICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikgewogICAgICAgICAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpCiAgICAgICAgICAgICAgY29kZVBvaW50IC09IDB4MTAwMDA7CiAgICAgICAgICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTsKICAgICAgICAgICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmVzLnB1c2goY29kZVBvaW50KTsKICAgICAgICAgICAgaSArPSBieXRlc1BlclNlcXVlbmNlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKQogICAgICAgIH0KCiAgICAgICAgLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoCiAgICAgICAgLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLgogICAgICAgIC8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHkKICAgICAgICB2YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDA7CgogICAgICAgIGZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykgewogICAgICAgICAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoOwogICAgICAgICAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkgewogICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKCkKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkICJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWQiLgogICAgICAgICAgdmFyIHJlcyA9ICcnOwogICAgICAgICAgdmFyIGkgPSAwOwogICAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHsKICAgICAgICAgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoCiAgICAgICAgICAgICAgU3RyaW5nLAogICAgICAgICAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXMKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewogICAgICAgICAgdmFyIHJldCA9ICcnOwogICAgICAgICAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKTsKCiAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewogICAgICAgICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXQKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKICAgICAgICAgIHZhciByZXQgPSAnJzsKICAgICAgICAgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCk7CgogICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKICAgICAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXQKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKICAgICAgICAgIHZhciBsZW4gPSBidWYubGVuZ3RoOwoKICAgICAgICAgIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDA7CiAgICAgICAgICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuOwoKICAgICAgICAgIHZhciBvdXQgPSAnJzsKICAgICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7CiAgICAgICAgICAgIG91dCArPSB0b0hleChidWZbaV0pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG91dAogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKICAgICAgICAgIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKTsKICAgICAgICAgIHZhciByZXMgPSAnJzsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICAgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlcwogICAgICAgIH0KCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7CiAgICAgICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7CiAgICAgICAgICBzdGFydCA9IH5+c3RhcnQ7CiAgICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kOwoKICAgICAgICAgIGlmIChzdGFydCA8IDApIHsKICAgICAgICAgICAgc3RhcnQgKz0gbGVuOwogICAgICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDA7CiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7CiAgICAgICAgICAgIHN0YXJ0ID0gbGVuOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChlbmQgPCAwKSB7CiAgICAgICAgICAgIGVuZCArPSBsZW47CiAgICAgICAgICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwOwogICAgICAgICAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHsKICAgICAgICAgICAgZW5kID0gbGVuOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnQ7CgogICAgICAgICAgdmFyIG5ld0J1ZjsKICAgICAgICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgICAgICAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpOwogICAgICAgICAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0OwogICAgICAgICAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHsKICAgICAgICAgICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gbmV3QnVmCiAgICAgICAgfTsKCiAgICAgICAgLyoKICAgICAgICAgKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkgewogICAgICAgICAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JykKICAgICAgICAgIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJykKICAgICAgICB9CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIG9mZnNldCA9IG9mZnNldCB8IDA7CiAgICAgICAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDA7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKTsKCiAgICAgICAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdOwogICAgICAgICAgdmFyIG11bCA9IDE7CiAgICAgICAgICB2YXIgaSA9IDA7CiAgICAgICAgICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgICAgICAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bDsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDsKICAgICAgICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMDsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHsKICAgICAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXTsKICAgICAgICAgIHZhciBtdWwgPSAxOwogICAgICAgICAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICAgICAgICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWw7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKTsKICAgICAgICAgIHJldHVybiB0aGlzW29mZnNldF0KICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCk7CiAgICAgICAgICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCk7CiAgICAgICAgICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV0KICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7CgogICAgICAgICAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8CiAgICAgICAgICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfAogICAgICAgICAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgKwogICAgICAgICAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKQogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTsKCiAgICAgICAgICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgKwogICAgICAgICAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHwKICAgICAgICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfAogICAgICAgICAgICB0aGlzW29mZnNldCArIDNdKQogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCk7CgogICAgICAgICAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XTsKICAgICAgICAgIHZhciBtdWwgPSAxOwogICAgICAgICAgdmFyIGkgPSAwOwogICAgICAgICAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKICAgICAgICAgICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWw7CiAgICAgICAgICB9CiAgICAgICAgICBtdWwgKj0gMHg4MDsKCiAgICAgICAgICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKTsKCiAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIG9mZnNldCA9IG9mZnNldCB8IDA7CiAgICAgICAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDA7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKTsKCiAgICAgICAgICB2YXIgaSA9IGJ5dGVMZW5ndGg7CiAgICAgICAgICB2YXIgbXVsID0gMTsKICAgICAgICAgIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV07CiAgICAgICAgICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKICAgICAgICAgICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bDsKICAgICAgICAgIH0KICAgICAgICAgIG11bCAqPSAweDgwOwoKICAgICAgICAgIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpOwoKICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpOwogICAgICAgICAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKQogICAgICAgICAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTsKICAgICAgICAgIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KTsKICAgICAgICAgIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWwKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpOwogICAgICAgICAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpOwogICAgICAgICAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbAogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7CgogICAgICAgICAgcmV0dXJuICh0aGlzW29mZnNldF0pIHwKICAgICAgICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfAogICAgICAgICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfAogICAgICAgICAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNCkKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpOwoKICAgICAgICAgIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8CiAgICAgICAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8CiAgICAgICAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHwKICAgICAgICAgICAgKHRoaXNbb2Zmc2V0ICsgM10pCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTsKICAgICAgICAgIHJldHVybiByZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTsKICAgICAgICAgIHJldHVybiByZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KQogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKTsKICAgICAgICAgIHJldHVybiByZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpOwogICAgICAgICAgcmV0dXJuIHJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikgewogICAgICAgICAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJyJidWZmZXIiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKQogICAgICAgICAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignInZhbHVlIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJykKICAgICAgICAgIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJykKICAgICAgICB9CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIHZhbHVlID0gK3ZhbHVlOwogICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDsKICAgICAgICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMDsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHsKICAgICAgICAgICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMTsKICAgICAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBtdWwgPSAxOwogICAgICAgICAgdmFyIGkgPSAwOwogICAgICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGOwogICAgICAgICAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKICAgICAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoCiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgewogICAgICAgICAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxOwogICAgICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMCk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMTsKICAgICAgICAgIHZhciBtdWwgPSAxOwogICAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRjsKICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgICAgICAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkY7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMCk7CiAgICAgICAgICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpOwogICAgICAgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZik7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0ICsgMQogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikgewogICAgICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDE7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7CiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+CiAgICAgICAgICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4OwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIHZhbHVlID0gK3ZhbHVlOwogICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMCk7CiAgICAgICAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgICAgICAgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZik7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gb2Zmc2V0ICsgMgogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICB2YWx1ZSA9ICt2YWx1ZTsKICAgICAgICAgIG9mZnNldCA9IG9mZnNldCB8IDA7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApOwogICAgICAgICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOCk7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvZmZzZXQgKyAyCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7CiAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDE7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7CiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmY7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMCk7CiAgICAgICAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgICAgICAgICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpOwogICAgICAgICAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNik7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpOwogICAgICAgICAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG9mZnNldCArIDQKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMCk7CiAgICAgICAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgICAgICAgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNCk7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KTsKICAgICAgICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOCk7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvZmZzZXQgKyA0CiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIHZhbHVlID0gK3ZhbHVlOwogICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHsKICAgICAgICAgICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKTsKCiAgICAgICAgICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgaSA9IDA7CiAgICAgICAgICB2YXIgbXVsID0gMTsKICAgICAgICAgIHZhciBzdWIgPSAwOwogICAgICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGOwogICAgICAgICAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHsKICAgICAgICAgICAgICBzdWIgPSAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkY7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgewogICAgICAgICAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpOwoKICAgICAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBpID0gYnl0ZUxlbmd0aCAtIDE7CiAgICAgICAgICB2YXIgbXVsID0gMTsKICAgICAgICAgIHZhciBzdWIgPSAwOwogICAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRjsKICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgICAgICAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkgewogICAgICAgICAgICAgIHN1YiA9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRjsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApOwogICAgICAgICAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKTsKICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMTsKICAgICAgICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpOwogICAgICAgICAgcmV0dXJuIG9mZnNldCArIDEKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIHZhbHVlID0gK3ZhbHVlOwogICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMDsKICAgICAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMCk7CiAgICAgICAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgICAgICAgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZik7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gb2Zmc2V0ICsgMgogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKTsKICAgICAgICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgICAgICAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpOwogICAgICAgICAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gb2Zmc2V0ICsgMgogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwOwogICAgICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApOwogICAgICAgICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpOwogICAgICAgICAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KTsKICAgICAgICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpOwogICAgICAgICAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvZmZzZXQgKyA0CiAgICAgICAgfTsKCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICB2YWx1ZSA9ICt2YWx1ZTsKICAgICAgICAgIG9mZnNldCA9IG9mZnNldCB8IDA7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMCk7CiAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDE7CiAgICAgICAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgICAgICAgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNCk7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KTsKICAgICAgICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOCk7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvZmZzZXQgKyA0CiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHsKICAgICAgICAgIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJykKICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJykKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkgewogICAgICAgICAgaWYgKCFub0Fzc2VydCkgewogICAgICAgICAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0KTsKICAgICAgICAgIH0KICAgICAgICAgIHdyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNCk7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0ICsgNAogICAgICAgIH0KCiAgICAgICAgQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCkKICAgICAgICB9OwoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICAgICAgICAgIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCkKICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7CiAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7CiAgICAgICAgICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgpOwogICAgICAgICAgfQogICAgICAgICAgd3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KTsKICAgICAgICAgIHJldHVybiBvZmZzZXQgKyA4CiAgICAgICAgfQoKICAgICAgICBCdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogICAgICAgICAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KQogICAgICAgIH07CgogICAgICAgIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgICAgICAgICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KQogICAgICAgIH07CgogICAgICAgIC8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aCkKICAgICAgICBCdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7CiAgICAgICAgICBpZiAoIXN0YXJ0KSBzdGFydCA9IDA7CiAgICAgICAgICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoOwogICAgICAgICAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aDsKICAgICAgICAgIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMDsKICAgICAgICAgIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydDsKCiAgICAgICAgICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmUKICAgICAgICAgIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMAogICAgICAgICAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwCgogICAgICAgICAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9ucwogICAgICAgICAgaWYgKHRhcmdldFN0YXJ0IDwgMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpCiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpCiAgICAgICAgICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJykKCiAgICAgICAgICAvLyBBcmUgd2Ugb29iPwogICAgICAgICAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aDsKICAgICAgICAgIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkgewogICAgICAgICAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydDsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7CiAgICAgICAgICB2YXIgaTsKCiAgICAgICAgICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHsKICAgICAgICAgICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kCiAgICAgICAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgICAgICAgICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydAogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoCiAgICAgICAgICAgICAgdGFyZ2V0LAogICAgICAgICAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwKICAgICAgICAgICAgICB0YXJnZXRTdGFydAogICAgICAgICAgICApOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBsZW4KICAgICAgICB9OwoKICAgICAgICAvLyBVc2FnZToKICAgICAgICAvLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSkKICAgICAgICAvLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSkKICAgICAgICAvLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSkKICAgICAgICBCdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7CiAgICAgICAgICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOgogICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgZW5jb2RpbmcgPSBzdGFydDsKICAgICAgICAgICAgICBzdGFydCA9IDA7CiAgICAgICAgICAgICAgZW5kID0gdGhpcy5sZW5ndGg7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICBlbmNvZGluZyA9IGVuZDsKICAgICAgICAgICAgICBlbmQgPSB0aGlzLmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMCk7CiAgICAgICAgICAgICAgaWYgKGNvZGUgPCAyNTYpIHsKICAgICAgICAgICAgICAgIHZhbCA9IGNvZGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJykKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIHZhbCA9IHZhbCAmIDI1NTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS4KICAgICAgICAgIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JykKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZW5kIDw9IHN0YXJ0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgICB9CgogICAgICAgICAgc3RhcnQgPSBzdGFydCA+Pj4gMDsKICAgICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDA7CgogICAgICAgICAgaWYgKCF2YWwpIHZhbCA9IDA7CgogICAgICAgICAgdmFyIGk7CiAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewogICAgICAgICAgICAgIHRoaXNbaV0gPSB2YWw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBieXRlcyA9IGludGVybmFsSXNCdWZmZXIodmFsKQogICAgICAgICAgICAgID8gdmFsCiAgICAgICAgICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpOwogICAgICAgICAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoOwogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkgewogICAgICAgICAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICB9OwoKICAgICAgICAvLyBIRUxQRVIgRlVOQ1RJT05TCiAgICAgICAgLy8gPT09PT09PT09PT09PT09PQoKICAgICAgICB2YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXC8wLTlBLVphLXotX10vZzsKCiAgICAgICAgZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikgewogICAgICAgICAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxuIGFuZCBcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdAogICAgICAgICAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKTsKICAgICAgICAgIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJycKICAgICAgICAgIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnCiAgICAgICAgICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3QKICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkgewogICAgICAgICAgICBzdHIgPSBzdHIgKyAnPSc7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gc3RyCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHsKICAgICAgICAgIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKCkKICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXlxzK3xccyskL2csICcnKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdG9IZXggKG4pIHsKICAgICAgICAgIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KQogICAgICAgICAgcmV0dXJuIG4udG9TdHJpbmcoMTYpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykgewogICAgICAgICAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eTsKICAgICAgICAgIHZhciBjb2RlUG9pbnQ7CiAgICAgICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDsKICAgICAgICAgIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbDsKICAgICAgICAgIHZhciBieXRlcyA9IFtdOwoKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7CgogICAgICAgICAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50CiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7CiAgICAgICAgICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWQKICAgICAgICAgICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHsKICAgICAgICAgICAgICAgIC8vIG5vIGxlYWQgeWV0CiAgICAgICAgICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7CiAgICAgICAgICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWwKICAgICAgICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpOwogICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWQKICAgICAgICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpOwogICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIHZhbGlkIGxlYWQKICAgICAgICAgICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQ7CgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3cKICAgICAgICAgICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7CiAgICAgICAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCk7CiAgICAgICAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50OwogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyCiAgICAgICAgICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMDsKICAgICAgICAgICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7CiAgICAgICAgICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZAogICAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGw7CgogICAgICAgICAgICAvLyBlbmNvZGUgdXRmOAogICAgICAgICAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkgewogICAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVhawogICAgICAgICAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkgewogICAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVhawogICAgICAgICAgICAgIGJ5dGVzLnB1c2goCiAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCwKICAgICAgICAgICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7CiAgICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrCiAgICAgICAgICAgICAgYnl0ZXMucHVzaCgKICAgICAgICAgICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLAogICAgICAgICAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLAogICAgICAgICAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODAKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7CiAgICAgICAgICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrCiAgICAgICAgICAgICAgYnl0ZXMucHVzaCgKICAgICAgICAgICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCwKICAgICAgICAgICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCwKICAgICAgICAgICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCwKICAgICAgICAgICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gYnl0ZXMKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7CiAgICAgICAgICB2YXIgYnl0ZUFycmF5ID0gW107CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi4KICAgICAgICAgICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBieXRlQXJyYXkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7CiAgICAgICAgICB2YXIgYywgaGksIGxvOwogICAgICAgICAgdmFyIGJ5dGVBcnJheSA9IFtdOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrCgogICAgICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgIGhpID0gYyA+PiA4OwogICAgICAgICAgICBsbyA9IGMgJSAyNTY7CiAgICAgICAgICAgIGJ5dGVBcnJheS5wdXNoKGxvKTsKICAgICAgICAgICAgYnl0ZUFycmF5LnB1c2goaGkpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBieXRlQXJyYXkKICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHsKICAgICAgICAgIHJldHVybiB0b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWsKICAgICAgICAgICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGlzbmFuICh2YWwpIHsKICAgICAgICAgIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZQogICAgICAgIH0KCgogICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgaXMgZnJvbSBpcy1idWZmZXIsIGFsc28gYnkgRmVyb3NzIEFib3VraGFkaWplaCBhbmQgd2l0aCBzYW1lIGxpc2VuY2UKICAgICAgICAvLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nCiAgICAgICAgLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseQogICAgICAgIGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikgewogICAgICAgICAgcmV0dXJuIG9iaiAhPSBudWxsICYmICghIW9iai5faXNCdWZmZXIgfHwgaXNGYXN0QnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0Zhc3RCdWZmZXIgKG9iaikgewogICAgICAgICAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iaikKICAgICAgICB9CgogICAgICAgIC8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuCiAgICAgICAgZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHsKICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNGYXN0QnVmZmVyKG9iai5zbGljZSgwLCAwKSkKICAgICAgICB9CgogICAgICAgIHZhciBkb21haW47CgogICAgICAgIC8vIFRoaXMgY29uc3RydWN0b3IgaXMgdXNlZCB0byBzdG9yZSBldmVudCBoYW5kbGVycy4gSW5zdGFudGlhdGluZyB0aGlzIGlzCiAgICAgICAgLy8gZmFzdGVyIHRoYW4gZXhwbGljaXRseSBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCB0byBnZXQgYSAiY2xlYW4iIGVtcHR5CiAgICAgICAgLy8gb2JqZWN0ICh0ZXN0ZWQgd2l0aCB2OCB2NC45KS4KICAgICAgICBmdW5jdGlvbiBFdmVudEhhbmRsZXJzKCkge30KICAgICAgICBFdmVudEhhbmRsZXJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CgogICAgICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHsKICAgICAgICAgIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7CiAgICAgICAgfQoKICAgICAgICAvLyBub2RlanMgb2RkaXR5CiAgICAgICAgLy8gcmVxdWlyZSgnZXZlbnRzJykgPT09IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcgogICAgICAgIEV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7CgogICAgICAgIEV2ZW50RW1pdHRlci51c2luZ0RvbWFpbnMgPSBmYWxzZTsKCiAgICAgICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5kb21haW4gPSB1bmRlZmluZWQ7CiAgICAgICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkOwogICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDsKCiAgICAgICAgLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlCiAgICAgICAgLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy4KICAgICAgICBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwOwoKICAgICAgICBFdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdGhpcy5kb21haW4gPSBudWxsOwogICAgICAgICAgaWYgKEV2ZW50RW1pdHRlci51c2luZ0RvbWFpbnMpIHsKICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW4gYWN0aXZlIGRvbWFpbiwgdGhlbiBhdHRhY2ggdG8gaXQuCiAgICAgICAgICAgIGlmIChkb21haW4uYWN0aXZlICkgOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICghdGhpcy5fZXZlbnRzIHx8IHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHsKICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7CiAgICAgICAgfTsKCiAgICAgICAgLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzCiAgICAgICAgLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuCiAgICAgICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikgewogICAgICAgICAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBpc05hTihuKSkKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignIm4iIGFyZ3VtZW50IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTsKICAgICAgICAgIHRoaXMuX21heExpc3RlbmVycyA9IG47CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHsKICAgICAgICAgIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkKICAgICAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzOwogICAgICAgICAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVyczsKICAgICAgICB9CgogICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkgewogICAgICAgICAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gVGhlc2Ugc3RhbmRhbG9uZSBlbWl0KiBmdW5jdGlvbnMgYXJlIHVzZWQgdG8gb3B0aW1pemUgY2FsbGluZyBvZiBldmVudAogICAgICAgIC8vIGhhbmRsZXJzIGZvciBmYXN0IGNhc2VzIGJlY2F1c2UgZW1pdCgpIGl0c2VsZiBvZnRlbiBoYXMgYSB2YXJpYWJsZSBudW1iZXIgb2YKICAgICAgICAvLyBhcmd1bWVudHMgYW5kIGNhbiBiZSBkZW9wdGltaXplZCBiZWNhdXNlIG9mIHRoYXQuIFRoZXNlIGZ1bmN0aW9ucyBhbHdheXMgaGF2ZQogICAgICAgIC8vIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgYW5kIHRodXMgZG8gbm90IGdldCBkZW9wdGltaXplZCwgc28gdGhlIGNvZGUKICAgICAgICAvLyBpbnNpZGUgdGhlbSBjYW4gZXhlY3V0ZSBmYXN0ZXIuCiAgICAgICAgZnVuY3Rpb24gZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgc2VsZikgewogICAgICAgICAgaWYgKGlzRm4pCiAgICAgICAgICAgIGhhbmRsZXIuY2FsbChzZWxmKTsKICAgICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7CiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpCiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGVtaXRPbmUoaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSkgewogICAgICAgICAgaWYgKGlzRm4pCiAgICAgICAgICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxKTsKICAgICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7CiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpCiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSwgYXJnMikgewogICAgICAgICAgaWYgKGlzRm4pCiAgICAgICAgICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxLCBhcmcyKTsKICAgICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7CiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpCiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxLCBhcmcyLCBhcmczKSB7CiAgICAgICAgICBpZiAoaXNGbikKICAgICAgICAgICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpOwogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDsKICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkKICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmLCBhcmcxLCBhcmcyLCBhcmczKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZ3MpIHsKICAgICAgICAgIGlmIChpc0ZuKQogICAgICAgICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDsKICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkKICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkoc2VsZiwgYXJncyk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHsKICAgICAgICAgIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBldmVudHMsIGRvbWFpbjsKICAgICAgICAgIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpOwoKICAgICAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50czsKICAgICAgICAgIGlmIChldmVudHMpCiAgICAgICAgICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT0gbnVsbCk7CiAgICAgICAgICBlbHNlIGlmICghZG9FcnJvcikKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgIGRvbWFpbiA9IHRoaXMuZG9tYWluOwoKICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy4KICAgICAgICAgIGlmIChkb0Vycm9yKSB7CiAgICAgICAgICAgIGVyID0gYXJndW1lbnRzWzFdOwogICAgICAgICAgICBpZiAoZG9tYWluKSB7CiAgICAgICAgICAgICAgaWYgKCFlcikKICAgICAgICAgICAgICAgIGVyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgImVycm9yIiBldmVudCcpOwogICAgICAgICAgICAgIGVyLmRvbWFpbkVtaXR0ZXIgPSB0aGlzOwogICAgICAgICAgICAgIGVyLmRvbWFpbiA9IGRvbWFpbjsKICAgICAgICAgICAgICBlci5kb21haW5UaHJvd24gPSBmYWxzZTsKICAgICAgICAgICAgICBkb21haW4uZW1pdCgnZXJyb3InLCBlcik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAgICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudAogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXIKICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgImVycm9yIiBldmVudC4gKCcgKyBlciArICcpJyk7CiAgICAgICAgICAgICAgZXJyLmNvbnRleHQgPSBlcjsKICAgICAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICAgIGhhbmRsZXIgPSBldmVudHNbdHlwZV07CgogICAgICAgICAgaWYgKCFoYW5kbGVyKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgICAgdmFyIGlzRm4gPSB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJzsKICAgICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICAgICAgICBzd2l0Y2ggKGxlbikgewogICAgICAgICAgICAvLyBmYXN0IGNhc2VzCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCB0aGlzKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGVtaXRPbmUoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAvLyBzbG93ZXIKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpOwogICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKykKICAgICAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldOwogICAgICAgICAgICAgIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3MpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7CiAgICAgICAgICB2YXIgbTsKICAgICAgICAgIHZhciBldmVudHM7CiAgICAgICAgICB2YXIgZXhpc3Rpbmc7CgogICAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3RlbmVyIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKCiAgICAgICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50czsKICAgICAgICAgIGlmICghZXZlbnRzKSB7CiAgICAgICAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSAibmV3TGlzdGVuZXIiISBCZWZvcmUKICAgICAgICAgICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgIm5ld0xpc3RlbmVyIi4KICAgICAgICAgICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lcikgewogICAgICAgICAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTsKCiAgICAgICAgICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZQogICAgICAgICAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3QKICAgICAgICAgICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50czsKICAgICAgICAgICAgfQogICAgICAgICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoIWV4aXN0aW5nKSB7CiAgICAgICAgICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LgogICAgICAgICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyOwogICAgICAgICAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuCiAgICAgICAgICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtleGlzdGluZywgbGlzdGVuZXJdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC4KICAgICAgICAgICAgICBpZiAocHJlcGVuZCkgewogICAgICAgICAgICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWsKICAgICAgICAgICAgaWYgKCFleGlzdGluZy53YXJuZWQpIHsKICAgICAgICAgICAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpOwogICAgICAgICAgICAgIGlmIChtICYmIG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0pIHsKICAgICAgICAgICAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7CiAgICAgICAgICAgICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgdHlwZSArICcgbGlzdGVuZXJzIGFkZGVkLiAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0Jyk7CiAgICAgICAgICAgICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJzsKICAgICAgICAgICAgICAgIHcuZW1pdHRlciA9IHRhcmdldDsKICAgICAgICAgICAgICAgIHcudHlwZSA9IHR5cGU7CiAgICAgICAgICAgICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoOwogICAgICAgICAgICAgICAgZW1pdFdhcm5pbmcodyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHRhcmdldDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZW1pdFdhcm5pbmcoZSkgewogICAgICAgICAgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnNvbGUud2FybihlKSA6IGNvbnNvbGUubG9nKGUpOwogICAgICAgIH0KICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTsKICAgICAgICB9OwoKICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjsKCiAgICAgICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPQogICAgICAgICAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgICAgICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHsKICAgICAgICAgIHZhciBmaXJlZCA9IGZhbHNlOwogICAgICAgICAgZnVuY3Rpb24gZygpIHsKICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpOwogICAgICAgICAgICBpZiAoIWZpcmVkKSB7CiAgICAgICAgICAgICAgZmlyZWQgPSB0cnVlOwogICAgICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KHRhcmdldCwgYXJndW1lbnRzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZy5saXN0ZW5lciA9IGxpc3RlbmVyOwogICAgICAgICAgcmV0dXJuIGc7CiAgICAgICAgfQoKICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7CiAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKQogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdGVuZXIiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpOwogICAgICAgICAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CgogICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9CiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3RlbmVyIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgICAgICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTsKICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfTsKCiAgICAgICAgLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQKICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0KICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgICAgICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjsKCiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0ZW5lciIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CgogICAgICAgICAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50czsKICAgICAgICAgICAgICBpZiAoIWV2ZW50cykKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwoKICAgICAgICAgICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdOwogICAgICAgICAgICAgIGlmICghbGlzdCkKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwoKICAgICAgICAgICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgKGxpc3QubGlzdGVuZXIgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7CiAgICAgICAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkKICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKQogICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IC0xOwoKICAgICAgICAgICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoOyBpLS0gPiAwOykgewogICAgICAgICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwKICAgICAgICAgICAgICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkgewogICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyOwogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gaTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8IDApCiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwoKICAgICAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgICAgICBsaXN0WzBdID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKQogICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfTsKCiAgICAgICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPQogICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkgewogICAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50czsKCiAgICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzOwogICAgICAgICAgICAgIGlmICghZXZlbnRzKQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CgogICAgICAgICAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXQKICAgICAgICAgICAgICBpZiAoIWV2ZW50cy5yZW1vdmVMaXN0ZW5lcikgewogICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0pIHsKICAgICAgICAgICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50cwogICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwga2V5OyBpIDwga2V5cy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzW2ldOwogICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpOwogICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdOwoKICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7CiAgICAgICAgICAgICAgICAvLyBMSUZPIG9yZGVyCiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7CiAgICAgICAgICAgICAgICB9IHdoaWxlIChsaXN0ZW5lcnNbMF0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH07CgogICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHsKICAgICAgICAgIHZhciBldmxpc3RlbmVyOwogICAgICAgICAgdmFyIHJldDsKICAgICAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7CgogICAgICAgICAgaWYgKCFldmVudHMpCiAgICAgICAgICAgIHJldCA9IFtdOwogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07CiAgICAgICAgICAgIGlmICghZXZsaXN0ZW5lcikKICAgICAgICAgICAgICByZXQgPSBbXTsKICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpCiAgICAgICAgICAgICAgcmV0ID0gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl07CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICByZXQgPSB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcik7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9OwoKICAgICAgICBFdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHsKICAgICAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7CiAgICAgICAgZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7CiAgICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzOwoKICAgICAgICAgIGlmIChldmVudHMpIHsKICAgICAgICAgICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07CgogICAgICAgICAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgfSBlbHNlIGlmIChldmxpc3RlbmVyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQoKICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3Qub3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107CiAgICAgICAgfTsKCiAgICAgICAgLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpLgogICAgICAgIGZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkgewogICAgICAgICAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKQogICAgICAgICAgICBsaXN0W2ldID0gbGlzdFtrXTsKICAgICAgICAgIGxpc3QucG9wKCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhcnJheUNsb25lKGFyciwgaSkgewogICAgICAgICAgdmFyIGNvcHkgPSBuZXcgQXJyYXkoaSk7CiAgICAgICAgICB3aGlsZSAoaS0tKQogICAgICAgICAgICBjb3B5W2ldID0gYXJyW2ldOwogICAgICAgICAgcmV0dXJuIGNvcHk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7CiAgICAgICAgICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfQoKICAgICAgICAvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXIKICAgICAgICAvLyBiYXNlZCBvZmYgaHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanMKCiAgICAgICAgZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpOwogICAgICAgIH0KICAgICAgICB2YXIgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7CiAgICAgICAgdmFyIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CiAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWwkMSQxLnNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsJDEkMS5jbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHsKICAgICAgICAgICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHsKICAgICAgICAgICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZAogICAgICAgICAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHsKICAgICAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0OwogICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzcwogICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTsKICAgICAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApOwogICAgICAgICAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvcgogICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKCiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHsKICAgICAgICAgICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7CiAgICAgICAgICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnMKICAgICAgICAgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkCiAgICAgICAgICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkgewogICAgICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgICAgICAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzCiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKXsKICAgICAgICAgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci4KICAgICAgICAgICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCgoKICAgICAgICB9CiAgICAgICAgdmFyIHF1ZXVlID0gW107CiAgICAgICAgdmFyIGRyYWluaW5nID0gZmFsc2U7CiAgICAgICAgdmFyIGN1cnJlbnRRdWV1ZTsKICAgICAgICB2YXIgcXVldWVJbmRleCA9IC0xOwoKICAgICAgICBmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7CiAgICAgICAgICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRyYWluaW5nID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcXVldWVJbmRleCA9IC0xOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGRyYWluUXVldWUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHsKICAgICAgICAgICAgaWYgKGRyYWluaW5nKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7CiAgICAgICAgICAgIGRyYWluaW5nID0gdHJ1ZTsKCiAgICAgICAgICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICAgICAgICAgIHdoaWxlKGxlbikgewogICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7CiAgICAgICAgICAgICAgICBxdWV1ZSA9IFtdOwogICAgICAgICAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikgewogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHF1ZXVlSW5kZXggPSAtMTsKICAgICAgICAgICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBjdXJyZW50UXVldWUgPSBudWxsOwogICAgICAgICAgICBkcmFpbmluZyA9IGZhbHNlOwogICAgICAgICAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIG5leHRUaWNrKGZ1bikgewogICAgICAgICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpOwogICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykgewogICAgICAgICAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzCiAgICAgICAgZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7CiAgICAgICAgICAgIHRoaXMuZnVuID0gZnVuOwogICAgICAgICAgICB0aGlzLmFycmF5ID0gYXJyYXk7CiAgICAgICAgfQogICAgICAgIEl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20va3VtYXZpcy9icm93c2VyLXByb2Nlc3MtaHJ0aW1lL2Jsb2IvbWFzdGVyL2luZGV4LmpzCiAgICAgICAgdmFyIHBlcmZvcm1hbmNlID0gZ2xvYmFsJDEkMS5wZXJmb3JtYW5jZSB8fCB7fTsKICAgICAgICB2YXIgcGVyZm9ybWFuY2VOb3cgPQogICAgICAgICAgcGVyZm9ybWFuY2Uubm93ICAgICAgICB8fAogICAgICAgICAgcGVyZm9ybWFuY2UubW96Tm93ICAgICB8fAogICAgICAgICAgcGVyZm9ybWFuY2UubXNOb3cgICAgICB8fAogICAgICAgICAgcGVyZm9ybWFuY2Uub05vdyAgICAgICB8fAogICAgICAgICAgcGVyZm9ybWFuY2Uud2Via2l0Tm93ICB8fAogICAgICAgICAgZnVuY3Rpb24oKXsgcmV0dXJuIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgfTsKCiAgICAgICAgdmFyIGluaGVyaXRzOwogICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJyl7CiAgICAgICAgICBpbmhlcml0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikgewogICAgICAgICAgICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZQogICAgICAgICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjsKICAgICAgICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHsKICAgICAgICAgICAgICBjb25zdHJ1Y3RvcjogewogICAgICAgICAgICAgICAgdmFsdWU6IGN0b3IsCiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGluaGVyaXRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7CiAgICAgICAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yOwogICAgICAgICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTsKICAgICAgICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTsKICAgICAgICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgdmFyIGluaGVyaXRzJDEgPSBpbmhlcml0czsKCiAgICAgICAgdmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7CiAgICAgICAgZnVuY3Rpb24gZm9ybWF0KGYpIHsKICAgICAgICAgIGlmICghaXNTdHJpbmcoZikpIHsKICAgICAgICAgICAgdmFyIG9iamVjdHMgPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGkgPSAxOwogICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7CiAgICAgICAgICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7CiAgICAgICAgICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnOwogICAgICAgICAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4OwogICAgICAgICAgICBzd2l0Y2ggKHgpIHsKICAgICAgICAgICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTsKICAgICAgICAgICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTsKICAgICAgICAgICAgICBjYXNlICclaic6CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIHg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHsKICAgICAgICAgICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHsKICAgICAgICAgICAgICBzdHIgKz0gJyAnICsgeDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgICB9CgogICAgICAgIC8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuCiAgICAgICAgLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC4KICAgICAgICAvLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLgogICAgICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShmbiwgbXNnKSB7CiAgICAgICAgICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLgogICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbCQxJDEucHJvY2VzcykpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBkZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgd2FybmVkID0gZmFsc2U7CiAgICAgICAgICBmdW5jdGlvbiBkZXByZWNhdGVkKCkgewogICAgICAgICAgICBpZiAoIXdhcm5lZCkgewogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZGVwcmVjYXRlZDsKICAgICAgICB9CgogICAgICAgIHZhciBkZWJ1Z3MgPSB7fTsKICAgICAgICB2YXIgZGVidWdFbnZpcm9uOwogICAgICAgIGZ1bmN0aW9uIGRlYnVnbG9nKHNldCkgewogICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpCiAgICAgICAgICAgIGRlYnVnRW52aXJvbiA9ICAnJzsKICAgICAgICAgIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgaWYgKCFkZWJ1Z3Nbc2V0XSkgewogICAgICAgICAgICBpZiAobmV3IFJlZ0V4cCgnXFxiJyArIHNldCArICdcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkgewogICAgICAgICAgICAgIHZhciBwaWQgPSAwOwogICAgICAgICAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgbXNnID0gZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGRlYnVnc1tzZXRdOwogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dAogICAgICAgICAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLgogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC4KICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LgogICAgICAgICAqLwogICAgICAgIC8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi8KICAgICAgICBmdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykgewogICAgICAgICAgLy8gZGVmYXVsdCBvcHRpb25zCiAgICAgICAgICB2YXIgY3R4ID0gewogICAgICAgICAgICBzZWVuOiBbXSwKICAgICAgICAgICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3IKICAgICAgICAgIH07CiAgICAgICAgICAvLyBsZWdhY3kuLi4KICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTsKICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107CiAgICAgICAgICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7CiAgICAgICAgICAgIC8vIGxlZ2FjeS4uLgogICAgICAgICAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7CiAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMpIHsKICAgICAgICAgICAgLy8gZ290IGFuICJvcHRpb25zIiBvYmplY3QKICAgICAgICAgICAgX2V4dGVuZChjdHgsIG9wdHMpOwogICAgICAgICAgfQogICAgICAgICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9ucwogICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTsKICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyOwogICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7CiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7CiAgICAgICAgICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yOwogICAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpOwogICAgICAgIH0KCiAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzCiAgICAgICAgaW5zcGVjdC5jb2xvcnMgPSB7CiAgICAgICAgICAnYm9sZCcgOiBbMSwgMjJdLAogICAgICAgICAgJ2l0YWxpYycgOiBbMywgMjNdLAogICAgICAgICAgJ3VuZGVybGluZScgOiBbNCwgMjRdLAogICAgICAgICAgJ2ludmVyc2UnIDogWzcsIDI3XSwKICAgICAgICAgICd3aGl0ZScgOiBbMzcsIDM5XSwKICAgICAgICAgICdncmV5JyA6IFs5MCwgMzldLAogICAgICAgICAgJ2JsYWNrJyA6IFszMCwgMzldLAogICAgICAgICAgJ2JsdWUnIDogWzM0LCAzOV0sCiAgICAgICAgICAnY3lhbicgOiBbMzYsIDM5XSwKICAgICAgICAgICdncmVlbicgOiBbMzIsIDM5XSwKICAgICAgICAgICdtYWdlbnRhJyA6IFszNSwgMzldLAogICAgICAgICAgJ3JlZCcgOiBbMzEsIDM5XSwKICAgICAgICAgICd5ZWxsb3cnIDogWzMzLCAzOV0KICAgICAgICB9OwoKICAgICAgICAvLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGUKICAgICAgICBpbnNwZWN0LnN0eWxlcyA9IHsKICAgICAgICAgICdzcGVjaWFsJzogJ2N5YW4nLAogICAgICAgICAgJ251bWJlcic6ICd5ZWxsb3cnLAogICAgICAgICAgJ2Jvb2xlYW4nOiAneWVsbG93JywKICAgICAgICAgICd1bmRlZmluZWQnOiAnZ3JleScsCiAgICAgICAgICAnbnVsbCc6ICdib2xkJywKICAgICAgICAgICdzdHJpbmcnOiAnZ3JlZW4nLAogICAgICAgICAgJ2RhdGUnOiAnbWFnZW50YScsCiAgICAgICAgICAvLyAibmFtZSI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmcKICAgICAgICAgICdyZWdleHAnOiAncmVkJwogICAgICAgIH07CgoKICAgICAgICBmdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7CiAgICAgICAgICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdOwoKICAgICAgICAgIGlmIChzdHlsZSkgewogICAgICAgICAgICByZXR1cm4gJ1x1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICsKICAgICAgICAgICAgICAgICAgICdcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgICAgICB9CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHsKICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHsKICAgICAgICAgIHZhciBoYXNoID0ge307CgogICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkgewogICAgICAgICAgICBoYXNoW3ZhbF0gPSB0cnVlOwogICAgICAgICAgfSk7CgogICAgICAgICAgcmV0dXJuIGhhc2g7CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7CiAgICAgICAgICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuCiAgICAgICAgICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXQKICAgICAgICAgIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJgogICAgICAgICAgICAgIHZhbHVlICYmCiAgICAgICAgICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJgogICAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbAogICAgICAgICAgICAgIHZhbHVlLmluc3BlY3QgIT09IGluc3BlY3QgJiYKICAgICAgICAgICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay4KICAgICAgICAgICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7CiAgICAgICAgICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTsKICAgICAgICAgICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7CiAgICAgICAgICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllcwogICAgICAgICAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTsKICAgICAgICAgIGlmIChwcmltaXRpdmUpIHsKICAgICAgICAgICAgcmV0dXJuIHByaW1pdGl2ZTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuCiAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTsKICAgICAgICAgIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpOwoKICAgICAgICAgIGlmIChjdHguc2hvd0hpZGRlbikgewogICAgICAgICAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGUKICAgICAgICAgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4CiAgICAgICAgICBpZiAoaXNFcnJvcih2YWx1ZSkKICAgICAgICAgICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHsKICAgICAgICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuCiAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7CiAgICAgICAgICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJzsKICAgICAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHsKICAgICAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc0RhdGUodmFsdWUpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc0Vycm9yKHZhbHVlKSkgewogICAgICAgICAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddOwoKICAgICAgICAgIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXkKICAgICAgICAgIGlmIChpc0FycmF5JDEodmFsdWUpKSB7CiAgICAgICAgICAgIGFycmF5ID0gdHJ1ZTsKICAgICAgICAgICAgYnJhY2VzID0gWydbJywgJ10nXTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnMKICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkgewogICAgICAgICAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnOwogICAgICAgICAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJzsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwcwogICAgICAgICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkgewogICAgICAgICAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGUKICAgICAgICAgIGlmIChpc0RhdGUodmFsdWUpKSB7CiAgICAgICAgICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yCiAgICAgICAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHsKICAgICAgICAgICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHsKICAgICAgICAgICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHsKICAgICAgICAgICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkgewogICAgICAgICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBjdHguc2Vlbi5wdXNoKHZhbHVlKTsKCiAgICAgICAgICB2YXIgb3V0cHV0OwogICAgICAgICAgaWYgKGFycmF5KSB7CiAgICAgICAgICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICBjdHguc2Vlbi5wb3AoKTsKCiAgICAgICAgICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpOwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7CiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKQogICAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTsKICAgICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHsKICAgICAgICAgICAgdmFyIHNpbXBsZSA9ICdcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXiJ8IiQvZywgJycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgIlxcJyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcIi9nLCAnIicpICsgJ1wnJzsKICAgICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHVlKSkKICAgICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTsKICAgICAgICAgIGlmIChpc0Jvb2xlYW4odmFsdWUpKQogICAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTsKICAgICAgICAgIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyAib2JqZWN0Iiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuCiAgICAgICAgICBpZiAoaXNOdWxsKHZhbHVlKSkKICAgICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTsKICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkgewogICAgICAgICAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJzsKICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7CiAgICAgICAgICB2YXIgb3V0cHV0ID0gW107CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkgewogICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHsKICAgICAgICAgICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLAogICAgICAgICAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBvdXRwdXQucHVzaCgnJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgaWYgKCFrZXkubWF0Y2goL15cZCskLykpIHsKICAgICAgICAgICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLAogICAgICAgICAgICAgICAgICBrZXksIHRydWUpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gb3V0cHV0OwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHsKICAgICAgICAgIHZhciBuYW1lLCBzdHIsIGRlc2M7CiAgICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07CiAgICAgICAgICBpZiAoZGVzYy5nZXQpIHsKICAgICAgICAgICAgaWYgKGRlc2Muc2V0KSB7CiAgICAgICAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGRlc2Muc2V0KSB7CiAgICAgICAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkgewogICAgICAgICAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFzdHIpIHsKICAgICAgICAgICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7CiAgICAgICAgICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7CiAgICAgICAgICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoc3RyLmluZGV4T2YoJ1xuJykgPiAtMSkgewogICAgICAgICAgICAgICAgaWYgKGFycmF5KSB7CiAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXG4nKS5tYXAoZnVuY3Rpb24obGluZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTsKICAgICAgICAgICAgICAgICAgfSkuam9pbignXG4nKS5zdWJzdHIoMik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBzdHIgPSAnXG4nICsgc3RyLnNwbGl0KCdcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTsKICAgICAgICAgICAgICAgICAgfSkuam9pbignXG4nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHsKICAgICAgICAgICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxkKyQvKSkgewogICAgICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTsKICAgICAgICAgICAgaWYgKG5hbWUubWF0Y2goL14iKFthLXpBLVpfXVthLXpBLVpfMC05XSopIiQvKSkgewogICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpOwogICAgICAgICAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgIlxcJyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwiL2csICciJykKICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXiJ8IiQpL2csICInIik7CiAgICAgICAgICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBuYW1lICsgJzogJyArIHN0cjsKICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykgewogICAgICAgICAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7CiAgICAgICAgICAgIGlmIChjdXIuaW5kZXhPZignXG4nKSA+PSAwKSA7CiAgICAgICAgICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1x1MDAxYlxbXGRcZD9tL2csICcnKS5sZW5ndGggKyAxOwogICAgICAgICAgfSwgMCk7CgogICAgICAgICAgaWYgKGxlbmd0aCA+IDYwKSB7CiAgICAgICAgICAgIHJldHVybiBicmFjZXNbMF0gKwogICAgICAgICAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xuICcpICsKICAgICAgICAgICAgICAgICAgICcgJyArCiAgICAgICAgICAgICAgICAgICBvdXRwdXQuam9pbignLFxuICAnKSArCiAgICAgICAgICAgICAgICAgICAnICcgKwogICAgICAgICAgICAgICAgICAgYnJhY2VzWzFdOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07CiAgICAgICAgfQoKCiAgICAgICAgLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgCiAgICAgICAgLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuCiAgICAgICAgZnVuY3Rpb24gaXNBcnJheSQxKGFyKSB7CiAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7CiAgICAgICAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaXNOdWxsKGFyZykgewogICAgICAgICAgcmV0dXJuIGFyZyA9PT0gbnVsbDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGFyZykgewogICAgICAgICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7CiAgICAgICAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHsKICAgICAgICAgIHJldHVybiBhcmcgPT09IHZvaWQgMDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7CiAgICAgICAgICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc09iamVjdChhcmcpIHsKICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0RhdGUoZCkgewogICAgICAgICAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0Vycm9yKGUpIHsKICAgICAgICAgIHJldHVybiBpc09iamVjdChlKSAmJgogICAgICAgICAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHsKICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykgewogICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIF9leHRlbmQob3JpZ2luLCBhZGQpIHsKICAgICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3QKICAgICAgICAgIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luOwoKICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTsKICAgICAgICAgIHZhciBpID0ga2V5cy5sZW5ndGg7CiAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvcmlnaW47CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkgewogICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHsKICAgICAgICAgIHRoaXMuaGVhZCA9IG51bGw7CiAgICAgICAgICB0aGlzLnRhaWwgPSBudWxsOwogICAgICAgICAgdGhpcy5sZW5ndGggPSAwOwogICAgICAgIH0KCiAgICAgICAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTsKICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTsKICAgICAgICAgIHRoaXMudGFpbCA9IGVudHJ5OwogICAgICAgICAgKyt0aGlzLmxlbmd0aDsKICAgICAgICB9OwoKICAgICAgICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKHYpIHsKICAgICAgICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07CiAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5OwogICAgICAgICAgdGhpcy5oZWFkID0gZW50cnk7CiAgICAgICAgICArK3RoaXMubGVuZ3RoOwogICAgICAgIH07CgogICAgICAgIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47CiAgICAgICAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7CiAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDsKICAgICAgICAgIC0tdGhpcy5sZW5ndGg7CiAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH07CgogICAgICAgIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDsKICAgICAgICAgIHRoaXMubGVuZ3RoID0gMDsKICAgICAgICB9OwoKICAgICAgICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gKHMpIHsKICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnOwogICAgICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7CiAgICAgICAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7CiAgICAgICAgICB3aGlsZSAocCA9IHAubmV4dCkgewogICAgICAgICAgICByZXQgKz0gcyArIHAuZGF0YTsKICAgICAgICAgIH1yZXR1cm4gcmV0OwogICAgICAgIH07CgogICAgICAgIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7CiAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTsKICAgICAgICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7CiAgICAgICAgICB2YXIgcCA9IHRoaXMuaGVhZDsKICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgIHdoaWxlIChwKSB7CiAgICAgICAgICAgIHAuZGF0YS5jb3B5KHJldCwgaSk7CiAgICAgICAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDsKICAgICAgICAgICAgcCA9IHAubmV4dDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfTsKCiAgICAgICAgLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCiAgICAgICAgdmFyIGlzQnVmZmVyRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZwogICAgICAgICAgfHwgZnVuY3Rpb24oZW5jb2RpbmcpIHsKICAgICAgICAgICAgICAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7CiAgICAgICAgICAgICAgICAgY2FzZSAnaGV4JzogY2FzZSAndXRmOCc6IGNhc2UgJ3V0Zi04JzogY2FzZSAnYXNjaWknOiBjYXNlICdiaW5hcnknOiBjYXNlICdiYXNlNjQnOiBjYXNlICd1Y3MyJzogY2FzZSAndWNzLTInOiBjYXNlICd1dGYxNmxlJzogY2FzZSAndXRmLTE2bGUnOiBjYXNlICdyYXcnOiByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH07CgoKICAgICAgICBmdW5jdGlvbiBhc3NlcnRFbmNvZGluZyhlbmNvZGluZykgewogICAgICAgICAgaWYgKGVuY29kaW5nICYmICFpc0J1ZmZlckVuY29kaW5nKGVuY29kaW5nKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mCiAgICAgICAgLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlCiAgICAgICAgLy8gY2hhcmFjdGVycy4gQ0VTVS04IGlzIGhhbmRsZWQgYXMgcGFydCBvZiB0aGUgVVRGLTggZW5jb2RpbmcuCiAgICAgICAgLy8KICAgICAgICAvLyBAVE9ETyBIYW5kbGluZyBhbGwgZW5jb2RpbmdzIGluc2lkZSBhIHNpbmdsZSBvYmplY3QgbWFrZXMgaXQgdmVyeSBkaWZmaWN1bHQKICAgICAgICAvLyB0byByZWFzb24gYWJvdXQgdGhpcyBjb2RlLCBzbyBpdCBzaG91bGQgYmUgc3BsaXQgdXAgaW4gdGhlIGZ1dHVyZS4KICAgICAgICAvLyBAVE9ETyBUaGVyZSBzaG91bGQgYmUgYSB1dGY4LXN0cmljdCBlbmNvZGluZyB0aGF0IHJlamVjdHMgaW52YWxpZCBVVEYtOCBjb2RlCiAgICAgICAgLy8gcG9pbnRzIGFzIHVzZWQgYnkgQ0VTVS04LgogICAgICAgIGZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHsKICAgICAgICAgIHRoaXMuZW5jb2RpbmcgPSAoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX10vLCAnJyk7CiAgICAgICAgICBhc3NlcnRFbmNvZGluZyhlbmNvZGluZyk7CiAgICAgICAgICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHsKICAgICAgICAgICAgY2FzZSAndXRmOCc6CiAgICAgICAgICAgICAgLy8gQ0VTVS04IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAzLWJ5dGVzCiAgICAgICAgICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMzsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAndWNzMic6CiAgICAgICAgICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICAgICAgICAgIC8vIFVURi0xNiByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMi1ieXRlcwogICAgICAgICAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDI7CiAgICAgICAgICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXI7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ2Jhc2U2NCc6CiAgICAgICAgICAgICAgLy8gQmFzZS02NCBzdG9yZXMgMyBieXRlcyBpbiA0IGNoYXJzLCBhbmQgcGFkcyB0aGUgcmVtYWluZGVyLgogICAgICAgICAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDM7CiAgICAgICAgICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGJhc2U2NERldGVjdEluY29tcGxldGVDaGFyOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRoaXMud3JpdGUgPSBwYXNzVGhyb3VnaFdyaXRlOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBFbm91Z2ggc3BhY2UgdG8gc3RvcmUgYWxsIGJ5dGVzIG9mIGEgc2luZ2xlIGNoYXJhY3Rlci4gVVRGLTggbmVlZHMgNAogICAgICAgICAgLy8gYnl0ZXMsIGJ1dCBDRVNVLTggbWF5IHJlcXVpcmUgdXAgdG8gNiAoMyBieXRlcyBwZXIgc3Vycm9nYXRlKS4KICAgICAgICAgIHRoaXMuY2hhckJ1ZmZlciA9IG5ldyBCdWZmZXIoNik7CiAgICAgICAgICAvLyBOdW1iZXIgb2YgYnl0ZXMgcmVjZWl2ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuCiAgICAgICAgICB0aGlzLmNoYXJSZWNlaXZlZCA9IDA7CiAgICAgICAgICAvLyBOdW1iZXIgb2YgYnl0ZXMgZXhwZWN0ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuCiAgICAgICAgICB0aGlzLmNoYXJMZW5ndGggPSAwOwogICAgICAgIH0KCiAgICAgICAgLy8gd3JpdGUgZGVjb2RlcyB0aGUgZ2l2ZW4gYnVmZmVyIGFuZCByZXR1cm5zIGl0IGFzIEpTIHN0cmluZyB0aGF0IGlzCiAgICAgICAgLy8gZ3VhcmFudGVlZCB0byBub3QgY29udGFpbiBhbnkgcGFydGlhbCBtdWx0aS1ieXRlIGNoYXJhY3RlcnMuIEFueSBwYXJ0aWFsCiAgICAgICAgLy8gY2hhcmFjdGVyIGZvdW5kIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciBpcyBidWZmZXJlZCB1cCwgYW5kIHdpbGwgYmUKICAgICAgICAvLyByZXR1cm5lZCB3aGVuIGNhbGxpbmcgd3JpdGUgYWdhaW4gd2l0aCB0aGUgcmVtYWluaW5nIGJ5dGVzLgogICAgICAgIC8vCiAgICAgICAgLy8gTm90ZTogQ29udmVydGluZyBhIEJ1ZmZlciBjb250YWluaW5nIGFuIG9ycGhhbiBzdXJyb2dhdGUgdG8gYSBTdHJpbmcKICAgICAgICAvLyBjdXJyZW50bHkgd29ya3MsIGJ1dCBjb252ZXJ0aW5nIGEgU3RyaW5nIHRvIGEgQnVmZmVyICh2aWEgYG5ldyBCdWZmZXJgLCBvcgogICAgICAgIC8vIEJ1ZmZlciN3cml0ZSkgd2lsbCByZXBsYWNlIGluY29tcGxldGUgc3Vycm9nYXRlcyB3aXRoIHRoZSB1bmljb2RlCiAgICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhcmFjdGVyLiBTZWUgaHR0cHM6Ly9jb2RlcmV2aWV3LmNocm9taXVtLm9yZy8xMjExNzMwMDkvIC4KICAgICAgICBTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlcikgewogICAgICAgICAgdmFyIGNoYXJTdHIgPSAnJzsKICAgICAgICAgIC8vIGlmIG91ciBsYXN0IHdyaXRlIGVuZGVkIHdpdGggYW4gaW5jb21wbGV0ZSBtdWx0aWJ5dGUgY2hhcmFjdGVyCiAgICAgICAgICB3aGlsZSAodGhpcy5jaGFyTGVuZ3RoKSB7CiAgICAgICAgICAgIC8vIGRldGVybWluZSBob3cgbWFueSByZW1haW5pbmcgYnl0ZXMgdGhpcyBidWZmZXIgaGFzIHRvIG9mZmVyIGZvciB0aGlzIGNoYXIKICAgICAgICAgICAgdmFyIGF2YWlsYWJsZSA9IChidWZmZXIubGVuZ3RoID49IHRoaXMuY2hhckxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkKSA/CiAgICAgICAgICAgICAgICB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCA6CiAgICAgICAgICAgICAgICBidWZmZXIubGVuZ3RoOwoKICAgICAgICAgICAgLy8gYWRkIHRoZSBuZXcgYnl0ZXMgdG8gdGhlIGNoYXIgYnVmZmVyCiAgICAgICAgICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgdGhpcy5jaGFyUmVjZWl2ZWQsIDAsIGF2YWlsYWJsZSk7CiAgICAgICAgICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IGF2YWlsYWJsZTsKCiAgICAgICAgICAgIGlmICh0aGlzLmNoYXJSZWNlaXZlZCA8IHRoaXMuY2hhckxlbmd0aCkgewogICAgICAgICAgICAgIC8vIHN0aWxsIG5vdCBlbm91Z2ggY2hhcnMgaW4gdGhpcyBidWZmZXI/IHdhaXQgZm9yIG1vcmUgLi4uCiAgICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyByZW1vdmUgYnl0ZXMgYmVsb25naW5nIHRvIHRoZSBjdXJyZW50IGNoYXJhY3RlciBmcm9tIHRoZSBidWZmZXIKICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGF2YWlsYWJsZSwgYnVmZmVyLmxlbmd0aCk7CgogICAgICAgICAgICAvLyBnZXQgdGhlIGNoYXJhY3RlciB0aGF0IHdhcyBzcGxpdAogICAgICAgICAgICBjaGFyU3RyID0gdGhpcy5jaGFyQnVmZmVyLnNsaWNlKDAsIHRoaXMuY2hhckxlbmd0aCkudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7CgogICAgICAgICAgICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyCiAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChjaGFyU3RyLmxlbmd0aCAtIDEpOwogICAgICAgICAgICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikgewogICAgICAgICAgICAgIHRoaXMuY2hhckxlbmd0aCArPSB0aGlzLnN1cnJvZ2F0ZVNpemU7CiAgICAgICAgICAgICAgY2hhclN0ciA9ICcnOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY2hhclJlY2VpdmVkID0gdGhpcy5jaGFyTGVuZ3RoID0gMDsKCiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBubyBtb3JlIGJ5dGVzIGluIHRoaXMgYnVmZmVyLCBqdXN0IGVtaXQgb3VyIGNoYXIKICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gY2hhclN0cjsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBkZXRlcm1pbmUgYW5kIHNldCBjaGFyTGVuZ3RoIC8gY2hhclJlY2VpdmVkCiAgICAgICAgICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcik7CgogICAgICAgICAgdmFyIGVuZCA9IGJ1ZmZlci5sZW5ndGg7CiAgICAgICAgICBpZiAodGhpcy5jaGFyTGVuZ3RoKSB7CiAgICAgICAgICAgIC8vIGJ1ZmZlciB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXIgYnl0ZXMgd2UgZ290CiAgICAgICAgICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgYnVmZmVyLmxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkLCBlbmQpOwogICAgICAgICAgICBlbmQgLT0gdGhpcy5jaGFyUmVjZWl2ZWQ7CiAgICAgICAgICB9CgogICAgICAgICAgY2hhclN0ciArPSBidWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgZW5kKTsKCiAgICAgICAgICB2YXIgZW5kID0gY2hhclN0ci5sZW5ndGggLSAxOwogICAgICAgICAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGVuZCk7CiAgICAgICAgICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyCiAgICAgICAgICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikgewogICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuc3Vycm9nYXRlU2l6ZTsKICAgICAgICAgICAgdGhpcy5jaGFyTGVuZ3RoICs9IHNpemU7CiAgICAgICAgICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IHNpemU7CiAgICAgICAgICAgIHRoaXMuY2hhckJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgc2l6ZSwgMCwgc2l6ZSk7CiAgICAgICAgICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgMCwgc2l6ZSk7CiAgICAgICAgICAgIHJldHVybiBjaGFyU3RyLnN1YnN0cmluZygwLCBlbmQpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIG9yIGp1c3QgZW1pdCB0aGUgY2hhclN0cgogICAgICAgICAgcmV0dXJuIGNoYXJTdHI7CiAgICAgICAgfTsKCiAgICAgICAgLy8gZGV0ZWN0SW5jb21wbGV0ZUNoYXIgZGV0ZXJtaW5lcyBpZiB0aGVyZSBpcyBhbiBpbmNvbXBsZXRlIFVURi04IGNoYXJhY3RlciBhdAogICAgICAgIC8vIHRoZSBlbmQgb2YgdGhlIGdpdmVuIGJ1ZmZlci4gSWYgc28sIGl0IHNldHMgdGhpcy5jaGFyTGVuZ3RoIHRvIHRoZSBieXRlCiAgICAgICAgLy8gbGVuZ3RoIHRoYXQgY2hhcmFjdGVyLCBhbmQgc2V0cyB0aGlzLmNoYXJSZWNlaXZlZCB0byB0aGUgbnVtYmVyIG9mIGJ5dGVzCiAgICAgICAgLy8gdGhhdCBhcmUgYXZhaWxhYmxlIGZvciB0aGlzIGNoYXJhY3Rlci4KICAgICAgICBTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGZ1bmN0aW9uKGJ1ZmZlcikgewogICAgICAgICAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IGJ5dGVzIHdlIGhhdmUgdG8gY2hlY2sgYXQgdGhlIGVuZCBvZiB0aGlzIGJ1ZmZlcgogICAgICAgICAgdmFyIGkgPSAoYnVmZmVyLmxlbmd0aCA+PSAzKSA/IDMgOiBidWZmZXIubGVuZ3RoOwoKICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgaWYgb25lIG9mIHRoZSBsYXN0IGkgYnl0ZXMgb2Ygb3VyIGJ1ZmZlciBhbm5vdW5jZXMgYW4KICAgICAgICAgIC8vIGluY29tcGxldGUgY2hhci4KICAgICAgICAgIGZvciAoOyBpID4gMDsgaS0tKSB7CiAgICAgICAgICAgIHZhciBjID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSBpXTsKCiAgICAgICAgICAgIC8vIFNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi04I0Rlc2NyaXB0aW9uCgogICAgICAgICAgICAvLyAxMTBYWFhYWAogICAgICAgICAgICBpZiAoaSA9PSAxICYmIGMgPj4gNSA9PSAweDA2KSB7CiAgICAgICAgICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gMTExMFhYWFgKICAgICAgICAgICAgaWYgKGkgPD0gMiAmJiBjID4+IDQgPT0gMHgwRSkgewogICAgICAgICAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIDExMTEwWFhYCiAgICAgICAgICAgIGlmIChpIDw9IDMgJiYgYyA+PiAzID09IDB4MUUpIHsKICAgICAgICAgICAgICB0aGlzLmNoYXJMZW5ndGggPSA0OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmNoYXJSZWNlaXZlZCA9IGk7CiAgICAgICAgfTsKCiAgICAgICAgU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oYnVmZmVyKSB7CiAgICAgICAgICB2YXIgcmVzID0gJyc7CiAgICAgICAgICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGgpCiAgICAgICAgICAgIHJlcyA9IHRoaXMud3JpdGUoYnVmZmVyKTsKCiAgICAgICAgICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQpIHsKICAgICAgICAgICAgdmFyIGNyID0gdGhpcy5jaGFyUmVjZWl2ZWQ7CiAgICAgICAgICAgIHZhciBidWYgPSB0aGlzLmNoYXJCdWZmZXI7CiAgICAgICAgICAgIHZhciBlbmMgPSB0aGlzLmVuY29kaW5nOwogICAgICAgICAgICByZXMgKz0gYnVmLnNsaWNlKDAsIGNyKS50b1N0cmluZyhlbmMpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gcGFzc1Rocm91Z2hXcml0ZShidWZmZXIpIHsKICAgICAgICAgIHJldHVybiBidWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1dGYxNkRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikgewogICAgICAgICAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBidWZmZXIubGVuZ3RoICUgMjsKICAgICAgICAgIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMiA6IDA7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHsKICAgICAgICAgIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDM7CiAgICAgICAgICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDMgOiAwOwogICAgICAgIH0KCiAgICAgICAgUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7CgogICAgICAgIHZhciBkZWJ1ZyA9IGRlYnVnbG9nKCdzdHJlYW0nKTsKICAgICAgICBpbmhlcml0cyQxKFJlYWRhYmxlLCBFdmVudEVtaXR0ZXIpOwoKICAgICAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7CiAgICAgICAgICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93bgogICAgICAgICAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uCiAgICAgICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueQogICAgICAgICAgICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHMKICAgICAgICAgICAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZQogICAgICAgICAgICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suCiAgICAgICAgICAgIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKQogICAgICAgICAgICAgIGVtaXR0ZXIub24oZXZlbnQsIGZuKTsKICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkKICAgICAgICAgICAgICBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQkMSAoZW1pdHRlciwgdHlwZSkgewogICAgICAgICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHsKCiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgICAgICAgICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0bwogICAgICAgICAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXkKICAgICAgICAgIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlOwoKICAgICAgICAgIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlOwoKICAgICAgICAgIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyCiAgICAgICAgICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zICJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyIgogICAgICAgICAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyazsKICAgICAgICAgIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7CiAgICAgICAgICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod20gfHwgaHdtID09PSAwID8gaHdtIDogZGVmYXVsdEh3bTsKCiAgICAgICAgICAvLyBjYXN0IHRvIGludHMuCiAgICAgICAgICB0aGlzLmhpZ2hXYXRlck1hcmsgPSB+IH50aGlzLmhpZ2hXYXRlck1hcms7CgogICAgICAgICAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGUKICAgICAgICAgIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuCiAgICAgICAgICAvLyBhcnJheS5zaGlmdCgpCiAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7CiAgICAgICAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICAgICAgICB0aGlzLnBpcGVzID0gbnVsbDsKICAgICAgICAgIHRoaXMucGlwZXNDb3VudCA9IDA7CiAgICAgICAgICB0aGlzLmZsb3dpbmcgPSBudWxsOwogICAgICAgICAgdGhpcy5lbmRlZCA9IGZhbHNlOwogICAgICAgICAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnJlYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSwKICAgICAgICAgIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55CiAgICAgICAgICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCAibGF0ZXIiIHNob3VsZCBnZW5lcmFsbHkgYWxzbwogICAgICAgICAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuCiAgICAgICAgICB0aGlzLnN5bmMgPSB0cnVlOwoKICAgICAgICAgIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5CiAgICAgICAgICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi4KICAgICAgICAgIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7CiAgICAgICAgICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOwogICAgICAgICAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlOwogICAgICAgICAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTsKCiAgICAgICAgICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nCiAgICAgICAgICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuCiAgICAgICAgICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guCiAgICAgICAgICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsKCiAgICAgICAgICAvLyB3aGVuIHBpcGluZywgd2Ugb25seSBjYXJlIGFib3V0ICdyZWFkYWJsZScgZXZlbnRzIHRoYXQgaGFwcGVuCiAgICAgICAgICAvLyBhZnRlciByZWFkKClpbmcgYWxsIHRoZSBieXRlcyBhbmQgbm90IGdldHRpbmcgYW55IHB1c2hiYWNrLgogICAgICAgICAgdGhpcy5yYW5PdXQgPSBmYWxzZTsKCiAgICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpcwogICAgICAgICAgdGhpcy5hd2FpdERyYWluID0gMDsKCiAgICAgICAgICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkCiAgICAgICAgICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7CgogICAgICAgICAgdGhpcy5kZWNvZGVyID0gbnVsbDsKICAgICAgICAgIHRoaXMuZW5jb2RpbmcgPSBudWxsOwogICAgICAgICAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHsKICAgICAgICAgICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7CiAgICAgICAgICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7CgogICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTsKCiAgICAgICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7CgogICAgICAgICAgLy8gbGVnYWN5CiAgICAgICAgICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTsKCiAgICAgICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkOwoKICAgICAgICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpOwogICAgICAgIH0KCiAgICAgICAgLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuCiAgICAgICAgLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsCiAgICAgICAgLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZAogICAgICAgIC8vIHdyaXRlKCkgc29tZSBtb3JlLgogICAgICAgIFJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykgewogICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKCiAgICAgICAgICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykgewogICAgICAgICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZzsKICAgICAgICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykgewogICAgICAgICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTsKICAgICAgICAgICAgICBlbmNvZGluZyA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgZmFsc2UpOwogICAgICAgIH07CgogICAgICAgIC8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpCiAgICAgICAgUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CiAgICAgICAgICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssICcnLCB0cnVlKTsKICAgICAgICB9OwoKICAgICAgICBSZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTsKICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCkgewogICAgICAgICAgdmFyIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7CiAgICAgICAgICBpZiAoZXIpIHsKICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwogICAgICAgICAgfSBlbHNlIGlmIChjaHVuayA9PT0gbnVsbCkgewogICAgICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7CiAgICAgICAgICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkgewogICAgICAgICAgICBpZiAoc3RhdGUuZW5kZWQgJiYgIWFkZFRvRnJvbnQpIHsKICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKTsKICAgICAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRFbWl0dGVkICYmIGFkZFRvRnJvbnQpIHsKICAgICAgICAgICAgICB2YXIgX2UgPSBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50Jyk7CiAgICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgX2UpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBza2lwQWRkOwogICAgICAgICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFhZGRUb0Zyb250ICYmICFlbmNvZGluZykgewogICAgICAgICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTsKICAgICAgICAgICAgICAgIHNraXBBZGQgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBjaHVuay5sZW5ndGggPT09IDA7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoIWFkZFRvRnJvbnQpIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgLy8gRG9uJ3QgYWRkIHRvIHRoZSBidWZmZXIgaWYgd2UndmUgZGVjb2RlZCB0byBhbiBlbXB0eSBzdHJpbmcgY2h1bmsgYW5kCiAgICAgICAgICAgICAgLy8gd2UncmUgbm90IGluIG9iamVjdCBtb2RlCiAgICAgICAgICAgICAgaWYgKCFza2lwQWRkKSB7CiAgICAgICAgICAgICAgICAvLyBpZiB3ZSB3YW50IHRoZSBkYXRhIG5vdywganVzdCBlbWl0IGl0LgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7CiAgICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspOwogICAgICAgICAgICAgICAgICBzdHJlYW0ucmVhZCgwKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uCiAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTsKCiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkgewogICAgICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7CiAgICAgICAgfQoKICAgICAgICAvLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLgogICAgICAgIC8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lCiAgICAgICAgLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsCiAgICAgICAgLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGEKICAgICAgICAvLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXQKICAgICAgICAvLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlcgogICAgICAgIC8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuCiAgICAgICAgZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7CiAgICAgICAgICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApOwogICAgICAgIH0KCiAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuCiAgICAgICAgUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykgewogICAgICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTsKICAgICAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwoKICAgICAgICAvLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CCiAgICAgICAgdmFyIE1BWF9IV00gPSAweDgwMDAwMDsKICAgICAgICBmdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7CiAgICAgICAgICBpZiAobiA+PSBNQVhfSFdNKSB7CiAgICAgICAgICAgIG4gPSBNQVhfSFdNOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluCiAgICAgICAgICAgIC8vIHRpbnkgYW1vdW50cwogICAgICAgICAgICBuLS07CiAgICAgICAgICAgIG4gfD0gbiA+Pj4gMTsKICAgICAgICAgICAgbiB8PSBuID4+PiAyOwogICAgICAgICAgICBuIHw9IG4gPj4+IDQ7CiAgICAgICAgICAgIG4gfD0gbiA+Pj4gODsKICAgICAgICAgICAgbiB8PSBuID4+PiAxNjsKICAgICAgICAgICAgbisrOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgfQoKICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZwogICAgICAgIC8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuCiAgICAgICAgZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkgewogICAgICAgICAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwOwogICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxOwogICAgICAgICAgaWYgKG4gIT09IG4pIHsKICAgICAgICAgICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lCiAgICAgICAgICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICAgIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLgogICAgICAgICAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7CiAgICAgICAgICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuOwogICAgICAgICAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2gKICAgICAgICAgIGlmICghc3RhdGUuZW5kZWQpIHsKICAgICAgICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gc3RhdGUubGVuZ3RoOwogICAgICAgIH0KCiAgICAgICAgLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy4KICAgICAgICBSZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICBkZWJ1ZygncmVhZCcsIG4pOwogICAgICAgICAgbiA9IHBhcnNlSW50KG4sIDEwKTsKICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CiAgICAgICAgICB2YXIgbk9yaWcgPSBuOwoKICAgICAgICAgIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTsKCiAgICAgICAgICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlCiAgICAgICAgICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyCiAgICAgICAgICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi4KICAgICAgICAgIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7CiAgICAgICAgICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTsKICAgICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTsKCiAgICAgICAgICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuCiAgICAgICAgICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgewogICAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZQogICAgICAgICAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluCiAgICAgICAgICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkCiAgICAgICAgICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlCiAgICAgICAgICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlbgogICAgICAgICAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guCiAgICAgICAgICAvLwogICAgICAgICAgLy8gU28sIHRoZSBzdGVwcyBhcmU6CiAgICAgICAgICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvCiAgICAgICAgICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLgogICAgICAgICAgLy8KICAgICAgICAgIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuCiAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXMKICAgICAgICAgIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhbgogICAgICAgICAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZQogICAgICAgICAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy4KICAgICAgICAgIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbAogICAgICAgICAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdAogICAgICAgICAgLy8gJ3JlYWRhYmxlJyBldGMuCiAgICAgICAgICAvLwogICAgICAgICAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLgoKICAgICAgICAgIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy4KICAgICAgICAgIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7CiAgICAgICAgICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7CgogICAgICAgICAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lCiAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7CiAgICAgICAgICAgIGRvUmVhZCA9IHRydWU7CiAgICAgICAgICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHkKICAgICAgICAgIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS4KICAgICAgICAgIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7CiAgICAgICAgICAgIGRvUmVhZCA9IGZhbHNlOwogICAgICAgICAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7CiAgICAgICAgICB9IGVsc2UgaWYgKGRvUmVhZCkgewogICAgICAgICAgICBkZWJ1ZygnZG8gcmVhZCcpOwogICAgICAgICAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgc3RhdGUuc3luYyA9IHRydWU7CiAgICAgICAgICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuCiAgICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CiAgICAgICAgICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2QKICAgICAgICAgICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTsKICAgICAgICAgICAgc3RhdGUuc3luYyA9IGZhbHNlOwogICAgICAgICAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLAogICAgICAgICAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuCiAgICAgICAgICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgcmV0OwogICAgICAgICAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsOwoKICAgICAgICAgIGlmIChyZXQgPT09IG51bGwpIHsKICAgICAgICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKICAgICAgICAgICAgbiA9IDA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gbjsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vdwogICAgICAgICAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuCiAgICAgICAgICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CgogICAgICAgICAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suCiAgICAgICAgICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTsKCiAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHsKICAgICAgICAgIHZhciBlciA9IG51bGw7CiAgICAgICAgICBpZiAoIWlzQnVmZmVyKGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHsKICAgICAgICAgICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZXI7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHsKICAgICAgICAgIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuOwogICAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIpIHsKICAgICAgICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTsKICAgICAgICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgewogICAgICAgICAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTsKICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTsKCiAgICAgICAgICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC4KICAgICAgICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pOwogICAgICAgIH0KCiAgICAgICAgLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyCiAgICAgICAgLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyCiAgICAgICAgLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLgogICAgICAgIGZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKICAgICAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlOwogICAgICAgICAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHsKICAgICAgICAgICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpOwogICAgICAgICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlOwogICAgICAgICAgICBpZiAoc3RhdGUuc3luYykgbmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7CiAgICAgICAgICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpOwogICAgICAgICAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7CiAgICAgICAgICBmbG93KHN0cmVhbSk7CiAgICAgICAgfQoKICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LAogICAgICAgIC8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWQKICAgICAgICAvLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZgogICAgICAgIC8vIGl0J3MgaW4gcHJvZ3Jlc3MuCiAgICAgICAgLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSwKICAgICAgICAvLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LgogICAgICAgIGZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkgewogICAgICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkgewogICAgICAgICAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7CiAgICAgICAgICAgIG5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHsKICAgICAgICAgIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7CiAgICAgICAgICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHsKICAgICAgICAgICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7CiAgICAgICAgICAgIHN0cmVhbS5yZWFkKDApOwogICAgICAgICAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpCiAgICAgICAgICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy4KICAgICAgICAgICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICAvLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuCiAgICAgICAgLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC4KICAgICAgICAvLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgImxlbmd0aCIgaXMgc29tZXdoYXQKICAgICAgICAvLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuCiAgICAgICAgUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHsKICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTsKICAgICAgICB9OwoKICAgICAgICBSZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykgewogICAgICAgICAgdmFyIHNyYyA9IHRoaXM7CiAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwoKICAgICAgICAgIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUucGlwZXMgPSBkZXN0OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7CiAgICAgICAgICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpOwoKICAgICAgICAgIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSk7CgogICAgICAgICAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IGNsZWFudXA7CiAgICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgbmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTsKCiAgICAgICAgICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7CiAgICAgICAgICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSkgewogICAgICAgICAgICBkZWJ1Zygnb251bnBpcGUnKTsKICAgICAgICAgICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHsKICAgICAgICAgICAgICBjbGVhbnVwKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBvbmVuZCgpIHsKICAgICAgICAgICAgZGVidWcoJ29uZW5kJyk7CiAgICAgICAgICAgIGRlc3QuZW5kKCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlcgogICAgICAgICAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpCiAgICAgICAgICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpcwogICAgICAgICAgLy8gdG9vIHNsb3cuCiAgICAgICAgICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7CiAgICAgICAgICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pOwoKICAgICAgICAgIHZhciBjbGVhbmVkVXAgPSBmYWxzZTsKICAgICAgICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICAgICAgICAgIGRlYnVnKCdjbGVhbnVwJyk7CiAgICAgICAgICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW4KICAgICAgICAgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTsKICAgICAgICAgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpOwogICAgICAgICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pOwogICAgICAgICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOwogICAgICAgICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7CiAgICAgICAgICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpOwogICAgICAgICAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApOwogICAgICAgICAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpOwoKICAgICAgICAgICAgY2xlYW5lZFVwID0gdHJ1ZTsKCiAgICAgICAgICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXMKICAgICAgICAgICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0CiAgICAgICAgICAgIC8vIGZsb3dpbmcgYWdhaW4uCiAgICAgICAgICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy4KICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLgogICAgICAgICAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXAKICAgICAgICAgIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlCiAgICAgICAgICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLgogICAgICAgICAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLgogICAgICAgICAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTsKICAgICAgICAgIHNyYy5vbignZGF0YScsIG9uZGF0YSk7CiAgICAgICAgICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHsKICAgICAgICAgICAgZGVidWcoJ29uZGF0YScpOwogICAgICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7CiAgICAgICAgICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTsKICAgICAgICAgICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHsKICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGUKICAgICAgICAgICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZQogICAgICAgICAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuCiAgICAgICAgICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uCiAgICAgICAgICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkgewogICAgICAgICAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTsKICAgICAgICAgICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7CiAgICAgICAgICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3JjLnBhdXNlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC4KICAgICAgICAgIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy4KICAgICAgICAgIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHsKICAgICAgICAgICAgZGVidWcoJ29uZXJyb3InLCBlcik7CiAgICAgICAgICAgIHVucGlwZSgpOwogICAgICAgICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOwogICAgICAgICAgICBpZiAobGlzdGVuZXJDb3VudCQxKGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy4KICAgICAgICAgIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTsKCiAgICAgICAgICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLgogICAgICAgICAgZnVuY3Rpb24gb25jbG9zZSgpIHsKICAgICAgICAgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpOwogICAgICAgICAgICB1bnBpcGUoKTsKICAgICAgICAgIH0KICAgICAgICAgIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTsKICAgICAgICAgIGZ1bmN0aW9uIG9uZmluaXNoKCkgewogICAgICAgICAgICBkZWJ1Zygnb25maW5pc2gnKTsKICAgICAgICAgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTsKICAgICAgICAgICAgdW5waXBlKCk7CiAgICAgICAgICB9CiAgICAgICAgICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTsKCiAgICAgICAgICBmdW5jdGlvbiB1bnBpcGUoKSB7CiAgICAgICAgICAgIGRlYnVnKCd1bnBpcGUnKTsKICAgICAgICAgICAgc3JjLnVucGlwZShkZXN0KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0bwogICAgICAgICAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTsKCiAgICAgICAgICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuCiAgICAgICAgICBpZiAoIXN0YXRlLmZsb3dpbmcpIHsKICAgICAgICAgICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7CiAgICAgICAgICAgIHNyYy5yZXN1bWUoKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZGVzdDsKICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTsKICAgICAgICAgICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7CiAgICAgICAgICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07CiAgICAgICAgICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIHNyYy5saXN0ZW5lcnMoJ2RhdGEnKS5sZW5ndGgpIHsKICAgICAgICAgICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTsKICAgICAgICAgICAgICBmbG93KHNyYyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICBSZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CgogICAgICAgICAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLgogICAgICAgICAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzOwoKICAgICAgICAgIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS4KICAgICAgICAgIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7CiAgICAgICAgICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLgogICAgICAgICAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7CgogICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlczsKCiAgICAgICAgICAgIC8vIGdvdCBhIG1hdGNoLgogICAgICAgICAgICBzdGF0ZS5waXBlcyA9IG51bGw7CiAgICAgICAgICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwOwogICAgICAgICAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLgoKICAgICAgICAgIGlmICghZGVzdCkgewogICAgICAgICAgICAvLyByZW1vdmUgYWxsLgogICAgICAgICAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlczsKICAgICAgICAgICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7CiAgICAgICAgICAgIHN0YXRlLnBpcGVzID0gbnVsbDsKICAgICAgICAgICAgc3RhdGUucGlwZXNDb3VudCA9IDA7CiAgICAgICAgICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsZW47IF9pKyspIHsKICAgICAgICAgICAgICBkZXN0c1tfaV0uZW1pdCgndW5waXBlJywgdGhpcyk7CiAgICAgICAgICAgIH1yZXR1cm4gdGhpczsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLgogICAgICAgICAgdmFyIGkgPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTsKICAgICAgICAgIGlmIChpID09PSAtMSkgcmV0dXJuIHRoaXM7CgogICAgICAgICAgc3RhdGUucGlwZXMuc3BsaWNlKGksIDEpOwogICAgICAgICAgc3RhdGUucGlwZXNDb3VudCAtPSAxOwogICAgICAgICAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07CgogICAgICAgICAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTsKCiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwoKICAgICAgICAvLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yCiAgICAgICAgLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmcKICAgICAgICBSZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7CiAgICAgICAgICB2YXIgcmVzID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7CgogICAgICAgICAgaWYgKGV2ID09PSAnZGF0YScpIHsKICAgICAgICAgICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkCiAgICAgICAgICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpOwogICAgICAgICAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykgewogICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwogICAgICAgICAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7CiAgICAgICAgICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlOwogICAgICAgICAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOwogICAgICAgICAgICAgIGlmICghc3RhdGUucmVhZGluZykgewogICAgICAgICAgICAgICAgbmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH07CiAgICAgICAgUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uOwoKICAgICAgICBmdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHsKICAgICAgICAgIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTsKICAgICAgICAgIHNlbGYucmVhZCgwKTsKICAgICAgICB9CgogICAgICAgIC8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUEkKICAgICAgICAvLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuCiAgICAgICAgUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CiAgICAgICAgICBpZiAoIXN0YXRlLmZsb3dpbmcpIHsKICAgICAgICAgICAgZGVidWcoJ3Jlc3VtZScpOwogICAgICAgICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTsKICAgICAgICAgICAgcmVzdW1lKHRoaXMsIHN0YXRlKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7CiAgICAgICAgICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkgewogICAgICAgICAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlOwogICAgICAgICAgICBuZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkgewogICAgICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7CiAgICAgICAgICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7CiAgICAgICAgICAgIHN0cmVhbS5yZWFkKDApOwogICAgICAgICAgfQoKICAgICAgICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlOwogICAgICAgICAgc3RhdGUuYXdhaXREcmFpbiA9IDA7CiAgICAgICAgICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7CiAgICAgICAgICBmbG93KHN0cmVhbSk7CiAgICAgICAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7CiAgICAgICAgfQoKICAgICAgICBSZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTsKICAgICAgICAgIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7CiAgICAgICAgICAgIGRlYnVnKCdwYXVzZScpOwogICAgICAgICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5lbWl0KCdwYXVzZScpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKICAgICAgICAgIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7CiAgICAgICAgICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fQogICAgICAgIH0KCiAgICAgICAgLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS4KICAgICAgICAvLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuCiAgICAgICAgLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuCiAgICAgICAgUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7CiAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwogICAgICAgICAgdmFyIHBhdXNlZCA9IGZhbHNlOwoKICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTsKICAgICAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7CiAgICAgICAgICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTsKICAgICAgICAgICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBzZWxmLnB1c2goY2h1bmspOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzZWxmLnB1c2gobnVsbCk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHsKICAgICAgICAgICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpOwogICAgICAgICAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTsKCiAgICAgICAgICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZQogICAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47CgogICAgICAgICAgICB2YXIgcmV0ID0gc2VsZi5wdXNoKGNodW5rKTsKICAgICAgICAgICAgaWYgKCFyZXQpIHsKICAgICAgICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgICAgICAgIHN0cmVhbS5wYXVzZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuCiAgICAgICAgICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy4KICAgICAgICAgIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7CiAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9KGkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLgogICAgICAgICAgdmFyIGV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTsKICAgICAgICAgIGZvckVhY2goZXZlbnRzLCBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgc3RyZWFtLm9uKGV2LCBzZWxmLmVtaXQuYmluZChzZWxmLCBldikpOwogICAgICAgICAgfSk7CgogICAgICAgICAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZQogICAgICAgICAgLy8gdW5kZXJseWluZyBzdHJlYW0uCiAgICAgICAgICBzZWxmLl9yZWFkID0gZnVuY3Rpb24gKG4pIHsKICAgICAgICAgICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTsKICAgICAgICAgICAgaWYgKHBhdXNlZCkgewogICAgICAgICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgICAgICAgICAgIHN0cmVhbS5yZXN1bWUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKCiAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICB9OwoKICAgICAgICAvLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuCiAgICAgICAgUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7CgogICAgICAgIC8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy4KICAgICAgICAvLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LgogICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nCiAgICAgICAgLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS4KICAgICAgICBmdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkgewogICAgICAgICAgLy8gbm90aGluZyBidWZmZXJlZAogICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7CgogICAgICAgICAgdmFyIHJldDsKICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkgewogICAgICAgICAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3QKICAgICAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpOwogICAgICAgICAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0CiAgICAgICAgICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfQoKICAgICAgICAvLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuCiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmcKICAgICAgICAvLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LgogICAgICAgIGZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7CiAgICAgICAgICB2YXIgcmV0OwogICAgICAgICAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHsKICAgICAgICAgICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3MKICAgICAgICAgICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7CiAgICAgICAgICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7CiAgICAgICAgICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkgewogICAgICAgICAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2gKICAgICAgICAgICAgcmV0ID0gbGlzdC5zaGlmdCgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyCiAgICAgICAgICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9CgogICAgICAgIC8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEKICAgICAgICAvLyBjaHVua3MuCiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmcKICAgICAgICAvLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LgogICAgICAgIGZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHsKICAgICAgICAgIHZhciBwID0gbGlzdC5oZWFkOwogICAgICAgICAgdmFyIGMgPSAxOwogICAgICAgICAgdmFyIHJldCA9IHAuZGF0YTsKICAgICAgICAgIG4gLT0gcmV0Lmxlbmd0aDsKICAgICAgICAgIHdoaWxlIChwID0gcC5uZXh0KSB7CiAgICAgICAgICAgIHZhciBzdHIgPSBwLmRhdGE7CiAgICAgICAgICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47CiAgICAgICAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7CiAgICAgICAgICAgIG4gLT0gbmI7CiAgICAgICAgICAgIGlmIChuID09PSAwKSB7CiAgICAgICAgICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICArK2M7CiAgICAgICAgICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsaXN0LmhlYWQgPSBwOwogICAgICAgICAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKytjOwogICAgICAgICAgfQogICAgICAgICAgbGlzdC5sZW5ndGggLT0gYzsKICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfQoKICAgICAgICAvLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuCiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmcKICAgICAgICAvLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LgogICAgICAgIGZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHsKICAgICAgICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7CiAgICAgICAgICB2YXIgcCA9IGxpc3QuaGVhZDsKICAgICAgICAgIHZhciBjID0gMTsKICAgICAgICAgIHAuZGF0YS5jb3B5KHJldCk7CiAgICAgICAgICBuIC09IHAuZGF0YS5sZW5ndGg7CiAgICAgICAgICB3aGlsZSAocCA9IHAubmV4dCkgewogICAgICAgICAgICB2YXIgYnVmID0gcC5kYXRhOwogICAgICAgICAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuOwogICAgICAgICAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7CiAgICAgICAgICAgIG4gLT0gbmI7CiAgICAgICAgICAgIGlmIChuID09PSAwKSB7CiAgICAgICAgICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICArK2M7CiAgICAgICAgICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsaXN0LmhlYWQgPSBwOwogICAgICAgICAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKytjOwogICAgICAgICAgfQogICAgICAgICAgbGlzdC5sZW5ndGggLT0gYzsKICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKCiAgICAgICAgICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhCiAgICAgICAgICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uCiAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCciZW5kUmVhZGFibGUoKSIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTsKCiAgICAgICAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHsKICAgICAgICAgICAgc3RhdGUuZW5kZWQgPSB0cnVlOwogICAgICAgICAgICBuZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkgewogICAgICAgICAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuCiAgICAgICAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlOwogICAgICAgICAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTsKICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2VuZCcpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZm9yRWFjaCh4cywgZikgewogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgZih4c1tpXSwgaSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KCiAgICAgICAgLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuCiAgICAgICAgV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7CiAgICAgICAgaW5oZXJpdHMkMShXcml0YWJsZSwgRXZlbnRFbWl0dGVyKTsKCiAgICAgICAgZnVuY3Rpb24gbm9wKCkge30KCiAgICAgICAgZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikgewogICAgICAgICAgdGhpcy5jaHVuayA9IGNodW5rOwogICAgICAgICAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nOwogICAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNiOwogICAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2J1ZmZlcicsIHsKICAgICAgICAgICAgZ2V0OiBkZXByZWNhdGUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpOwogICAgICAgICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicpCiAgICAgICAgICB9KTsKICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAgICAgICAgIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbQogICAgICAgICAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLgogICAgICAgICAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7CgogICAgICAgICAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7CgogICAgICAgICAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZQogICAgICAgICAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWYKICAgICAgICAgIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKCkKICAgICAgICAgIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7CiAgICAgICAgICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0OwogICAgICAgICAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtIHx8IGh3bSA9PT0gMCA/IGh3bSA6IGRlZmF1bHRId207CgogICAgICAgICAgLy8gY2FzdCB0byBpbnRzLgogICAgICAgICAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gfiB+dGhpcy5oaWdoV2F0ZXJNYXJrOwoKICAgICAgICAgIHRoaXMubmVlZERyYWluID0gZmFsc2U7CiAgICAgICAgICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKQogICAgICAgICAgdGhpcy5lbmRpbmcgPSBmYWxzZTsKICAgICAgICAgIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWQKICAgICAgICAgIHRoaXMuZW5kZWQgPSBmYWxzZTsKICAgICAgICAgIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZAogICAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlOwoKICAgICAgICAgIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlPwogICAgICAgICAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nCiAgICAgICAgICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLgogICAgICAgICAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTsKICAgICAgICAgIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTsKCiAgICAgICAgICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nCiAgICAgICAgICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuCiAgICAgICAgICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guCiAgICAgICAgICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsKCiAgICAgICAgICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudAogICAgICAgICAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZwogICAgICAgICAgLy8gc29ja2V0IG9yIGZpbGUuCiAgICAgICAgICB0aGlzLmxlbmd0aCA9IDA7CgogICAgICAgICAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS4KICAgICAgICAgIHRoaXMud3JpdGluZyA9IGZhbHNlOwoKICAgICAgICAgIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGwKICAgICAgICAgIHRoaXMuY29ya2VkID0gMDsKCiAgICAgICAgICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSwKICAgICAgICAgIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55CiAgICAgICAgICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCAibGF0ZXIiIHNob3VsZCBnZW5lcmFsbHkgYWxzbwogICAgICAgICAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuCiAgICAgICAgICB0aGlzLnN5bmMgPSB0cnVlOwoKICAgICAgICAgIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2gKICAgICAgICAgIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0CiAgICAgICAgICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi4KICAgICAgICAgIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlOwoKICAgICAgICAgIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYikKICAgICAgICAgIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikgewogICAgICAgICAgICBvbndyaXRlKHN0cmVhbSwgZXIpOwogICAgICAgICAgfTsKCiAgICAgICAgICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYikKICAgICAgICAgIHRoaXMud3JpdGVjYiA9IG51bGw7CgogICAgICAgICAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLgogICAgICAgICAgdGhpcy53cml0ZWxlbiA9IDA7CgogICAgICAgICAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsOwogICAgICAgICAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsKCiAgICAgICAgICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrcwogICAgICAgICAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkCiAgICAgICAgICB0aGlzLnBlbmRpbmdjYiA9IDA7CgogICAgICAgICAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNicwogICAgICAgICAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXMKICAgICAgICAgIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTsKCiAgICAgICAgICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpbgogICAgICAgICAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTsKCiAgICAgICAgICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0cwogICAgICAgICAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7CgogICAgICAgICAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5cwogICAgICAgICAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3bwogICAgICAgICAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTsKICAgICAgICB9CgogICAgICAgIFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVHZXRCdWZmZXIoKSB7CiAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0OwogICAgICAgICAgdmFyIG91dCA9IFtdOwogICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHsKICAgICAgICAgICAgb3V0LnB1c2goY3VycmVudCk7CiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gb3V0OwogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykgewoKICAgICAgICAgIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdGhvdWdoIHRoZXkncmUgbm90CiAgICAgICAgICAvLyBpbnN0YW5jZW9mIFdyaXRhYmxlLCB0aGV5J3JlIGluc3RhbmNlb2YgUmVhZGFibGUuCiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV3JpdGFibGUpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7CgogICAgICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpOwoKICAgICAgICAgIC8vIGxlZ2FjeS4KICAgICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlOwoKICAgICAgICAgIGlmIChvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlOwoKICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7CiAgICAgICAgICB9CgogICAgICAgICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7CiAgICAgICAgfQoKICAgICAgICAvLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuCiAgICAgICAgV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpOwogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikgewogICAgICAgICAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTsKICAgICAgICAgIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiCiAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7CiAgICAgICAgICBuZXh0VGljayhjYiwgZXIpOwogICAgICAgIH0KCiAgICAgICAgLy8gSWYgd2UgZ2V0IHNvbWV0aGluZyB0aGF0IGlzIG5vdCBhIGJ1ZmZlciwgc3RyaW5nLCBudWxsLCBvciB1bmRlZmluZWQsCiAgICAgICAgLy8gYW5kIHdlJ3JlIG5vdCBpbiBvYmplY3RNb2RlLCB0aGVuIHRoYXQncyBhbiBlcnJvci4KICAgICAgICAvLyBPdGhlcndpc2Ugc3RyZWFtIGNodW5rcyBhcmUgYWxsIGNvbnNpZGVyZWQgdG8gYmUgb2YgbGVuZ3RoPTEsIGFuZCB0aGUKICAgICAgICAvLyB3YXRlcm1hcmtzIGRldGVybWluZSBob3cgbWFueSBvYmplY3RzIHRvIGtlZXAgaW4gdGhlIGJ1ZmZlciwgcmF0aGVyIHRoYW4KICAgICAgICAvLyBob3cgbWFueSBieXRlcyBvciBjaGFyYWN0ZXJzLgogICAgICAgIGZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7CiAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlOwogICAgICAgICAgdmFyIGVyID0gZmFsc2U7CiAgICAgICAgICAvLyBBbHdheXMgdGhyb3cgZXJyb3IgaWYgYSBudWxsIGlzIHdyaXR0ZW4KICAgICAgICAgIC8vIGlmIHdlIGFyZSBub3QgaW4gb2JqZWN0IG1vZGUgdGhlbiB0aHJvdwogICAgICAgICAgLy8gaWYgaXQgaXMgbm90IGEgYnVmZmVyLCBzdHJpbmcsIG9yIHVuZGVmaW5lZC4KICAgICAgICAgIGlmIChjaHVuayA9PT0gbnVsbCkgewogICAgICAgICAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7CiAgICAgICAgICB9IGVsc2UgaWYgKCFCdWZmZXIuaXNCdWZmZXIoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkgewogICAgICAgICAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChlcikgewogICAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7CiAgICAgICAgICAgIG5leHRUaWNrKGNiLCBlcik7CiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdmFsaWQ7CiAgICAgICAgfQoKICAgICAgICBXcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTsKICAgICAgICAgIHZhciByZXQgPSBmYWxzZTsKCiAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNiID0gZW5jb2Rpbmc7CiAgICAgICAgICAgIGVuY29kaW5nID0gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nOwoKICAgICAgICAgIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wOwoKICAgICAgICAgIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAodmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkgewogICAgICAgICAgICBzdGF0ZS5wZW5kaW5nY2IrKzsKICAgICAgICAgICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBjYik7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9OwoKICAgICAgICBXcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7CgogICAgICAgICAgc3RhdGUuY29ya2VkKys7CiAgICAgICAgfTsKCiAgICAgICAgV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7CgogICAgICAgICAgaWYgKHN0YXRlLmNvcmtlZCkgewogICAgICAgICAgICBzdGF0ZS5jb3JrZWQtLTsKCiAgICAgICAgICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBXcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7CiAgICAgICAgICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS4KICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpOwogICAgICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZzsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHsKICAgICAgICAgIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjaHVuazsKICAgICAgICB9CgogICAgICAgIC8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpcwogICAgICAgIC8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlCiAgICAgICAgLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy4KICAgICAgICBmdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpIHsKICAgICAgICAgIGNodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7CgogICAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIGVuY29kaW5nID0gJ2J1ZmZlcic7CiAgICAgICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7CgogICAgICAgICAgc3RhdGUubGVuZ3RoICs9IGxlbjsKCiAgICAgICAgICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyazsKICAgICAgICAgIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLgogICAgICAgICAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7CgogICAgICAgICAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7CiAgICAgICAgICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDsKICAgICAgICAgICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKTsKICAgICAgICAgICAgaWYgKGxhc3QpIHsKICAgICAgICAgICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHsKICAgICAgICAgIHN0YXRlLndyaXRlbGVuID0gbGVuOwogICAgICAgICAgc3RhdGUud3JpdGVjYiA9IGNiOwogICAgICAgICAgc3RhdGUud3JpdGluZyA9IHRydWU7CiAgICAgICAgICBzdGF0ZS5zeW5jID0gdHJ1ZTsKICAgICAgICAgIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTsKICAgICAgICAgIHN0YXRlLnN5bmMgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHsKICAgICAgICAgIC0tc3RhdGUucGVuZGluZ2NiOwogICAgICAgICAgaWYgKHN5bmMpIG5leHRUaWNrKGNiLCBlcik7ZWxzZSBjYihlcik7CgogICAgICAgICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7CiAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHsKICAgICAgICAgIHN0YXRlLndyaXRpbmcgPSBmYWxzZTsKICAgICAgICAgIHN0YXRlLndyaXRlY2IgPSBudWxsOwogICAgICAgICAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuOwogICAgICAgICAgc3RhdGUud3JpdGVsZW4gPSAwOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7CiAgICAgICAgICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7CiAgICAgICAgICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7CiAgICAgICAgICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiOwoKICAgICAgICAgIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7CgogICAgICAgICAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHsKICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXQKICAgICAgICAgICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7CgogICAgICAgICAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7CiAgICAgICAgICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzeW5jKSB7CiAgICAgICAgICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki8KICAgICAgICAgICAgICAgIG5leHRUaWNrKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7CiAgICAgICAgICAgICAgLyo8L3JlcGxhY2VtZW50PiovCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHsKICAgICAgICAgIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTsKICAgICAgICAgIHN0YXRlLnBlbmRpbmdjYi0tOwogICAgICAgICAgY2IoKTsKICAgICAgICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpOwogICAgICAgIH0KCiAgICAgICAgLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3QKICAgICAgICAvLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuCiAgICAgICAgLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci4KICAgICAgICBmdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkgewogICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHsKICAgICAgICAgICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7CiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXQKICAgICAgICBmdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7CiAgICAgICAgICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTsKICAgICAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDsKCiAgICAgICAgICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkgewogICAgICAgICAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpCiAgICAgICAgICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7CiAgICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7CiAgICAgICAgICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7CiAgICAgICAgICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5OwoKICAgICAgICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgICAgICAgd2hpbGUgKGVudHJ5KSB7CiAgICAgICAgICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5OwogICAgICAgICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDsKICAgICAgICAgICAgICBjb3VudCArPSAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7CgogICAgICAgICAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZQogICAgICAgICAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGUKICAgICAgICAgICAgc3RhdGUucGVuZGluZ2NiKys7CiAgICAgICAgICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsOwogICAgICAgICAgICBpZiAoaG9sZGVyLm5leHQpIHsKICAgICAgICAgICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDsKICAgICAgICAgICAgICBob2xkZXIubmV4dCA9IG51bGw7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lCiAgICAgICAgICAgIHdoaWxlIChlbnRyeSkgewogICAgICAgICAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rOwogICAgICAgICAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nOwogICAgICAgICAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrOwogICAgICAgICAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDsKCiAgICAgICAgICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTsKICAgICAgICAgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7CiAgICAgICAgICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW4KICAgICAgICAgICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLgogICAgICAgICAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHkKICAgICAgICAgICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS4KICAgICAgICAgICAgICBpZiAoc3RhdGUud3JpdGluZykgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDsKICAgICAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5OwogICAgICAgICAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgICAgICAgICBjYihuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTsKICAgICAgICB9OwoKICAgICAgICBXcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7CgogICAgICAgIFdyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTsKCiAgICAgICAgICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNiID0gY2h1bms7CiAgICAgICAgICAgIGNodW5rID0gbnVsbDsKICAgICAgICAgICAgZW5jb2RpbmcgPSBudWxsOwogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2IgPSBlbmNvZGluZzsKICAgICAgICAgICAgZW5jb2RpbmcgPSBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7CgogICAgICAgICAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3MKICAgICAgICAgIGlmIChzdGF0ZS5jb3JrZWQpIHsKICAgICAgICAgICAgc3RhdGUuY29ya2VkID0gMTsKICAgICAgICAgICAgdGhpcy51bmNvcmsoKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuCiAgICAgICAgICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7CiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkgewogICAgICAgICAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZzsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7CiAgICAgICAgICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkKSB7CiAgICAgICAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkgewogICAgICAgICAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTsKICAgICAgICAgIGlmIChuZWVkKSB7CiAgICAgICAgICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHsKICAgICAgICAgICAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7CiAgICAgICAgICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlOwogICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBuZWVkOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHsKICAgICAgICAgIHN0YXRlLmVuZGluZyA9IHRydWU7CiAgICAgICAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTsKICAgICAgICAgIGlmIChjYikgewogICAgICAgICAgICBpZiAoc3RhdGUuZmluaXNoZWQpIG5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7CiAgICAgICAgICB9CiAgICAgICAgICBzdGF0ZS5lbmRlZCA9IHRydWU7CiAgICAgICAgICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIC8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdAogICAgICAgIC8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbQogICAgICAgIGZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHsKICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDsKICAgICAgICAgIHRoaXMuZW50cnkgPSBudWxsOwoKICAgICAgICAgIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICB2YXIgZW50cnkgPSBfdGhpcy5lbnRyeTsKICAgICAgICAgICAgX3RoaXMuZW50cnkgPSBudWxsOwogICAgICAgICAgICB3aGlsZSAoZW50cnkpIHsKICAgICAgICAgICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjazsKICAgICAgICAgICAgICBzdGF0ZS5wZW5kaW5nY2ItLTsKICAgICAgICAgICAgICBjYihlcnIpOwogICAgICAgICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7CiAgICAgICAgICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBfdGhpczsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBfdGhpczsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGluaGVyaXRzJDEoRHVwbGV4LCBSZWFkYWJsZSk7CgogICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoV3JpdGFibGUucHJvdG90eXBlKTsKICAgICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHsKICAgICAgICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdOwogICAgICAgICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBEdXBsZXgob3B0aW9ucykgewogICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpOwoKICAgICAgICAgIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7CiAgICAgICAgICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpOwoKICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7CgogICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTsKCiAgICAgICAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlOwogICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7CgogICAgICAgICAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7CiAgICAgICAgfQoKICAgICAgICAvLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyCiAgICAgICAgZnVuY3Rpb24gb25lbmQoKSB7CiAgICAgICAgICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLAogICAgICAgICAgLy8gdGhlbiB3ZSdyZSBvay4KICAgICAgICAgIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuOwoKICAgICAgICAgIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi4KICAgICAgICAgIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLgogICAgICAgICAgbmV4dFRpY2sob25FbmROVCwgdGhpcyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHsKICAgICAgICAgIHNlbGYuZW5kKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvCiAgICAgICAgaW5oZXJpdHMkMShUcmFuc2Zvcm0sIER1cGxleCk7CgogICAgICAgIGZ1bmN0aW9uIFRyYW5zZm9ybVN0YXRlKHN0cmVhbSkgewogICAgICAgICAgdGhpcy5hZnRlclRyYW5zZm9ybSA9IGZ1bmN0aW9uIChlciwgZGF0YSkgewogICAgICAgICAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7CiAgICAgICAgICB9OwoKICAgICAgICAgIHRoaXMubmVlZFRyYW5zZm9ybSA9IGZhbHNlOwogICAgICAgICAgdGhpcy50cmFuc2Zvcm1pbmcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMud3JpdGVjYiA9IG51bGw7CiAgICAgICAgICB0aGlzLndyaXRlY2h1bmsgPSBudWxsOwogICAgICAgICAgdGhpcy53cml0ZWVuY29kaW5nID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHsKICAgICAgICAgIHZhciB0cyA9IHN0cmVhbS5fdHJhbnNmb3JtU3RhdGU7CiAgICAgICAgICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTsKCiAgICAgICAgICB2YXIgY2IgPSB0cy53cml0ZWNiOwoKICAgICAgICAgIGlmICghY2IpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vIHdyaXRlY2IgaW4gVHJhbnNmb3JtIGNsYXNzJykpOwoKICAgICAgICAgIHRzLndyaXRlY2h1bmsgPSBudWxsOwogICAgICAgICAgdHMud3JpdGVjYiA9IG51bGw7CgogICAgICAgICAgaWYgKGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkKSBzdHJlYW0ucHVzaChkYXRhKTsKCiAgICAgICAgICBjYihlcik7CgogICAgICAgICAgdmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlOwogICAgICAgICAgcnMucmVhZGluZyA9IGZhbHNlOwogICAgICAgICAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7CiAgICAgICAgICAgIHN0cmVhbS5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHsKICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTsKCiAgICAgICAgICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTsKCiAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IG5ldyBUcmFuc2Zvcm1TdGF0ZSh0aGlzKTsKCiAgICAgICAgICAvLyB3aGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuCiAgICAgICAgICB2YXIgc3RyZWFtID0gdGhpczsKCiAgICAgICAgICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC4KICAgICAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3MKICAgICAgICAgIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGUKICAgICAgICAgIC8vIHN5bmMgZ3VhcmQgZmxhZy4KICAgICAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlOwoKICAgICAgICAgIGlmIChvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtOwoKICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5vbmNlKCdwcmVmaW5pc2gnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlcikgewogICAgICAgICAgICAgIGRvbmUoc3RyZWFtLCBlcik7CiAgICAgICAgICAgIH0pO2Vsc2UgZG9uZShzdHJlYW0pOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBUcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7CiAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7CiAgICAgICAgICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTsKICAgICAgICB9OwoKICAgICAgICAvLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiEKICAgICAgICAvLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuCiAgICAgICAgLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay4KICAgICAgICAvLwogICAgICAgIC8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dAogICAgICAgIC8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzcwogICAgICAgIC8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3UKICAgICAgICAvLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLgogICAgICAgIFRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOwogICAgICAgIH07CgogICAgICAgIFRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHsKICAgICAgICAgIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlOwogICAgICAgICAgdHMud3JpdGVjYiA9IGNiOwogICAgICAgICAgdHMud3JpdGVjaHVuayA9IGNodW5rOwogICAgICAgICAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nOwogICAgICAgICAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHsKICAgICAgICAgICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKICAgICAgICAgICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS4KICAgICAgICAvLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLgogICAgICAgIC8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuCiAgICAgICAgVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTsKCiAgICAgICAgICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHsKICAgICAgICAgICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW4KICAgICAgICAgICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuCiAgICAgICAgICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlcikgewogICAgICAgICAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwoKICAgICAgICAgIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnMKICAgICAgICAgIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZAogICAgICAgICAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlOwogICAgICAgICAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTsKCiAgICAgICAgICBpZiAod3MubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpOwoKICAgICAgICAgIGlmICh0cy50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpOwoKICAgICAgICAgIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTsKICAgICAgICB9CgogICAgICAgIGluaGVyaXRzJDEoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7CiAgICAgICAgZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykgewogICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTsKCiAgICAgICAgICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTsKICAgICAgICB9CgogICAgICAgIFBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHsKICAgICAgICAgIGNiKG51bGwsIGNodW5rKTsKICAgICAgICB9OwoKICAgICAgICBpbmhlcml0cyQxKFN0cmVhbSwgRXZlbnRFbWl0dGVyKTsKICAgICAgICBTdHJlYW0uUmVhZGFibGUgPSBSZWFkYWJsZTsKICAgICAgICBTdHJlYW0uV3JpdGFibGUgPSBXcml0YWJsZTsKICAgICAgICBTdHJlYW0uRHVwbGV4ID0gRHVwbGV4OwogICAgICAgIFN0cmVhbS5UcmFuc2Zvcm0gPSBUcmFuc2Zvcm07CiAgICAgICAgU3RyZWFtLlBhc3NUaHJvdWdoID0gUGFzc1Rocm91Z2g7CgogICAgICAgIC8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54CiAgICAgICAgU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTsKCiAgICAgICAgLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudAogICAgICAgIC8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuCgogICAgICAgIGZ1bmN0aW9uIFN0cmVhbSgpIHsKICAgICAgICAgIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpOwogICAgICAgIH0KCiAgICAgICAgU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykgewogICAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXM7CgogICAgICAgICAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7CiAgICAgICAgICAgIGlmIChkZXN0LndyaXRhYmxlKSB7CiAgICAgICAgICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHsKICAgICAgICAgICAgICAgIHNvdXJjZS5wYXVzZSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHNvdXJjZS5vbignZGF0YScsIG9uZGF0YSk7CgogICAgICAgICAgZnVuY3Rpb24gb25kcmFpbigpIHsKICAgICAgICAgICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7CiAgICAgICAgICAgICAgc291cmNlLnJlc3VtZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTsKCiAgICAgICAgICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuCiAgICAgICAgICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS4KICAgICAgICAgIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5lbmQgIT09IGZhbHNlKSkgewogICAgICAgICAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTsKICAgICAgICAgICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBkaWRPbkVuZCA9IGZhbHNlOwogICAgICAgICAgZnVuY3Rpb24gb25lbmQoKSB7CiAgICAgICAgICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuOwogICAgICAgICAgICBkaWRPbkVuZCA9IHRydWU7CgogICAgICAgICAgICBkZXN0LmVuZCgpOwogICAgICAgICAgfQoKCiAgICAgICAgICBmdW5jdGlvbiBvbmNsb3NlKCkgewogICAgICAgICAgICBpZiAoZGlkT25FbmQpIHJldHVybjsKICAgICAgICAgICAgZGlkT25FbmQgPSB0cnVlOwoKICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy4KICAgICAgICAgIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHsKICAgICAgICAgICAgY2xlYW51cCgpOwogICAgICAgICAgICBpZiAoRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHsKICAgICAgICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLgogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpOwogICAgICAgICAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTsKCiAgICAgICAgICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLgogICAgICAgICAgZnVuY3Rpb24gY2xlYW51cCgpIHsKICAgICAgICAgICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTsKICAgICAgICAgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTsKCiAgICAgICAgICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpOwogICAgICAgICAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7CgogICAgICAgICAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7CiAgICAgICAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7CgogICAgICAgICAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApOwogICAgICAgICAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7CgogICAgICAgICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApOwogICAgICAgICAgfQoKICAgICAgICAgIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7CiAgICAgICAgICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7CgogICAgICAgICAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTsKCiAgICAgICAgICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpOwoKICAgICAgICAgIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpCiAgICAgICAgICByZXR1cm4gZGVzdDsKICAgICAgICB9OwoKICAgICAgICB2YXIgZnMgPSB7fTsKCiAgICAgICAgLyoKICAgICAgICBQREZBYnN0cmFjdFJlZmVyZW5jZSAtIGFic3RyYWN0IGNsYXNzIGZvciBQREYgcmVmZXJlbmNlCiAgICAgICAgKi8KCiAgICAgICAgY2xhc3MgUERGQWJzdHJhY3RSZWZlcmVuY2UgewogICAgICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzc2VzJyk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKgogICAgICAgIFBERk5hbWVUcmVlIC0gcmVwcmVzZW50cyBhIG5hbWUgdHJlZSBvYmplY3QKICAgICAgICAqLwoKICAgICAgICBjbGFzcyBQREZOYW1lVHJlZSB7CgogICAgICAgICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0ge307CiAgICAgICAgICB9CgogICAgICAgICAgYWRkKGtleSwgdmFsKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtc1trZXldID0gdmFsOwogICAgICAgICAgfQoKICAgICAgICAgIGdldChrZXkpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2tleV07CiAgICAgICAgICB9CgogICAgICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgICAgIC8vIE5lZWRzIHRvIGJlIHNvcnRlZCBieSBrZXkKICAgICAgICAgICAgY29uc3Qgc29ydGVkS2V5cyA9IChPYmplY3Qua2V5cyh0aGlzLl9pdGVtcykpLnNvcnQoKGEsIGIpID0+IGEubG9jYWxlQ29tcGFyZShiKSk7CgogICAgICAgICAgICBjb25zdCBvdXQgPSBbJzw8J107CiAgICAgICAgICAgIGlmIChzb3J0ZWRLZXlzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICBjb25zdCBmaXJzdCA9IHNvcnRlZEtleXNbMF0sIGxhc3QgPSBzb3J0ZWRLZXlzW3NvcnRlZEtleXMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgb3V0LnB1c2goYCAgL0xpbWl0cyAke1BERk9iamVjdC5jb252ZXJ0KFtuZXcgU3RyaW5nKGZpcnN0KSwgbmV3IFN0cmluZyhsYXN0KV0pfWApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG91dC5wdXNoKCcgIC9OYW1lcyBbJyk7CiAgICAgICAgICAgIGZvciAobGV0IGtleSBvZiBzb3J0ZWRLZXlzKSB7CiAgICAgICAgICAgICAgb3V0LnB1c2goYCAgICAke1BERk9iamVjdC5jb252ZXJ0KG5ldyBTdHJpbmcoa2V5KSl9ICR7UERGT2JqZWN0LmNvbnZlcnQodGhpcy5faXRlbXNba2V5XSl9YCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3V0LnB1c2goJ10nKTsKICAgICAgICAgICAgb3V0LnB1c2goJz4+Jyk7CiAgICAgICAgICAgIHJldHVybiBvdXQuam9pbignXG4nKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGNvbnN0IHBhZCA9IChzdHIsIGxlbmd0aCkgPT4gKEFycmF5KGxlbmd0aCArIDEpLmpvaW4oJzAnKSArIHN0cikuc2xpY2UoLWxlbmd0aCk7CgogICAgICAgIGNvbnN0IGVzY2FwYWJsZVJlID0gL1tcblxyXHRcYlxmXChcKVxcXS9nOwogICAgICAgIGNvbnN0IGVzY2FwYWJsZSA9IHsKICAgICAgICAgICdcbic6ICdcXG4nLAogICAgICAgICAgJ1xyJzogJ1xccicsCiAgICAgICAgICAnXHQnOiAnXFx0JywKICAgICAgICAgICdcYic6ICdcXGInLAogICAgICAgICAgJ1xmJzogJ1xcZicsCiAgICAgICAgICAnXFwnOiAnXFxcXCcsCiAgICAgICAgICAnKCc6ICdcXCgnLAogICAgICAgICAgJyknOiAnXFwpJwogICAgICAgIH07CgogICAgICAgIC8vIENvbnZlcnQgbGl0dGxlIGVuZGlhbiBVVEYtMTYgdG8gYmlnIGVuZGlhbgogICAgICAgIGNvbnN0IHN3YXBCeXRlcyA9IGZ1bmN0aW9uKGJ1ZmYpIHsKICAgICAgICAgIGNvbnN0IGwgPSBidWZmLmxlbmd0aDsKICAgICAgICAgIGlmIChsICYgMHgwMSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0J1ZmZlciBsZW5ndGggbXVzdCBiZSBldmVuJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgZW5kID0gbCAtIDE7IGkgPCBlbmQ7IGkgKz0gMikgewogICAgICAgICAgICAgIGNvbnN0IGEgPSBidWZmW2ldOwogICAgICAgICAgICAgIGJ1ZmZbaV0gPSBidWZmW2kgKyAxXTsKICAgICAgICAgICAgICBidWZmW2kgKyAxXSA9IGE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gYnVmZjsKICAgICAgICB9OwoKICAgICAgICBjbGFzcyBQREZPYmplY3QgewogICAgICAgICAgc3RhdGljIGNvbnZlcnQob2JqZWN0LCBlbmNyeXB0Rm4gPSBudWxsKSB7CiAgICAgICAgICAgIC8vIFN0cmluZyBsaXRlcmFscyBhcmUgY29udmVydGVkIHRvIHRoZSBQREYgbmFtZSB0eXBlCiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgIHJldHVybiBgLyR7b2JqZWN0fWA7CgogICAgICAgICAgICAgIC8vIFN0cmluZyBvYmplY3RzIGFyZSBjb252ZXJ0ZWQgdG8gUERGIHN0cmluZ3MgKFVURi0xNikKICAgICAgICAgICAgfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTdHJpbmcpIHsKICAgICAgICAgICAgICBsZXQgc3RyaW5nID0gb2JqZWN0OwogICAgICAgICAgICAgIC8vIERldGVjdCBpZiB0aGlzIGlzIGEgdW5pY29kZSBzdHJpbmcKICAgICAgICAgICAgICBsZXQgaXNVbmljb2RlID0gZmFsc2U7CiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGVuZCA9IHN0cmluZy5sZW5ndGg7IGkgPCBlbmQ7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KGkpID4gMHg3ZikgewogICAgICAgICAgICAgICAgICBpc1VuaWNvZGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIC8vIElmIHNvLCBlbmNvZGUgaXQgYXMgYmlnIGVuZGlhbiBVVEYtMTYKICAgICAgICAgICAgICBsZXQgc3RyaW5nQnVmZmVyOwogICAgICAgICAgICAgIGlmIChpc1VuaWNvZGUpIHsKICAgICAgICAgICAgICAgIHN0cmluZ0J1ZmZlciA9IHN3YXBCeXRlcyhCdWZmZXIuZnJvbShgXHVmZWZmJHtzdHJpbmd9YCwgJ3V0ZjE2bGUnKSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0cmluZ0J1ZmZlciA9IEJ1ZmZlci5mcm9tKHN0cmluZy52YWx1ZU9mKCksICdhc2NpaScpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgLy8gRW5jcnlwdCB0aGUgc3RyaW5nIHdoZW4gbmVjZXNzYXJ5CiAgICAgICAgICAgICAgaWYgKGVuY3J5cHRGbikgewogICAgICAgICAgICAgICAgc3RyaW5nID0gZW5jcnlwdEZuKHN0cmluZ0J1ZmZlcikudG9TdHJpbmcoJ2JpbmFyeScpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmdCdWZmZXIudG9TdHJpbmcoJ2JpbmFyeScpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgYXMgcmVxdWlyZWQgYnkgdGhlIHNwZWMKICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShlc2NhcGFibGVSZSwgYyA9PiBlc2NhcGFibGVbY10pOwoKICAgICAgICAgICAgICByZXR1cm4gYCgke3N0cmluZ30pYDsKCiAgICAgICAgICAgICAgLy8gQnVmZmVycyBhcmUgY29udmVydGVkIHRvIFBERiBoZXggc3RyaW5ncwogICAgICAgICAgICB9IGVsc2UgaWYgKGlzQnVmZmVyKG9iamVjdCkpIHsKICAgICAgICAgICAgICByZXR1cm4gYDwke29iamVjdC50b1N0cmluZygnaGV4Jyl9PmA7CiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgUERGQWJzdHJhY3RSZWZlcmVuY2UgfHwgb2JqZWN0IGluc3RhbmNlb2YgUERGTmFtZVRyZWUpIHsKICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0LnRvU3RyaW5nKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgRGF0ZSkgewogICAgICAgICAgICAgIGxldCBzdHJpbmcgPQogICAgICAgICAgICAgICAgYEQ6JHtwYWQob2JqZWN0LmdldFVUQ0Z1bGxZZWFyKCksIDQpfWAgKwogICAgICAgICAgICAgICAgcGFkKG9iamVjdC5nZXRVVENNb250aCgpICsgMSwgMikgKwogICAgICAgICAgICAgICAgcGFkKG9iamVjdC5nZXRVVENEYXRlKCksIDIpICsKICAgICAgICAgICAgICAgIHBhZChvYmplY3QuZ2V0VVRDSG91cnMoKSwgMikgKwogICAgICAgICAgICAgICAgcGFkKG9iamVjdC5nZXRVVENNaW51dGVzKCksIDIpICsKICAgICAgICAgICAgICAgIHBhZChvYmplY3QuZ2V0VVRDU2Vjb25kcygpLCAyKSArCiAgICAgICAgICAgICAgICAnWic7CgogICAgICAgICAgICAgIC8vIEVuY3J5cHQgdGhlIHN0cmluZyB3aGVuIG5lY2Vzc2FyeQogICAgICAgICAgICAgIGlmIChlbmNyeXB0Rm4pIHsKICAgICAgICAgICAgICAgIHN0cmluZyA9IGVuY3J5cHRGbihuZXcgQnVmZmVyKHN0cmluZywgJ2FzY2lpJykpLnRvU3RyaW5nKCdiaW5hcnknKTsKCiAgICAgICAgICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyBhcyByZXF1aXJlZCBieSB0aGUgc3BlYwogICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoZXNjYXBhYmxlUmUsIGMgPT4gZXNjYXBhYmxlW2NdKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBgKCR7c3RyaW5nfSlgOwogICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkgewogICAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gb2JqZWN0Lm1hcChlID0+IFBERk9iamVjdC5jb252ZXJ0KGUsIGVuY3J5cHRGbikpLmpvaW4oJyAnKTsKICAgICAgICAgICAgICByZXR1cm4gYFske2l0ZW1zfV1gOwogICAgICAgICAgICB9IGVsc2UgaWYgKHt9LnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHsKICAgICAgICAgICAgICBjb25zdCBvdXQgPSBbJzw8J107CiAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIG9iamVjdCkgewogICAgICAgICAgICAgICAgY29uc3QgdmFsID0gb2JqZWN0W2tleV07CiAgICAgICAgICAgICAgICBvdXQucHVzaChgLyR7a2V5fSAke1BERk9iamVjdC5jb252ZXJ0KHZhbCwgZW5jcnlwdEZuKX1gKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIG91dC5wdXNoKCc+PicpOwogICAgICAgICAgICAgIHJldHVybiBvdXQuam9pbignXG4nKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnbnVtYmVyJykgewogICAgICAgICAgICAgIHJldHVybiBQREZPYmplY3QubnVtYmVyKG9iamVjdCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIGAke29iamVjdH1gOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgc3RhdGljIG51bWJlcihuKSB7CiAgICAgICAgICAgIGlmIChuID4gLTFlMjEgJiYgbiA8IDFlMjEpIHsKICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChuICogMWU2KSAvIDFlNjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBudW1iZXI6ICR7bn1gKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgICAyOiAgICAgICduZWVkIGRpY3Rpb25hcnknLCAgICAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi8KICAgICAgICAgIDE6ICAgICAgJ3N0cmVhbSBlbmQnLCAgICAgICAgICAvKiBaX1NUUkVBTV9FTkQgICAgICAxICAqLwogICAgICAgICAgMDogICAgICAnJywgICAgICAgICAgICAgICAgICAgIC8qIFpfT0sgICAgICAgICAgICAgIDAgICovCiAgICAgICAgICAnLTEnOiAgICdmaWxlIGVycm9yJywgICAgICAgICAgLyogWl9FUlJOTyAgICAgICAgICgtMSkgKi8KICAgICAgICAgICctMic6ICAgJ3N0cmVhbSBlcnJvcicsICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqLwogICAgICAgICAgJy0zJzogICAnZGF0YSBlcnJvcicsICAgICAgICAgIC8qIFpfREFUQV9FUlJPUiAgICAoLTMpICovCiAgICAgICAgICAnLTQnOiAgICdpbnN1ZmZpY2llbnQgbWVtb3J5JywgLyogWl9NRU1fRVJST1IgICAgICgtNCkgKi8KICAgICAgICAgICctNSc6ICAgJ2J1ZmZlciBlcnJvcicsICAgICAgICAvKiBaX0JVRl9FUlJPUiAgICAgKC01KSAqLwogICAgICAgICAgJy02JzogICAnaW5jb21wYXRpYmxlIHZlcnNpb24nIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gWlN0cmVhbSgpIHsKICAgICAgICAgIC8qIG5leHQgaW5wdXQgYnl0ZSAqLwogICAgICAgICAgdGhpcy5pbnB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnMKICAgICAgICAgIHRoaXMubmV4dF9pbiA9IDA7CiAgICAgICAgICAvKiBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlIGF0IGlucHV0ICovCiAgICAgICAgICB0aGlzLmF2YWlsX2luID0gMDsKICAgICAgICAgIC8qIHRvdGFsIG51bWJlciBvZiBpbnB1dCBieXRlcyByZWFkIHNvIGZhciAqLwogICAgICAgICAgdGhpcy50b3RhbF9pbiA9IDA7CiAgICAgICAgICAvKiBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmUgKi8KICAgICAgICAgIHRoaXMub3V0cHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVycwogICAgICAgICAgdGhpcy5uZXh0X291dCA9IDA7CiAgICAgICAgICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi8KICAgICAgICAgIHRoaXMuYXZhaWxfb3V0ID0gMDsKICAgICAgICAgIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovCiAgICAgICAgICB0aGlzLnRvdGFsX291dCA9IDA7CiAgICAgICAgICAvKiBsYXN0IGVycm9yIG1lc3NhZ2UsIE5VTEwgaWYgbm8gZXJyb3IgKi8KICAgICAgICAgIHRoaXMubXNnID0gJycvKlpfTlVMTCovOwogICAgICAgICAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovCiAgICAgICAgICB0aGlzLnN0YXRlID0gbnVsbDsKICAgICAgICAgIC8qIGJlc3QgZ3Vlc3MgYWJvdXQgdGhlIGRhdGEgdHlwZTogYmluYXJ5IG9yIHRleHQgKi8KICAgICAgICAgIHRoaXMuZGF0YV90eXBlID0gMi8qWl9VTktOT1dOKi87CiAgICAgICAgICAvKiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqLwogICAgICAgICAgdGhpcy5hZGxlciA9IDA7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhcnJheVNldChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2ZmcykgewogICAgICAgICAgaWYgKHNyYy5zdWJhcnJheSAmJiBkZXN0LnN1YmFycmF5KSB7CiAgICAgICAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNfb2Zmcywgc3JjX29mZnMgKyBsZW4pLCBkZXN0X29mZnMpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICAvLyBGYWxsYmFjayB0byBvcmRpbmFyeSBhcnJheQogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICBkZXN0W2Rlc3Rfb2ZmcyArIGldID0gc3JjW3NyY19vZmZzICsgaV07CiAgICAgICAgICB9CiAgICAgICAgfQoKCiAgICAgICAgdmFyIEJ1ZjggPSBVaW50OEFycmF5OwogICAgICAgIHZhciBCdWYxNiA9IFVpbnQxNkFycmF5OwogICAgICAgIHZhciBCdWYzMiA9IEludDMyQXJyYXk7CiAgICAgICAgLy8gRW5hYmxlL0Rpc2FibGUgdHlwZWQgYXJyYXlzIHVzZSwgZm9yIHRlc3RpbmcKICAgICAgICAvLwoKICAgICAgICAvKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCgoKICAgICAgICAvL3ZhciBaX0ZJTFRFUkVEICAgICAgICAgID0gMTsKICAgICAgICAvL3ZhciBaX0hVRkZNQU5fT05MWSAgICAgID0gMjsKICAgICAgICAvL3ZhciBaX1JMRSAgICAgICAgICAgICAgID0gMzsKICAgICAgICB2YXIgWl9GSVhFRCA9IDQ7CiAgICAgICAgLy92YXIgWl9ERUZBVUxUX1NUUkFURUdZICA9IDA7CgogICAgICAgIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi8KICAgICAgICB2YXIgWl9CSU5BUlkgPSAwOwogICAgICAgIHZhciBaX1RFWFQgPSAxOwogICAgICAgIC8vdmFyIFpfQVNDSUkgICAgICAgICAgICAgPSAxOyAvLyA9IFpfVEVYVAogICAgICAgIHZhciBaX1VOS05PV04gPSAyOwoKICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwoKCiAgICAgICAgZnVuY3Rpb24gemVybyhidWYpIHsKICAgICAgICAgIHZhciBsZW4gPSBidWYubGVuZ3RoOwogICAgICAgICAgd2hpbGUgKC0tbGVuID49IDApIHsKICAgICAgICAgICAgYnVmW2xlbl0gPSAwOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gRnJvbSB6dXRpbC5oCgogICAgICAgIHZhciBTVE9SRURfQkxPQ0sgPSAwOwogICAgICAgIHZhciBTVEFUSUNfVFJFRVMgPSAxOwogICAgICAgIHZhciBEWU5fVFJFRVMgPSAyOwogICAgICAgIC8qIFRoZSB0aHJlZSBraW5kcyBvZiBibG9jayB0eXBlICovCgogICAgICAgIHZhciBNSU5fTUFUQ0ggPSAzOwogICAgICAgIHZhciBNQVhfTUFUQ0ggPSAyNTg7CiAgICAgICAgLyogVGhlIG1pbmltdW0gYW5kIG1heGltdW0gbWF0Y2ggbGVuZ3RocyAqLwoKICAgICAgICAvLyBGcm9tIGRlZmxhdGUuaAogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIEludGVybmFsIGNvbXByZXNzaW9uIHN0YXRlLgogICAgICAgICAqLwoKICAgICAgICB2YXIgTEVOR1RIX0NPREVTID0gMjk7CiAgICAgICAgLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovCgogICAgICAgIHZhciBMSVRFUkFMUyA9IDI1NjsKICAgICAgICAvKiBudW1iZXIgb2YgbGl0ZXJhbCBieXRlcyAwLi4yNTUgKi8KCiAgICAgICAgdmFyIExfQ09ERVMgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7CiAgICAgICAgLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovCgogICAgICAgIHZhciBEX0NPREVTID0gMzA7CiAgICAgICAgLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovCgogICAgICAgIHZhciBCTF9DT0RFUyA9IDE5OwogICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqLwoKICAgICAgICB2YXIgSEVBUF9TSVpFID0gMiAqIExfQ09ERVMgKyAxOwogICAgICAgIC8qIG1heGltdW0gaGVhcCBzaXplICovCgogICAgICAgIHZhciBNQVhfQklUUyA9IDE1OwogICAgICAgIC8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqLwoKICAgICAgICB2YXIgQnVmX3NpemUgPSAxNjsKICAgICAgICAvKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovCgoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBDb25zdGFudHMKICAgICAgICAgKi8KCiAgICAgICAgdmFyIE1BWF9CTF9CSVRTID0gNzsKICAgICAgICAvKiBCaXQgbGVuZ3RoIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQkxfQklUUyBiaXRzICovCgogICAgICAgIHZhciBFTkRfQkxPQ0sgPSAyNTY7CiAgICAgICAgLyogZW5kIG9mIGJsb2NrIGxpdGVyYWwgY29kZSAqLwoKICAgICAgICB2YXIgUkVQXzNfNiA9IDE2OwogICAgICAgIC8qIHJlcGVhdCBwcmV2aW91cyBiaXQgbGVuZ3RoIDMtNiB0aW1lcyAoMiBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi8KCiAgICAgICAgdmFyIFJFUFpfM18xMCA9IDE3OwogICAgICAgIC8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqLwoKICAgICAgICB2YXIgUkVQWl8xMV8xMzggPSAxODsKICAgICAgICAvKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAxMS0xMzggdGltZXMgICg3IGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqLwoKICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqLwogICAgICAgIHZhciBleHRyYV9sYml0cyA9IC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi8gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDEsIDEsIDEsIDIsIDIsIDIsIDIsIDMsIDMsIDMsIDMsIDQsIDQsIDQsIDQsIDUsIDUsIDUsIDUsIDBdOwoKICAgICAgICB2YXIgZXh0cmFfZGJpdHMgPSAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGRpc3RhbmNlIGNvZGUgKi8gWzAsIDAsIDAsIDAsIDEsIDEsIDIsIDIsIDMsIDMsIDQsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDgsIDgsIDksIDksIDEwLCAxMCwgMTEsIDExLCAxMiwgMTIsIDEzLCAxM107CgogICAgICAgIHZhciBleHRyYV9ibGJpdHMgPSAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqLyBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMiwgMywgN107CgogICAgICAgIHZhciBibF9vcmRlciA9IFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XTsKICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovCgogICAgICAgIC8qIFRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzIGFyZSBzZW50IGluIG9yZGVyIG9mIGRlY3JlYXNpbmcKICAgICAgICAgKiBwcm9iYWJpbGl0eSwgdG8gYXZvaWQgdHJhbnNtaXR0aW5nIHRoZSBsZW5ndGhzIGZvciB1bnVzZWQgYml0IGxlbmd0aCBjb2Rlcy4KICAgICAgICAgKi8KCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogTG9jYWwgZGF0YS4gVGhlc2UgYXJlIGluaXRpYWxpemVkIG9ubHkgb25jZS4KICAgICAgICAgKi8KCiAgICAgICAgLy8gV2UgcHJlLWZpbGwgYXJyYXlzIHdpdGggMCB0byBhdm9pZCB1bmluaXRpYWxpemVkIGdhcHMKCiAgICAgICAgdmFyIERJU1RfQ09ERV9MRU4gPSA1MTI7IC8qIHNlZSBkZWZpbml0aW9uIG9mIGFycmF5IGRpc3RfY29kZSBiZWxvdyAqLwoKICAgICAgICAvLyAhISEhIFVzZSBmbGF0IGFycmF5IGluc2RlYWQgb2Ygc3RydWN0dXJlLCBGcmVxID0gaSoyLCBMZW4gPSBpKjIrMQogICAgICAgIHZhciBzdGF0aWNfbHRyZWUgPSBuZXcgQXJyYXkoKExfQ09ERVMgKyAyKSAqIDIpOwogICAgICAgIHplcm8oc3RhdGljX2x0cmVlKTsKICAgICAgICAvKiBUaGUgc3RhdGljIGxpdGVyYWwgdHJlZS4gU2luY2UgdGhlIGJpdCBsZW5ndGhzIGFyZSBpbXBvc2VkLCB0aGVyZSBpcyBubwogICAgICAgICAqIG5lZWQgZm9yIHRoZSBMX0NPREVTIGV4dHJhIGNvZGVzIHVzZWQgZHVyaW5nIGhlYXAgY29uc3RydWN0aW9uLiBIb3dldmVyCiAgICAgICAgICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBjYW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0CiAgICAgICAgICogYmVsb3cpLgogICAgICAgICAqLwoKICAgICAgICB2YXIgc3RhdGljX2R0cmVlID0gbmV3IEFycmF5KERfQ09ERVMgKiAyKTsKICAgICAgICB6ZXJvKHN0YXRpY19kdHJlZSk7CiAgICAgICAgLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZQogICAgICAgICAqIDUgYml0cy4pCiAgICAgICAgICovCgogICAgICAgIHZhciBfZGlzdF9jb2RlID0gbmV3IEFycmF5KERJU1RfQ09ERV9MRU4pOwogICAgICAgIHplcm8oX2Rpc3RfY29kZSk7CiAgICAgICAgLyogRGlzdGFuY2UgY29kZXMuIFRoZSBmaXJzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIGRpc3RhbmNlcwogICAgICAgICAqIDMgLi4gMjU4LCB0aGUgbGFzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIHRvcCA4IGJpdHMgb2YKICAgICAgICAgKiB0aGUgMTUgYml0IGRpc3RhbmNlcy4KICAgICAgICAgKi8KCiAgICAgICAgdmFyIF9sZW5ndGhfY29kZSA9IG5ldyBBcnJheShNQVhfTUFUQ0ggLSBNSU5fTUFUQ0ggKyAxKTsKICAgICAgICB6ZXJvKF9sZW5ndGhfY29kZSk7CiAgICAgICAgLyogbGVuZ3RoIGNvZGUgZm9yIGVhY2ggbm9ybWFsaXplZCBtYXRjaCBsZW5ndGggKDAgPT0gTUlOX01BVENIKSAqLwoKICAgICAgICB2YXIgYmFzZV9sZW5ndGggPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTKTsKICAgICAgICB6ZXJvKGJhc2VfbGVuZ3RoKTsKICAgICAgICAvKiBGaXJzdCBub3JtYWxpemVkIGxlbmd0aCBmb3IgZWFjaCBjb2RlICgwID0gTUlOX01BVENIKSAqLwoKICAgICAgICB2YXIgYmFzZV9kaXN0ID0gbmV3IEFycmF5KERfQ09ERVMpOwogICAgICAgIHplcm8oYmFzZV9kaXN0KTsKICAgICAgICAvKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqLwoKCiAgICAgICAgZnVuY3Rpb24gU3RhdGljVHJlZURlc2Moc3RhdGljX3RyZWUsIGV4dHJhX2JpdHMsIGV4dHJhX2Jhc2UsIGVsZW1zLCBtYXhfbGVuZ3RoKSB7CgogICAgICAgICAgdGhpcy5zdGF0aWNfdHJlZSA9IHN0YXRpY190cmVlOyAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovCiAgICAgICAgICB0aGlzLmV4dHJhX2JpdHMgPSBleHRyYV9iaXRzOyAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqLwogICAgICAgICAgdGhpcy5leHRyYV9iYXNlID0gZXh0cmFfYmFzZTsgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqLwogICAgICAgICAgdGhpcy5lbGVtcyA9IGVsZW1zOyAvKiBtYXggbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSB0cmVlICovCiAgICAgICAgICB0aGlzLm1heF9sZW5ndGggPSBtYXhfbGVuZ3RoOyAvKiBtYXggYml0IGxlbmd0aCBmb3IgdGhlIGNvZGVzICovCgogICAgICAgICAgLy8gc2hvdyBpZiBgc3RhdGljX3RyZWVgIGhhcyBkYXRhIG9yIGR1bW15IC0gbmVlZGVkIGZvciBtb25vbW9ycGhpYyBvYmplY3RzCiAgICAgICAgICB0aGlzLmhhc19zdHJlZSA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDsKICAgICAgICB9CgoKICAgICAgICB2YXIgc3RhdGljX2xfZGVzYzsKICAgICAgICB2YXIgc3RhdGljX2RfZGVzYzsKICAgICAgICB2YXIgc3RhdGljX2JsX2Rlc2M7CgoKICAgICAgICBmdW5jdGlvbiBUcmVlRGVzYyhkeW5fdHJlZSwgc3RhdF9kZXNjKSB7CiAgICAgICAgICB0aGlzLmR5bl90cmVlID0gZHluX3RyZWU7IC8qIHRoZSBkeW5hbWljIHRyZWUgKi8KICAgICAgICAgIHRoaXMubWF4X2NvZGUgPSAwOyAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi8KICAgICAgICAgIHRoaXMuc3RhdF9kZXNjID0gc3RhdF9kZXNjOyAvKiB0aGUgY29ycmVzcG9uZGluZyBzdGF0aWMgdHJlZSAqLwogICAgICAgIH0KCgoKICAgICAgICBmdW5jdGlvbiBkX2NvZGUoZGlzdCkgewogICAgICAgICAgcmV0dXJuIGRpc3QgPCAyNTYgPyBfZGlzdF9jb2RlW2Rpc3RdIDogX2Rpc3RfY29kZVsyNTYgKyAoZGlzdCA+Pj4gNyldOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLgogICAgICAgICAqIElOIGFzc2VydGlvbjogdGhlcmUgaXMgZW5vdWdoIHJvb20gaW4gcGVuZGluZ0J1Zi4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBwdXRfc2hvcnQocywgdykgewogICAgICAgICAgLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpOwogICAgICAgICAgLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpOwogICAgICAgICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAodykgJiAweGZmOwogICAgICAgICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAodyA+Pj4gOCkgJiAweGZmOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIFNlbmQgYSB2YWx1ZSBvbiBhIGdpdmVuIG51bWJlciBvZiBiaXRzLgogICAgICAgICAqIElOIGFzc2VydGlvbjogbGVuZ3RoIDw9IDE2IGFuZCB2YWx1ZSBmaXRzIGluIGxlbmd0aCBiaXRzLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHNlbmRfYml0cyhzLCB2YWx1ZSwgbGVuZ3RoKSB7CiAgICAgICAgICBpZiAocy5iaV92YWxpZCA+IChCdWZfc2l6ZSAtIGxlbmd0aCkpIHsKICAgICAgICAgICAgcy5iaV9idWYgfD0gKHZhbHVlIDw8IHMuYmlfdmFsaWQpICYgMHhmZmZmOwogICAgICAgICAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpOwogICAgICAgICAgICBzLmJpX2J1ZiA9IHZhbHVlID4+IChCdWZfc2l6ZSAtIHMuYmlfdmFsaWQpOwogICAgICAgICAgICBzLmJpX3ZhbGlkICs9IGxlbmd0aCAtIEJ1Zl9zaXplOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcy5iaV9idWYgfD0gKHZhbHVlIDw8IHMuYmlfdmFsaWQpICYgMHhmZmZmOwogICAgICAgICAgICBzLmJpX3ZhbGlkICs9IGxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkgewogICAgICAgICAgc2VuZF9iaXRzKHMsIHRyZWVbYyAqIDJdIC8qLkNvZGUqLyAsIHRyZWVbYyAqIDIgKyAxXSAvKi5MZW4qLyApOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIFJldmVyc2UgdGhlIGZpcnN0IGxlbiBiaXRzIG9mIGEgY29kZSwgdXNpbmcgc3RyYWlnaHRmb3J3YXJkIGNvZGUgKGEgZmFzdGVyCiAgICAgICAgICogbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKQogICAgICAgICAqIElOIGFzc2VydGlvbjogMSA8PSBsZW4gPD0gMTUKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBiaV9yZXZlcnNlKGNvZGUsIGxlbikgewogICAgICAgICAgdmFyIHJlcyA9IDA7CiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIHJlcyB8PSBjb2RlICYgMTsKICAgICAgICAgICAgY29kZSA+Pj49IDE7CiAgICAgICAgICAgIHJlcyA8PD0gMTsKICAgICAgICAgIH0gd2hpbGUgKC0tbGVuID4gMCk7CiAgICAgICAgICByZXR1cm4gcmVzID4+PiAxOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyLCBrZWVwaW5nIGF0IG1vc3QgNyBiaXRzIGluIGl0LgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGJpX2ZsdXNoKHMpIHsKICAgICAgICAgIGlmIChzLmJpX3ZhbGlkID09PSAxNikgewogICAgICAgICAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpOwogICAgICAgICAgICBzLmJpX2J1ZiA9IDA7CiAgICAgICAgICAgIHMuYmlfdmFsaWQgPSAwOwoKICAgICAgICAgIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7CiAgICAgICAgICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWYgJiAweGZmOwogICAgICAgICAgICBzLmJpX2J1ZiA+Pj0gODsKICAgICAgICAgICAgcy5iaV92YWxpZCAtPSA4OwogICAgICAgICAgfQogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIENvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgZm9yIGEgdHJlZSBhbmQgdXBkYXRlIHRoZSB0b3RhbCBiaXQgbGVuZ3RoCiAgICAgICAgICogZm9yIHRoZSBjdXJyZW50IGJsb2NrLgogICAgICAgICAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kCiAgICAgICAgICogICAgYWJvdmUgYXJlIHRoZSB0cmVlIG5vZGVzIHNvcnRlZCBieSBpbmNyZWFzaW5nIGZyZXF1ZW5jeS4KICAgICAgICAgKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkIGxlbiBpcyBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aCwgdGhlCiAgICAgICAgICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLgogICAgICAgICAqICAgICBUaGUgbGVuZ3RoIG9wdF9sZW4gaXMgdXBkYXRlZDsgc3RhdGljX2xlbiBpcyBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMKICAgICAgICAgKiAgICAgbm90IG51bGwuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2VuX2JpdGxlbihzLCBkZXNjKSB7CiAgICAgICAgLy8gICAgZGVmbGF0ZV9zdGF0ZSAqczsKICAgICAgICAvLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi8KICAgICAgICAgIHZhciB0cmVlID0gZGVzYy5keW5fdHJlZTsKICAgICAgICAgIHZhciBtYXhfY29kZSA9IGRlc2MubWF4X2NvZGU7CiAgICAgICAgICB2YXIgc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTsKICAgICAgICAgIHZhciBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7CiAgICAgICAgICB2YXIgZXh0cmEgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iaXRzOwogICAgICAgICAgdmFyIGJhc2UgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iYXNlOwogICAgICAgICAgdmFyIG1heF9sZW5ndGggPSBkZXNjLnN0YXRfZGVzYy5tYXhfbGVuZ3RoOwogICAgICAgICAgdmFyIGg7IC8qIGhlYXAgaW5kZXggKi8KICAgICAgICAgIHZhciBuLCBtOyAvKiBpdGVyYXRlIG92ZXIgdGhlIHRyZWUgZWxlbWVudHMgKi8KICAgICAgICAgIHZhciBiaXRzOyAvKiBiaXQgbGVuZ3RoICovCiAgICAgICAgICB2YXIgeGJpdHM7IC8qIGV4dHJhIGJpdHMgKi8KICAgICAgICAgIHZhciBmOyAvKiBmcmVxdWVuY3kgKi8KICAgICAgICAgIHZhciBvdmVyZmxvdyA9IDA7IC8qIG51bWJlciBvZiBlbGVtZW50cyB3aXRoIGJpdCBsZW5ndGggdG9vIGxhcmdlICovCgogICAgICAgICAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7CiAgICAgICAgICAgIHMuYmxfY291bnRbYml0c10gPSAwOwogICAgICAgICAgfQoKICAgICAgICAgIC8qIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5CiAgICAgICAgICAgKiBvdmVyZmxvdyBpbiB0aGUgY2FzZSBvZiB0aGUgYml0IGxlbmd0aCB0cmVlKS4KICAgICAgICAgICAqLwogICAgICAgICAgdHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0gLyouTGVuKi8gPSAwOyAvKiByb290IG9mIHRoZSBoZWFwICovCgogICAgICAgICAgZm9yIChoID0gcy5oZWFwX21heCArIDE7IGggPCBIRUFQX1NJWkU7IGgrKykgewogICAgICAgICAgICBuID0gcy5oZWFwW2hdOwogICAgICAgICAgICBiaXRzID0gdHJlZVt0cmVlW24gKiAyICsgMV0gLyouRGFkKi8gKiAyICsgMV0gLyouTGVuKi8gKyAxOwogICAgICAgICAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHsKICAgICAgICAgICAgICBiaXRzID0gbWF4X2xlbmd0aDsKICAgICAgICAgICAgICBvdmVyZmxvdysrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyZWVbbiAqIDIgKyAxXSAvKi5MZW4qLyA9IGJpdHM7CiAgICAgICAgICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovCgogICAgICAgICAgICBpZiAobiA+IG1heF9jb2RlKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0gLyogbm90IGEgbGVhZiBub2RlICovCgogICAgICAgICAgICBzLmJsX2NvdW50W2JpdHNdKys7CiAgICAgICAgICAgIHhiaXRzID0gMDsKICAgICAgICAgICAgaWYgKG4gPj0gYmFzZSkgewogICAgICAgICAgICAgIHhiaXRzID0gZXh0cmFbbiAtIGJhc2VdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGYgPSB0cmVlW24gKiAyXSAvKi5GcmVxKi8gOwogICAgICAgICAgICBzLm9wdF9sZW4gKz0gZiAqIChiaXRzICsgeGJpdHMpOwogICAgICAgICAgICBpZiAoaGFzX3N0cmVlKSB7CiAgICAgICAgICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXSAvKi5MZW4qLyArIHhiaXRzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKG92ZXJmbG93ID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBUcmFjZSgoc3RkZXJyLCJcbmJpdCBsZW5ndGggb3ZlcmZsb3dcbiIpKTsKICAgICAgICAgIC8qIFRoaXMgaGFwcGVucyBmb3IgZXhhbXBsZSBvbiBvYmoyIGFuZCBwaWMgb2YgdGhlIENhbGdhcnkgY29ycHVzICovCgogICAgICAgICAgLyogRmluZCB0aGUgZmlyc3QgYml0IGxlbmd0aCB3aGljaCBjb3VsZCBpbmNyZWFzZTogKi8KICAgICAgICAgIGRvIHsKICAgICAgICAgICAgYml0cyA9IG1heF9sZW5ndGggLSAxOwogICAgICAgICAgICB3aGlsZSAocy5ibF9jb3VudFtiaXRzXSA9PT0gMCkgewogICAgICAgICAgICAgIGJpdHMtLTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzLmJsX2NvdW50W2JpdHNdLS07IC8qIG1vdmUgb25lIGxlYWYgZG93biB0aGUgdHJlZSAqLwogICAgICAgICAgICBzLmJsX2NvdW50W2JpdHMgKyAxXSArPSAyOyAvKiBtb3ZlIG9uZSBvdmVyZmxvdyBpdGVtIGFzIGl0cyBicm90aGVyICovCiAgICAgICAgICAgIHMuYmxfY291bnRbbWF4X2xlbmd0aF0tLTsKICAgICAgICAgICAgLyogVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCwKICAgICAgICAgICAgICogYnV0IHRoaXMgZG9lcyBub3QgYWZmZWN0IGJsX2NvdW50W21heF9sZW5ndGhdCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBvdmVyZmxvdyAtPSAyOwogICAgICAgICAgfSB3aGlsZSAob3ZlcmZsb3cgPiAwKTsKCiAgICAgICAgICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuCiAgICAgICAgICAgKiBoIGlzIHN0aWxsIGVxdWFsIHRvIEhFQVBfU0laRS4gKEl0IGlzIHNpbXBsZXIgdG8gcmVjb25zdHJ1Y3QgYWxsCiAgICAgICAgICAgKiBsZW5ndGhzIGluc3RlYWQgb2YgZml4aW5nIG9ubHkgdGhlIHdyb25nIG9uZXMuIFRoaXMgaWRlYSBpcyB0YWtlbgogICAgICAgICAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pCiAgICAgICAgICAgKi8KICAgICAgICAgIGZvciAoYml0cyA9IG1heF9sZW5ndGg7IGJpdHMgIT09IDA7IGJpdHMtLSkgewogICAgICAgICAgICBuID0gcy5ibF9jb3VudFtiaXRzXTsKICAgICAgICAgICAgd2hpbGUgKG4gIT09IDApIHsKICAgICAgICAgICAgICBtID0gcy5oZWFwWy0taF07CiAgICAgICAgICAgICAgaWYgKG0gPiBtYXhfY29kZSkgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0cmVlW20gKiAyICsgMV0gLyouTGVuKi8gIT09IGJpdHMpIHsKICAgICAgICAgICAgICAgIC8vIFRyYWNlKChzdGRlcnIsImNvZGUgJWQgYml0cyAlZC0+JWRcbiIsIG0sIHRyZWVbbV0uTGVuLCBiaXRzKSk7CiAgICAgICAgICAgICAgICBzLm9wdF9sZW4gKz0gKGJpdHMgLSB0cmVlW20gKiAyICsgMV0gLyouTGVuKi8gKSAqIHRyZWVbbSAqIDJdIC8qLkZyZXEqLyA7CiAgICAgICAgICAgICAgICB0cmVlW20gKiAyICsgMV0gLyouTGVuKi8gPSBiaXRzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBuLS07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBHZW5lcmF0ZSB0aGUgY29kZXMgZm9yIGEgZ2l2ZW4gdHJlZSBhbmQgYml0IGNvdW50cyAod2hpY2ggbmVlZCBub3QgYmUKICAgICAgICAgKiBvcHRpbWFsKS4KICAgICAgICAgKiBJTiBhc3NlcnRpb246IHRoZSBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgYml0IGxlbmd0aCBzdGF0aXN0aWNzIGZvcgogICAgICAgICAqIHRoZSBnaXZlbiB0cmVlIGFuZCB0aGUgZmllbGQgbGVuIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuCiAgICAgICAgICogT1VUIGFzc2VydGlvbjogdGhlIGZpZWxkIGNvZGUgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cyBvZiBub24KICAgICAgICAgKiAgICAgemVybyBjb2RlIGxlbmd0aC4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIGJsX2NvdW50KSB7CiAgICAgICAgLy8gICAgY3RfZGF0YSAqdHJlZTsgICAgICAgICAgICAgLyogdGhlIHRyZWUgdG8gZGVjb3JhdGUgKi8KICAgICAgICAvLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi8KICAgICAgICAvLyAgICB1c2hmICpibF9jb3VudDsgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoICovCgogICAgICAgICAgdmFyIG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqLwogICAgICAgICAgdmFyIGNvZGUgPSAwOyAvKiBydW5uaW5nIGNvZGUgdmFsdWUgKi8KICAgICAgICAgIHZhciBiaXRzOyAvKiBiaXQgaW5kZXggKi8KICAgICAgICAgIHZhciBuOyAvKiBjb2RlIGluZGV4ICovCgogICAgICAgICAgLyogVGhlIGRpc3RyaWJ1dGlvbiBjb3VudHMgYXJlIGZpcnN0IHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNvZGUgdmFsdWVzCiAgICAgICAgICAgKiB3aXRob3V0IGJpdCByZXZlcnNhbC4KICAgICAgICAgICAqLwogICAgICAgICAgZm9yIChiaXRzID0gMTsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7CiAgICAgICAgICAgIG5leHRfY29kZVtiaXRzXSA9IGNvZGUgPSAoY29kZSArIGJsX2NvdW50W2JpdHMgLSAxXSkgPDwgMTsKICAgICAgICAgIH0KICAgICAgICAgIC8qIENoZWNrIHRoYXQgdGhlIGJpdCBjb3VudHMgaW4gYmxfY291bnQgYXJlIGNvbnNpc3RlbnQuIFRoZSBsYXN0IGNvZGUKICAgICAgICAgICAqIG11c3QgYmUgYWxsIG9uZXMuCiAgICAgICAgICAgKi8KICAgICAgICAgIC8vQXNzZXJ0IChjb2RlICsgYmxfY291bnRbTUFYX0JJVFNdLTEgPT0gKDE8PE1BWF9CSVRTKS0xLAogICAgICAgICAgLy8gICAgICAgICJpbmNvbnNpc3RlbnQgYml0IGNvdW50cyIpOwogICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwiXG5nZW5fY29kZXM6IG1heF9jb2RlICVkICIsIG1heF9jb2RlKSk7CgogICAgICAgICAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7CiAgICAgICAgICAgIHZhciBsZW4gPSB0cmVlW24gKiAyICsgMV0gLyouTGVuKi8gOwogICAgICAgICAgICBpZiAobGVuID09PSAwKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyogTm93IHJldmVyc2UgdGhlIGJpdHMgKi8KICAgICAgICAgICAgdHJlZVtuICogMl0gLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pOwoKICAgICAgICAgICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLCJcbm4gJTNkICVjIGwgJTJkIGMgJTR4ICgleCkgIiwKICAgICAgICAgICAgLy8gICAgIG4sIChpc2dyYXBoKG4pID8gbiA6ICcgJyksIGxlbiwgdHJlZVtuXS5Db2RlLCBuZXh0X2NvZGVbbGVuXS0xKSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiB0cl9zdGF0aWNfaW5pdCgpIHsKICAgICAgICAgIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi8KICAgICAgICAgIHZhciBiaXRzOyAvKiBiaXQgY291bnRlciAqLwogICAgICAgICAgdmFyIGxlbmd0aDsgLyogbGVuZ3RoIHZhbHVlICovCiAgICAgICAgICB2YXIgY29kZTsgLyogY29kZSB2YWx1ZSAqLwogICAgICAgICAgdmFyIGRpc3Q7IC8qIGRpc3RhbmNlIGluZGV4ICovCiAgICAgICAgICB2YXIgYmxfY291bnQgPSBuZXcgQXJyYXkoTUFYX0JJVFMgKyAxKTsKICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqLwoKICAgICAgICAgIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KCkKICAgICAgICAgIC8vaWYgKHN0YXRpY19pbml0X2RvbmUpIHJldHVybjsKCiAgICAgICAgICAvKiBGb3Igc29tZSBlbWJlZGRlZCB0YXJnZXRzLCBnbG9iYWwgdmFyaWFibGVzIGFyZSBub3QgaW5pdGlhbGl6ZWQ6ICovCiAgICAgICAgICAvKiNpZmRlZiBOT19JTklUX0dMT0JBTF9QT0lOVEVSUwogICAgICAgICAgICBzdGF0aWNfbF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2x0cmVlOwogICAgICAgICAgICBzdGF0aWNfbF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9sYml0czsKICAgICAgICAgICAgc3RhdGljX2RfZGVzYy5zdGF0aWNfdHJlZSA9IHN0YXRpY19kdHJlZTsKICAgICAgICAgICAgc3RhdGljX2RfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfZGJpdHM7CiAgICAgICAgICAgIHN0YXRpY19ibF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9ibGJpdHM7CiAgICAgICAgICAjZW5kaWYqLwoKICAgICAgICAgIC8qIEluaXRpYWxpemUgdGhlIG1hcHBpbmcgbGVuZ3RoICgwLi4yNTUpIC0+IGxlbmd0aCBjb2RlICgwLi4yOCkgKi8KICAgICAgICAgIGxlbmd0aCA9IDA7CiAgICAgICAgICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgTEVOR1RIX0NPREVTIC0gMTsgY29kZSsrKSB7CiAgICAgICAgICAgIGJhc2VfbGVuZ3RoW2NvZGVdID0gbGVuZ3RoOwogICAgICAgICAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfbGJpdHNbY29kZV0pOyBuKyspIHsKICAgICAgICAgICAgICBfbGVuZ3RoX2NvZGVbbGVuZ3RoKytdID0gY29kZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy9Bc3NlcnQgKGxlbmd0aCA9PSAyNTYsICJ0cl9zdGF0aWNfaW5pdDogbGVuZ3RoICE9IDI1NiIpOwogICAgICAgICAgLyogTm90ZSB0aGF0IHRoZSBsZW5ndGggMjU1IChtYXRjaCBsZW5ndGggMjU4KSBjYW4gYmUgcmVwcmVzZW50ZWQKICAgICAgICAgICAqIGluIHR3byBkaWZmZXJlbnQgd2F5czogY29kZSAyODQgKyA1IGJpdHMgb3IgY29kZSAyODUsIHNvIHdlCiAgICAgICAgICAgKiBvdmVyd3JpdGUgbGVuZ3RoX2NvZGVbMjU1XSB0byB1c2UgdGhlIGJlc3QgZW5jb2Rpbmc6CiAgICAgICAgICAgKi8KICAgICAgICAgIF9sZW5ndGhfY29kZVtsZW5ndGggLSAxXSA9IGNvZGU7CgogICAgICAgICAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovCiAgICAgICAgICBkaXN0ID0gMDsKICAgICAgICAgIGZvciAoY29kZSA9IDA7IGNvZGUgPCAxNjsgY29kZSsrKSB7CiAgICAgICAgICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3Q7CiAgICAgICAgICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCBleHRyYV9kYml0c1tjb2RlXSk7IG4rKykgewogICAgICAgICAgICAgIF9kaXN0X2NvZGVbZGlzdCsrXSA9IGNvZGU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgInRyX3N0YXRpY19pbml0OiBkaXN0ICE9IDI1NiIpOwogICAgICAgICAgZGlzdCA+Pj0gNzsgLyogZnJvbSBub3cgb24sIGFsbCBkaXN0YW5jZXMgYXJlIGRpdmlkZWQgYnkgMTI4ICovCiAgICAgICAgICBmb3IgKDsgY29kZSA8IERfQ09ERVM7IGNvZGUrKykgewogICAgICAgICAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0IDw8IDc7CiAgICAgICAgICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCAoZXh0cmFfZGJpdHNbY29kZV0gLSA3KSk7IG4rKykgewogICAgICAgICAgICAgIF9kaXN0X2NvZGVbMjU2ICsgZGlzdCsrXSA9IGNvZGU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgInRyX3N0YXRpY19pbml0OiAyNTYrZGlzdCAhPSA1MTIiKTsKCiAgICAgICAgICAvKiBDb25zdHJ1Y3QgdGhlIGNvZGVzIG9mIHRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlICovCiAgICAgICAgICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHsKICAgICAgICAgICAgYmxfY291bnRbYml0c10gPSAwOwogICAgICAgICAgfQoKICAgICAgICAgIG4gPSAwOwogICAgICAgICAgd2hpbGUgKG4gPD0gMTQzKSB7CiAgICAgICAgICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdIC8qLkxlbiovID0gODsKICAgICAgICAgICAgbisrOwogICAgICAgICAgICBibF9jb3VudFs4XSsrOwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKG4gPD0gMjU1KSB7CiAgICAgICAgICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdIC8qLkxlbiovID0gOTsKICAgICAgICAgICAgbisrOwogICAgICAgICAgICBibF9jb3VudFs5XSsrOwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKG4gPD0gMjc5KSB7CiAgICAgICAgICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdIC8qLkxlbiovID0gNzsKICAgICAgICAgICAgbisrOwogICAgICAgICAgICBibF9jb3VudFs3XSsrOwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKG4gPD0gMjg3KSB7CiAgICAgICAgICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdIC8qLkxlbiovID0gODsKICAgICAgICAgICAgbisrOwogICAgICAgICAgICBibF9jb3VudFs4XSsrOwogICAgICAgICAgfQogICAgICAgICAgLyogQ29kZXMgMjg2IGFuZCAyODcgZG8gbm90IGV4aXN0LCBidXQgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlCiAgICAgICAgICAgKiB0cmVlIGNvbnN0cnVjdGlvbiB0byBnZXQgYSBjYW5vbmljYWwgSHVmZm1hbiB0cmVlIChsb25nZXN0IGNvZGUKICAgICAgICAgICAqIGFsbCBvbmVzKQogICAgICAgICAgICovCiAgICAgICAgICBnZW5fY29kZXMoc3RhdGljX2x0cmVlLCBMX0NPREVTICsgMSwgYmxfY291bnQpOwoKICAgICAgICAgIC8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZSBpcyB0cml2aWFsOiAqLwogICAgICAgICAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykgewogICAgICAgICAgICBzdGF0aWNfZHRyZWVbbiAqIDIgKyAxXSAvKi5MZW4qLyA9IDU7CiAgICAgICAgICAgIHN0YXRpY19kdHJlZVtuICogMl0gLyouQ29kZSovID0gYmlfcmV2ZXJzZShuLCA1KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBOb3cgZGF0YSByZWFkeSBhbmQgd2UgY2FuIGluaXQgc3RhdGljIHRyZWVzCiAgICAgICAgICBzdGF0aWNfbF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19sdHJlZSwgZXh0cmFfbGJpdHMsIExJVEVSQUxTICsgMSwgTF9DT0RFUywgTUFYX0JJVFMpOwogICAgICAgICAgc3RhdGljX2RfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfZHRyZWUsIGV4dHJhX2RiaXRzLCAwLCBEX0NPREVTLCBNQVhfQklUUyk7CiAgICAgICAgICBzdGF0aWNfYmxfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhuZXcgQXJyYXkoMCksIGV4dHJhX2JsYml0cywgMCwgQkxfQ09ERVMsIE1BWF9CTF9CSVRTKTsKCiAgICAgICAgICAvL3N0YXRpY19pbml0X2RvbmUgPSB0cnVlOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIEluaXRpYWxpemUgYSBuZXcgYmxvY2suCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gaW5pdF9ibG9jayhzKSB7CiAgICAgICAgICB2YXIgbjsgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovCgogICAgICAgICAgLyogSW5pdGlhbGl6ZSB0aGUgdHJlZXMuICovCiAgICAgICAgICBmb3IgKG4gPSAwOyBuIDwgTF9DT0RFUzsgbisrKSB7CiAgICAgICAgICAgIHMuZHluX2x0cmVlW24gKiAyXSAvKi5GcmVxKi8gPSAwOwogICAgICAgICAgfQogICAgICAgICAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykgewogICAgICAgICAgICBzLmR5bl9kdHJlZVtuICogMl0gLyouRnJlcSovID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAobiA9IDA7IG4gPCBCTF9DT0RFUzsgbisrKSB7CiAgICAgICAgICAgIHMuYmxfdHJlZVtuICogMl0gLyouRnJlcSovID0gMDsKICAgICAgICAgIH0KCiAgICAgICAgICBzLmR5bl9sdHJlZVtFTkRfQkxPQ0sgKiAyXSAvKi5GcmVxKi8gPSAxOwogICAgICAgICAgcy5vcHRfbGVuID0gcy5zdGF0aWNfbGVuID0gMDsKICAgICAgICAgIHMubGFzdF9saXQgPSBzLm1hdGNoZXMgPSAwOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGJpX3dpbmR1cChzKSB7CiAgICAgICAgICBpZiAocy5iaV92YWxpZCA+IDgpIHsKICAgICAgICAgICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTsKICAgICAgICAgIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+IDApIHsKICAgICAgICAgICAgLy9wdXRfYnl0ZShzLCAoQnl0ZSlzLT5iaV9idWYpOwogICAgICAgICAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmOwogICAgICAgICAgfQogICAgICAgICAgcy5iaV9idWYgPSAwOwogICAgICAgICAgcy5iaV92YWxpZCA9IDA7CiAgICAgICAgfQoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBDb3B5IGEgc3RvcmVkIGJsb2NrLCBzdG9yaW5nIGZpcnN0IHRoZSBsZW5ndGggYW5kIGl0cwogICAgICAgICAqIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGNvcHlfYmxvY2socywgYnVmLCBsZW4sIGhlYWRlcikgewogICAgICAgIC8vRGVmbGF0ZVN0YXRlICpzOwogICAgICAgIC8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi8KICAgICAgICAvL3Vuc2lnbmVkIGxlbjsgICAgIC8qIGl0cyBsZW5ndGggKi8KICAgICAgICAvL2ludCAgICAgIGhlYWRlcjsgIC8qIHRydWUgaWYgYmxvY2sgaGVhZGVyIG11c3QgYmUgd3JpdHRlbiAqLwoKICAgICAgICAgIGJpX3dpbmR1cChzKTsgLyogYWxpZ24gb24gYnl0ZSBib3VuZGFyeSAqLwoKICAgICAgICAgIGlmIChoZWFkZXIpIHsKICAgICAgICAgICAgcHV0X3Nob3J0KHMsIGxlbik7CiAgICAgICAgICAgIHB1dF9zaG9ydChzLCB+bGVuKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vICB3aGlsZSAobGVuLS0pIHsKICAgICAgICAgIC8vICAgIHB1dF9ieXRlKHMsICpidWYrKyk7CiAgICAgICAgICAvLyAgfQogICAgICAgICAgYXJyYXlTZXQocy5wZW5kaW5nX2J1Ziwgcy53aW5kb3csIGJ1ZiwgbGVuLCBzLnBlbmRpbmcpOwogICAgICAgICAgcy5wZW5kaW5nICs9IGxlbjsKICAgICAgICB9CgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIENvbXBhcmVzIHRvIHN1YnRyZWVzLCB1c2luZyB0aGUgdHJlZSBkZXB0aCBhcyB0aWUgYnJlYWtlciB3aGVuCiAgICAgICAgICogdGhlIHN1YnRyZWVzIGhhdmUgZXF1YWwgZnJlcXVlbmN5LiBUaGlzIG1pbmltaXplcyB0aGUgd29yc3QgY2FzZSBsZW5ndGguCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc21hbGxlcih0cmVlLCBuLCBtLCBkZXB0aCkgewogICAgICAgICAgdmFyIF9uMiA9IG4gKiAyOwogICAgICAgICAgdmFyIF9tMiA9IG0gKiAyOwogICAgICAgICAgcmV0dXJuICh0cmVlW19uMl0gLyouRnJlcSovIDwgdHJlZVtfbTJdIC8qLkZyZXEqLyB8fAogICAgICAgICAgICAodHJlZVtfbjJdIC8qLkZyZXEqLyA9PT0gdHJlZVtfbTJdIC8qLkZyZXEqLyAmJiBkZXB0aFtuXSA8PSBkZXB0aFttXSkpOwogICAgICAgIH0KCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssCiAgICAgICAgICogZXhjaGFuZ2luZyBhIG5vZGUgd2l0aCB0aGUgc21hbGxlc3Qgb2YgaXRzIHR3byBzb25zIGlmIG5lY2Vzc2FyeSwgc3RvcHBpbmcKICAgICAgICAgKiB3aGVuIHRoZSBoZWFwIHByb3BlcnR5IGlzIHJlLWVzdGFibGlzaGVkIChlYWNoIGZhdGhlciBzbWFsbGVyIHRoYW4gaXRzCiAgICAgICAgICogdHdvIHNvbnMpLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHBxZG93bmhlYXAocywgdHJlZSwgaykKICAgICAgICAvLyAgICBkZWZsYXRlX3N0YXRlICpzOwogICAgICAgIC8vICAgIGN0X2RhdGEgKnRyZWU7ICAvKiB0aGUgdHJlZSB0byByZXN0b3JlICovCiAgICAgICAgLy8gICAgaW50IGs7ICAgICAgICAgICAgICAgLyogbm9kZSB0byBtb3ZlIGRvd24gKi8KICAgICAgICB7CiAgICAgICAgICB2YXIgdiA9IHMuaGVhcFtrXTsKICAgICAgICAgIHZhciBqID0gayA8PCAxOyAvKiBsZWZ0IHNvbiBvZiBrICovCiAgICAgICAgICB3aGlsZSAoaiA8PSBzLmhlYXBfbGVuKSB7CiAgICAgICAgICAgIC8qIFNldCBqIHRvIHRoZSBzbWFsbGVzdCBvZiB0aGUgdHdvIHNvbnM6ICovCiAgICAgICAgICAgIGlmIChqIDwgcy5oZWFwX2xlbiAmJgogICAgICAgICAgICAgIHNtYWxsZXIodHJlZSwgcy5oZWFwW2ogKyAxXSwgcy5oZWFwW2pdLCBzLmRlcHRoKSkgewogICAgICAgICAgICAgIGorKzsKICAgICAgICAgICAgfQogICAgICAgICAgICAvKiBFeGl0IGlmIHYgaXMgc21hbGxlciB0aGFuIGJvdGggc29ucyAqLwogICAgICAgICAgICBpZiAoc21hbGxlcih0cmVlLCB2LCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qIEV4Y2hhbmdlIHYgd2l0aCB0aGUgc21hbGxlc3Qgc29uICovCiAgICAgICAgICAgIHMuaGVhcFtrXSA9IHMuaGVhcFtqXTsKICAgICAgICAgICAgayA9IGo7CgogICAgICAgICAgICAvKiBBbmQgY29udGludWUgZG93biB0aGUgdHJlZSwgc2V0dGluZyBqIHRvIHRoZSBsZWZ0IHNvbiBvZiBrICovCiAgICAgICAgICAgIGogPDw9IDE7CiAgICAgICAgICB9CiAgICAgICAgICBzLmhlYXBba10gPSB2OwogICAgICAgIH0KCgogICAgICAgIC8vIGlubGluZWQgbWFudWFsbHkKICAgICAgICAvLyB2YXIgU01BTExFU1QgPSAxOwoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXMKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBjb21wcmVzc19ibG9jayhzLCBsdHJlZSwgZHRyZWUpCiAgICAgICAgLy8gICAgZGVmbGF0ZV9zdGF0ZSAqczsKICAgICAgICAvLyAgICBjb25zdCBjdF9kYXRhICpsdHJlZTsgLyogbGl0ZXJhbCB0cmVlICovCiAgICAgICAgLy8gICAgY29uc3QgY3RfZGF0YSAqZHRyZWU7IC8qIGRpc3RhbmNlIHRyZWUgKi8KICAgICAgICB7CiAgICAgICAgICB2YXIgZGlzdDsgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi8KICAgICAgICAgIHZhciBsYzsgLyogbWF0Y2ggbGVuZ3RoIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0ID09IDApICovCiAgICAgICAgICB2YXIgbHggPSAwOyAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovCiAgICAgICAgICB2YXIgY29kZTsgLyogdGhlIGNvZGUgdG8gc2VuZCAqLwogICAgICAgICAgdmFyIGV4dHJhOyAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyB0byBzZW5kICovCgogICAgICAgICAgaWYgKHMubGFzdF9saXQgIT09IDApIHsKICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgIGRpc3QgPSAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyXSA8PCA4KSB8IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDIgKyAxXSk7CiAgICAgICAgICAgICAgbGMgPSBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBseF07CiAgICAgICAgICAgICAgbHgrKzsKCiAgICAgICAgICAgICAgaWYgKGRpc3QgPT09IDApIHsKICAgICAgICAgICAgICAgIHNlbmRfY29kZShzLCBsYywgbHRyZWUpOyAvKiBzZW5kIGEgbGl0ZXJhbCBieXRlICovCiAgICAgICAgICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsIiAnJWMnICIsIGxjKSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi8KICAgICAgICAgICAgICAgIGNvZGUgPSBfbGVuZ3RoX2NvZGVbbGNdOwogICAgICAgICAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUgKyBMSVRFUkFMUyArIDEsIGx0cmVlKTsgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi8KICAgICAgICAgICAgICAgIGV4dHJhID0gZXh0cmFfbGJpdHNbY29kZV07CiAgICAgICAgICAgICAgICBpZiAoZXh0cmEgIT09IDApIHsKICAgICAgICAgICAgICAgICAgbGMgLT0gYmFzZV9sZW5ndGhbY29kZV07CiAgICAgICAgICAgICAgICAgIHNlbmRfYml0cyhzLCBsYywgZXh0cmEpOyAvKiBzZW5kIHRoZSBleHRyYSBsZW5ndGggYml0cyAqLwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGlzdC0tOyAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovCiAgICAgICAgICAgICAgICBjb2RlID0gZF9jb2RlKGRpc3QpOwogICAgICAgICAgICAgICAgLy9Bc3NlcnQgKGNvZGUgPCBEX0NPREVTLCAiYmFkIGRfY29kZSIpOwoKICAgICAgICAgICAgICAgIHNlbmRfY29kZShzLCBjb2RlLCBkdHJlZSk7IC8qIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGUgKi8KICAgICAgICAgICAgICAgIGV4dHJhID0gZXh0cmFfZGJpdHNbY29kZV07CiAgICAgICAgICAgICAgICBpZiAoZXh0cmEgIT09IDApIHsKICAgICAgICAgICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07CiAgICAgICAgICAgICAgICAgIHNlbmRfYml0cyhzLCBkaXN0LCBleHRyYSk7IC8qIHNlbmQgdGhlIGV4dHJhIGRpc3RhbmNlIGJpdHMgKi8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IC8qIGxpdGVyYWwgb3IgbWF0Y2ggcGFpciA/ICovCgogICAgICAgICAgICAgIC8qIENoZWNrIHRoYXQgdGhlIG92ZXJsYXkgYmV0d2VlbiBwZW5kaW5nX2J1ZiBhbmQgZF9idWYrbF9idWYgaXMgb2s6ICovCiAgICAgICAgICAgICAgLy9Bc3NlcnQoKHVJbnQpKHMtPnBlbmRpbmcpIDwgcy0+bGl0X2J1ZnNpemUgKyAyKmx4LAogICAgICAgICAgICAgIC8vICAgICAgICJwZW5kaW5nQnVmIG92ZXJmbG93Iik7CgogICAgICAgICAgICB9IHdoaWxlIChseCA8IHMubGFzdF9saXQpOwogICAgICAgICAgfQoKICAgICAgICAgIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIGx0cmVlKTsKICAgICAgICB9CgoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBDb25zdHJ1Y3Qgb25lIEh1ZmZtYW4gdHJlZSBhbmQgYXNzaWducyB0aGUgY29kZSBiaXQgc3RyaW5ncyBhbmQgbGVuZ3Rocy4KICAgICAgICAgKiBVcGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLgogICAgICAgICAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkIGZyZXEgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy4KICAgICAgICAgKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkcyBsZW4gYW5kIGNvZGUgYXJlIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoCiAgICAgICAgICogICAgIGFuZCBjb3JyZXNwb25kaW5nIGNvZGUuIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzCiAgICAgICAgICogICAgIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpcyBub3QgbnVsbC4gVGhlIGZpZWxkIG1heF9jb2RlIGlzIHNldC4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBidWlsZF90cmVlKHMsIGRlc2MpCiAgICAgICAgLy8gICAgZGVmbGF0ZV9zdGF0ZSAqczsKICAgICAgICAvLyAgICB0cmVlX2Rlc2MgKmRlc2M7IC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi8KICAgICAgICB7CiAgICAgICAgICB2YXIgdHJlZSA9IGRlc2MuZHluX3RyZWU7CiAgICAgICAgICB2YXIgc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTsKICAgICAgICAgIHZhciBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7CiAgICAgICAgICB2YXIgZWxlbXMgPSBkZXNjLnN0YXRfZGVzYy5lbGVtczsKICAgICAgICAgIHZhciBuLCBtOyAvKiBpdGVyYXRlIG92ZXIgaGVhcCBlbGVtZW50cyAqLwogICAgICAgICAgdmFyIG1heF9jb2RlID0gLTE7IC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqLwogICAgICAgICAgdmFyIG5vZGU7IC8qIG5ldyBub2RlIGJlaW5nIGNyZWF0ZWQgKi8KCiAgICAgICAgICAvKiBDb25zdHJ1Y3QgdGhlIGluaXRpYWwgaGVhcCwgd2l0aCBsZWFzdCBmcmVxdWVudCBlbGVtZW50IGluCiAgICAgICAgICAgKiBoZWFwW1NNQUxMRVNUXS4gVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS4KICAgICAgICAgICAqIGhlYXBbMF0gaXMgbm90IHVzZWQuCiAgICAgICAgICAgKi8KICAgICAgICAgIHMuaGVhcF9sZW4gPSAwOwogICAgICAgICAgcy5oZWFwX21heCA9IEhFQVBfU0laRTsKCiAgICAgICAgICBmb3IgKG4gPSAwOyBuIDwgZWxlbXM7IG4rKykgewogICAgICAgICAgICBpZiAodHJlZVtuICogMl0gLyouRnJlcSovICE9PSAwKSB7CiAgICAgICAgICAgICAgcy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47CiAgICAgICAgICAgICAgcy5kZXB0aFtuXSA9IDA7CgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRyZWVbbiAqIDIgKyAxXSAvKi5MZW4qLyA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvKiBUaGUgcGt6aXAgZm9ybWF0IHJlcXVpcmVzIHRoYXQgYXQgbGVhc3Qgb25lIGRpc3RhbmNlIGNvZGUgZXhpc3RzLAogICAgICAgICAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lCiAgICAgICAgICAgKiBwb3NzaWJsZSBjb2RlLiBTbyB0byBhdm9pZCBzcGVjaWFsIGNoZWNrcyBsYXRlciBvbiB3ZSBmb3JjZSBhdCBsZWFzdAogICAgICAgICAgICogdHdvIGNvZGVzIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeS4KICAgICAgICAgICAqLwogICAgICAgICAgd2hpbGUgKHMuaGVhcF9sZW4gPCAyKSB7CiAgICAgICAgICAgIG5vZGUgPSBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IChtYXhfY29kZSA8IDIgPyArK21heF9jb2RlIDogMCk7CiAgICAgICAgICAgIHRyZWVbbm9kZSAqIDJdIC8qLkZyZXEqLyA9IDE7CiAgICAgICAgICAgIHMuZGVwdGhbbm9kZV0gPSAwOwogICAgICAgICAgICBzLm9wdF9sZW4tLTsKCiAgICAgICAgICAgIGlmIChoYXNfc3RyZWUpIHsKICAgICAgICAgICAgICBzLnN0YXRpY19sZW4gLT0gc3RyZWVbbm9kZSAqIDIgKyAxXSAvKi5MZW4qLyA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyogbm9kZSBpcyAwIG9yIDEgc28gaXQgZG9lcyBub3QgaGF2ZSBleHRyYSBiaXRzICovCiAgICAgICAgICB9CiAgICAgICAgICBkZXNjLm1heF9jb2RlID0gbWF4X2NvZGU7CgogICAgICAgICAgLyogVGhlIGVsZW1lbnRzIGhlYXBbaGVhcF9sZW4vMisxIC4uIGhlYXBfbGVuXSBhcmUgbGVhdmVzIG9mIHRoZSB0cmVlLAogICAgICAgICAgICogZXN0YWJsaXNoIHN1Yi1oZWFwcyBvZiBpbmNyZWFzaW5nIGxlbmd0aHM6CiAgICAgICAgICAgKi8KICAgICAgICAgIGZvciAobiA9IChzLmhlYXBfbGVuID4+IDEgLyppbnQgLzIqLyApOyBuID49IDE7IG4tLSkgewogICAgICAgICAgICBwcWRvd25oZWFwKHMsIHRyZWUsIG4pOwogICAgICAgICAgfQoKICAgICAgICAgIC8qIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGJ5IHJlcGVhdGVkbHkgY29tYmluaW5nIHRoZSBsZWFzdCB0d28KICAgICAgICAgICAqIGZyZXF1ZW50IG5vZGVzLgogICAgICAgICAgICovCiAgICAgICAgICBub2RlID0gZWxlbXM7IC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqLwogICAgICAgICAgZG8gewogICAgICAgICAgICAvL3BxcmVtb3ZlKHMsIHRyZWUsIG4pOyAgLyogbiA9IG5vZGUgb2YgbGVhc3QgZnJlcXVlbmN5ICovCiAgICAgICAgICAgIC8qKiogcHFyZW1vdmUgKioqLwogICAgICAgICAgICBuID0gcy5oZWFwWzEgLypTTUFMTEVTVCovIF07CiAgICAgICAgICAgIHMuaGVhcFsxIC8qU01BTExFU1QqLyBdID0gcy5oZWFwW3MuaGVhcF9sZW4tLV07CiAgICAgICAgICAgIHBxZG93bmhlYXAocywgdHJlZSwgMSAvKlNNQUxMRVNUKi8gKTsKICAgICAgICAgICAgLyoqKi8KCiAgICAgICAgICAgIG0gPSBzLmhlYXBbMSAvKlNNQUxMRVNUKi8gXTsgLyogbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3kgKi8KCiAgICAgICAgICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLyoga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeSAqLwogICAgICAgICAgICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IG07CgogICAgICAgICAgICAvKiBDcmVhdGUgYSBuZXcgbm9kZSBmYXRoZXIgb2YgbiBhbmQgbSAqLwogICAgICAgICAgICB0cmVlW25vZGUgKiAyXSAvKi5GcmVxKi8gPSB0cmVlW24gKiAyXSAvKi5GcmVxKi8gKyB0cmVlW20gKiAyXSAvKi5GcmVxKi8gOwogICAgICAgICAgICBzLmRlcHRoW25vZGVdID0gKHMuZGVwdGhbbl0gPj0gcy5kZXB0aFttXSA/IHMuZGVwdGhbbl0gOiBzLmRlcHRoW21dKSArIDE7CiAgICAgICAgICAgIHRyZWVbbiAqIDIgKyAxXSAvKi5EYWQqLyA9IHRyZWVbbSAqIDIgKyAxXSAvKi5EYWQqLyA9IG5vZGU7CgogICAgICAgICAgICAvKiBhbmQgaW5zZXJ0IHRoZSBuZXcgbm9kZSBpbiB0aGUgaGVhcCAqLwogICAgICAgICAgICBzLmhlYXBbMSAvKlNNQUxMRVNUKi8gXSA9IG5vZGUrKzsKICAgICAgICAgICAgcHFkb3duaGVhcChzLCB0cmVlLCAxIC8qU01BTExFU1QqLyApOwoKICAgICAgICAgIH0gd2hpbGUgKHMuaGVhcF9sZW4gPj0gMik7CgogICAgICAgICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBzLmhlYXBbMSAvKlNNQUxMRVNUKi8gXTsKCiAgICAgICAgICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93CiAgICAgICAgICAgKiBnZW5lcmF0ZSB0aGUgYml0IGxlbmd0aHMuCiAgICAgICAgICAgKi8KICAgICAgICAgIGdlbl9iaXRsZW4ocywgZGVzYyk7CgogICAgICAgICAgLyogVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2RlcyAqLwogICAgICAgICAgZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBzLmJsX2NvdW50KTsKICAgICAgICB9CgoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBTY2FuIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIHRvIGRldGVybWluZSB0aGUgZnJlcXVlbmNpZXMgb2YgdGhlIGNvZGVzCiAgICAgICAgICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBzY2FuX3RyZWUocywgdHJlZSwgbWF4X2NvZGUpCiAgICAgICAgLy8gICAgZGVmbGF0ZV9zdGF0ZSAqczsKICAgICAgICAvLyAgICBjdF9kYXRhICp0cmVlOyAgIC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi8KICAgICAgICAvLyAgICBpbnQgbWF4X2NvZGU7ICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqLwogICAgICAgIHsKICAgICAgICAgIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovCiAgICAgICAgICB2YXIgcHJldmxlbiA9IC0xOyAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovCiAgICAgICAgICB2YXIgY3VybGVuOyAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovCgogICAgICAgICAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0gLyouTGVuKi8gOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovCgogICAgICAgICAgdmFyIGNvdW50ID0gMDsgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi8KICAgICAgICAgIHZhciBtYXhfY291bnQgPSA3OyAvKiBtYXggcmVwZWF0IGNvdW50ICovCiAgICAgICAgICB2YXIgbWluX2NvdW50ID0gNDsgLyogbWluIHJlcGVhdCBjb3VudCAqLwoKICAgICAgICAgIGlmIChuZXh0bGVuID09PSAwKSB7CiAgICAgICAgICAgIG1heF9jb3VudCA9IDEzODsKICAgICAgICAgICAgbWluX2NvdW50ID0gMzsKICAgICAgICAgIH0KICAgICAgICAgIHRyZWVbKG1heF9jb2RlICsgMSkgKiAyICsgMV0gLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovCgogICAgICAgICAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7CiAgICAgICAgICAgIGN1cmxlbiA9IG5leHRsZW47CiAgICAgICAgICAgIG5leHRsZW4gPSB0cmVlWyhuICsgMSkgKiAyICsgMV0gLyouTGVuKi8gOwoKICAgICAgICAgICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7CiAgICAgICAgICAgICAgY29udGludWU7CgogICAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50IDwgbWluX2NvdW50KSB7CiAgICAgICAgICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdIC8qLkZyZXEqLyArPSBjb3VudDsKCiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7CgogICAgICAgICAgICAgIGlmIChjdXJsZW4gIT09IHByZXZsZW4pIHsKICAgICAgICAgICAgICAgIHMuYmxfdHJlZVtjdXJsZW4gKiAyXSAvKi5GcmVxKi8gKys7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHMuYmxfdHJlZVtSRVBfM182ICogMl0gLyouRnJlcSovICsrOwoKICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkgewogICAgICAgICAgICAgIHMuYmxfdHJlZVtSRVBaXzNfMTAgKiAyXSAvKi5GcmVxKi8gKys7CgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHMuYmxfdHJlZVtSRVBaXzExXzEzOCAqIDJdIC8qLkZyZXEqLyArKzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY291bnQgPSAwOwogICAgICAgICAgICBwcmV2bGVuID0gY3VybGVuOwoKICAgICAgICAgICAgaWYgKG5leHRsZW4gPT09IDApIHsKICAgICAgICAgICAgICBtYXhfY291bnQgPSAxMzg7CiAgICAgICAgICAgICAgbWluX2NvdW50ID0gMzsKCiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7CiAgICAgICAgICAgICAgbWF4X2NvdW50ID0gNjsKICAgICAgICAgICAgICBtaW5fY291bnQgPSAzOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBtYXhfY291bnQgPSA3OwogICAgICAgICAgICAgIG1pbl9jb3VudCA9IDQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBTZW5kIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIGluIGNvbXByZXNzZWQgZm9ybSwgdXNpbmcgdGhlIGNvZGVzIGluCiAgICAgICAgICogYmxfdHJlZS4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBzZW5kX3RyZWUocywgdHJlZSwgbWF4X2NvZGUpCiAgICAgICAgLy8gICAgZGVmbGF0ZV9zdGF0ZSAqczsKICAgICAgICAvLyAgICBjdF9kYXRhICp0cmVlOyAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovCiAgICAgICAgLy8gICAgaW50IG1heF9jb2RlOyAgICAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi8KICAgICAgICB7CiAgICAgICAgICB2YXIgbjsgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqLwogICAgICAgICAgdmFyIHByZXZsZW4gPSAtMTsgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqLwogICAgICAgICAgdmFyIGN1cmxlbjsgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqLwoKICAgICAgICAgIHZhciBuZXh0bGVuID0gdHJlZVswICogMiArIDFdIC8qLkxlbiovIDsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqLwoKICAgICAgICAgIHZhciBjb3VudCA9IDA7IC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovCiAgICAgICAgICB2YXIgbWF4X2NvdW50ID0gNzsgLyogbWF4IHJlcGVhdCBjb3VudCAqLwogICAgICAgICAgdmFyIG1pbl9jb3VudCA9IDQ7IC8qIG1pbiByZXBlYXQgY291bnQgKi8KCiAgICAgICAgICAvKiB0cmVlW21heF9jb2RlKzFdLkxlbiA9IC0xOyAqLwogICAgICAgICAgLyogZ3VhcmQgYWxyZWFkeSBzZXQgKi8KICAgICAgICAgIGlmIChuZXh0bGVuID09PSAwKSB7CiAgICAgICAgICAgIG1heF9jb3VudCA9IDEzODsKICAgICAgICAgICAgbWluX2NvdW50ID0gMzsKICAgICAgICAgIH0KCiAgICAgICAgICBmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHsKICAgICAgICAgICAgY3VybGVuID0gbmV4dGxlbjsKICAgICAgICAgICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXSAvKi5MZW4qLyA7CgogICAgICAgICAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHsKICAgICAgICAgICAgICBjb250aW51ZTsKCiAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHsKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpOwogICAgICAgICAgICAgIH0gd2hpbGUgKC0tY291bnQgIT09IDApOwoKICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHsKICAgICAgICAgICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7CiAgICAgICAgICAgICAgICBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpOwogICAgICAgICAgICAgICAgY291bnQtLTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy9Bc3NlcnQoY291bnQgPj0gMyAmJiBjb3VudCA8PSA2LCAiIDNfNj8iKTsKICAgICAgICAgICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTsKICAgICAgICAgICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAyKTsKCiAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHsKICAgICAgICAgICAgICBzZW5kX2NvZGUocywgUkVQWl8zXzEwLCBzLmJsX3RyZWUpOwogICAgICAgICAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDMpOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZW5kX2NvZGUocywgUkVQWl8xMV8xMzgsIHMuYmxfdHJlZSk7CiAgICAgICAgICAgICAgc2VuZF9iaXRzKHMsIGNvdW50IC0gMTEsIDcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb3VudCA9IDA7CiAgICAgICAgICAgIHByZXZsZW4gPSBjdXJsZW47CiAgICAgICAgICAgIGlmIChuZXh0bGVuID09PSAwKSB7CiAgICAgICAgICAgICAgbWF4X2NvdW50ID0gMTM4OwogICAgICAgICAgICAgIG1pbl9jb3VudCA9IDM7CgogICAgICAgICAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikgewogICAgICAgICAgICAgIG1heF9jb3VudCA9IDY7CiAgICAgICAgICAgICAgbWluX2NvdW50ID0gMzsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbWF4X2NvdW50ID0gNzsKICAgICAgICAgICAgICBtaW5fY291bnQgPSA0OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgZm9yIHRoZSBiaXQgbGVuZ3RocyBhbmQgcmV0dXJuIHRoZSBpbmRleCBpbgogICAgICAgICAqIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGJ1aWxkX2JsX3RyZWUocykgewogICAgICAgICAgdmFyIG1heF9ibGluZGV4OyAvKiBpbmRleCBvZiBsYXN0IGJpdCBsZW5ndGggY29kZSBvZiBub24gemVybyBmcmVxICovCgogICAgICAgICAgLyogRGV0ZXJtaW5lIHRoZSBiaXQgbGVuZ3RoIGZyZXF1ZW5jaWVzIGZvciBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqLwogICAgICAgICAgc2Nhbl90cmVlKHMsIHMuZHluX2x0cmVlLCBzLmxfZGVzYy5tYXhfY29kZSk7CiAgICAgICAgICBzY2FuX3RyZWUocywgcy5keW5fZHRyZWUsIHMuZF9kZXNjLm1heF9jb2RlKTsKCiAgICAgICAgICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlOiAqLwogICAgICAgICAgYnVpbGRfdHJlZShzLCBzLmJsX2Rlc2MpOwogICAgICAgICAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdAogICAgICAgICAgICogdGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGhzIGNvZGVzIGFuZCB0aGUgNSs1KzQgYml0cyBmb3IgdGhlIGNvdW50cy4KICAgICAgICAgICAqLwoKICAgICAgICAgIC8qIERldGVybWluZSB0aGUgbnVtYmVyIG9mIGJpdCBsZW5ndGggY29kZXMgdG8gc2VuZC4gVGhlIHBremlwIGZvcm1hdAogICAgICAgICAgICogcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCA0IGJpdCBsZW5ndGggY29kZXMgYmUgc2VudC4gKGFwcG5vdGUudHh0IHNheXMKICAgICAgICAgICAqIDMgYnV0IHRoZSBhY3R1YWwgdmFsdWUgdXNlZCBpcyA0LikKICAgICAgICAgICAqLwogICAgICAgICAgZm9yIChtYXhfYmxpbmRleCA9IEJMX0NPREVTIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkgewogICAgICAgICAgICBpZiAocy5ibF90cmVlW2JsX29yZGVyW21heF9ibGluZGV4XSAqIDIgKyAxXSAvKi5MZW4qLyAhPT0gMCkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqLwogICAgICAgICAgcy5vcHRfbGVuICs9IDMgKiAobWF4X2JsaW5kZXggKyAxKSArIDUgKyA1ICsgNDsKICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICJcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGQiLAogICAgICAgICAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTsKCiAgICAgICAgICByZXR1cm4gbWF4X2JsaW5kZXg7CiAgICAgICAgfQoKCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogU2VuZCB0aGUgaGVhZGVyIGZvciBhIGJsb2NrIHVzaW5nIGR5bmFtaWMgSHVmZm1hbiB0cmVlczogdGhlIGNvdW50cywgdGhlCiAgICAgICAgICogbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcywgdGhlIGxpdGVyYWwgdHJlZSBhbmQgdGhlIGRpc3RhbmNlIHRyZWUuCiAgICAgICAgICogSU4gYXNzZXJ0aW9uOiBsY29kZXMgPj0gMjU3LCBkY29kZXMgPj0gMSwgYmxjb2RlcyA+PSA0LgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHNlbmRfYWxsX3RyZWVzKHMsIGxjb2RlcywgZGNvZGVzLCBibGNvZGVzKQogICAgICAgIC8vICAgIGRlZmxhdGVfc3RhdGUgKnM7CiAgICAgICAgLy8gICAgaW50IGxjb2RlcywgZGNvZGVzLCBibGNvZGVzOyAvKiBudW1iZXIgb2YgY29kZXMgZm9yIGVhY2ggdHJlZSAqLwogICAgICAgIHsKICAgICAgICAgIHZhciByYW5rOyAvKiBpbmRleCBpbiBibF9vcmRlciAqLwoKICAgICAgICAgIC8vQXNzZXJ0IChsY29kZXMgPj0gMjU3ICYmIGRjb2RlcyA+PSAxICYmIGJsY29kZXMgPj0gNCwgIm5vdCBlbm91Z2ggY29kZXMiKTsKICAgICAgICAgIC8vQXNzZXJ0IChsY29kZXMgPD0gTF9DT0RFUyAmJiBkY29kZXMgPD0gRF9DT0RFUyAmJiBibGNvZGVzIDw9IEJMX0NPREVTLAogICAgICAgICAgLy8gICAgICAgICJ0b28gbWFueSBjb2RlcyIpOwogICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgIlxuYmwgY291bnRzOiAiKSk7CiAgICAgICAgICBzZW5kX2JpdHMocywgbGNvZGVzIC0gMjU3LCA1KTsgLyogbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovCiAgICAgICAgICBzZW5kX2JpdHMocywgZGNvZGVzIC0gMSwgNSk7CiAgICAgICAgICBzZW5kX2JpdHMocywgYmxjb2RlcyAtIDQsIDQpOyAvKiBub3QgLTMgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovCiAgICAgICAgICBmb3IgKHJhbmsgPSAwOyByYW5rIDwgYmxjb2RlczsgcmFuaysrKSB7CiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICJcbmJsIGNvZGUgJTJkICIsIGJsX29yZGVyW3JhbmtdKSk7CiAgICAgICAgICAgIHNlbmRfYml0cyhzLCBzLmJsX3RyZWVbYmxfb3JkZXJbcmFua10gKiAyICsgMV0gLyouTGVuKi8gLCAzKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICJcbmJsIHRyZWU6IHNlbnQgJWxkIiwgcy0+Yml0c19zZW50KSk7CgogICAgICAgICAgc2VuZF90cmVlKHMsIHMuZHluX2x0cmVlLCBsY29kZXMgLSAxKTsgLyogbGl0ZXJhbCB0cmVlICovCiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAiXG5saXQgdHJlZTogc2VudCAlbGQiLCBzLT5iaXRzX3NlbnQpKTsKCiAgICAgICAgICBzZW5kX3RyZWUocywgcy5keW5fZHRyZWUsIGRjb2RlcyAtIDEpOyAvKiBkaXN0YW5jZSB0cmVlICovCiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAiXG5kaXN0IHRyZWU6IHNlbnQgJWxkIiwgcy0+Yml0c19zZW50KSk7CiAgICAgICAgfQoKCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogQ2hlY2sgaWYgdGhlIGRhdGEgdHlwZSBpcyBURVhUIG9yIEJJTkFSWSwgdXNpbmcgdGhlIGZvbGxvd2luZyBhbGdvcml0aG06CiAgICAgICAgICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOgogICAgICAgICAqICAgIGEpIFRoZXJlIGFyZSBubyBub24tcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGJlbG9uZ2luZyB0byB0aGUKICAgICAgICAgKiAgICAgICAiYmxhY2sgbGlzdCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS4KICAgICAgICAgKiAgICBiKSBUaGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJpbnRhYmxlIGNoYXJhY3RlciBiZWxvbmdpbmcgdG8gdGhlCiAgICAgICAgICogICAgICAgIndoaXRlIGxpc3QiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS4KICAgICAgICAgKiAtIEJJTkFSWSBvdGhlcndpc2UuCiAgICAgICAgICogLSBUaGUgZm9sbG93aW5nIHBhcnRpYWxseS1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgZm9ybSBhCiAgICAgICAgICogICAiZ3JheSBsaXN0IiB0aGF0IGlzIGlnbm9yZWQgaW4gdGhpcyBkZXRlY3Rpb24gYWxnb3JpdGhtOgogICAgICAgICAqICAgKDcge0JFTH0sIDgge0JTfSwgMTEge1ZUfSwgMTIge0ZGfSwgMjYge1NVQn0sIDI3IHtFU0N9KS4KICAgICAgICAgKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBkZXRlY3RfZGF0YV90eXBlKHMpIHsKICAgICAgICAgIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlcwogICAgICAgICAgICogc2V0IGJpdHMgMC4uNiwgMTQuLjI1LCBhbmQgMjguLjMxCiAgICAgICAgICAgKiAweGYzZmZjMDdmID0gYmluYXJ5IDExMTEwMDExMTExMTExMTExMTAwMDAwMDAxMTExMTExCiAgICAgICAgICAgKi8KICAgICAgICAgIHZhciBibGFja19tYXNrID0gMHhmM2ZmYzA3ZjsKICAgICAgICAgIHZhciBuOwoKICAgICAgICAgIC8qIENoZWNrIGZvciBub24tdGV4dHVhbCAoImJsYWNrLWxpc3RlZCIpIGJ5dGVzLiAqLwogICAgICAgICAgZm9yIChuID0gMDsgbiA8PSAzMTsgbisrLCBibGFja19tYXNrID4+Pj0gMSkgewogICAgICAgICAgICBpZiAoKGJsYWNrX21hc2sgJiAxKSAmJiAocy5keW5fbHRyZWVbbiAqIDJdIC8qLkZyZXEqLyAhPT0gMCkpIHsKICAgICAgICAgICAgICByZXR1cm4gWl9CSU5BUlk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoIndoaXRlLWxpc3RlZCIpIGJ5dGVzLiAqLwogICAgICAgICAgaWYgKHMuZHluX2x0cmVlWzkgKiAyXSAvKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXSAvKi5GcmVxKi8gIT09IDAgfHwKICAgICAgICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXSAvKi5GcmVxKi8gIT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIFpfVEVYVDsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAobiA9IDMyOyBuIDwgTElURVJBTFM7IG4rKykgewogICAgICAgICAgICBpZiAocy5keW5fbHRyZWVbbiAqIDJdIC8qLkZyZXEqLyAhPT0gMCkgewogICAgICAgICAgICAgIHJldHVybiBaX1RFWFQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvKiBUaGVyZSBhcmUgbm8gImJsYWNrLWxpc3RlZCIgb3IgIndoaXRlLWxpc3RlZCIgYnl0ZXM6CiAgICAgICAgICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoImdyYXktbGlzdGVkIikgYnl0ZXMgb25seS4KICAgICAgICAgICAqLwogICAgICAgICAgcmV0dXJuIFpfQklOQVJZOwogICAgICAgIH0KCgogICAgICAgIHZhciBzdGF0aWNfaW5pdF9kb25lID0gZmFsc2U7CgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIEluaXRpYWxpemUgdGhlIHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbS4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBfdHJfaW5pdChzKSB7CgogICAgICAgICAgaWYgKCFzdGF0aWNfaW5pdF9kb25lKSB7CiAgICAgICAgICAgIHRyX3N0YXRpY19pbml0KCk7CiAgICAgICAgICAgIHN0YXRpY19pbml0X2RvbmUgPSB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHMubF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuZHluX2x0cmVlLCBzdGF0aWNfbF9kZXNjKTsKICAgICAgICAgIHMuZF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuZHluX2R0cmVlLCBzdGF0aWNfZF9kZXNjKTsKICAgICAgICAgIHMuYmxfZGVzYyA9IG5ldyBUcmVlRGVzYyhzLmJsX3RyZWUsIHN0YXRpY19ibF9kZXNjKTsKCiAgICAgICAgICBzLmJpX2J1ZiA9IDA7CiAgICAgICAgICBzLmJpX3ZhbGlkID0gMDsKCiAgICAgICAgICAvKiBJbml0aWFsaXplIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgZmlyc3QgZmlsZTogKi8KICAgICAgICAgIGluaXRfYmxvY2socyk7CiAgICAgICAgfQoKCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogU2VuZCBhIHN0b3JlZCBibG9jawogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIF90cl9zdG9yZWRfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KQogICAgICAgIC8vRGVmbGF0ZVN0YXRlICpzOwogICAgICAgIC8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi8KICAgICAgICAvL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqLwogICAgICAgIC8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqLwogICAgICAgIHsKICAgICAgICAgIHNlbmRfYml0cyhzLCAoU1RPUkVEX0JMT0NLIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpOyAvKiBzZW5kIGJsb2NrIHR5cGUgKi8KICAgICAgICAgIGNvcHlfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCB0cnVlKTsgLyogd2l0aCBoZWFkZXIgKi8KICAgICAgICB9CgoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLgogICAgICAgICAqIFRoaXMgdGFrZXMgMTAgYml0cywgb2Ygd2hpY2ggNyBtYXkgcmVtYWluIGluIHRoZSBiaXQgYnVmZmVyLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIF90cl9hbGlnbihzKSB7CiAgICAgICAgICBzZW5kX2JpdHMocywgU1RBVElDX1RSRUVTIDw8IDEsIDMpOwogICAgICAgICAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgc3RhdGljX2x0cmVlKTsKICAgICAgICAgIGJpX2ZsdXNoKHMpOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZyBmb3IgdGhlIGN1cnJlbnQgYmxvY2s6IGR5bmFtaWMgdHJlZXMsIHN0YXRpYwogICAgICAgICAqIHRyZWVzIG9yIHN0b3JlLCBhbmQgb3V0cHV0IHRoZSBlbmNvZGVkIGJsb2NrIHRvIHRoZSB6aXAgZmlsZS4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBfdHJfZmx1c2hfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KQogICAgICAgIC8vRGVmbGF0ZVN0YXRlICpzOwogICAgICAgIC8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2ssIG9yIE5VTEwgaWYgdG9vIG9sZCAqLwogICAgICAgIC8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovCiAgICAgICAgLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovCiAgICAgICAgewogICAgICAgICAgdmFyIG9wdF9sZW5iLCBzdGF0aWNfbGVuYjsgLyogb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBpbiBieXRlcyAqLwogICAgICAgICAgdmFyIG1heF9ibGluZGV4ID0gMDsgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqLwoKICAgICAgICAgIC8qIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWQgKi8KICAgICAgICAgIGlmIChzLmxldmVsID4gMCkgewoKICAgICAgICAgICAgLyogQ2hlY2sgaWYgdGhlIGZpbGUgaXMgYmluYXJ5IG9yIHRleHQgKi8KICAgICAgICAgICAgaWYgKHMuc3RybS5kYXRhX3R5cGUgPT09IFpfVU5LTk9XTikgewogICAgICAgICAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBDb25zdHJ1Y3QgdGhlIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovCiAgICAgICAgICAgIGJ1aWxkX3RyZWUocywgcy5sX2Rlc2MpOwogICAgICAgICAgICAvLyBUcmFjZXYoKHN0ZGVyciwgIlxubGl0IGRhdGE6IGR5biAlbGQsIHN0YXQgJWxkIiwgcy0+b3B0X2xlbiwKICAgICAgICAgICAgLy8gICAgICAgIHMtPnN0YXRpY19sZW4pKTsKCiAgICAgICAgICAgIGJ1aWxkX3RyZWUocywgcy5kX2Rlc2MpOwogICAgICAgICAgICAvLyBUcmFjZXYoKHN0ZGVyciwgIlxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZCIsIHMtPm9wdF9sZW4sCiAgICAgICAgICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7CiAgICAgICAgICAgIC8qIEF0IHRoaXMgcG9pbnQsIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gYXJlIHRoZSB0b3RhbCBiaXQgbGVuZ3RocyBvZgogICAgICAgICAgICAgKiB0aGUgY29tcHJlc3NlZCBibG9jayBkYXRhLCBleGNsdWRpbmcgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLgogICAgICAgICAgICAgKi8KCiAgICAgICAgICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4CiAgICAgICAgICAgICAqIGluIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpOwoKICAgICAgICAgICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqLwogICAgICAgICAgICBvcHRfbGVuYiA9IChzLm9wdF9sZW4gKyAzICsgNykgPj4+IDM7CiAgICAgICAgICAgIHN0YXRpY19sZW5iID0gKHMuc3RhdGljX2xlbiArIDMgKyA3KSA+Pj4gMzsKCiAgICAgICAgICAgIC8vIFRyYWNldigoc3RkZXJyLCAiXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSAiLAogICAgICAgICAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLAogICAgICAgICAgICAvLyAgICAgICAgcy0+bGFzdF9saXQpKTsKCiAgICAgICAgICAgIGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYikgewogICAgICAgICAgICAgIG9wdF9sZW5iID0gc3RhdGljX2xlbmI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBBc3NlcnQoYnVmICE9IChjaGFyKikwLCAibG9zdCBidWYiKTsKICAgICAgICAgICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqLwogICAgICAgICAgfQoKICAgICAgICAgIGlmICgoc3RvcmVkX2xlbiArIDQgPD0gb3B0X2xlbmIpICYmIChidWYgIT09IC0xKSkgewogICAgICAgICAgICAvKiA0OiB0d28gd29yZHMgZm9yIHRoZSBsZW5ndGhzICovCgogICAgICAgICAgICAvKiBUaGUgdGVzdCBidWYgIT0gTlVMTCBpcyBvbmx5IG5lY2Vzc2FyeSBpZiBMSVRfQlVGU0laRSA+IFdTSVpFLgogICAgICAgICAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlCiAgICAgICAgICAgICAqIHRoZSBsYXN0IGJsb2NrIGZsdXNoLCBiZWNhdXNlIGNvbXByZXNzaW9uIHdvdWxkIGhhdmUgYmVlbgogICAgICAgICAgICAgKiBzdWNjZXNzZnVsLiBJZiBMSVRfQlVGU0laRSA8PSBXU0laRSwgaXQgaXMgbmV2ZXIgdG9vIGxhdGUgdG8KICAgICAgICAgICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIF90cl9zdG9yZWRfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KTsKCiAgICAgICAgICB9IGVsc2UgaWYgKHMuc3RyYXRlZ3kgPT09IFpfRklYRUQgfHwgc3RhdGljX2xlbmIgPT09IG9wdF9sZW5iKSB7CgogICAgICAgICAgICBzZW5kX2JpdHMocywgKFNUQVRJQ19UUkVFUyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTsKICAgICAgICAgICAgY29tcHJlc3NfYmxvY2socywgc3RhdGljX2x0cmVlLCBzdGF0aWNfZHRyZWUpOwoKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlbmRfYml0cyhzLCAoRFlOX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpOwogICAgICAgICAgICBzZW5kX2FsbF90cmVlcyhzLCBzLmxfZGVzYy5tYXhfY29kZSArIDEsIHMuZF9kZXNjLm1heF9jb2RlICsgMSwgbWF4X2JsaW5kZXggKyAxKTsKICAgICAgICAgICAgY29tcHJlc3NfYmxvY2socywgcy5keW5fbHRyZWUsIHMuZHluX2R0cmVlKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vIEFzc2VydCAocy0+Y29tcHJlc3NlZF9sZW4gPT0gcy0+Yml0c19zZW50LCAiYmFkIGNvbXByZXNzZWQgc2l6ZSIpOwogICAgICAgICAgLyogVGhlIGFib3ZlIGNoZWNrIGlzIG1hZGUgbW9kIDJeMzIsIGZvciBmaWxlcyBsYXJnZXIgdGhhbiA1MTIgTUIKICAgICAgICAgICAqIGFuZCB1TG9uZyBpbXBsZW1lbnRlZCBvbiAzMiBiaXRzLgogICAgICAgICAgICovCiAgICAgICAgICBpbml0X2Jsb2NrKHMpOwoKICAgICAgICAgIGlmIChsYXN0KSB7CiAgICAgICAgICAgIGJpX3dpbmR1cChzKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vIFRyYWNldigoc3RkZXJyLCJcbmNvbXBybGVuICVsdSglbHUpICIsIHMtPmNvbXByZXNzZWRfbGVuPj4zLAogICAgICAgICAgLy8gICAgICAgcy0+Y29tcHJlc3NlZF9sZW4tNypsYXN0KSk7CiAgICAgICAgfQoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBTYXZlIHRoZSBtYXRjaCBpbmZvIGFuZCB0YWxseSB0aGUgZnJlcXVlbmN5IGNvdW50cy4gUmV0dXJuIHRydWUgaWYKICAgICAgICAgKiB0aGUgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gX3RyX3RhbGx5KHMsIGRpc3QsIGxjKQogICAgICAgIC8vICAgIGRlZmxhdGVfc3RhdGUgKnM7CiAgICAgICAgLy8gICAgdW5zaWduZWQgZGlzdDsgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovCiAgICAgICAgLy8gICAgdW5zaWduZWQgbGM7ICAgIC8qIG1hdGNoIGxlbmd0aC1NSU5fTUFUQ0ggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3Q9PTApICovCiAgICAgICAgewogICAgICAgICAgLy92YXIgb3V0X2xlbmd0aCwgaW5fbGVuZ3RoLCBkY29kZTsKCiAgICAgICAgICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMl0gPSAoZGlzdCA+Pj4gOCkgJiAweGZmOwogICAgICAgICAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDIgKyAxXSA9IGRpc3QgJiAweGZmOwoKICAgICAgICAgIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZmOwogICAgICAgICAgcy5sYXN0X2xpdCsrOwoKICAgICAgICAgIGlmIChkaXN0ID09PSAwKSB7CiAgICAgICAgICAgIC8qIGxjIGlzIHRoZSB1bm1hdGNoZWQgY2hhciAqLwogICAgICAgICAgICBzLmR5bl9sdHJlZVtsYyAqIDJdIC8qLkZyZXEqLyArKzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHMubWF0Y2hlcysrOwogICAgICAgICAgICAvKiBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIICovCiAgICAgICAgICAgIGRpc3QtLTsgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqLwogICAgICAgICAgICAvL0Fzc2VydCgodXNoKWRpc3QgPCAodXNoKU1BWF9ESVNUKHMpICYmCiAgICAgICAgICAgIC8vICAgICAgICh1c2gpbGMgPD0gKHVzaCkoTUFYX01BVENILU1JTl9NQVRDSCkgJiYKICAgICAgICAgICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICAiX3RyX3RhbGx5OiBiYWQgbWF0Y2giKTsKCiAgICAgICAgICAgIHMuZHluX2x0cmVlWyhfbGVuZ3RoX2NvZGVbbGNdICsgTElURVJBTFMgKyAxKSAqIDJdIC8qLkZyZXEqLyArKzsKICAgICAgICAgICAgcy5keW5fZHRyZWVbZF9jb2RlKGRpc3QpICogMl0gLyouRnJlcSovICsrOwogICAgICAgICAgfQoKICAgICAgICAgIC8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYWlsdHMsCiAgICAgICAgICAvLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5CgogICAgICAgICAgLy8jaWZkZWYgVFJVTkNBVEVfQkxPQ0sKICAgICAgICAgIC8vICAvKiBUcnkgdG8gZ3Vlc3MgaWYgaXQgaXMgcHJvZml0YWJsZSB0byBzdG9wIHRoZSBjdXJyZW50IGJsb2NrIGhlcmUgKi8KICAgICAgICAgIC8vICBpZiAoKHMubGFzdF9saXQgJiAweDFmZmYpID09PSAwICYmIHMubGV2ZWwgPiAyKSB7CiAgICAgICAgICAvLyAgICAvKiBDb21wdXRlIGFuIHVwcGVyIGJvdW5kIGZvciB0aGUgY29tcHJlc3NlZCBsZW5ndGggKi8KICAgICAgICAgIC8vICAgIG91dF9sZW5ndGggPSBzLmxhc3RfbGl0Kjg7CiAgICAgICAgICAvLyAgICBpbl9sZW5ndGggPSBzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydDsKICAgICAgICAgIC8vCiAgICAgICAgICAvLyAgICBmb3IgKGRjb2RlID0gMDsgZGNvZGUgPCBEX0NPREVTOyBkY29kZSsrKSB7CiAgICAgICAgICAvLyAgICAgIG91dF9sZW5ndGggKz0gcy5keW5fZHRyZWVbZGNvZGUqMl0vKi5GcmVxKi8gKiAoNSArIGV4dHJhX2RiaXRzW2Rjb2RlXSk7CiAgICAgICAgICAvLyAgICB9CiAgICAgICAgICAvLyAgICBvdXRfbGVuZ3RoID4+Pj0gMzsKICAgICAgICAgIC8vICAgIC8vVHJhY2V2KChzdGRlcnIsIlxubGFzdF9saXQgJXUsIGluICVsZCwgb3V0IH4lbGQoJWxkJSUpICIsCiAgICAgICAgICAvLyAgICAvLyAgICAgICBzLT5sYXN0X2xpdCwgaW5fbGVuZ3RoLCBvdXRfbGVuZ3RoLAogICAgICAgICAgLy8gICAgLy8gICAgICAgMTAwTCAtIG91dF9sZW5ndGgqMTAwTC9pbl9sZW5ndGgpKTsKICAgICAgICAgIC8vICAgIGlmIChzLm1hdGNoZXMgPCAocy5sYXN0X2xpdD4+MSkvKmludCAvMiovICYmIG91dF9sZW5ndGggPCAoaW5fbGVuZ3RoPj4xKS8qaW50IC8yKi8pIHsKICAgICAgICAgIC8vICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAvLyAgICB9CiAgICAgICAgICAvLyAgfQogICAgICAgICAgLy8jZW5kaWYKCiAgICAgICAgICByZXR1cm4gKHMubGFzdF9saXQgPT09IHMubGl0X2J1ZnNpemUgLSAxKTsKICAgICAgICAgIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0SwogICAgICAgICAgICogb24gMTYgYml0IG1hY2hpbmVzIGFuZCBiZWNhdXNlIHN0b3JlZCBibG9ja3MgYXJlIHJlc3RyaWN0ZWQgdG8KICAgICAgICAgICAqIDY0Sy0xIGJ5dGVzLgogICAgICAgICAgICovCiAgICAgICAgfQoKICAgICAgICAvLyBOb3RlOiBhZGxlcjMyIHRha2VzIDEyJSBmb3IgbGV2ZWwgMCBhbmQgMiUgZm9yIGxldmVsIDYuCiAgICAgICAgLy8gSXQgZG9lc24ndCB3b3J0aCB0byBtYWtlIGFkZGl0aW9uYWwgb3B0aW1pemF0aW9uYSBhcyBpbiBvcmlnaW5hbC4KICAgICAgICAvLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuCgogICAgICAgIGZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpIHsKICAgICAgICAgIHZhciBzMSA9IChhZGxlciAmIDB4ZmZmZikgfDAsCiAgICAgICAgICAgICAgczIgPSAoKGFkbGVyID4+PiAxNikgJiAweGZmZmYpIHwwLAogICAgICAgICAgICAgIG4gPSAwOwoKICAgICAgICAgIHdoaWxlIChsZW4gIT09IDApIHsKICAgICAgICAgICAgLy8gU2V0IGxpbWl0IH4gdHdpY2UgbGVzcyB0aGFuIDU1NTIsIHRvIGtlZXAKICAgICAgICAgICAgLy8gczIgaW4gMzEtYml0cywgYmVjYXVzZSB3ZSBmb3JjZSBzaWduZWQgaW50cy4KICAgICAgICAgICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuCiAgICAgICAgICAgIG4gPSBsZW4gPiAyMDAwID8gMjAwMCA6IGxlbjsKICAgICAgICAgICAgbGVuIC09IG47CgogICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDsKICAgICAgICAgICAgICBzMiA9IChzMiArIHMxKSB8MDsKICAgICAgICAgICAgfSB3aGlsZSAoLS1uKTsKCiAgICAgICAgICAgIHMxICU9IDY1NTIxOwogICAgICAgICAgICBzMiAlPSA2NTUyMTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gKHMxIHwgKHMyIDw8IDE2KSkgfDA7CiAgICAgICAgfQoKICAgICAgICAvLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS4KICAgICAgICAvLyBTbyB3cml0ZSBjb2RlIHRvIG1pbmltaXplIHNpemUgLSBubyBwcmVnZW5lcmF0ZWQgdGFibGVzCiAgICAgICAgLy8gYW5kIGFycmF5IHRvb2xzIGRlcGVuZGVuY2llcy4KCgogICAgICAgIC8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlCiAgICAgICAgZnVuY3Rpb24gbWFrZVRhYmxlKCkgewogICAgICAgICAgdmFyIGMsIHRhYmxlID0gW107CgogICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykgewogICAgICAgICAgICBjID0gbjsKICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCA4OyBrKyspIHsKICAgICAgICAgICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRhYmxlW25dID0gYzsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdGFibGU7CiAgICAgICAgfQoKICAgICAgICAvLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLgogICAgICAgIHZhciBjcmNUYWJsZSA9IG1ha2VUYWJsZSgpOwoKCiAgICAgICAgZnVuY3Rpb24gY3JjMzIoY3JjLCBidWYsIGxlbiwgcG9zKSB7CiAgICAgICAgICB2YXIgdCA9IGNyY1RhYmxlLAogICAgICAgICAgICAgIGVuZCA9IHBvcyArIGxlbjsKCiAgICAgICAgICBjcmMgXj0gLTE7CgogICAgICAgICAgZm9yICh2YXIgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7CiAgICAgICAgICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdFsoY3JjIF4gYnVmW2ldKSAmIDB4RkZdOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiAoY3JjIF4gKC0xKSk7IC8vID4+PiAwOwogICAgICAgIH0KCiAgICAgICAgLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwoKCiAgICAgICAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqLwogICAgICAgIHZhciBaX05PX0ZMVVNIID0gMDsKICAgICAgICB2YXIgWl9QQVJUSUFMX0ZMVVNIID0gMTsKICAgICAgICAvL3ZhciBaX1NZTkNfRkxVU0ggICAgPSAyOwogICAgICAgIHZhciBaX0ZVTExfRkxVU0ggPSAzOwogICAgICAgIHZhciBaX0ZJTklTSCA9IDQ7CiAgICAgICAgdmFyIFpfQkxPQ0sgPSA1OwogICAgICAgIC8vdmFyIFpfVFJFRVMgICAgICAgICA9IDY7CgoKICAgICAgICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzCiAgICAgICAgICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLgogICAgICAgICAqLwogICAgICAgIHZhciBaX09LID0gMDsKICAgICAgICB2YXIgWl9TVFJFQU1fRU5EID0gMTsKICAgICAgICAvL3ZhciBaX05FRURfRElDVCAgICAgPSAyOwogICAgICAgIC8vdmFyIFpfRVJSTk8gICAgICAgICA9IC0xOwogICAgICAgIHZhciBaX1NUUkVBTV9FUlJPUiA9IC0yOwogICAgICAgIHZhciBaX0RBVEFfRVJST1IgPSAtMzsKICAgICAgICAvL3ZhciBaX01FTV9FUlJPUiAgICAgPSAtNDsKICAgICAgICB2YXIgWl9CVUZfRVJST1IgPSAtNTsKICAgICAgICAvL3ZhciBaX1ZFUlNJT05fRVJST1IgPSAtNjsKCgogICAgICAgIC8qIGNvbXByZXNzaW9uIGxldmVscyAqLwogICAgICAgIC8vdmFyIFpfTk9fQ09NUFJFU1NJT04gICAgICA9IDA7CiAgICAgICAgLy92YXIgWl9CRVNUX1NQRUVEICAgICAgICAgID0gMTsKICAgICAgICAvL3ZhciBaX0JFU1RfQ09NUFJFU1NJT04gICAgPSA5OwogICAgICAgIHZhciBaX0RFRkFVTFRfQ09NUFJFU1NJT04gPSAtMTsKCgogICAgICAgIHZhciBaX0ZJTFRFUkVEID0gMTsKICAgICAgICB2YXIgWl9IVUZGTUFOX09OTFkgPSAyOwogICAgICAgIHZhciBaX1JMRSA9IDM7CiAgICAgICAgdmFyIFpfRklYRUQkMSA9IDQ7CgogICAgICAgIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi8KICAgICAgICAvL3ZhciBaX0JJTkFSWSAgICAgICAgICAgICAgPSAwOwogICAgICAgIC8vdmFyIFpfVEVYVCAgICAgICAgICAgICAgICA9IDE7CiAgICAgICAgLy92YXIgWl9BU0NJSSAgICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFQKICAgICAgICB2YXIgWl9VTktOT1dOJDEgPSAyOwoKCiAgICAgICAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovCiAgICAgICAgdmFyIFpfREVGTEFURUQgPSA4OwoKICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwoKCiAgICAgICAgdmFyIE1BWF9NRU1fTEVWRUwgPSA5OwoKCiAgICAgICAgdmFyIExFTkdUSF9DT0RFUyQxID0gMjk7CiAgICAgICAgLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovCiAgICAgICAgdmFyIExJVEVSQUxTJDEgPSAyNTY7CiAgICAgICAgLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovCiAgICAgICAgdmFyIExfQ09ERVMkMSA9IExJVEVSQUxTJDEgKyAxICsgTEVOR1RIX0NPREVTJDE7CiAgICAgICAgLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovCiAgICAgICAgdmFyIERfQ09ERVMkMSA9IDMwOwogICAgICAgIC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqLwogICAgICAgIHZhciBCTF9DT0RFUyQxID0gMTk7CiAgICAgICAgLyogbnVtYmVyIG9mIGNvZGVzIHVzZWQgdG8gdHJhbnNmZXIgdGhlIGJpdCBsZW5ndGhzICovCiAgICAgICAgdmFyIEhFQVBfU0laRSQxID0gMiAqIExfQ09ERVMkMSArIDE7CiAgICAgICAgLyogbWF4aW11bSBoZWFwIHNpemUgKi8KICAgICAgICB2YXIgTUFYX0JJVFMkMSA9IDE1OwogICAgICAgIC8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqLwoKICAgICAgICB2YXIgTUlOX01BVENIJDEgPSAzOwogICAgICAgIHZhciBNQVhfTUFUQ0gkMSA9IDI1ODsKICAgICAgICB2YXIgTUlOX0xPT0tBSEVBRCA9IChNQVhfTUFUQ0gkMSArIE1JTl9NQVRDSCQxICsgMSk7CgogICAgICAgIHZhciBQUkVTRVRfRElDVCA9IDB4MjA7CgogICAgICAgIHZhciBJTklUX1NUQVRFID0gNDI7CiAgICAgICAgdmFyIEVYVFJBX1NUQVRFID0gNjk7CiAgICAgICAgdmFyIE5BTUVfU1RBVEUgPSA3MzsKICAgICAgICB2YXIgQ09NTUVOVF9TVEFURSA9IDkxOwogICAgICAgIHZhciBIQ1JDX1NUQVRFID0gMTAzOwogICAgICAgIHZhciBCVVNZX1NUQVRFID0gMTEzOwogICAgICAgIHZhciBGSU5JU0hfU1RBVEUgPSA2NjY7CgogICAgICAgIHZhciBCU19ORUVEX01PUkUgPSAxOyAvKiBibG9jayBub3QgY29tcGxldGVkLCBuZWVkIG1vcmUgaW5wdXQgb3IgbW9yZSBvdXRwdXQgKi8KICAgICAgICB2YXIgQlNfQkxPQ0tfRE9ORSA9IDI7IC8qIGJsb2NrIGZsdXNoIHBlcmZvcm1lZCAqLwogICAgICAgIHZhciBCU19GSU5JU0hfU1RBUlRFRCA9IDM7IC8qIGZpbmlzaCBzdGFydGVkLCBuZWVkIG9ubHkgbW9yZSBvdXRwdXQgYXQgbmV4dCBkZWZsYXRlICovCiAgICAgICAgdmFyIEJTX0ZJTklTSF9ET05FID0gNDsgLyogZmluaXNoIGRvbmUsIGFjY2VwdCBubyBtb3JlIGlucHV0IG9yIG91dHB1dCAqLwoKICAgICAgICB2YXIgT1NfQ09ERSA9IDB4MDM7IC8vIFVuaXggOikgLiBEb24ndCBkZXRlY3QsIHVzZSB0aGlzIGRlZmF1bHQuCgogICAgICAgIGZ1bmN0aW9uIGVycihzdHJtLCBlcnJvckNvZGUpIHsKICAgICAgICAgIHN0cm0ubXNnID0gbXNnW2Vycm9yQ29kZV07CiAgICAgICAgICByZXR1cm4gZXJyb3JDb2RlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmFuayhmKSB7CiAgICAgICAgICByZXR1cm4gKChmKSA8PCAxKSAtICgoZikgPiA0ID8gOSA6IDApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gemVybyQxKGJ1ZikgewogICAgICAgICAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7CiAgICAgICAgICB3aGlsZSAoLS1sZW4gPj0gMCkgewogICAgICAgICAgICBidWZbbGVuXSA9IDA7CiAgICAgICAgICB9CiAgICAgICAgfQoKCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUuIEFsbCBkZWZsYXRlKCkgb3V0cHV0IGdvZXMKICAgICAgICAgKiB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0CiAgICAgICAgICogdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm91dHB1dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC4KICAgICAgICAgKiAoU2VlIGFsc28gcmVhZF9idWYoKSkuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZmx1c2hfcGVuZGluZyhzdHJtKSB7CiAgICAgICAgICB2YXIgcyA9IHN0cm0uc3RhdGU7CgogICAgICAgICAgLy9fdHJfZmx1c2hfYml0cyhzKTsKICAgICAgICAgIHZhciBsZW4gPSBzLnBlbmRpbmc7CiAgICAgICAgICBpZiAobGVuID4gc3RybS5hdmFpbF9vdXQpIHsKICAgICAgICAgICAgbGVuID0gc3RybS5hdmFpbF9vdXQ7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobGVuID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBhcnJheVNldChzdHJtLm91dHB1dCwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nX291dCwgbGVuLCBzdHJtLm5leHRfb3V0KTsKICAgICAgICAgIHN0cm0ubmV4dF9vdXQgKz0gbGVuOwogICAgICAgICAgcy5wZW5kaW5nX291dCArPSBsZW47CiAgICAgICAgICBzdHJtLnRvdGFsX291dCArPSBsZW47CiAgICAgICAgICBzdHJtLmF2YWlsX291dCAtPSBsZW47CiAgICAgICAgICBzLnBlbmRpbmcgLT0gbGVuOwogICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gMCkgewogICAgICAgICAgICBzLnBlbmRpbmdfb3V0ID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiBmbHVzaF9ibG9ja19vbmx5KHMsIGxhc3QpIHsKICAgICAgICAgIF90cl9mbHVzaF9ibG9jayhzLCAocy5ibG9ja19zdGFydCA+PSAwID8gcy5ibG9ja19zdGFydCA6IC0xKSwgcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQsIGxhc3QpOwogICAgICAgICAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7CiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHMuc3RybSk7CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gcHV0X2J5dGUocywgYikgewogICAgICAgICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBQdXQgYSBzaG9ydCBpbiB0aGUgcGVuZGluZyBidWZmZXIuIFRoZSAxNi1iaXQgdmFsdWUgaXMgcHV0IGluIE1TQiBvcmRlci4KICAgICAgICAgKiBJTiBhc3NlcnRpb246IHRoZSBzdHJlYW0gc3RhdGUgaXMgY29ycmVjdCBhbmQgdGhlcmUgaXMgZW5vdWdoIHJvb20gaW4KICAgICAgICAgKiBwZW5kaW5nX2J1Zi4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBwdXRTaG9ydE1TQihzLCBiKSB7CiAgICAgICAgICAvLyAgcHV0X2J5dGUocywgKEJ5dGUpKGIgPj4gOCkpOwogICAgICAgICAgLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiICYgMHhmZikpOwogICAgICAgICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAoYiA+Pj4gOCkgJiAweGZmOwogICAgICAgICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiICYgMHhmZjsKICAgICAgICB9CgoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBSZWFkIGEgbmV3IGJ1ZmZlciBmcm9tIHRoZSBjdXJyZW50IGlucHV0IHN0cmVhbSwgdXBkYXRlIHRoZSBhZGxlcjMyCiAgICAgICAgICogYW5kIHRvdGFsIG51bWJlciBvZiBieXRlcyByZWFkLiAgQWxsIGRlZmxhdGUoKSBpbnB1dCBnb2VzIHRocm91Z2gKICAgICAgICAgKiB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdCB0byBhdm9pZAogICAgICAgICAqIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5pbnB1dCBidWZmZXIgYW5kIGNvcHlpbmcgZnJvbSBpdC4KICAgICAgICAgKiAoU2VlIGFsc28gZmx1c2hfcGVuZGluZygpKS4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiByZWFkX2J1ZihzdHJtLCBidWYsIHN0YXJ0LCBzaXplKSB7CiAgICAgICAgICB2YXIgbGVuID0gc3RybS5hdmFpbF9pbjsKCiAgICAgICAgICBpZiAobGVuID4gc2l6ZSkgewogICAgICAgICAgICBsZW4gPSBzaXplOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGxlbiA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgIH0KCiAgICAgICAgICBzdHJtLmF2YWlsX2luIC09IGxlbjsKCiAgICAgICAgICAvLyB6bWVtY3B5KGJ1Ziwgc3RybS0+bmV4dF9pbiwgbGVuKTsKICAgICAgICAgIGFycmF5U2V0KGJ1Ziwgc3RybS5pbnB1dCwgc3RybS5uZXh0X2luLCBsZW4sIHN0YXJ0KTsKICAgICAgICAgIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDEpIHsKICAgICAgICAgICAgc3RybS5hZGxlciA9IGFkbGVyMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTsKICAgICAgICAgIH0gZWxzZSBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAyKSB7CiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpOwogICAgICAgICAgfQoKICAgICAgICAgIHN0cm0ubmV4dF9pbiArPSBsZW47CiAgICAgICAgICBzdHJtLnRvdGFsX2luICs9IGxlbjsKCiAgICAgICAgICByZXR1cm4gbGVuOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIFNldCBtYXRjaF9zdGFydCB0byB0aGUgbG9uZ2VzdCBtYXRjaCBzdGFydGluZyBhdCB0aGUgZ2l2ZW4gc3RyaW5nIGFuZAogICAgICAgICAqIHJldHVybiBpdHMgbGVuZ3RoLiBNYXRjaGVzIHNob3J0ZXIgb3IgZXF1YWwgdG8gcHJldl9sZW5ndGggYXJlIGRpc2NhcmRlZCwKICAgICAgICAgKiBpbiB3aGljaCBjYXNlIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gcHJldl9sZW5ndGggYW5kIG1hdGNoX3N0YXJ0IGlzCiAgICAgICAgICogZ2FyYmFnZS4KICAgICAgICAgKiBJTiBhc3NlcnRpb25zOiBjdXJfbWF0Y2ggaXMgdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gZm9yIHRoZSBjdXJyZW50CiAgICAgICAgICogICBzdHJpbmcgKHN0cnN0YXJ0KSBhbmQgaXRzIGRpc3RhbmNlIGlzIDw9IE1BWF9ESVNULCBhbmQgcHJldl9sZW5ndGggPj0gMQogICAgICAgICAqIE9VVCBhc3NlcnRpb246IHRoZSBtYXRjaCBsZW5ndGggaXMgbm90IGdyZWF0ZXIgdGhhbiBzLT5sb29rYWhlYWQuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gbG9uZ2VzdF9tYXRjaChzLCBjdXJfbWF0Y2gpIHsKICAgICAgICAgIHZhciBjaGFpbl9sZW5ndGggPSBzLm1heF9jaGFpbl9sZW5ndGg7IC8qIG1heCBoYXNoIGNoYWluIGxlbmd0aCAqLwogICAgICAgICAgdmFyIHNjYW4gPSBzLnN0cnN0YXJ0OyAvKiBjdXJyZW50IHN0cmluZyAqLwogICAgICAgICAgdmFyIG1hdGNoOyAvKiBtYXRjaGVkIHN0cmluZyAqLwogICAgICAgICAgdmFyIGxlbjsgLyogbGVuZ3RoIG9mIGN1cnJlbnQgbWF0Y2ggKi8KICAgICAgICAgIHZhciBiZXN0X2xlbiA9IHMucHJldl9sZW5ndGg7IC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqLwogICAgICAgICAgdmFyIG5pY2VfbWF0Y2ggPSBzLm5pY2VfbWF0Y2g7IC8qIHN0b3AgaWYgbWF0Y2ggbG9uZyBlbm91Z2ggKi8KICAgICAgICAgIHZhciBsaW1pdCA9IChzLnN0cnN0YXJ0ID4gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpID8KICAgICAgICAgICAgcy5zdHJzdGFydCAtIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIDogMCAvKk5JTCovIDsKCiAgICAgICAgICB2YXIgX3dpbiA9IHMud2luZG93OyAvLyBzaG9ydGN1dAoKICAgICAgICAgIHZhciB3bWFzayA9IHMud19tYXNrOwogICAgICAgICAgdmFyIHByZXYgPSBzLnByZXY7CgogICAgICAgICAgLyogU3RvcCB3aGVuIGN1cl9tYXRjaCBiZWNvbWVzIDw9IGxpbWl0LiBUbyBzaW1wbGlmeSB0aGUgY29kZSwKICAgICAgICAgICAqIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcgb2Ygd2luZG93IGluZGV4IDAuCiAgICAgICAgICAgKi8KCiAgICAgICAgICB2YXIgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSCQxOwogICAgICAgICAgdmFyIHNjYW5fZW5kMSA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07CiAgICAgICAgICB2YXIgc2Nhbl9lbmQgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07CgogICAgICAgICAgLyogVGhlIGNvZGUgaXMgb3B0aW1pemVkIGZvciBIQVNIX0JJVFMgPj0gOCBhbmQgTUFYX01BVENILTIgbXVsdGlwbGUgb2YgMTYuCiAgICAgICAgICAgKiBJdCBpcyBlYXN5IHRvIGdldCByaWQgb2YgdGhpcyBvcHRpbWl6YXRpb24gaWYgbmVjZXNzYXJ5LgogICAgICAgICAgICovCiAgICAgICAgICAvLyBBc3NlcnQocy0+aGFzaF9iaXRzID49IDggJiYgTUFYX01BVENIID09IDI1OCwgIkNvZGUgdG9vIGNsZXZlciIpOwoKICAgICAgICAgIC8qIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6ICovCiAgICAgICAgICBpZiAocy5wcmV2X2xlbmd0aCA+PSBzLmdvb2RfbWF0Y2gpIHsKICAgICAgICAgICAgY2hhaW5fbGVuZ3RoID4+PSAyOwogICAgICAgICAgfQogICAgICAgICAgLyogRG8gbm90IGxvb2sgZm9yIG1hdGNoZXMgYmV5b25kIHRoZSBlbmQgb2YgdGhlIGlucHV0LiBUaGlzIGlzIG5lY2Vzc2FyeQogICAgICAgICAgICogdG8gbWFrZSBkZWZsYXRlIGRldGVybWluaXN0aWMuCiAgICAgICAgICAgKi8KICAgICAgICAgIGlmIChuaWNlX21hdGNoID4gcy5sb29rYWhlYWQpIHsKICAgICAgICAgICAgbmljZV9tYXRjaCA9IHMubG9va2FoZWFkOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplLU1JTl9MT09LQUhFQUQsICJuZWVkIGxvb2thaGVhZCIpOwoKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgLy8gQXNzZXJ0KGN1cl9tYXRjaCA8IHMtPnN0cnN0YXJ0LCAibm8gZnV0dXJlIik7CiAgICAgICAgICAgIG1hdGNoID0gY3VyX21hdGNoOwoKICAgICAgICAgICAgLyogU2tpcCB0byBuZXh0IG1hdGNoIGlmIHRoZSBtYXRjaCBsZW5ndGggY2Fubm90IGluY3JlYXNlCiAgICAgICAgICAgICAqIG9yIGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbGVzcyB0aGFuIDIuICBOb3RlIHRoYXQgdGhlIGNoZWNrcyBiZWxvdwogICAgICAgICAgICAgKiBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IG9jY3VyIG9jY2FzaW9uYWxseSBmb3IgcGVyZm9ybWFuY2UKICAgICAgICAgICAgICogcmVhc29ucy4gIFRoZXJlZm9yZSB1bmluaXRpYWxpemVkIG1lbW9yeSB3aWxsIGJlIGFjY2Vzc2VkLCBhbmQKICAgICAgICAgICAgICogY29uZGl0aW9uYWwganVtcHMgd2lsbCBiZSBtYWRlIHRoYXQgZGVwZW5kIG9uIHRob3NlIHZhbHVlcy4KICAgICAgICAgICAgICogSG93ZXZlciB0aGUgbGVuZ3RoIG9mIHRoZSBtYXRjaCBpcyBsaW1pdGVkIHRvIHRoZSBsb29rYWhlYWQsIHNvCiAgICAgICAgICAgICAqIHRoZSBvdXRwdXQgb2YgZGVmbGF0ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHVuaW5pdGlhbGl6ZWQgdmFsdWVzLgogICAgICAgICAgICAgKi8KCiAgICAgICAgICAgIGlmIChfd2luW21hdGNoICsgYmVzdF9sZW5dICE9PSBzY2FuX2VuZCB8fAogICAgICAgICAgICAgIF93aW5bbWF0Y2ggKyBiZXN0X2xlbiAtIDFdICE9PSBzY2FuX2VuZDEgfHwKICAgICAgICAgICAgICBfd2luW21hdGNoXSAhPT0gX3dpbltzY2FuXSB8fAogICAgICAgICAgICAgIF93aW5bKyttYXRjaF0gIT09IF93aW5bc2NhbiArIDFdKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlCiAgICAgICAgICAgICAqIGFnYWluIGxhdGVyLiAoVGhpcyBoZXVyaXN0aWMgaXMgbm90IGFsd2F5cyBhIHdpbi4pCiAgICAgICAgICAgICAqIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gY29tcGFyZSBzY2FuWzJdIGFuZCBtYXRjaFsyXSBzaW5jZSB0aGV5CiAgICAgICAgICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hlbiB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXQKICAgICAgICAgICAgICogdGhlIGhhc2gga2V5cyBhcmUgZXF1YWwgYW5kIHRoYXQgSEFTSF9CSVRTID49IDguCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBzY2FuICs9IDI7CiAgICAgICAgICAgIG1hdGNoKys7CiAgICAgICAgICAgIC8vIEFzc2VydCgqc2NhbiA9PSAqbWF0Y2gsICJtYXRjaFsyXT8iKTsKCiAgICAgICAgICAgIC8qIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247CiAgICAgICAgICAgICAqIHRoZSAyNTZ0aCBjaGVjayB3aWxsIGJlIG1hZGUgYXQgc3Ryc3RhcnQrMjU4LgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgIC8qanNoaW50IG5vZW1wdHk6ZmFsc2UqLwogICAgICAgICAgICB9IHdoaWxlIChfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmCiAgICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJgogICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYKICAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmCiAgICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7CgogICAgICAgICAgICAvLyBBc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVuc2lnbmVkKShzLT53aW5kb3dfc2l6ZS0xKSwgIndpbGQgc2NhbiIpOwoKICAgICAgICAgICAgbGVuID0gTUFYX01BVENIJDEgLSAoc3RyZW5kIC0gc2Nhbik7CiAgICAgICAgICAgIHNjYW4gPSBzdHJlbmQgLSBNQVhfTUFUQ0gkMTsKCiAgICAgICAgICAgIGlmIChsZW4gPiBiZXN0X2xlbikgewogICAgICAgICAgICAgIHMubWF0Y2hfc3RhcnQgPSBjdXJfbWF0Y2g7CiAgICAgICAgICAgICAgYmVzdF9sZW4gPSBsZW47CiAgICAgICAgICAgICAgaWYgKGxlbiA+PSBuaWNlX21hdGNoKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc2Nhbl9lbmQxID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTsKICAgICAgICAgICAgICBzY2FuX2VuZCA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTsKICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAoKGN1cl9tYXRjaCA9IHByZXZbY3VyX21hdGNoICYgd21hc2tdKSA+IGxpbWl0ICYmIC0tY2hhaW5fbGVuZ3RoICE9PSAwKTsKCiAgICAgICAgICBpZiAoYmVzdF9sZW4gPD0gcy5sb29rYWhlYWQpIHsKICAgICAgICAgICAgcmV0dXJuIGJlc3RfbGVuOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHMubG9va2FoZWFkOwogICAgICAgIH0KCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIEZpbGwgdGhlIHdpbmRvdyB3aGVuIHRoZSBsb29rYWhlYWQgYmVjb21lcyBpbnN1ZmZpY2llbnQuCiAgICAgICAgICogVXBkYXRlcyBzdHJzdGFydCBhbmQgbG9va2FoZWFkLgogICAgICAgICAqCiAgICAgICAgICogSU4gYXNzZXJ0aW9uOiBsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFECiAgICAgICAgICogT1VUIGFzc2VydGlvbnM6IHN0cnN0YXJ0IDw9IHdpbmRvd19zaXplLU1JTl9MT09LQUhFQUQKICAgICAgICAgKiAgICBBdCBsZWFzdCBvbmUgYnl0ZSBoYXMgYmVlbiByZWFkLCBvciBhdmFpbF9pbiA9PSAwOyByZWFkcyBhcmUKICAgICAgICAgKiAgICBwZXJmb3JtZWQgZm9yIGF0IGxlYXN0IHR3byBieXRlcyAocmVxdWlyZWQgZm9yIHRoZSB6aXAgdHJhbnNsYXRlX2VvbAogICAgICAgICAqICAgIG9wdGlvbiAtLSBub3Qgc3VwcG9ydGVkIGhlcmUpLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGZpbGxfd2luZG93KHMpIHsKICAgICAgICAgIHZhciBfd19zaXplID0gcy53X3NpemU7CiAgICAgICAgICB2YXIgcCwgbiwgbSwgbW9yZSwgc3RyOwoKICAgICAgICAgIC8vQXNzZXJ0KHMtPmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQsICJhbHJlYWR5IGVub3VnaCBsb29rYWhlYWQiKTsKCiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIG1vcmUgPSBzLndpbmRvd19zaXplIC0gcy5sb29rYWhlYWQgLSBzLnN0cnN0YXJ0OwoKICAgICAgICAgICAgLy8gSlMgaW50cyBoYXZlIDMyIGJpdCwgYmxvY2sgYmVsb3cgbm90IG5lZWRlZAogICAgICAgICAgICAvKiBEZWFsIHdpdGggIUAjJCUgNjRLIGxpbWl0OiAqLwogICAgICAgICAgICAvL2lmIChzaXplb2YoaW50KSA8PSAyKSB7CiAgICAgICAgICAgIC8vICAgIGlmIChtb3JlID09IDAgJiYgcy0+c3Ryc3RhcnQgPT0gMCAmJiBzLT5sb29rYWhlYWQgPT0gMCkgewogICAgICAgICAgICAvLyAgICAgICAgbW9yZSA9IHdzaXplOwogICAgICAgICAgICAvLwogICAgICAgICAgICAvLyAgfSBlbHNlIGlmIChtb3JlID09ICh1bnNpZ25lZCkoLTEpKSB7CiAgICAgICAgICAgIC8vICAgICAgICAvKiBWZXJ5IHVubGlrZWx5LCBidXQgcG9zc2libGUgb24gMTYgYml0IG1hY2hpbmUgaWYKICAgICAgICAgICAgLy8gICAgICAgICAqIHN0cnN0YXJ0ID09IDAgJiYgbG9va2FoZWFkID09IDEgKGlucHV0IGRvbmUgYSBieXRlIGF0IHRpbWUpCiAgICAgICAgICAgIC8vICAgICAgICAgKi8KICAgICAgICAgICAgLy8gICAgICAgIG1vcmUtLTsKICAgICAgICAgICAgLy8gICAgfQogICAgICAgICAgICAvL30KCgogICAgICAgICAgICAvKiBJZiB0aGUgd2luZG93IGlzIGFsbW9zdCBmdWxsIGFuZCB0aGVyZSBpcyBpbnN1ZmZpY2llbnQgbG9va2FoZWFkLAogICAgICAgICAgICAgKiBtb3ZlIHRoZSB1cHBlciBoYWxmIHRvIHRoZSBsb3dlciBvbmUgdG8gbWFrZSByb29tIGluIHRoZSB1cHBlciBoYWxmLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgaWYgKHMuc3Ryc3RhcnQgPj0gX3dfc2l6ZSArIChfd19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHsKCiAgICAgICAgICAgICAgYXJyYXlTZXQocy53aW5kb3csIHMud2luZG93LCBfd19zaXplLCBfd19zaXplLCAwKTsKICAgICAgICAgICAgICBzLm1hdGNoX3N0YXJ0IC09IF93X3NpemU7CiAgICAgICAgICAgICAgcy5zdHJzdGFydCAtPSBfd19zaXplOwogICAgICAgICAgICAgIC8qIHdlIG5vdyBoYXZlIHN0cnN0YXJ0ID49IE1BWF9ESVNUICovCiAgICAgICAgICAgICAgcy5ibG9ja19zdGFydCAtPSBfd19zaXplOwoKICAgICAgICAgICAgICAvKiBTbGlkZSB0aGUgaGFzaCB0YWJsZSAoY291bGQgYmUgYXZvaWRlZCB3aXRoIDMyIGJpdCB2YWx1ZXMKICAgICAgICAgICAgICAgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDAKICAgICAgICAgICAgICAgdG8ga2VlcCB0aGUgaGFzaCB0YWJsZSBjb25zaXN0ZW50IGlmIHdlIHN3aXRjaCBiYWNrIHRvIGxldmVsID4gMAogICAgICAgICAgICAgICBsYXRlci4gKFVzaW5nIGxldmVsIDAgcGVybWFuZW50bHkgaXMgbm90IGFuIG9wdGltYWwgdXNhZ2Ugb2YKICAgICAgICAgICAgICAgemxpYiwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGlzIHBhdGhvbG9naWNhbCBjYXNlLikKICAgICAgICAgICAgICAgKi8KCiAgICAgICAgICAgICAgbiA9IHMuaGFzaF9zaXplOwogICAgICAgICAgICAgIHAgPSBuOwogICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIG0gPSBzLmhlYWRbLS1wXTsKICAgICAgICAgICAgICAgIHMuaGVhZFtwXSA9IChtID49IF93X3NpemUgPyBtIC0gX3dfc2l6ZSA6IDApOwogICAgICAgICAgICAgIH0gd2hpbGUgKC0tbik7CgogICAgICAgICAgICAgIG4gPSBfd19zaXplOwogICAgICAgICAgICAgIHAgPSBuOwogICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIG0gPSBzLnByZXZbLS1wXTsKICAgICAgICAgICAgICAgIHMucHJldltwXSA9IChtID49IF93X3NpemUgPyBtIC0gX3dfc2l6ZSA6IDApOwogICAgICAgICAgICAgICAgLyogSWYgbiBpcyBub3Qgb24gYW55IGhhc2ggY2hhaW4sIHByZXZbbl0gaXMgZ2FyYmFnZSBidXQKICAgICAgICAgICAgICAgICAqIGl0cyB2YWx1ZSB3aWxsIG5ldmVyIGJlIHVzZWQuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICB9IHdoaWxlICgtLW4pOwoKICAgICAgICAgICAgICBtb3JlICs9IF93X3NpemU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9pbiA9PT0gMCkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBJZiB0aGVyZSB3YXMgbm8gc2xpZGluZzoKICAgICAgICAgICAgICogICAgc3Ryc3RhcnQgPD0gV1NJWkUrTUFYX0RJU1QtMSAmJiBsb29rYWhlYWQgPD0gTUlOX0xPT0tBSEVBRCAtIDEgJiYKICAgICAgICAgICAgICogICAgbW9yZSA9PSB3aW5kb3dfc2l6ZSAtIGxvb2thaGVhZCAtIHN0cnN0YXJ0CiAgICAgICAgICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAoTUlOX0xPT0tBSEVBRC0xICsgV1NJWkUgKyBNQVhfRElTVC0xKQogICAgICAgICAgICAgKiA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gMipXU0laRSArIDIKICAgICAgICAgICAgICogSW4gdGhlIEJJR19NRU0gb3IgTU1BUCBjYXNlIChub3QgeWV0IHN1cHBvcnRlZCksCiAgICAgICAgICAgICAqICAgd2luZG93X3NpemUgPT0gaW5wdXRfc2l6ZSArIE1JTl9MT09LQUhFQUQgICYmCiAgICAgICAgICAgICAqICAgc3Ryc3RhcnQgKyBzLT5sb29rYWhlYWQgPD0gaW5wdXRfc2l6ZSA9PiBtb3JlID49IE1JTl9MT09LQUhFQUQuCiAgICAgICAgICAgICAqIE90aGVyd2lzZSwgd2luZG93X3NpemUgPT0gMipXU0laRSBzbyBtb3JlID49IDIuCiAgICAgICAgICAgICAqIElmIHRoZXJlIHdhcyBzbGlkaW5nLCBtb3JlID49IFdTSVpFLiBTbyBpbiBhbGwgY2FzZXMsIG1vcmUgPj0gMi4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIC8vQXNzZXJ0KG1vcmUgPj0gMiwgIm1vcmUgPCAyIik7CiAgICAgICAgICAgIG4gPSByZWFkX2J1ZihzLnN0cm0sIHMud2luZG93LCBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQsIG1vcmUpOwogICAgICAgICAgICBzLmxvb2thaGVhZCArPSBuOwoKICAgICAgICAgICAgLyogSW5pdGlhbGl6ZSB0aGUgaGFzaCB2YWx1ZSBub3cgdGhhdCB3ZSBoYXZlIHNvbWUgaW5wdXQ6ICovCiAgICAgICAgICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCQxKSB7CiAgICAgICAgICAgICAgc3RyID0gcy5zdHJzdGFydCAtIHMuaW5zZXJ0OwogICAgICAgICAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzdHJdOwoKICAgICAgICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIDFdKTsgKi8KICAgICAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzdHIgKyAxXSkgJiBzLmhhc2hfbWFzazsKICAgICAgICAgICAgICAvLyNpZiBNSU5fTUFUQ0ggIT0gMwogICAgICAgICAgICAgIC8vICAgICAgICBDYWxsIHVwZGF0ZV9oYXNoKCkgTUlOX01BVENILTMgbW9yZSB0aW1lcwogICAgICAgICAgICAgIC8vI2VuZGlmCiAgICAgICAgICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7CiAgICAgICAgICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSk7ICovCiAgICAgICAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gkMSAtIDFdKSAmIHMuaGFzaF9tYXNrOwoKICAgICAgICAgICAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07CiAgICAgICAgICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7CiAgICAgICAgICAgICAgICBzdHIrKzsKICAgICAgICAgICAgICAgIHMuaW5zZXJ0LS07CiAgICAgICAgICAgICAgICBpZiAocy5sb29rYWhlYWQgKyBzLmluc2VydCA8IE1JTl9NQVRDSCQxKSB7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvKiBJZiB0aGUgd2hvbGUgaW5wdXQgaGFzIGxlc3MgdGhhbiBNSU5fTUFUQ0ggYnl0ZXMsIGluc19oIGlzIGdhcmJhZ2UsCiAgICAgICAgICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBpbXBvcnRhbnQgc2luY2Ugb25seSBsaXRlcmFsIGJ5dGVzIHdpbGwgYmUgZW1pdHRlZC4KICAgICAgICAgICAgICovCgogICAgICAgICAgfSB3aGlsZSAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIHMuc3RybS5hdmFpbF9pbiAhPT0gMCk7CgogICAgICAgICAgLyogSWYgdGhlIFdJTl9JTklUIGJ5dGVzIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgZGF0YSBoYXZlIG5ldmVyIGJlZW4KICAgICAgICAgICAqIHdyaXR0ZW4sIHRoZW4gemVybyB0aG9zZSBieXRlcyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgcmVwb3J0cyBvZgogICAgICAgICAgICogdGhlIHVzZSBvZiB1bmluaXRpYWxpemVkIChvciB1bmluaXRpYWxpc2VkIGFzIEp1bGlhbiB3cml0ZXMpIGJ5dGVzIGJ5CiAgICAgICAgICAgKiB0aGUgbG9uZ2VzdCBtYXRjaCByb3V0aW5lcy4gIFVwZGF0ZSB0aGUgaGlnaCB3YXRlciBtYXJrIGZvciB0aGUgbmV4dAogICAgICAgICAgICogdGltZSB0aHJvdWdoIGhlcmUuICBXSU5fSU5JVCBpcyBzZXQgdG8gTUFYX01BVENIIHNpbmNlIHRoZSBsb25nZXN0IG1hdGNoCiAgICAgICAgICAgKiByb3V0aW5lcyBhbGxvdyBzY2FubmluZyB0byBzdHJzdGFydCArIE1BWF9NQVRDSCwgaWdub3JpbmcgbG9va2FoZWFkLgogICAgICAgICAgICovCiAgICAgICAgICAvLyAgaWYgKHMuaGlnaF93YXRlciA8IHMud2luZG93X3NpemUpIHsKICAgICAgICAgIC8vICAgIHZhciBjdXJyID0gcy5zdHJzdGFydCArIHMubG9va2FoZWFkOwogICAgICAgICAgLy8gICAgdmFyIGluaXQgPSAwOwogICAgICAgICAgLy8KICAgICAgICAgIC8vICAgIGlmIChzLmhpZ2hfd2F0ZXIgPCBjdXJyKSB7CiAgICAgICAgICAvLyAgICAgIC8qIFByZXZpb3VzIGhpZ2ggd2F0ZXIgbWFyayBiZWxvdyBjdXJyZW50IGRhdGEgLS0gemVybyBXSU5fSU5JVAogICAgICAgICAgLy8gICAgICAgKiBieXRlcyBvciB1cCB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy4KICAgICAgICAgIC8vICAgICAgICovCiAgICAgICAgICAvLyAgICAgIGluaXQgPSBzLndpbmRvd19zaXplIC0gY3VycjsKICAgICAgICAgIC8vICAgICAgaWYgKGluaXQgPiBXSU5fSU5JVCkKICAgICAgICAgIC8vICAgICAgICBpbml0ID0gV0lOX0lOSVQ7CiAgICAgICAgICAvLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIGN1cnIsICh1bnNpZ25lZClpbml0KTsKICAgICAgICAgIC8vICAgICAgcy0+aGlnaF93YXRlciA9IGN1cnIgKyBpbml0OwogICAgICAgICAgLy8gICAgfQogICAgICAgICAgLy8gICAgZWxzZSBpZiAocy0+aGlnaF93YXRlciA8ICh1bGcpY3VyciArIFdJTl9JTklUKSB7CiAgICAgICAgICAvLyAgICAgIC8qIEhpZ2ggd2F0ZXIgbWFyayBhdCBvciBhYm92ZSBjdXJyZW50IGRhdGEsIGJ1dCBiZWxvdyBjdXJyZW50IGRhdGEKICAgICAgICAgIC8vICAgICAgICogcGx1cyBXSU5fSU5JVCAtLSB6ZXJvIG91dCB0byBjdXJyZW50IGRhdGEgcGx1cyBXSU5fSU5JVCwgb3IgdXAKICAgICAgICAgIC8vICAgICAgICogdG8gZW5kIG9mIHdpbmRvdywgd2hpY2hldmVyIGlzIGxlc3MuCiAgICAgICAgICAvLyAgICAgICAqLwogICAgICAgICAgLy8gICAgICBpbml0ID0gKHVsZyljdXJyICsgV0lOX0lOSVQgLSBzLT5oaWdoX3dhdGVyOwogICAgICAgICAgLy8gICAgICBpZiAoaW5pdCA+IHMtPndpbmRvd19zaXplIC0gcy0+aGlnaF93YXRlcikKICAgICAgICAgIC8vICAgICAgICBpbml0ID0gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyOwogICAgICAgICAgLy8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBzLT5oaWdoX3dhdGVyLCAodW5zaWduZWQpaW5pdCk7CiAgICAgICAgICAvLyAgICAgIHMtPmhpZ2hfd2F0ZXIgKz0gaW5pdDsKICAgICAgICAgIC8vICAgIH0KICAgICAgICAgIC8vICB9CiAgICAgICAgICAvLwogICAgICAgICAgLy8gIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplIC0gTUlOX0xPT0tBSEVBRCwKICAgICAgICAgIC8vICAgICJub3QgZW5vdWdoIHJvb20gZm9yIHNlYXJjaCIpOwogICAgICAgIH0KCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogQ29weSB3aXRob3V0IGNvbXByZXNzaW9uIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm4KICAgICAgICAgKiB0aGUgY3VycmVudCBibG9jayBzdGF0ZS4KICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBzaW5jZQogICAgICAgICAqIHVuY29tcHJlc3NpYmxlIGRhdGEgaXMgcHJvYmFibHkgbm90IHVzZWZ1bC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkCiAgICAgICAgICogb25seSBmb3IgdGhlIGxldmVsPTAgY29tcHJlc3Npb24gb3B0aW9uLgogICAgICAgICAqIE5PVEU6IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIG9wdGltaXplZCB0byBhdm9pZCBleHRyYSBjb3B5aW5nIGZyb20KICAgICAgICAgKiB3aW5kb3cgdG8gcGVuZGluZ19idWYuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZGVmbGF0ZV9zdG9yZWQocywgZmx1c2gpIHsKICAgICAgICAgIC8qIFN0b3JlZCBibG9ja3MgYXJlIGxpbWl0ZWQgdG8gMHhmZmZmIGJ5dGVzLCBwZW5kaW5nX2J1ZiBpcyBsaW1pdGVkCiAgICAgICAgICAgKiB0byBwZW5kaW5nX2J1Zl9zaXplLCBhbmQgZWFjaCBzdG9yZWQgYmxvY2sgaGFzIGEgNSBieXRlIGhlYWRlcjoKICAgICAgICAgICAqLwogICAgICAgICAgdmFyIG1heF9ibG9ja19zaXplID0gMHhmZmZmOwoKICAgICAgICAgIGlmIChtYXhfYmxvY2tfc2l6ZSA+IHMucGVuZGluZ19idWZfc2l6ZSAtIDUpIHsKICAgICAgICAgICAgbWF4X2Jsb2NrX3NpemUgPSBzLnBlbmRpbmdfYnVmX3NpemUgLSA1OwogICAgICAgICAgfQoKICAgICAgICAgIC8qIENvcHkgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIGlucHV0IHRvIG91dHB1dDogKi8KICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgLyogRmlsbCB0aGUgd2luZG93IGFzIG11Y2ggYXMgcG9zc2libGU6ICovCiAgICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA8PSAxKSB7CgogICAgICAgICAgICAgIC8vQXNzZXJ0KHMtPnN0cnN0YXJ0IDwgcy0+d19zaXplK01BWF9ESVNUKHMpIHx8CiAgICAgICAgICAgICAgLy8gIHMtPmJsb2NrX3N0YXJ0ID49IChsb25nKXMtPndfc2l6ZSwgInNsaWRlIHRvbyBsYXRlIik7CiAgICAgICAgICAgICAgLy8gICAgICBpZiAoIShzLnN0cnN0YXJ0IDwgcy53X3NpemUgKyAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB8fAogICAgICAgICAgICAgIC8vICAgICAgICBzLmJsb2NrX3N0YXJ0ID49IHMud19zaXplKSkgewogICAgICAgICAgICAgIC8vICAgICAgICB0aHJvdyAgbmV3IEVycm9yKCJzbGlkZSB0b28gbGF0ZSIpOwogICAgICAgICAgICAgIC8vICAgICAgfQoKICAgICAgICAgICAgICBmaWxsX3dpbmRvdyhzKTsKICAgICAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDAgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHsKICAgICAgICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqLwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vQXNzZXJ0KHMtPmJsb2NrX3N0YXJ0ID49IDBMLCAiYmxvY2sgZ29uZSIpOwogICAgICAgICAgICAvLyAgICBpZiAocy5ibG9ja19zdGFydCA8IDApIHRocm93IG5ldyBFcnJvcigiYmxvY2sgZ29uZSIpOwoKICAgICAgICAgICAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDsKICAgICAgICAgICAgcy5sb29rYWhlYWQgPSAwOwoKICAgICAgICAgICAgLyogRW1pdCBhIHN0b3JlZCBibG9jayBpZiBwZW5kaW5nX2J1ZiB3aWxsIGJlIGZ1bGw6ICovCiAgICAgICAgICAgIHZhciBtYXhfc3RhcnQgPSBzLmJsb2NrX3N0YXJ0ICsgbWF4X2Jsb2NrX3NpemU7CgogICAgICAgICAgICBpZiAocy5zdHJzdGFydCA9PT0gMCB8fCBzLnN0cnN0YXJ0ID49IG1heF9zdGFydCkgewogICAgICAgICAgICAgIC8qIHN0cnN0YXJ0ID09IDAgaXMgcG9zc2libGUgd2hlbiB3cmFwYXJvdW5kIG9uIDE2LWJpdCBtYWNoaW5lICovCiAgICAgICAgICAgICAgcy5sb29rYWhlYWQgPSBzLnN0cnN0YXJ0IC0gbWF4X3N0YXJ0OwogICAgICAgICAgICAgIHMuc3Ryc3RhcnQgPSBtYXhfc3RhcnQ7CiAgICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgICAgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwogICAgICAgICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvKioqLwoKCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyogRmx1c2ggaWYgd2UgbWF5IGhhdmUgdG8gc2xpZGUsIG90aGVyd2lzZSBibG9ja19zdGFydCBtYXkgYmVjb21lCiAgICAgICAgICAgICAqIG5lZ2F0aXZlIGFuZCB0aGUgZGF0YSB3aWxsIGJlIGdvbmU6CiAgICAgICAgICAgICAqLwogICAgICAgICAgICBpZiAocy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQgPj0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHsKICAgICAgICAgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovCiAgICAgICAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7CiAgICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIC8qKiovCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBzLmluc2VydCA9IDA7CgogICAgICAgICAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkgewogICAgICAgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovCiAgICAgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7CiAgICAgICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qKiovCiAgICAgICAgICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAocy5zdHJzdGFydCA+IHMuYmxvY2tfc3RhcnQpIHsKICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTsKICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qKiovCiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTsKICAgICAgICB9CgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIENvbXByZXNzIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm4gdGhlIGN1cnJlbnQKICAgICAgICAgKiBibG9jayBzdGF0ZS4KICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHBlcmZvcm0gbGF6eSBldmFsdWF0aW9uIG9mIG1hdGNoZXMgYW5kIGluc2VydHMKICAgICAgICAgKiBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBvbmx5IGZvciB1bm1hdGNoZWQgc3RyaW5ncyBvciBmb3Igc2hvcnQKICAgICAgICAgKiBtYXRjaGVzLiBJdCBpcyB1c2VkIG9ubHkgZm9yIHRoZSBmYXN0IGNvbXByZXNzaW9uIG9wdGlvbnMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZGVmbGF0ZV9mYXN0KHMsIGZsdXNoKSB7CiAgICAgICAgICB2YXIgaGFzaF9oZWFkOyAvKiBoZWFkIG9mIHRoZSBoYXNoIGNoYWluICovCiAgICAgICAgICB2YXIgYmZsdXNoOyAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi8KCiAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdAogICAgICAgICAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlcwogICAgICAgICAgICAgKiBmb3IgdGhlIG5leHQgbWF0Y2gsIHBsdXMgTUlOX01BVENIIGJ5dGVzIHRvIGluc2VydCB0aGUKICAgICAgICAgICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQpIHsKICAgICAgICAgICAgICBmaWxsX3dpbmRvdyhzKTsKICAgICAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsKICAgICAgICAgICAgICAgIGJyZWFrOyAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqLwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZQogICAgICAgICAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjoKICAgICAgICAgICAgICovCiAgICAgICAgICAgIGhhc2hfaGVhZCA9IDAgLypOSUwqLyA7CiAgICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gkMSkgewogICAgICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovCiAgICAgICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCQxIC0gMV0pICYgcy5oYXNoX21hc2s7CiAgICAgICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07CiAgICAgICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDsKICAgICAgICAgICAgICAvKioqLwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLgogICAgICAgICAgICAgKiBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYWx3YXlzIG1hdGNoX2xlbmd0aCA8IE1JTl9NQVRDSAogICAgICAgICAgICAgKi8KICAgICAgICAgICAgaWYgKGhhc2hfaGVhZCAhPT0gMCAvKk5JTCovICYmICgocy5zdHJzdGFydCAtIGhhc2hfaGVhZCkgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpKSB7CiAgICAgICAgICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcKICAgICAgICAgICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2gKICAgICAgICAgICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuCiAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7CiAgICAgICAgICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi8KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIJDEpIHsKICAgICAgICAgICAgICAvLyBjaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LCBzLm1hdGNoX3N0YXJ0LCBzLm1hdGNoX2xlbmd0aCk7IC8vIGZvciBkZWJ1ZyBvbmx5CgogICAgICAgICAgICAgIC8qKiogX3RyX3RhbGx5X2Rpc3Qocywgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi8KICAgICAgICAgICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIJDEpOwoKICAgICAgICAgICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDsKCiAgICAgICAgICAgICAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aAogICAgICAgICAgICAgICAqIGlzIG5vdCB0b28gbGFyZ2UuIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uCiAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2ggLyptYXhfaW5zZXJ0X2xlbmd0aCovICYmIHMubG9va2FoZWFkID49IE1JTl9NQVRDSCQxKSB7CiAgICAgICAgICAgICAgICBzLm1hdGNoX2xlbmd0aC0tOyAvKiBzdHJpbmcgYXQgc3Ryc3RhcnQgYWxyZWFkeSBpbiB0YWJsZSAqLwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBzLnN0cnN0YXJ0Kys7CiAgICAgICAgICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovCiAgICAgICAgICAgICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0gkMSAtIDFdKSAmIHMuaGFzaF9tYXNrOwogICAgICAgICAgICAgICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTsKICAgICAgICAgICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDsKICAgICAgICAgICAgICAgICAgLyoqKi8KICAgICAgICAgICAgICAgICAgLyogc3Ryc3RhcnQgbmV2ZXIgZXhjZWVkcyBXU0laRS1NQVhfTUFUQ0gsIHNvIHRoZXJlIGFyZQogICAgICAgICAgICAgICAgICAgKiBhbHdheXMgTUlOX01BVENIIGJ5dGVzIGFoZWFkLgogICAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tcy5tYXRjaF9sZW5ndGggIT09IDApOwogICAgICAgICAgICAgICAgcy5zdHJzdGFydCsrOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoOwogICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSAwOwogICAgICAgICAgICAgICAgcy5pbnNfaCA9IHMud2luZG93W3Muc3Ryc3RhcnRdOwogICAgICAgICAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCsxXSk7ICovCiAgICAgICAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgMV0pICYgcy5oYXNoX21hc2s7CgogICAgICAgICAgICAgICAgLy8jaWYgTUlOX01BVENIICE9IDMKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIENhbGwgVVBEQVRFX0hBU0goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzCiAgICAgICAgICAgICAgICAvLyNlbmRpZgogICAgICAgICAgICAgICAgLyogSWYgbG9va2FoZWFkIDwgTUlOX01BVENILCBpbnNfaCBpcyBnYXJiYWdlLCBidXQgaXQgZG9lcyBub3QKICAgICAgICAgICAgICAgICAqIG1hdHRlciBzaW5jZSBpdCB3aWxsIGJlIHJlY29tcHV0ZWQgYXQgbmV4dCBkZWZsYXRlIGNhbGwuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqLwogICAgICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCIlYyIsIHMud2luZG93W3Muc3Ryc3RhcnRdKSk7CiAgICAgICAgICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovCiAgICAgICAgICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTsKCiAgICAgICAgICAgICAgcy5sb29rYWhlYWQtLTsKICAgICAgICAgICAgICBzLnN0cnN0YXJ0Kys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGJmbHVzaCkgewogICAgICAgICAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi8KICAgICAgICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTsKICAgICAgICAgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLyoqKi8KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcy5pbnNlcnQgPSAoKHMuc3Ryc3RhcnQgPCAoTUlOX01BVENIJDEgLSAxKSkgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIJDEgLSAxKTsKICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHsKICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqLwogICAgICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpOwogICAgICAgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAgICAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDsKICAgICAgICAgICAgfQogICAgICAgICAgICAvKioqLwogICAgICAgICAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocy5sYXN0X2xpdCkgewogICAgICAgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovCiAgICAgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwogICAgICAgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyoqKi8KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBCU19CTE9DS19ET05FOwogICAgICAgIH0KCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogU2FtZSBhcyBhYm92ZSwgYnV0IGFjaGlldmVzIGJldHRlciBjb21wcmVzc2lvbi4gV2UgdXNlIGEgbGF6eQogICAgICAgICAqIGV2YWx1YXRpb24gZm9yIG1hdGNoZXM6IGEgbWF0Y2ggaXMgZmluYWxseSBhZG9wdGVkIG9ubHkgaWYgdGhlcmUgaXMKICAgICAgICAgKiBubyBiZXR0ZXIgbWF0Y2ggYXQgdGhlIG5leHQgd2luZG93IHBvc2l0aW9uLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGRlZmxhdGVfc2xvdyhzLCBmbHVzaCkgewogICAgICAgICAgdmFyIGhhc2hfaGVhZDsgLyogaGVhZCBvZiBoYXNoIGNoYWluICovCiAgICAgICAgICB2YXIgYmZsdXNoOyAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi8KCiAgICAgICAgICB2YXIgbWF4X2luc2VydDsKCiAgICAgICAgICAvKiBQcm9jZXNzIHRoZSBpbnB1dCBibG9jay4gKi8KICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0CiAgICAgICAgICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzCiAgICAgICAgICAgICAqIGZvciB0aGUgbmV4dCBtYXRjaCwgcGx1cyBNSU5fTUFUQ0ggYnl0ZXMgdG8gaW5zZXJ0IHRoZQogICAgICAgICAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkgewogICAgICAgICAgICAgIGZpbGxfd2luZG93KHMpOwogICAgICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHsKICAgICAgICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfSAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqLwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlCiAgICAgICAgICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgaGFzaF9oZWFkID0gMCAvKk5JTCovIDsKICAgICAgICAgICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCQxKSB7CiAgICAgICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi8KICAgICAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIJDEgLSAxXSkgJiBzLmhhc2hfbWFzazsKICAgICAgICAgICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTsKICAgICAgICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0OwogICAgICAgICAgICAgIC8qKiovCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBzLnByZXZfbGVuZ3RoID0gcy5tYXRjaF9sZW5ndGg7CiAgICAgICAgICAgIHMucHJldl9tYXRjaCA9IHMubWF0Y2hfc3RhcnQ7CiAgICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIJDEgLSAxOwoKICAgICAgICAgICAgaWYgKGhhc2hfaGVhZCAhPT0gMCAvKk5JTCovICYmIHMucHJldl9sZW5ndGggPCBzLm1heF9sYXp5X21hdGNoICYmCiAgICAgICAgICAgICAgcy5zdHJzdGFydCAtIGhhc2hfaGVhZCA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSAvKk1BWF9ESVNUKHMpKi8gKSB7CiAgICAgICAgICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcKICAgICAgICAgICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2gKICAgICAgICAgICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuCiAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7CiAgICAgICAgICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi8KCiAgICAgICAgICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IDUgJiYKICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID09PSBaX0ZJTFRFUkVEIHx8IChzLm1hdGNoX2xlbmd0aCA9PT0gTUlOX01BVENIJDEgJiYgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQgPiA0MDk2IC8qVE9PX0ZBUiovICkpKSB7CgogICAgICAgICAgICAgICAgLyogSWYgcHJldl9tYXRjaCBpcyBhbHNvIE1JTl9NQVRDSCwgbWF0Y2hfc3RhcnQgaXMgZ2FyYmFnZQogICAgICAgICAgICAgICAgICogYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS4KICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0gkMSAtIDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qIElmIHRoZXJlIHdhcyBhIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBzdGVwIGFuZCB0aGUgY3VycmVudAogICAgICAgICAgICAgKiBtYXRjaCBpcyBub3QgYmV0dGVyLCBvdXRwdXQgdGhlIHByZXZpb3VzIG1hdGNoOgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgaWYgKHMucHJldl9sZW5ndGggPj0gTUlOX01BVENIJDEgJiYgcy5tYXRjaF9sZW5ndGggPD0gcy5wcmV2X2xlbmd0aCkgewogICAgICAgICAgICAgIG1heF9pbnNlcnQgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQgLSBNSU5fTUFUQ0gkMTsKICAgICAgICAgICAgICAvKiBEbyBub3QgaW5zZXJ0IHN0cmluZ3MgaW4gaGFzaCB0YWJsZSBiZXlvbmQgdGhpcy4gKi8KCiAgICAgICAgICAgICAgLy9jaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LTEsIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCk7CgogICAgICAgICAgICAgIC8qKipfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnByZXZfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyoqKi8KICAgICAgICAgICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gkMSk7CiAgICAgICAgICAgICAgLyogSW5zZXJ0IGluIGhhc2ggdGFibGUgYWxsIHN0cmluZ3MgdXAgdG8gdGhlIGVuZCBvZiB0aGUgbWF0Y2guCiAgICAgICAgICAgICAgICogc3Ryc3RhcnQtMSBhbmQgc3Ryc3RhcnQgYXJlIGFscmVhZHkgaW5zZXJ0ZWQuIElmIHRoZXJlIGlzIG5vdAogICAgICAgICAgICAgICAqIGVub3VnaCBsb29rYWhlYWQsIHRoZSBsYXN0IHR3byBzdHJpbmdzIGFyZSBub3QgaW5zZXJ0ZWQgaW4KICAgICAgICAgICAgICAgKiB0aGUgaGFzaCB0YWJsZS4KICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICBzLmxvb2thaGVhZCAtPSBzLnByZXZfbGVuZ3RoIC0gMTsKICAgICAgICAgICAgICBzLnByZXZfbGVuZ3RoIC09IDI7CiAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgaWYgKCsrcy5zdHJzdGFydCA8PSBtYXhfaW5zZXJ0KSB7CiAgICAgICAgICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovCiAgICAgICAgICAgICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0gkMSAtIDFdKSAmIHMuaGFzaF9tYXNrOwogICAgICAgICAgICAgICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTsKICAgICAgICAgICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDsKICAgICAgICAgICAgICAgICAgLyoqKi8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IHdoaWxlICgtLXMucHJldl9sZW5ndGggIT09IDApOwogICAgICAgICAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDsKICAgICAgICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCQxIC0gMTsKICAgICAgICAgICAgICBzLnN0cnN0YXJ0Kys7CgogICAgICAgICAgICAgIGlmIChiZmx1c2gpIHsKICAgICAgICAgICAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi8KICAgICAgICAgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwogICAgICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qKiovCiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfSBlbHNlIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkgewogICAgICAgICAgICAgIC8qIElmIHRoZXJlIHdhcyBubyBtYXRjaCBhdCB0aGUgcHJldmlvdXMgcG9zaXRpb24sIG91dHB1dCBhCiAgICAgICAgICAgICAgICogc2luZ2xlIGxpdGVyYWwuIElmIHRoZXJlIHdhcyBhIG1hdGNoIGJ1dCB0aGUgY3VycmVudCBtYXRjaAogICAgICAgICAgICAgICAqIGlzIGxvbmdlciwgdHJ1bmNhdGUgdGhlIHByZXZpb3VzIG1hdGNoIHRvIGEgc2luZ2xlIGxpdGVyYWwuCiAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIiVjIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7CiAgICAgICAgICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi8KICAgICAgICAgICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTsKCiAgICAgICAgICAgICAgaWYgKGJmbHVzaCkgewogICAgICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DS19PTkxZKHMsIDApICoqKi8KICAgICAgICAgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwogICAgICAgICAgICAgICAgLyoqKi8KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcy5zdHJzdGFydCsrOwogICAgICAgICAgICAgIHMubG9va2FoZWFkLS07CiAgICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8qIFRoZXJlIGlzIG5vIHByZXZpb3VzIG1hdGNoIHRvIGNvbXBhcmUgd2l0aCwgd2FpdCBmb3IKICAgICAgICAgICAgICAgKiB0aGUgbmV4dCBzdGVwIHRvIGRlY2lkZS4KICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDE7CiAgICAgICAgICAgICAgcy5zdHJzdGFydCsrOwogICAgICAgICAgICAgIHMubG9va2FoZWFkLS07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8vQXNzZXJ0IChmbHVzaCAhPSBaX05PX0ZMVVNILCAibm8gZmx1c2g/Iik7CiAgICAgICAgICBpZiAocy5tYXRjaF9hdmFpbGFibGUpIHsKICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIiVjIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7CiAgICAgICAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovCiAgICAgICAgICAgIGJmbHVzaCA9IF90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pOwoKICAgICAgICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwOwogICAgICAgICAgfQogICAgICAgICAgcy5pbnNlcnQgPSBzLnN0cnN0YXJ0IDwgTUlOX01BVENIJDEgLSAxID8gcy5zdHJzdGFydCA6IE1JTl9NQVRDSCQxIC0gMTsKICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHsKICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqLwogICAgICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpOwogICAgICAgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAgICAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDsKICAgICAgICAgICAgfQogICAgICAgICAgICAvKioqLwogICAgICAgICAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocy5sYXN0X2xpdCkgewogICAgICAgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovCiAgICAgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwogICAgICAgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyoqKi8KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gQlNfQkxPQ0tfRE9ORTsKICAgICAgICB9CgoKICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAgKiBGb3IgWl9STEUsIHNpbXBseSBsb29rIGZvciBydW5zIG9mIGJ5dGVzLCBnZW5lcmF0ZSBtYXRjaGVzIG9ubHkgb2YgZGlzdGFuY2UKICAgICAgICAgKiBvbmUuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLiAgKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2YKICAgICAgICAgKiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBaX1JMRS4pCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZGVmbGF0ZV9ybGUocywgZmx1c2gpIHsKICAgICAgICAgIHZhciBiZmx1c2g7IC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqLwogICAgICAgICAgdmFyIHByZXY7IC8qIGJ5dGUgYXQgZGlzdGFuY2Ugb25lIHRvIG1hdGNoICovCiAgICAgICAgICB2YXIgc2Nhbiwgc3RyZW5kOyAvKiBzY2FuIGdvZXMgdXAgdG8gc3RyZW5kIGZvciBsZW5ndGggb2YgcnVuICovCgogICAgICAgICAgdmFyIF93aW4gPSBzLndpbmRvdzsKCiAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdAogICAgICAgICAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlcwogICAgICAgICAgICAgKiBmb3IgdGhlIGxvbmdlc3QgcnVuLCBwbHVzIG9uZSBmb3IgdGhlIHVucm9sbGVkIGxvb3AuCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIJDEpIHsKICAgICAgICAgICAgICBmaWxsX3dpbmRvdyhzKTsKICAgICAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIJDEgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHsKICAgICAgICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfSAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqLwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBTZWUgaG93IG1hbnkgdGltZXMgdGhlIHByZXZpb3VzIGJ5dGUgcmVwZWF0cyAqLwogICAgICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7CiAgICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gkMSAmJiBzLnN0cnN0YXJ0ID4gMCkgewogICAgICAgICAgICAgIHNjYW4gPSBzLnN0cnN0YXJ0IC0gMTsKICAgICAgICAgICAgICBwcmV2ID0gX3dpbltzY2FuXTsKICAgICAgICAgICAgICBpZiAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0pIHsKICAgICAgICAgICAgICAgIHN0cmVuZCA9IHMuc3Ryc3RhcnQgKyBNQVhfTUFUQ0gkMTsKICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovCiAgICAgICAgICAgICAgICB9IHdoaWxlIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmCiAgICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYKICAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJgogICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmCiAgICAgICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpOwogICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNQVhfTUFUQ0gkMSAtIChzdHJlbmQgLSBzY2FuKTsKICAgICAgICAgICAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+IHMubG9va2FoZWFkKSB7CiAgICAgICAgICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gcy5sb29rYWhlYWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIC8vQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1SW50KShzLT53aW5kb3dfc2l6ZS0xKSwgIndpbGQgc2NhbiIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBFbWl0IG1hdGNoIGlmIGhhdmUgcnVuIG9mIE1JTl9NQVRDSCBvciBsb25nZXIsIGVsc2UgZW1pdCBsaXRlcmFsICovCiAgICAgICAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gkMSkgewogICAgICAgICAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5zdHJzdGFydCAtIDEsIHMubWF0Y2hfbGVuZ3RoKTsKCiAgICAgICAgICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqLwogICAgICAgICAgICAgIGJmbHVzaCA9IF90cl90YWxseShzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCQxKTsKCiAgICAgICAgICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7CiAgICAgICAgICAgICAgcy5zdHJzdGFydCArPSBzLm1hdGNoX2xlbmd0aDsKICAgICAgICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqLwogICAgICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCIlYyIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTsKICAgICAgICAgICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi8KICAgICAgICAgICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pOwoKICAgICAgICAgICAgICBzLmxvb2thaGVhZC0tOwogICAgICAgICAgICAgIHMuc3Ryc3RhcnQrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYmZsdXNoKSB7CiAgICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgICAgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwogICAgICAgICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvKioqLwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBzLmluc2VydCA9IDA7CiAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7CiAgICAgICAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi8KICAgICAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTsKICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyoqKi8KICAgICAgICAgICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHMubGFzdF9saXQpIHsKICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTsKICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qKiovCiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gQlNfQkxPQ0tfRE9ORTsKICAgICAgICB9CgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICAqIEZvciBaX0hVRkZNQU5fT05MWSwgZG8gbm90IGxvb2sgZm9yIG1hdGNoZXMuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLgogICAgICAgICAqIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIEh1ZmZtYW4uKQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgewogICAgICAgICAgdmFyIGJmbHVzaDsgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovCgogICAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBoYXZlIGEgbGl0ZXJhbCB0byB3cml0ZS4gKi8KICAgICAgICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7CiAgICAgICAgICAgICAgZmlsbF93aW5kb3cocyk7CiAgICAgICAgICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7CiAgICAgICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfTk9fRkxVU0gpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOyAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqLwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovCiAgICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDsKICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIiVjIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpOwogICAgICAgICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi8KICAgICAgICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTsKICAgICAgICAgICAgcy5sb29rYWhlYWQtLTsKICAgICAgICAgICAgcy5zdHJzdGFydCsrOwogICAgICAgICAgICBpZiAoYmZsdXNoKSB7CiAgICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgICAgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwogICAgICAgICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvKioqLwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBzLmluc2VydCA9IDA7CiAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7CiAgICAgICAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi8KICAgICAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTsKICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyoqKi8KICAgICAgICAgICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHMubGFzdF9saXQpIHsKICAgICAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTsKICAgICAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qKiovCiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gQlNfQkxPQ0tfRE9ORTsKICAgICAgICB9CgogICAgICAgIC8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvbgogICAgICAgICAqIHRoZSBkZXNpcmVkIHBhY2sgbGV2ZWwgKDAuLjkpLiBUaGUgdmFsdWVzIGdpdmVuIGJlbG93IGhhdmUgYmVlbiB0dW5lZCB0bwogICAgICAgICAqIGV4Y2x1ZGUgd29yc3QgY2FzZSBwZXJmb3JtYW5jZSBmb3IgcGF0aG9sb2dpY2FsIGZpbGVzLiBCZXR0ZXIgdmFsdWVzIG1heSBiZQogICAgICAgICAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBDb25maWcoZ29vZF9sZW5ndGgsIG1heF9sYXp5LCBuaWNlX2xlbmd0aCwgbWF4X2NoYWluLCBmdW5jKSB7CiAgICAgICAgICB0aGlzLmdvb2RfbGVuZ3RoID0gZ29vZF9sZW5ndGg7CiAgICAgICAgICB0aGlzLm1heF9sYXp5ID0gbWF4X2xhenk7CiAgICAgICAgICB0aGlzLm5pY2VfbGVuZ3RoID0gbmljZV9sZW5ndGg7CiAgICAgICAgICB0aGlzLm1heF9jaGFpbiA9IG1heF9jaGFpbjsKICAgICAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7CiAgICAgICAgfQoKICAgICAgICB2YXIgY29uZmlndXJhdGlvbl90YWJsZTsKCiAgICAgICAgY29uZmlndXJhdGlvbl90YWJsZSA9IFsKICAgICAgICAgIC8qICAgICAgZ29vZCBsYXp5IG5pY2UgY2hhaW4gKi8KICAgICAgICAgIG5ldyBDb25maWcoMCwgMCwgMCwgMCwgZGVmbGF0ZV9zdG9yZWQpLCAvKiAwIHN0b3JlIG9ubHkgKi8KICAgICAgICAgIG5ldyBDb25maWcoNCwgNCwgOCwgNCwgZGVmbGF0ZV9mYXN0KSwgLyogMSBtYXggc3BlZWQsIG5vIGxhenkgbWF0Y2hlcyAqLwogICAgICAgICAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgLyogMiAqLwogICAgICAgICAgbmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIGRlZmxhdGVfZmFzdCksIC8qIDMgKi8KCiAgICAgICAgICBuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwgLyogNCBsYXp5IG1hdGNoZXMgKi8KICAgICAgICAgIG5ldyBDb25maWcoOCwgMTYsIDMyLCAzMiwgZGVmbGF0ZV9zbG93KSwgLyogNSAqLwogICAgICAgICAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksIC8qIDYgKi8KICAgICAgICAgIG5ldyBDb25maWcoOCwgMzIsIDEyOCwgMjU2LCBkZWZsYXRlX3Nsb3cpLCAvKiA3ICovCiAgICAgICAgICBuZXcgQ29uZmlnKDMyLCAxMjgsIDI1OCwgMTAyNCwgZGVmbGF0ZV9zbG93KSwgLyogOCAqLwogICAgICAgICAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgLyogOSBtYXggY29tcHJlc3Npb24gKi8KICAgICAgICBdOwoKCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICogSW5pdGlhbGl6ZSB0aGUgImxvbmdlc3QgbWF0Y2giIHJvdXRpbmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGxtX2luaXQocykgewogICAgICAgICAgcy53aW5kb3dfc2l6ZSA9IDIgKiBzLndfc2l6ZTsKCiAgICAgICAgICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi8KICAgICAgICAgIHplcm8kMShzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApOwoKICAgICAgICAgIC8qIFNldCB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnM6CiAgICAgICAgICAgKi8KICAgICAgICAgIHMubWF4X2xhenlfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLm1heF9sYXp5OwogICAgICAgICAgcy5nb29kX21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5nb29kX2xlbmd0aDsKICAgICAgICAgIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7CiAgICAgICAgICBzLm1heF9jaGFpbl9sZW5ndGggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLm1heF9jaGFpbjsKCiAgICAgICAgICBzLnN0cnN0YXJ0ID0gMDsKICAgICAgICAgIHMuYmxvY2tfc3RhcnQgPSAwOwogICAgICAgICAgcy5sb29rYWhlYWQgPSAwOwogICAgICAgICAgcy5pbnNlcnQgPSAwOwogICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIJDEgLSAxOwogICAgICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwOwogICAgICAgICAgcy5pbnNfaCA9IDA7CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gRGVmbGF0ZVN0YXRlKCkgewogICAgICAgICAgdGhpcy5zdHJtID0gbnVsbDsgLyogcG9pbnRlciBiYWNrIHRvIHRoaXMgemxpYiBzdHJlYW0gKi8KICAgICAgICAgIHRoaXMuc3RhdHVzID0gMDsgLyogYXMgdGhlIG5hbWUgaW1wbGllcyAqLwogICAgICAgICAgdGhpcy5wZW5kaW5nX2J1ZiA9IG51bGw7IC8qIG91dHB1dCBzdGlsbCBwZW5kaW5nICovCiAgICAgICAgICB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwOyAvKiBzaXplIG9mIHBlbmRpbmdfYnVmICovCiAgICAgICAgICB0aGlzLnBlbmRpbmdfb3V0ID0gMDsgLyogbmV4dCBwZW5kaW5nIGJ5dGUgdG8gb3V0cHV0IHRvIHRoZSBzdHJlYW0gKi8KICAgICAgICAgIHRoaXMucGVuZGluZyA9IDA7IC8qIG5iIG9mIGJ5dGVzIGluIHRoZSBwZW5kaW5nIGJ1ZmZlciAqLwogICAgICAgICAgdGhpcy53cmFwID0gMDsgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqLwogICAgICAgICAgdGhpcy5nemhlYWQgPSBudWxsOyAvKiBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiB0byB3cml0ZSAqLwogICAgICAgICAgdGhpcy5nemluZGV4ID0gMDsgLyogd2hlcmUgaW4gZXh0cmEsIG5hbWUsIG9yIGNvbW1lbnQgKi8KICAgICAgICAgIHRoaXMubWV0aG9kID0gWl9ERUZMQVRFRDsgLyogY2FuIG9ubHkgYmUgREVGTEFURUQgKi8KICAgICAgICAgIHRoaXMubGFzdF9mbHVzaCA9IC0xOyAvKiB2YWx1ZSBvZiBmbHVzaCBwYXJhbSBmb3IgcHJldmlvdXMgZGVmbGF0ZSBjYWxsICovCgogICAgICAgICAgdGhpcy53X3NpemUgPSAwOyAvKiBMWjc3IHdpbmRvdyBzaXplICgzMksgYnkgZGVmYXVsdCkgKi8KICAgICAgICAgIHRoaXMud19iaXRzID0gMDsgLyogbG9nMih3X3NpemUpICAoOC4uMTYpICovCiAgICAgICAgICB0aGlzLndfbWFzayA9IDA7IC8qIHdfc2l6ZSAtIDEgKi8KCiAgICAgICAgICB0aGlzLndpbmRvdyA9IG51bGw7CiAgICAgICAgICAvKiBTbGlkaW5nIHdpbmRvdy4gSW5wdXQgYnl0ZXMgYXJlIHJlYWQgaW50byB0aGUgc2Vjb25kIGhhbGYgb2YgdGhlIHdpbmRvdywKICAgICAgICAgICAqIGFuZCBtb3ZlIHRvIHRoZSBmaXJzdCBoYWxmIGxhdGVyIHRvIGtlZXAgYSBkaWN0aW9uYXJ5IG9mIGF0IGxlYXN0IHdTaXplCiAgICAgICAgICAgKiBieXRlcy4gV2l0aCB0aGlzIG9yZ2FuaXphdGlvbiwgbWF0Y2hlcyBhcmUgbGltaXRlZCB0byBhIGRpc3RhbmNlIG9mCiAgICAgICAgICAgKiB3U2l6ZS1NQVhfTUFUQ0ggYnl0ZXMsIGJ1dCB0aGlzIGVuc3VyZXMgdGhhdCBJTyBpcyBhbHdheXMKICAgICAgICAgICAqIHBlcmZvcm1lZCB3aXRoIGEgbGVuZ3RoIG11bHRpcGxlIG9mIHRoZSBibG9jayBzaXplLgogICAgICAgICAgICovCgogICAgICAgICAgdGhpcy53aW5kb3dfc2l6ZSA9IDA7CiAgICAgICAgICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlcgogICAgICAgICAgICogaXMgZGlyZWN0bHkgdXNlZCBhcyBzbGlkaW5nIHdpbmRvdy4KICAgICAgICAgICAqLwoKICAgICAgICAgIHRoaXMucHJldiA9IG51bGw7CiAgICAgICAgICAvKiBMaW5rIHRvIG9sZGVyIHN0cmluZyB3aXRoIHNhbWUgaGFzaCBpbmRleC4gVG8gbGltaXQgdGhlIHNpemUgb2YgdGhpcwogICAgICAgICAgICogYXJyYXkgdG8gNjRLLCB0aGlzIGxpbmsgaXMgbWFpbnRhaW5lZCBvbmx5IGZvciB0aGUgbGFzdCAzMksgc3RyaW5ncy4KICAgICAgICAgICAqIEFuIGluZGV4IGluIHRoaXMgYXJyYXkgaXMgdGh1cyBhIHdpbmRvdyBpbmRleCBtb2R1bG8gMzJLLgogICAgICAgICAgICovCgogICAgICAgICAgdGhpcy5oZWFkID0gbnVsbDsgLyogSGVhZHMgb2YgdGhlIGhhc2ggY2hhaW5zIG9yIE5JTC4gKi8KCiAgICAgICAgICB0aGlzLmluc19oID0gMDsgLyogaGFzaCBpbmRleCBvZiBzdHJpbmcgdG8gYmUgaW5zZXJ0ZWQgKi8KICAgICAgICAgIHRoaXMuaGFzaF9zaXplID0gMDsgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIGhhc2ggdGFibGUgKi8KICAgICAgICAgIHRoaXMuaGFzaF9iaXRzID0gMDsgLyogbG9nMihoYXNoX3NpemUpICovCiAgICAgICAgICB0aGlzLmhhc2hfbWFzayA9IDA7IC8qIGhhc2hfc2l6ZS0xICovCgogICAgICAgICAgdGhpcy5oYXNoX3NoaWZ0ID0gMDsKICAgICAgICAgIC8qIE51bWJlciBvZiBiaXRzIGJ5IHdoaWNoIGluc19oIG11c3QgYmUgc2hpZnRlZCBhdCBlYWNoIGlucHV0CiAgICAgICAgICAgKiBzdGVwLiBJdCBtdXN0IGJlIHN1Y2ggdGhhdCBhZnRlciBNSU5fTUFUQ0ggc3RlcHMsIHRoZSBvbGRlc3QKICAgICAgICAgICAqIGJ5dGUgbm8gbG9uZ2VyIHRha2VzIHBhcnQgaW4gdGhlIGhhc2gga2V5LCB0aGF0IGlzOgogICAgICAgICAgICogICBoYXNoX3NoaWZ0ICogTUlOX01BVENIID49IGhhc2hfYml0cwogICAgICAgICAgICovCgogICAgICAgICAgdGhpcy5ibG9ja19zdGFydCA9IDA7CiAgICAgICAgICAvKiBXaW5kb3cgcG9zaXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY3VycmVudCBvdXRwdXQgYmxvY2suIEdldHMKICAgICAgICAgICAqIG5lZ2F0aXZlIHdoZW4gdGhlIHdpbmRvdyBpcyBtb3ZlZCBiYWNrd2FyZHMuCiAgICAgICAgICAgKi8KCiAgICAgICAgICB0aGlzLm1hdGNoX2xlbmd0aCA9IDA7IC8qIGxlbmd0aCBvZiBiZXN0IG1hdGNoICovCiAgICAgICAgICB0aGlzLnByZXZfbWF0Y2ggPSAwOyAvKiBwcmV2aW91cyBtYXRjaCAqLwogICAgICAgICAgdGhpcy5tYXRjaF9hdmFpbGFibGUgPSAwOyAvKiBzZXQgaWYgcHJldmlvdXMgbWF0Y2ggZXhpc3RzICovCiAgICAgICAgICB0aGlzLnN0cnN0YXJ0ID0gMDsgLyogc3RhcnQgb2Ygc3RyaW5nIHRvIGluc2VydCAqLwogICAgICAgICAgdGhpcy5tYXRjaF9zdGFydCA9IDA7IC8qIHN0YXJ0IG9mIG1hdGNoaW5nIHN0cmluZyAqLwogICAgICAgICAgdGhpcy5sb29rYWhlYWQgPSAwOyAvKiBudW1iZXIgb2YgdmFsaWQgYnl0ZXMgYWhlYWQgaW4gd2luZG93ICovCgogICAgICAgICAgdGhpcy5wcmV2X2xlbmd0aCA9IDA7CiAgICAgICAgICAvKiBMZW5ndGggb2YgdGhlIGJlc3QgbWF0Y2ggYXQgcHJldmlvdXMgc3RlcC4gTWF0Y2hlcyBub3QgZ3JlYXRlciB0aGFuIHRoaXMKICAgICAgICAgICAqIGFyZSBkaXNjYXJkZWQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgbGF6eSBtYXRjaCBldmFsdWF0aW9uLgogICAgICAgICAgICovCgogICAgICAgICAgdGhpcy5tYXhfY2hhaW5fbGVuZ3RoID0gMDsKICAgICAgICAgIC8qIFRvIHNwZWVkIHVwIGRlZmxhdGlvbiwgaGFzaCBjaGFpbnMgYXJlIG5ldmVyIHNlYXJjaGVkIGJleW9uZCB0aGlzCiAgICAgICAgICAgKiBsZW5ndGguICBBIGhpZ2hlciBsaW1pdCBpbXByb3ZlcyBjb21wcmVzc2lvbiByYXRpbyBidXQgZGVncmFkZXMgdGhlCiAgICAgICAgICAgKiBzcGVlZC4KICAgICAgICAgICAqLwoKICAgICAgICAgIHRoaXMubWF4X2xhenlfbWF0Y2ggPSAwOwogICAgICAgICAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseQogICAgICAgICAgICogc21hbGxlciB0aGFuIHRoaXMgdmFsdWUuIFRoaXMgbWVjaGFuaXNtIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb24KICAgICAgICAgICAqIGxldmVscyA+PSA0LgogICAgICAgICAgICovCiAgICAgICAgICAvLyBUaGF0J3MgYWxpYXMgdG8gbWF4X2xhenlfbWF0Y2gsIGRvbid0IHVzZSBkaXJlY3RseQogICAgICAgICAgLy90aGlzLm1heF9pbnNlcnRfbGVuZ3RoID0gMDsKICAgICAgICAgIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbm90CiAgICAgICAgICAgKiBncmVhdGVyIHRoYW4gdGhpcyBsZW5ndGguIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uCiAgICAgICAgICAgKiBtYXhfaW5zZXJ0X2xlbmd0aCBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uIGxldmVscyA8PSAzLgogICAgICAgICAgICovCgogICAgICAgICAgdGhpcy5sZXZlbCA9IDA7IC8qIGNvbXByZXNzaW9uIGxldmVsICgxLi45KSAqLwogICAgICAgICAgdGhpcy5zdHJhdGVneSA9IDA7IC8qIGZhdm9yIG9yIGZvcmNlIEh1ZmZtYW4gY29kaW5nKi8KCiAgICAgICAgICB0aGlzLmdvb2RfbWF0Y2ggPSAwOwogICAgICAgICAgLyogVXNlIGEgZmFzdGVyIHNlYXJjaCB3aGVuIHRoZSBwcmV2aW91cyBtYXRjaCBpcyBsb25nZXIgdGhhbiB0aGlzICovCgogICAgICAgICAgdGhpcy5uaWNlX21hdGNoID0gMDsgLyogU3RvcCBzZWFyY2hpbmcgd2hlbiBjdXJyZW50IG1hdGNoIGV4Y2VlZHMgdGhpcyAqLwoKICAgICAgICAgIC8qIHVzZWQgYnkgYzogKi8KCiAgICAgICAgICAvKiBEaWRuJ3QgdXNlIGN0X2RhdGEgdHlwZWRlZiBiZWxvdyB0byBzdXBwcmVzcyBjb21waWxlciB3YXJuaW5nICovCgogICAgICAgICAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fbHRyZWVbSEVBUF9TSVpFXTsgICAvKiBsaXRlcmFsIGFuZCBsZW5ndGggdHJlZSAqLwogICAgICAgICAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fZHRyZWVbMipEX0NPREVTKzFdOyAvKiBkaXN0YW5jZSB0cmVlICovCiAgICAgICAgICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGJsX3RyZWVbMipCTF9DT0RFUysxXTsgIC8qIEh1ZmZtYW4gdHJlZSBmb3IgYml0IGxlbmd0aHMgKi8KCiAgICAgICAgICAvLyBVc2UgZmxhdCBhcnJheSBvZiBET1VCTEUgc2l6ZSwgd2l0aCBpbnRlcmxlYXZlZCBmYXRhLAogICAgICAgICAgLy8gYmVjYXVzZSBKUyBkb2VzIG5vdCBzdXBwb3J0IGVmZmVjdGl2ZQogICAgICAgICAgdGhpcy5keW5fbHRyZWUgPSBuZXcgQnVmMTYoSEVBUF9TSVpFJDEgKiAyKTsKICAgICAgICAgIHRoaXMuZHluX2R0cmVlID0gbmV3IEJ1ZjE2KCgyICogRF9DT0RFUyQxICsgMSkgKiAyKTsKICAgICAgICAgIHRoaXMuYmxfdHJlZSA9IG5ldyBCdWYxNigoMiAqIEJMX0NPREVTJDEgKyAxKSAqIDIpOwogICAgICAgICAgemVybyQxKHRoaXMuZHluX2x0cmVlKTsKICAgICAgICAgIHplcm8kMSh0aGlzLmR5bl9kdHJlZSk7CiAgICAgICAgICB6ZXJvJDEodGhpcy5ibF90cmVlKTsKCiAgICAgICAgICB0aGlzLmxfZGVzYyA9IG51bGw7IC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi8KICAgICAgICAgIHRoaXMuZF9kZXNjID0gbnVsbDsgLyogZGVzYy4gZm9yIGRpc3RhbmNlIHRyZWUgKi8KICAgICAgICAgIHRoaXMuYmxfZGVzYyA9IG51bGw7IC8qIGRlc2MuIGZvciBiaXQgbGVuZ3RoIHRyZWUgKi8KCiAgICAgICAgICAvL3VzaCBibF9jb3VudFtNQVhfQklUUysxXTsKICAgICAgICAgIHRoaXMuYmxfY291bnQgPSBuZXcgQnVmMTYoTUFYX0JJVFMkMSArIDEpOwogICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCBmb3IgYW4gb3B0aW1hbCB0cmVlICovCgogICAgICAgICAgLy9pbnQgaGVhcFsyKkxfQ09ERVMrMV07ICAgICAgLyogaGVhcCB1c2VkIHRvIGJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzICovCiAgICAgICAgICB0aGlzLmhlYXAgPSBuZXcgQnVmMTYoMiAqIExfQ09ERVMkMSArIDEpOyAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi8KICAgICAgICAgIHplcm8kMSh0aGlzLmhlYXApOwoKICAgICAgICAgIHRoaXMuaGVhcF9sZW4gPSAwOyAvKiBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGhlYXAgKi8KICAgICAgICAgIHRoaXMuaGVhcF9tYXggPSAwOyAvKiBlbGVtZW50IG9mIGxhcmdlc3QgZnJlcXVlbmN5ICovCiAgICAgICAgICAvKiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLiBoZWFwWzBdIGlzIG5vdCB1c2VkLgogICAgICAgICAgICogVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbAogICAgICAgICAgICovCgogICAgICAgICAgdGhpcy5kZXB0aCA9IG5ldyBCdWYxNigyICogTF9DT0RFUyQxICsgMSk7IC8vdWNoIGRlcHRoWzIqTF9DT0RFUysxXTsKICAgICAgICAgIHplcm8kMSh0aGlzLmRlcHRoKTsKICAgICAgICAgIC8qIERlcHRoIG9mIGVhY2ggc3VidHJlZSB1c2VkIGFzIHRpZSBicmVha2VyIGZvciB0cmVlcyBvZiBlcXVhbCBmcmVxdWVuY3kKICAgICAgICAgICAqLwoKICAgICAgICAgIHRoaXMubF9idWYgPSAwOyAvKiBidWZmZXIgaW5kZXggZm9yIGxpdGVyYWxzIG9yIGxlbmd0aHMgKi8KCiAgICAgICAgICB0aGlzLmxpdF9idWZzaXplID0gMDsKICAgICAgICAgIC8qIFNpemUgb2YgbWF0Y2ggYnVmZmVyIGZvciBsaXRlcmFscy9sZW5ndGhzLiAgVGhlcmUgYXJlIDQgcmVhc29ucyBmb3IKICAgICAgICAgICAqIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0SzoKICAgICAgICAgICAqICAgLSBmcmVxdWVuY2llcyBjYW4gYmUga2VwdCBpbiAxNiBiaXQgY291bnRlcnMKICAgICAgICAgICAqICAgLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgdGhlIGZpcnN0IGJsb2NrLCBhbGwgaW5wdXQKICAgICAgICAgICAqICAgICBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW5kb3cgc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlbgogICAgICAgICAgICogICAgIHdoZW4gaW5wdXQgY29tZXMgZnJvbSBzdGFuZGFyZCBpbnB1dC4gIChUaGlzIGNhbiBhbHNvIGJlIGRvbmUgZm9yCiAgICAgICAgICAgKiAgICAgYWxsIGJsb2NrcyBpZiBsaXRfYnVmc2l6ZSBpcyBub3QgZ3JlYXRlciB0aGFuIDMySy4pCiAgICAgICAgICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIGEgZmlsZSBzbWFsbGVyIHRoYW4gNjRLLCB3ZSBjYW4KICAgICAgICAgICAqICAgICBldmVuIGVtaXQgYSBzdG9yZWQgZmlsZSBpbnN0ZWFkIG9mIGEgc3RvcmVkIGJsb2NrIChzYXZpbmcgNSBieXRlcykuCiAgICAgICAgICAgKiAgICAgVGhpcyBpcyBhcHBsaWNhYmxlIG9ubHkgZm9yIHppcCAobm90IGd6aXAgb3IgemxpYikuCiAgICAgICAgICAgKiAgIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0CiAgICAgICAgICAgKiAgICAgYWRhcHRhdGlvbiB0byBjaGFuZ2VzIGluIHRoZSBpbnB1dCBkYXRhIHN0YXRpc3RpY3MuIChUYWtlIGZvcgogICAgICAgICAgICogICAgIGV4YW1wbGUgYSBiaW5hcnkgZmlsZSB3aXRoIHBvb3JseSBjb21wcmVzc2libGUgY29kZSBmb2xsb3dlZCBieQogICAgICAgICAgICogICAgIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlCiAgICAgICAgICAgKiAgICAgZmFzdCBhZGFwdGF0aW9uIGJ1dCBoYXZlIG9mIGNvdXJzZSB0aGUgb3ZlcmhlYWQgb2YgdHJhbnNtaXR0aW5nCiAgICAgICAgICAgKiAgICAgdHJlZXMgbW9yZSBmcmVxdWVudGx5LgogICAgICAgICAgICogICAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNAogICAgICAgICAgICovCgogICAgICAgICAgdGhpcy5sYXN0X2xpdCA9IDA7IC8qIHJ1bm5pbmcgaW5kZXggaW4gbF9idWYgKi8KCiAgICAgICAgICB0aGlzLmRfYnVmID0gMDsKICAgICAgICAgIC8qIEJ1ZmZlciBpbmRleCBmb3IgZGlzdGFuY2VzLiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgZF9idWYgYW5kIGxfYnVmIGhhdmUKICAgICAgICAgICAqIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50cy4gVG8gdXNlIGRpZmZlcmVudCBsZW5ndGhzLCBhbiBleHRyYSBmbGFnCiAgICAgICAgICAgKiBhcnJheSB3b3VsZCBiZSBuZWNlc3NhcnkuCiAgICAgICAgICAgKi8KCiAgICAgICAgICB0aGlzLm9wdF9sZW4gPSAwOyAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBvcHRpbWFsIHRyZWVzICovCiAgICAgICAgICB0aGlzLnN0YXRpY19sZW4gPSAwOyAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBzdGF0aWMgdHJlZXMgKi8KICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IDA7IC8qIG51bWJlciBvZiBzdHJpbmcgbWF0Y2hlcyBpbiBjdXJyZW50IGJsb2NrICovCiAgICAgICAgICB0aGlzLmluc2VydCA9IDA7IC8qIGJ5dGVzIGF0IGVuZCBvZiB3aW5kb3cgbGVmdCB0byBpbnNlcnQgKi8KCgogICAgICAgICAgdGhpcy5iaV9idWYgPSAwOwogICAgICAgICAgLyogT3V0cHV0IGJ1ZmZlci4gYml0cyBhcmUgaW5zZXJ0ZWQgc3RhcnRpbmcgYXQgdGhlIGJvdHRvbSAobGVhc3QKICAgICAgICAgICAqIHNpZ25pZmljYW50IGJpdHMpLgogICAgICAgICAgICovCiAgICAgICAgICB0aGlzLmJpX3ZhbGlkID0gMDsKICAgICAgICAgIC8qIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdAogICAgICAgICAgICogYXJlIGFsd2F5cyB6ZXJvLgogICAgICAgICAgICovCgogICAgICAgICAgLy8gVXNlZCBmb3Igd2luZG93IG1lbW9yeSBpbml0LiBXZSBzYWZlbHkgaWdub3JlIGl0IGZvciBKUy4gVGhhdCBtYWtlcwogICAgICAgICAgLy8gc2Vuc2Ugb25seSBmb3IgcG9pbnRlcnMgYW5kIG1lbW9yeSBjaGVjayB0b29scy4KICAgICAgICAgIC8vdGhpcy5oaWdoX3dhdGVyID0gMDsKICAgICAgICAgIC8qIEhpZ2ggd2F0ZXIgbWFyayBvZmZzZXQgaW4gd2luZG93IGZvciBpbml0aWFsaXplZCBieXRlcyAtLSBieXRlcyBhYm92ZQogICAgICAgICAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHdhcm5pbmdzIHdoZW4KICAgICAgICAgICAqIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMgYWNjZXNzIGJ5dGVzIHBhc3QgdGhlIGlucHV0LiAgVGhpcyBpcyB0aGVuCiAgICAgICAgICAgKiB1cGRhdGVkIHRvIHRoZSBuZXcgaGlnaCB3YXRlciBtYXJrLgogICAgICAgICAgICovCiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKSB7CiAgICAgICAgICB2YXIgczsKCiAgICAgICAgICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsKICAgICAgICAgICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7CiAgICAgICAgICB9CgogICAgICAgICAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gMDsKICAgICAgICAgIHN0cm0uZGF0YV90eXBlID0gWl9VTktOT1dOJDE7CgogICAgICAgICAgcyA9IHN0cm0uc3RhdGU7CiAgICAgICAgICBzLnBlbmRpbmcgPSAwOwogICAgICAgICAgcy5wZW5kaW5nX291dCA9IDA7CgogICAgICAgICAgaWYgKHMud3JhcCA8IDApIHsKICAgICAgICAgICAgcy53cmFwID0gLXMud3JhcDsKICAgICAgICAgICAgLyogd2FzIG1hZGUgbmVnYXRpdmUgYnkgZGVmbGF0ZSguLi4sIFpfRklOSVNIKTsgKi8KICAgICAgICAgIH0KICAgICAgICAgIHMuc3RhdHVzID0gKHMud3JhcCA/IElOSVRfU1RBVEUgOiBCVVNZX1NUQVRFKTsKICAgICAgICAgIHN0cm0uYWRsZXIgPSAocy53cmFwID09PSAyKSA/CiAgICAgICAgICAgIDAgLy8gY3JjMzIoMCwgWl9OVUxMLCAwKQogICAgICAgICAgICA6CiAgICAgICAgICAgIDE7IC8vIGFkbGVyMzIoMCwgWl9OVUxMLCAwKQogICAgICAgICAgcy5sYXN0X2ZsdXNoID0gWl9OT19GTFVTSDsKICAgICAgICAgIF90cl9pbml0KHMpOwogICAgICAgICAgcmV0dXJuIFpfT0s7CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gZGVmbGF0ZVJlc2V0KHN0cm0pIHsKICAgICAgICAgIHZhciByZXQgPSBkZWZsYXRlUmVzZXRLZWVwKHN0cm0pOwogICAgICAgICAgaWYgKHJldCA9PT0gWl9PSykgewogICAgICAgICAgICBsbV9pbml0KHN0cm0uc3RhdGUpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiBkZWZsYXRlSW5pdDIoc3RybSwgbGV2ZWwsIG1ldGhvZCwgd2luZG93Qml0cywgbWVtTGV2ZWwsIHN0cmF0ZWd5KSB7CiAgICAgICAgICBpZiAoIXN0cm0pIHsgLy8gPT09IFpfTlVMTAogICAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgd3JhcCA9IDE7CgogICAgICAgICAgaWYgKGxldmVsID09PSBaX0RFRkFVTFRfQ09NUFJFU1NJT04pIHsKICAgICAgICAgICAgbGV2ZWwgPSA2OwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh3aW5kb3dCaXRzIDwgMCkgeyAvKiBzdXBwcmVzcyB6bGliIHdyYXBwZXIgKi8KICAgICAgICAgICAgd3JhcCA9IDA7CiAgICAgICAgICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0czsKICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93Qml0cyA+IDE1KSB7CiAgICAgICAgICAgIHdyYXAgPSAyOyAvKiB3cml0ZSBnemlwIHdyYXBwZXIgaW5zdGVhZCAqLwogICAgICAgICAgICB3aW5kb3dCaXRzIC09IDE2OwogICAgICAgICAgfQoKCiAgICAgICAgICBpZiAobWVtTGV2ZWwgPCAxIHx8IG1lbUxldmVsID4gTUFYX01FTV9MRVZFTCB8fCBtZXRob2QgIT09IFpfREVGTEFURUQgfHwKICAgICAgICAgICAgd2luZG93Qml0cyA8IDggfHwgd2luZG93Qml0cyA+IDE1IHx8IGxldmVsIDwgMCB8fCBsZXZlbCA+IDkgfHwKICAgICAgICAgICAgc3RyYXRlZ3kgPCAwIHx8IHN0cmF0ZWd5ID4gWl9GSVhFRCQxKSB7CiAgICAgICAgICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpOwogICAgICAgICAgfQoKCiAgICAgICAgICBpZiAod2luZG93Qml0cyA9PT0gOCkgewogICAgICAgICAgICB3aW5kb3dCaXRzID0gOTsKICAgICAgICAgIH0KICAgICAgICAgIC8qIHVudGlsIDI1Ni1ieXRlIHdpbmRvdyBidWcgZml4ZWQgKi8KCiAgICAgICAgICB2YXIgcyA9IG5ldyBEZWZsYXRlU3RhdGUoKTsKCiAgICAgICAgICBzdHJtLnN0YXRlID0gczsKICAgICAgICAgIHMuc3RybSA9IHN0cm07CgogICAgICAgICAgcy53cmFwID0gd3JhcDsKICAgICAgICAgIHMuZ3poZWFkID0gbnVsbDsKICAgICAgICAgIHMud19iaXRzID0gd2luZG93Qml0czsKICAgICAgICAgIHMud19zaXplID0gMSA8PCBzLndfYml0czsKICAgICAgICAgIHMud19tYXNrID0gcy53X3NpemUgLSAxOwoKICAgICAgICAgIHMuaGFzaF9iaXRzID0gbWVtTGV2ZWwgKyA3OwogICAgICAgICAgcy5oYXNoX3NpemUgPSAxIDw8IHMuaGFzaF9iaXRzOwogICAgICAgICAgcy5oYXNoX21hc2sgPSBzLmhhc2hfc2l6ZSAtIDE7CiAgICAgICAgICBzLmhhc2hfc2hpZnQgPSB+figocy5oYXNoX2JpdHMgKyBNSU5fTUFUQ0gkMSAtIDEpIC8gTUlOX01BVENIJDEpOwoKICAgICAgICAgIHMud2luZG93ID0gbmV3IEJ1Zjgocy53X3NpemUgKiAyKTsKICAgICAgICAgIHMuaGVhZCA9IG5ldyBCdWYxNihzLmhhc2hfc2l6ZSk7CiAgICAgICAgICBzLnByZXYgPSBuZXcgQnVmMTYocy53X3NpemUpOwoKICAgICAgICAgIC8vIERvbid0IG5lZWQgbWVtIGluaXQgbWFnaWMgZm9yIEpTLgogICAgICAgICAgLy9zLmhpZ2hfd2F0ZXIgPSAwOyAgLyogbm90aGluZyB3cml0dGVuIHRvIHMtPndpbmRvdyB5ZXQgKi8KCiAgICAgICAgICBzLmxpdF9idWZzaXplID0gMSA8PCAobWVtTGV2ZWwgKyA2KTsgLyogMTZLIGVsZW1lbnRzIGJ5IGRlZmF1bHQgKi8KCiAgICAgICAgICBzLnBlbmRpbmdfYnVmX3NpemUgPSBzLmxpdF9idWZzaXplICogNDsKCiAgICAgICAgICAvL292ZXJsYXkgPSAodXNoZiAqKSBaQUxMT0Moc3RybSwgcy0+bGl0X2J1ZnNpemUsIHNpemVvZih1c2gpKzIpOwogICAgICAgICAgLy9zLT5wZW5kaW5nX2J1ZiA9ICh1Y2hmICopIG92ZXJsYXk7CiAgICAgICAgICBzLnBlbmRpbmdfYnVmID0gbmV3IEJ1Zjgocy5wZW5kaW5nX2J1Zl9zaXplKTsKCiAgICAgICAgICAvLyBJdCBpcyBvZmZzZXQgZnJvbSBgcy5wZW5kaW5nX2J1ZmAgKHNpemUgaXMgYHMubGl0X2J1ZnNpemUgKiAyYCkKICAgICAgICAgIC8vcy0+ZF9idWYgPSBvdmVybGF5ICsgcy0+bGl0X2J1ZnNpemUvc2l6ZW9mKHVzaCk7CiAgICAgICAgICBzLmRfYnVmID0gMSAqIHMubGl0X2J1ZnNpemU7CgogICAgICAgICAgLy9zLT5sX2J1ZiA9IHMtPnBlbmRpbmdfYnVmICsgKDErc2l6ZW9mKHVzaCkpKnMtPmxpdF9idWZzaXplOwogICAgICAgICAgcy5sX2J1ZiA9ICgxICsgMikgKiBzLmxpdF9idWZzaXplOwoKICAgICAgICAgIHMubGV2ZWwgPSBsZXZlbDsKICAgICAgICAgIHMuc3RyYXRlZ3kgPSBzdHJhdGVneTsKICAgICAgICAgIHMubWV0aG9kID0gbWV0aG9kOwoKICAgICAgICAgIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gZGVmbGF0ZShzdHJtLCBmbHVzaCkgewogICAgICAgICAgdmFyIG9sZF9mbHVzaCwgczsKICAgICAgICAgIHZhciBiZWcsIHZhbDsgLy8gZm9yIGd6aXAgaGVhZGVyIHdyaXRlIG9ubHkKCiAgICAgICAgICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHwKICAgICAgICAgICAgZmx1c2ggPiBaX0JMT0NLIHx8IGZsdXNoIDwgMCkgewogICAgICAgICAgICByZXR1cm4gc3RybSA/IGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUikgOiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICAgIH0KCiAgICAgICAgICBzID0gc3RybS5zdGF0ZTsKCiAgICAgICAgICBpZiAoIXN0cm0ub3V0cHV0IHx8CiAgICAgICAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB8fAogICAgICAgICAgICAocy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBmbHVzaCAhPT0gWl9GSU5JU0gpKSB7CiAgICAgICAgICAgIHJldHVybiBlcnIoc3RybSwgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSA/IFpfQlVGX0VSUk9SIDogWl9TVFJFQU1fRVJST1IpOwogICAgICAgICAgfQoKICAgICAgICAgIHMuc3RybSA9IHN0cm07IC8qIGp1c3QgaW4gY2FzZSAqLwogICAgICAgICAgb2xkX2ZsdXNoID0gcy5sYXN0X2ZsdXNoOwogICAgICAgICAgcy5sYXN0X2ZsdXNoID0gZmx1c2g7CgogICAgICAgICAgLyogV3JpdGUgdGhlIGhlYWRlciAqLwogICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBJTklUX1NUQVRFKSB7CiAgICAgICAgICAgIGlmIChzLndyYXAgPT09IDIpIHsKICAgICAgICAgICAgICAvLyBHWklQIGhlYWRlcgogICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSAwOyAvL2NyYzMyKDBMLCBaX05VTEwsIDApOwogICAgICAgICAgICAgIHB1dF9ieXRlKHMsIDMxKTsKICAgICAgICAgICAgICBwdXRfYnl0ZShzLCAxMzkpOwogICAgICAgICAgICAgIHB1dF9ieXRlKHMsIDgpOwogICAgICAgICAgICAgIGlmICghcy5nemhlYWQpIHsgLy8gcy0+Z3poZWFkID09IFpfTlVMTAogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgMCk7CiAgICAgICAgICAgICAgICBwdXRfYnl0ZShzLCAwKTsKICAgICAgICAgICAgICAgIHB1dF9ieXRlKHMsIDApOwogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgMCk7CiAgICAgICAgICAgICAgICBwdXRfYnl0ZShzLCAwKTsKICAgICAgICAgICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDoKICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgPwogICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7CiAgICAgICAgICAgICAgICBwdXRfYnl0ZShzLCBPU19DT0RFKTsKICAgICAgICAgICAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgKwogICAgICAgICAgICAgICAgICAocy5nemhlYWQuaGNyYyA/IDIgOiAwKSArCiAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuZXh0cmEgPyAwIDogNCkgKwogICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgKwogICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLmNvbW1lbnQgPyAwIDogMTYpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQudGltZSAmIDB4ZmYpOwogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gOCkgJiAweGZmKTsKICAgICAgICAgICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDE2KSAmIDB4ZmYpOwogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMjQpICYgMHhmZik7CiAgICAgICAgICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6CiAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID8KICAgICAgICAgICAgICAgICAgICA0IDogMCkpOwogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQub3MgJiAweGZmKTsKICAgICAgICAgICAgICAgIGlmIChzLmd6aGVhZC5leHRyYSAmJiBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZik7CiAgICAgICAgICAgICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC5leHRyYS5sZW5ndGggPj4gOCkgJiAweGZmKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7CiAgICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcsIDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcy5nemluZGV4ID0gMDsKICAgICAgICAgICAgICAgIHMuc3RhdHVzID0gRVhUUkFfU1RBVEU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgLy8gREVGTEFURSBoZWFkZXIKICAgICAgICAgICAgewogICAgICAgICAgICAgIHZhciBoZWFkZXIgPSAoWl9ERUZMQVRFRCArICgocy53X2JpdHMgLSA4KSA8PCA0KSkgPDwgODsKICAgICAgICAgICAgICB2YXIgbGV2ZWxfZmxhZ3MgPSAtMTsKCiAgICAgICAgICAgICAgaWYgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIpIHsKICAgICAgICAgICAgICAgIGxldmVsX2ZsYWdzID0gMDsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPCA2KSB7CiAgICAgICAgICAgICAgICBsZXZlbF9mbGFncyA9IDE7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzLmxldmVsID09PSA2KSB7CiAgICAgICAgICAgICAgICBsZXZlbF9mbGFncyA9IDI7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxldmVsX2ZsYWdzID0gMzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaGVhZGVyIHw9IChsZXZlbF9mbGFncyA8PCA2KTsKICAgICAgICAgICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkgewogICAgICAgICAgICAgICAgaGVhZGVyIHw9IFBSRVNFVF9ESUNUOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBoZWFkZXIgKz0gMzEgLSAoaGVhZGVyICUgMzEpOwoKICAgICAgICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7CiAgICAgICAgICAgICAgcHV0U2hvcnRNU0IocywgaGVhZGVyKTsKCiAgICAgICAgICAgICAgLyogU2F2ZSB0aGUgYWRsZXIzMiBvZiB0aGUgcHJlc2V0IGRpY3Rpb25hcnk6ICovCiAgICAgICAgICAgICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHsKICAgICAgICAgICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTsKICAgICAgICAgICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzdHJtLmFkbGVyID0gMTsgLy8gYWRsZXIzMigwTCwgWl9OVUxMLCAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vI2lmZGVmIEdaSVAKICAgICAgICAgIGlmIChzLnN0YXR1cyA9PT0gRVhUUkFfU1RBVEUpIHsKICAgICAgICAgICAgaWYgKHMuZ3poZWFkLmV4dHJhIC8qICE9IFpfTlVMTCovICkgewogICAgICAgICAgICAgIGJlZyA9IHMucGVuZGluZzsgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqLwoKICAgICAgICAgICAgICB3aGlsZSAocy5nemluZGV4IDwgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmZmZikpIHsKICAgICAgICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkgewogICAgICAgICAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHsKICAgICAgICAgICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7CiAgICAgICAgICAgICAgICAgIGJlZyA9IHMucGVuZGluZzsKICAgICAgICAgICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhW3MuZ3ppbmRleF0gJiAweGZmKTsKICAgICAgICAgICAgICAgIHMuZ3ppbmRleCsrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHsKICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzLmd6aW5kZXggPT09IHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkgewogICAgICAgICAgICAgICAgcy5nemluZGV4ID0gMDsKICAgICAgICAgICAgICAgIHMuc3RhdHVzID0gTkFNRV9TVEFURTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IE5BTUVfU1RBVEUpIHsKICAgICAgICAgICAgaWYgKHMuZ3poZWFkLm5hbWUgLyogIT0gWl9OVUxMKi8gKSB7CiAgICAgICAgICAgICAgYmVnID0gcy5wZW5kaW5nOyAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovCiAgICAgICAgICAgICAgLy9pbnQgdmFsOwoKICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHsKICAgICAgICAgICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7CiAgICAgICAgICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pOwogICAgICAgICAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7CiAgICAgICAgICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkgewogICAgICAgICAgICAgICAgICAgIHZhbCA9IDE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nCiAgICAgICAgICAgICAgICBpZiAocy5nemluZGV4IDwgcy5nemhlYWQubmFtZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgdmFsID0gcy5nemhlYWQubmFtZS5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB2YWwgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgdmFsKTsKICAgICAgICAgICAgICB9IHdoaWxlICh2YWwgIT09IDApOwoKICAgICAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHsKICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2YWwgPT09IDApIHsKICAgICAgICAgICAgICAgIHMuZ3ppbmRleCA9IDA7CiAgICAgICAgICAgICAgICBzLnN0YXR1cyA9IENPTU1FTlRfU1RBVEU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBDT01NRU5UX1NUQVRFKSB7CiAgICAgICAgICAgIGlmIChzLmd6aGVhZC5jb21tZW50IC8qICE9IFpfTlVMTCovICkgewogICAgICAgICAgICAgIGJlZyA9IHMucGVuZGluZzsgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqLwogICAgICAgICAgICAgIC8vaW50IHZhbDsKCiAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7CiAgICAgICAgICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykgewogICAgICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTsKICAgICAgICAgICAgICAgICAgYmVnID0gcy5wZW5kaW5nOwogICAgICAgICAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHsKICAgICAgICAgICAgICAgICAgICB2YWwgPSAxOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZwogICAgICAgICAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLmNvbW1lbnQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFsID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7CiAgICAgICAgICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTsKCiAgICAgICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7CiAgICAgICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodmFsID09PSAwKSB7CiAgICAgICAgICAgICAgICBzLnN0YXR1cyA9IEhDUkNfU1RBVEU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7CiAgICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7CiAgICAgICAgICAgICAgaWYgKHMucGVuZGluZyArIDIgPiBzLnBlbmRpbmdfYnVmX3NpemUpIHsKICAgICAgICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzLnBlbmRpbmcgKyAyIDw9IHMucGVuZGluZ19idWZfc2l6ZSkgewogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpOwogICAgICAgICAgICAgICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gOCkgJiAweGZmKTsKICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSAwOyAvL2NyYzMyKDBMLCBaX05VTEwsIDApOwogICAgICAgICAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8vI2VuZGlmCgogICAgICAgICAgLyogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZSAqLwogICAgICAgICAgaWYgKHMucGVuZGluZyAhPT0gMCkgewogICAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pOwogICAgICAgICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICAvKiBTaW5jZSBhdmFpbF9vdXQgaXMgMCwgZGVmbGF0ZSB3aWxsIGJlIGNhbGxlZCBhZ2FpbiB3aXRoCiAgICAgICAgICAgICAgICogbW9yZSBvdXRwdXQgc3BhY2UsIGJ1dCBwb3NzaWJseSB3aXRoIGJvdGggcGVuZGluZyBhbmQKICAgICAgICAgICAgICAgKiBhdmFpbF9pbiBlcXVhbCB0byB6ZXJvLiBUaGVyZSB3b24ndCBiZSBhbnl0aGluZyB0byBkbywKICAgICAgICAgICAgICAgKiBidXQgdGhpcyBpcyBub3QgYW4gZXJyb3Igc2l0dWF0aW9uIHNvIG1ha2Ugc3VyZSB3ZQogICAgICAgICAgICAgICAqIHJldHVybiBPSyBpbnN0ZWFkIG9mIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwgb2YgZGVmbGF0ZToKICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTsKICAgICAgICAgICAgICByZXR1cm4gWl9PSzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlCiAgICAgICAgICAgICAqIGZsdXNoZXMuIEZvciByZXBlYXRlZCBhbmQgdXNlbGVzcyBjYWxscyB3aXRoIFpfRklOSVNILCB3ZSBrZWVwCiAgICAgICAgICAgICAqIHJldHVybmluZyBaX1NUUkVBTV9FTkQgaW5zdGVhZCBvZiBaX0JVRl9FUlJPUi4KICAgICAgICAgICAgICovCiAgICAgICAgICB9IGVsc2UgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgcmFuayhmbHVzaCkgPD0gcmFuayhvbGRfZmx1c2gpICYmCiAgICAgICAgICAgIGZsdXNoICE9PSBaX0ZJTklTSCkgewogICAgICAgICAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvKiBVc2VyIG11c3Qgbm90IHByb3ZpZGUgbW9yZSBpbnB1dCBhZnRlciB0aGUgZmlyc3QgRklOSVNIOiAqLwogICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkgewogICAgICAgICAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvKiBTdGFydCBhIG5ldyBibG9jayBvciBjb250aW51ZSB0aGUgY3VycmVudCBvbmUuCiAgICAgICAgICAgKi8KICAgICAgICAgIGlmIChzdHJtLmF2YWlsX2luICE9PSAwIHx8IHMubG9va2FoZWFkICE9PSAwIHx8CiAgICAgICAgICAgIChmbHVzaCAhPT0gWl9OT19GTFVTSCAmJiBzLnN0YXR1cyAhPT0gRklOSVNIX1NUQVRFKSkgewogICAgICAgICAgICB2YXIgYnN0YXRlID0gKHMuc3RyYXRlZ3kgPT09IFpfSFVGRk1BTl9PTkxZKSA/IGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgOgogICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID09PSBaX1JMRSA/IGRlZmxhdGVfcmxlKHMsIGZsdXNoKSA6CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmZ1bmMocywgZmx1c2gpKTsKCiAgICAgICAgICAgIGlmIChic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEIHx8IGJzdGF0ZSA9PT0gQlNfRklOSVNIX0RPTkUpIHsKICAgICAgICAgICAgICBzLnN0YXR1cyA9IEZJTklTSF9TVEFURTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYnN0YXRlID09PSBCU19ORUVEX01PUkUgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfU1RBUlRFRCkgewogICAgICAgICAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAgICAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7CiAgICAgICAgICAgICAgICAvKiBhdm9pZCBCVUZfRVJST1IgbmV4dCBjYWxsLCBzZWUgYWJvdmUgKi8KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIFpfT0s7CiAgICAgICAgICAgICAgLyogSWYgZmx1c2ggIT0gWl9OT19GTFVTSCAmJiBhdmFpbF9vdXQgPT0gMCwgdGhlIG5leHQgY2FsbAogICAgICAgICAgICAgICAqIG9mIGRlZmxhdGUgc2hvdWxkIHVzZSB0aGUgc2FtZSBmbHVzaCBwYXJhbWV0ZXIgdG8gbWFrZSBzdXJlCiAgICAgICAgICAgICAgICogdGhhdCB0aGUgZmx1c2ggaXMgY29tcGxldGUuIFNvIHdlIGRvbid0IGhhdmUgdG8gb3V0cHV0IGFuCiAgICAgICAgICAgICAgICogZW1wdHkgYmxvY2sgaGVyZSwgdGhpcyB3aWxsIGJlIGRvbmUgYXQgbmV4dCBjYWxsLiBUaGlzIGFsc28KICAgICAgICAgICAgICAgKiBlbnN1cmVzIHRoYXQgZm9yIGEgdmVyeSBzbWFsbCBvdXRwdXQgYnVmZmVyLCB3ZSBlbWl0IGF0IG1vc3QKICAgICAgICAgICAgICAgKiBvbmUgZW1wdHkgYmxvY2suCiAgICAgICAgICAgICAgICovCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGJzdGF0ZSA9PT0gQlNfQkxPQ0tfRE9ORSkgewogICAgICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9QQVJUSUFMX0ZMVVNIKSB7CiAgICAgICAgICAgICAgICBfdHJfYWxpZ24ocyk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChmbHVzaCAhPT0gWl9CTE9DSykgeyAvKiBGVUxMX0ZMVVNIIG9yIFNZTkNfRkxVU0ggKi8KCiAgICAgICAgICAgICAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIDAsIDAsIGZhbHNlKTsKICAgICAgICAgICAgICAgIC8qIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkCiAgICAgICAgICAgICAgICAgKiBhcyBhIHNwZWNpYWwgbWFya2VyIGJ5IGluZmxhdGVfc3luYygpLgogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCkgewogICAgICAgICAgICAgICAgICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi8KICAgICAgICAgICAgICAgICAgLyogZm9yZ2V0IGhpc3RvcnkgKi8KICAgICAgICAgICAgICAgICAgemVybyQxKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7CgogICAgICAgICAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBzLnN0cnN0YXJ0ID0gMDsKICAgICAgICAgICAgICAgICAgICBzLmJsb2NrX3N0YXJ0ID0gMDsKICAgICAgICAgICAgICAgICAgICBzLmluc2VydCA9IDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTsKICAgICAgICAgICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICAgICAgICAgIHMubGFzdF9mbHVzaCA9IC0xOyAvKiBhdm9pZCBCVUZfRVJST1IgYXQgbmV4dCBjYWxsLCBzZWUgYWJvdmUgKi8KICAgICAgICAgICAgICAgIHJldHVybiBaX09LOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy9Bc3NlcnQoc3RybS0+YXZhaWxfb3V0ID4gMCwgImJ1ZzIiKTsKICAgICAgICAgIC8vaWYgKHN0cm0uYXZhaWxfb3V0IDw9IDApIHsgdGhyb3cgbmV3IEVycm9yKCJidWcyIik7fQoKICAgICAgICAgIGlmIChmbHVzaCAhPT0gWl9GSU5JU0gpIHsKICAgICAgICAgICAgcmV0dXJuIFpfT0s7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocy53cmFwIDw9IDApIHsKICAgICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VORDsKICAgICAgICAgIH0KCiAgICAgICAgICAvKiBXcml0ZSB0aGUgdHJhaWxlciAqLwogICAgICAgICAgaWYgKHMud3JhcCA9PT0gMikgewogICAgICAgICAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7CiAgICAgICAgICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7CiAgICAgICAgICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDE2KSAmIDB4ZmYpOwogICAgICAgICAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAyNCkgJiAweGZmKTsKICAgICAgICAgICAgcHV0X2J5dGUocywgc3RybS50b3RhbF9pbiAmIDB4ZmYpOwogICAgICAgICAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiA4KSAmIDB4ZmYpOwogICAgICAgICAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAxNikgJiAweGZmKTsKICAgICAgICAgICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMjQpICYgMHhmZik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7CiAgICAgICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpOwogICAgICAgICAgfQoKICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7CiAgICAgICAgICAvKiBJZiBhdmFpbF9vdXQgaXMgemVybywgdGhlIGFwcGxpY2F0aW9uIHdpbGwgY2FsbCBkZWZsYXRlIGFnYWluCiAgICAgICAgICAgKiB0byBmbHVzaCB0aGUgcmVzdC4KICAgICAgICAgICAqLwogICAgICAgICAgaWYgKHMud3JhcCA+IDApIHsKICAgICAgICAgICAgcy53cmFwID0gLXMud3JhcDsKICAgICAgICAgIH0KICAgICAgICAgIC8qIHdyaXRlIHRoZSB0cmFpbGVyIG9ubHkgb25jZSEgKi8KICAgICAgICAgIHJldHVybiBzLnBlbmRpbmcgIT09IDAgPyBaX09LIDogWl9TVFJFQU1fRU5EOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZGVmbGF0ZUVuZChzdHJtKSB7CiAgICAgICAgICB2YXIgc3RhdHVzOwoKICAgICAgICAgIGlmICghc3RybSAvKj09IFpfTlVMTCovIHx8ICFzdHJtLnN0YXRlIC8qPT0gWl9OVUxMKi8gKSB7CiAgICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICAgIH0KCiAgICAgICAgICBzdGF0dXMgPSBzdHJtLnN0YXRlLnN0YXR1czsKICAgICAgICAgIGlmIChzdGF0dXMgIT09IElOSVRfU1RBVEUgJiYKICAgICAgICAgICAgc3RhdHVzICE9PSBFWFRSQV9TVEFURSAmJgogICAgICAgICAgICBzdGF0dXMgIT09IE5BTUVfU1RBVEUgJiYKICAgICAgICAgICAgc3RhdHVzICE9PSBDT01NRU5UX1NUQVRFICYmCiAgICAgICAgICAgIHN0YXR1cyAhPT0gSENSQ19TVEFURSAmJgogICAgICAgICAgICBzdGF0dXMgIT09IEJVU1lfU1RBVEUgJiYKICAgICAgICAgICAgc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUKICAgICAgICAgICkgewogICAgICAgICAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTsKICAgICAgICAgIH0KCiAgICAgICAgICBzdHJtLnN0YXRlID0gbnVsbDsKCiAgICAgICAgICByZXR1cm4gc3RhdHVzID09PSBCVVNZX1NUQVRFID8gZXJyKHN0cm0sIFpfREFUQV9FUlJPUikgOiBaX09LOwogICAgICAgIH0KCiAgICAgICAgLyogTm90IGltcGxlbWVudGVkCiAgICAgICAgZXhwb3J0cy5kZWZsYXRlQm91bmQgPSBkZWZsYXRlQm91bmQ7CiAgICAgICAgZXhwb3J0cy5kZWZsYXRlQ29weSA9IGRlZmxhdGVDb3B5OwogICAgICAgIGV4cG9ydHMuZGVmbGF0ZVBhcmFtcyA9IGRlZmxhdGVQYXJhbXM7CiAgICAgICAgZXhwb3J0cy5kZWZsYXRlUGVuZGluZyA9IGRlZmxhdGVQZW5kaW5nOwogICAgICAgIGV4cG9ydHMuZGVmbGF0ZVByaW1lID0gZGVmbGF0ZVByaW1lOwogICAgICAgIGV4cG9ydHMuZGVmbGF0ZVR1bmUgPSBkZWZsYXRlVHVuZTsKICAgICAgICAqLwoKICAgICAgICAvLyBTZWUgc3RhdGUgZGVmcyBmcm9tIGluZmxhdGUuanMKICAgICAgICB2YXIgQkFEID0gMzA7ICAgICAgIC8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi8KICAgICAgICB2YXIgVFlQRSA9IDEyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi8KCiAgICAgICAgLyoKICAgICAgICAgICBEZWNvZGUgbGl0ZXJhbCwgbGVuZ3RoLCBhbmQgZGlzdGFuY2UgY29kZXMgYW5kIHdyaXRlIG91dCB0aGUgcmVzdWx0aW5nCiAgICAgICAgICAgbGl0ZXJhbCBhbmQgbWF0Y2ggYnl0ZXMgdW50aWwgZWl0aGVyIG5vdCBlbm91Z2ggaW5wdXQgb3Igb3V0cHV0IGlzCiAgICAgICAgICAgYXZhaWxhYmxlLCBhbiBlbmQtb2YtYmxvY2sgaXMgZW5jb3VudGVyZWQsIG9yIGEgZGF0YSBlcnJvciBpcyBlbmNvdW50ZXJlZC4KICAgICAgICAgICBXaGVuIGxhcmdlIGVub3VnaCBpbnB1dCBhbmQgb3V0cHV0IGJ1ZmZlcnMgYXJlIHN1cHBsaWVkIHRvIGluZmxhdGUoKSwgZm9yCiAgICAgICAgICAgZXhhbXBsZSwgYSAxNksgaW5wdXQgYnVmZmVyIGFuZCBhIDY0SyBvdXRwdXQgYnVmZmVyLCBtb3JlIHRoYW4gOTUlIG9mIHRoZQogICAgICAgICAgIGluZmxhdGUgZXhlY3V0aW9uIHRpbWUgaXMgc3BlbnQgaW4gdGhpcyByb3V0aW5lLgoKICAgICAgICAgICBFbnRyeSBhc3N1bXB0aW9uczoKCiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID09PSBMRU4KICAgICAgICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPj0gNgogICAgICAgICAgICAgICAgc3RybS5hdmFpbF9vdXQgPj0gMjU4CiAgICAgICAgICAgICAgICBzdGFydCA+PSBzdHJtLmF2YWlsX291dAogICAgICAgICAgICAgICAgc3RhdGUuYml0cyA8IDgKCiAgICAgICAgICAgT24gcmV0dXJuLCBzdGF0ZS5tb2RlIGlzIG9uZSBvZjoKCiAgICAgICAgICAgICAgICBMRU4gLS0gcmFuIG91dCBvZiBlbm91Z2ggb3V0cHV0IHNwYWNlIG9yIGVub3VnaCBhdmFpbGFibGUgaW5wdXQKICAgICAgICAgICAgICAgIFRZUEUgLS0gcmVhY2hlZCBlbmQgb2YgYmxvY2sgY29kZSwgaW5mbGF0ZSgpIHRvIGludGVycHJldCBuZXh0IGJsb2NrCiAgICAgICAgICAgICAgICBCQUQgLS0gZXJyb3IgaW4gYmxvY2sgZGF0YQoKICAgICAgICAgICBOb3RlczoKCiAgICAgICAgICAgIC0gVGhlIG1heGltdW0gaW5wdXQgYml0cyB1c2VkIGJ5IGEgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgMTUgYml0cyBmb3IgdGhlCiAgICAgICAgICAgICAgbGVuZ3RoIGNvZGUsIDUgYml0cyBmb3IgdGhlIGxlbmd0aCBleHRyYSwgMTUgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGNvZGUsCiAgICAgICAgICAgICAgYW5kIDEzIGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBleHRyYS4gIFRoaXMgdG90YWxzIDQ4IGJpdHMsIG9yIHNpeCBieXRlcy4KICAgICAgICAgICAgICBUaGVyZWZvcmUgaWYgc3RybS5hdmFpbF9pbiA+PSA2LCB0aGVuIHRoZXJlIGlzIGVub3VnaCBpbnB1dCB0byBhdm9pZAogICAgICAgICAgICAgIGNoZWNraW5nIGZvciBhdmFpbGFibGUgaW5wdXQgd2hpbGUgZGVjb2RpbmcuCgogICAgICAgICAgICAtIFRoZSBtYXhpbXVtIGJ5dGVzIHRoYXQgYSBzaW5nbGUgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgY2FuIG91dHB1dCBpcyAyNTgKICAgICAgICAgICAgICBieXRlcywgd2hpY2ggaXMgdGhlIG1heGltdW0gbGVuZ3RoIHRoYXQgY2FuIGJlIGNvZGVkLiAgaW5mbGF0ZV9mYXN0KCkKICAgICAgICAgICAgICByZXF1aXJlcyBzdHJtLmF2YWlsX291dCA+PSAyNTggZm9yIGVhY2ggbG9vcCB0byBhdm9pZCBjaGVja2luZyBmb3IKICAgICAgICAgICAgICBvdXRwdXQgc3BhY2UuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7CiAgICAgICAgICB2YXIgc3RhdGU7CiAgICAgICAgICB2YXIgX2luOyAgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5pbnB1dCAqLwogICAgICAgICAgdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqLwogICAgICAgICAgdmFyIF9vdXQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0ub3V0cHV0ICovCiAgICAgICAgICB2YXIgYmVnOyAgICAgICAgICAgICAgICAgICAgLyogaW5mbGF0ZSgpJ3MgaW5pdGlhbCBzdHJtLm91dHB1dCAqLwogICAgICAgICAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqLwogICAgICAgIC8vI2lmZGVmIElORkxBVEVfU1RSSUNUCiAgICAgICAgICB2YXIgZG1heDsgICAgICAgICAgICAgICAgICAgLyogbWF4aW11bSBkaXN0YW5jZSBmcm9tIHpsaWIgaGVhZGVyICovCiAgICAgICAgLy8jZW5kaWYKICAgICAgICAgIHZhciB3c2l6ZTsgICAgICAgICAgICAgICAgICAvKiB3aW5kb3cgc2l6ZSBvciB6ZXJvIGlmIG5vdCB1c2luZyB3aW5kb3cgKi8KICAgICAgICAgIHZhciB3aGF2ZTsgICAgICAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovCiAgICAgICAgICB2YXIgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovCiAgICAgICAgICAvLyBVc2UgYHNfd2luZG93YCBpbnN0ZWFkIGB3aW5kb3dgLCBhdm9pZCBjb25mbGljdCB3aXRoIGluc3RydW1lbnRhdGlvbiB0b29scwogICAgICAgICAgdmFyIHNfd2luZG93OyAgICAgICAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgd3NpemUgIT0gMCAqLwogICAgICAgICAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqLwogICAgICAgICAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uYml0cyAqLwogICAgICAgICAgdmFyIGxjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0ubGVuY29kZSAqLwogICAgICAgICAgdmFyIGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi8KICAgICAgICAgIHZhciBsbWFzazsgICAgICAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBsZW5ndGggY29kZXMgKi8KICAgICAgICAgIHZhciBkbWFzazsgICAgICAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBkaXN0YW5jZSBjb2RlcyAqLwogICAgICAgICAgdmFyIGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqLwogICAgICAgICAgdmFyIG9wOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgYml0cywgb3BlcmF0aW9uLCBleHRyYSBiaXRzLCBvciAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICB3aW5kb3cgcG9zaXRpb24sIHdpbmRvdyBieXRlcyB0byBjb3B5ICovCiAgICAgICAgICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi8KICAgICAgICAgIHZhciBkaXN0OyAgICAgICAgICAgICAgICAgICAvKiBtYXRjaCBkaXN0YW5jZSAqLwogICAgICAgICAgdmFyIGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggZnJvbSAqLwogICAgICAgICAgdmFyIGZyb21fc291cmNlOwoKCiAgICAgICAgICB2YXIgaW5wdXQsIG91dHB1dDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVycwoKICAgICAgICAgIC8qIGNvcHkgc3RhdGUgdG8gbG9jYWwgdmFyaWFibGVzICovCiAgICAgICAgICBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgICAvL2hlcmUgPSBzdGF0ZS5oZXJlOwogICAgICAgICAgX2luID0gc3RybS5uZXh0X2luOwogICAgICAgICAgaW5wdXQgPSBzdHJtLmlucHV0OwogICAgICAgICAgbGFzdCA9IF9pbiArIChzdHJtLmF2YWlsX2luIC0gNSk7CiAgICAgICAgICBfb3V0ID0gc3RybS5uZXh0X291dDsKICAgICAgICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0OwogICAgICAgICAgYmVnID0gX291dCAtIChzdGFydCAtIHN0cm0uYXZhaWxfb3V0KTsKICAgICAgICAgIGVuZCA9IF9vdXQgKyAoc3RybS5hdmFpbF9vdXQgLSAyNTcpOwogICAgICAgIC8vI2lmZGVmIElORkxBVEVfU1RSSUNUCiAgICAgICAgICBkbWF4ID0gc3RhdGUuZG1heDsKICAgICAgICAvLyNlbmRpZgogICAgICAgICAgd3NpemUgPSBzdGF0ZS53c2l6ZTsKICAgICAgICAgIHdoYXZlID0gc3RhdGUud2hhdmU7CiAgICAgICAgICB3bmV4dCA9IHN0YXRlLnduZXh0OwogICAgICAgICAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7CiAgICAgICAgICBob2xkID0gc3RhdGUuaG9sZDsKICAgICAgICAgIGJpdHMgPSBzdGF0ZS5iaXRzOwogICAgICAgICAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlOwogICAgICAgICAgZGNvZGUgPSBzdGF0ZS5kaXN0Y29kZTsKICAgICAgICAgIGxtYXNrID0gKDEgPDwgc3RhdGUubGVuYml0cykgLSAxOwogICAgICAgICAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxOwoKCiAgICAgICAgICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2gKICAgICAgICAgICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovCgogICAgICAgICAgdG9wOgogICAgICAgICAgZG8gewogICAgICAgICAgICBpZiAoYml0cyA8IDE1KSB7CiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGhlcmUgPSBsY29kZVtob2xkICYgbG1hc2tdOwoKICAgICAgICAgICAgZG9sZW46CiAgICAgICAgICAgIGZvciAoOzspIHsgLy8gR290byBlbXVsYXRpb24KICAgICAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLzsKICAgICAgICAgICAgICBob2xkID4+Pj0gb3A7CiAgICAgICAgICAgICAgYml0cyAtPSBvcDsKICAgICAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87CiAgICAgICAgICAgICAgaWYgKG9wID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBsaXRlcmFsICovCiAgICAgICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgPwogICAgICAgICAgICAgICAgLy8gICAgICAgICJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xuIiA6CiAgICAgICAgICAgICAgICAvLyAgICAgICAgImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcbiIsIGhlcmUudmFsKSk7CiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggYmFzZSAqLwogICAgICAgICAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLzsKICAgICAgICAgICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovCiAgICAgICAgICAgICAgICBpZiAob3ApIHsKICAgICAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkgewogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGxlbiArPSBob2xkICYgKCgxIDw8IG9wKSAtIDEpOwogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gb3A7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gb3A7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XG4iLCBsZW4pKTsKICAgICAgICAgICAgICAgIGlmIChiaXRzIDwgMTUpIHsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTsKCiAgICAgICAgICAgICAgICBkb2Rpc3Q6CiAgICAgICAgICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uCiAgICAgICAgICAgICAgICAgIG9wID0gaGVyZSA+Pj4gMjQvKmhlcmUuYml0cyovOwogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gb3A7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gb3A7CiAgICAgICAgICAgICAgICAgIG9wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmYvKmhlcmUub3AqLzsKCiAgICAgICAgICAgICAgICAgIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhc2UgKi8KICAgICAgICAgICAgICAgICAgICBkaXN0ID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLzsKICAgICAgICAgICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovCiAgICAgICAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkgewogICAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkaXN0ICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7CiAgICAgICAgLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1QKICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdCA+IGRtYXgpIHsKICAgICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJzsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayB0b3A7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vI2VuZGlmCiAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IG9wOwogICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gb3A7CiAgICAgICAgICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsICJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XG4iLCBkaXN0KSk7CiAgICAgICAgICAgICAgICAgICAgb3AgPSBfb3V0IC0gYmVnOyAgICAgICAgICAgICAgICAvKiBtYXggZGlzdGFuY2UgaW4gb3V0cHV0ICovCiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QgPiBvcCkgeyAgICAgICAgICAgICAgICAvKiBzZWUgaWYgY29weSBmcm9tIHdpbmRvdyAqLwogICAgICAgICAgICAgICAgICAgICAgb3AgPSBkaXN0IC0gb3A7ICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFjayBpbiB3aW5kb3cgKi8KICAgICAgICAgICAgICAgICAgICAgIGlmIChvcCA+IHdoYXZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snOwogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgIC8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYWlsdHMsCiAgICAgICAgLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eQogICAgICAgIC8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUgogICAgICAgIC8vICAgICAgICAgICAgICAgIGlmIChsZW4gPD0gb3AgLSB3aGF2ZSkgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgIGxlbiAtPSBvcCAtIHdoYXZlOwogICAgICAgIC8vICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDsKICAgICAgICAvLyAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wID4gd2hhdmUpOwogICAgICAgIC8vICAgICAgICAgICAgICAgIGlmIChvcCA9PT0gMCkgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wOwogICAgICAgIC8vICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyNlbmRpZgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7IC8vIHdpbmRvdyBpbmRleAogICAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdzsKICAgICAgICAgICAgICAgICAgICAgIGlmICh3bmV4dCA9PT0gMCkgeyAgICAgICAgICAgLyogdmVyeSBjb21tb24gY2FzZSAqLwogICAgICAgICAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplIC0gb3A7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqLwogICAgICAgICAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplICsgd25leHQgLSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgb3AgLT0gd25leHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wOwogICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gd25leHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0OwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgIC8qIGNvbnRpZ3VvdXMgaW4gd2luZG93ICovCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqLwogICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqLwogICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobGVuID4gMikgewogICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICBsZW4gLT0gMzsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi8KICAgICAgICAgICAgICAgICAgICAgIGRvIHsgICAgICAgICAgICAgICAgICAgICAgICAvKiBtaW5pbXVtIGxlbmd0aCBpcyB0aHJlZSAqLwogICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICBsZW4gLT0gMzsKICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpOwogICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbikgewogICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovCiAgICAgICAgICAgICAgICAgICAgaGVyZSA9IGRjb2RlWyhoZXJlICYgMHhmZmZmKS8qaGVyZS52YWwqLyArIChob2xkICYgKCgxIDw8IG9wKSAtIDEpKV07CiAgICAgICAgICAgICAgICAgICAgY29udGludWUgZG9kaXN0OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgICBicmVhayB0b3A7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgImNvbnRpbnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqLwogICAgICAgICAgICAgICAgaGVyZSA9IGxjb2RlWyhoZXJlICYgMHhmZmZmKS8qaGVyZS52YWwqLyArIChob2xkICYgKCgxIDw8IG9wKSAtIDEpKV07CiAgICAgICAgICAgICAgICBjb250aW51ZSBkb2xlbjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSBpZiAob3AgJiAzMikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGVuZC1vZi1ibG9jayAqLwogICAgICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsICJpbmZsYXRlOiAgICAgICAgIGVuZCBvZiBibG9ja1xuIikpOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7CiAgICAgICAgICAgICAgICBicmVhayB0b3A7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlJzsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICBicmVhayB0b3A7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhICJjb250aW51ZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAoX2luIDwgbGFzdCAmJiBfb3V0IDwgZW5kKTsKCiAgICAgICAgICAvKiByZXR1cm4gdW51c2VkIGJ5dGVzIChvbiBlbnRyeSwgYml0cyA8IDgsIHNvIGluIHdvbid0IGdvIHRvbyBmYXIgYmFjaykgKi8KICAgICAgICAgIGxlbiA9IGJpdHMgPj4gMzsKICAgICAgICAgIF9pbiAtPSBsZW47CiAgICAgICAgICBiaXRzIC09IGxlbiA8PCAzOwogICAgICAgICAgaG9sZCAmPSAoMSA8PCBiaXRzKSAtIDE7CgogICAgICAgICAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXR1cm4gKi8KICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IF9pbjsKICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBfb3V0OwogICAgICAgICAgc3RybS5hdmFpbF9pbiA9IChfaW4gPCBsYXN0ID8gNSArIChsYXN0IC0gX2luKSA6IDUgLSAoX2luIC0gbGFzdCkpOwogICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7CiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDsKICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIE1BWEJJVFMgPSAxNTsKICAgICAgICB2YXIgRU5PVUdIX0xFTlMgPSA4NTI7CiAgICAgICAgdmFyIEVOT1VHSF9ESVNUUyA9IDU5MjsKICAgICAgICAvL3ZhciBFTk9VR0ggPSAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTsKCiAgICAgICAgdmFyIENPREVTID0gMDsKICAgICAgICB2YXIgTEVOUyA9IDE7CiAgICAgICAgdmFyIERJU1RTID0gMjsKCiAgICAgICAgdmFyIGxiYXNlID0gWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgYmFzZSAqLwogICAgICAgICAgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMywgMTUsIDE3LCAxOSwgMjMsIDI3LCAzMSwKICAgICAgICAgIDM1LCA0MywgNTEsIDU5LCA2NywgODMsIDk5LCAxMTUsIDEzMSwgMTYzLCAxOTUsIDIyNywgMjU4LCAwLCAwCiAgICAgICAgXTsKCiAgICAgICAgdmFyIGxleHQgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBleHRyYSAqLwogICAgICAgICAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsCiAgICAgICAgICAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIxLCAxNiwgNzIsIDc4CiAgICAgICAgXTsKCiAgICAgICAgdmFyIGRiYXNlID0gWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBiYXNlICovCiAgICAgICAgICAxLCAyLCAzLCA0LCA1LCA3LCA5LCAxMywgMTcsIDI1LCAzMywgNDksIDY1LCA5NywgMTI5LCAxOTMsCiAgICAgICAgICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsCiAgICAgICAgICA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3LCAwLCAwCiAgICAgICAgXTsKCiAgICAgICAgdmFyIGRleHQgPSBbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGV4dHJhICovCiAgICAgICAgICAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMiwKICAgICAgICAgIDIzLCAyMywgMjQsIDI0LCAyNSwgMjUsIDI2LCAyNiwgMjcsIDI3LAogICAgICAgICAgMjgsIDI4LCAyOSwgMjksIDY0LCA2NAogICAgICAgIF07CgogICAgICAgIGZ1bmN0aW9uIGluZmxhdGVfdGFibGUodHlwZSwgbGVucywgbGVuc19pbmRleCwgY29kZXMsIHRhYmxlLCB0YWJsZV9pbmRleCwgd29yaywgb3B0cykgewogICAgICAgICAgdmFyIGJpdHMgPSBvcHRzLmJpdHM7CiAgICAgICAgICAvL2hlcmUgPSBvcHRzLmhlcmU7IC8qIHRhYmxlIGVudHJ5IGZvciBkdXBsaWNhdGlvbiAqLwoKICAgICAgICAgIHZhciBsZW4gPSAwOyAvKiBhIGNvZGUncyBsZW5ndGggaW4gYml0cyAqLwogICAgICAgICAgdmFyIHN5bSA9IDA7IC8qIGluZGV4IG9mIGNvZGUgc3ltYm9scyAqLwogICAgICAgICAgdmFyIG1pbiA9IDAsCiAgICAgICAgICAgIG1heCA9IDA7IC8qIG1pbmltdW0gYW5kIG1heGltdW0gY29kZSBsZW5ndGhzICovCiAgICAgICAgICB2YXIgcm9vdCA9IDA7IC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciByb290IHRhYmxlICovCiAgICAgICAgICB2YXIgY3VyciA9IDA7IC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciBjdXJyZW50IHRhYmxlICovCiAgICAgICAgICB2YXIgZHJvcCA9IDA7IC8qIGNvZGUgYml0cyB0byBkcm9wIGZvciBzdWItdGFibGUgKi8KICAgICAgICAgIHZhciBsZWZ0ID0gMDsgLyogbnVtYmVyIG9mIHByZWZpeCBjb2RlcyBhdmFpbGFibGUgKi8KICAgICAgICAgIHZhciB1c2VkID0gMDsgLyogY29kZSBlbnRyaWVzIGluIHRhYmxlIHVzZWQgKi8KICAgICAgICAgIHZhciBodWZmID0gMDsgLyogSHVmZm1hbiBjb2RlICovCiAgICAgICAgICB2YXIgaW5jcjsgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqLwogICAgICAgICAgdmFyIGZpbGw7IC8qIGluZGV4IGZvciByZXBsaWNhdGluZyBlbnRyaWVzICovCiAgICAgICAgICB2YXIgbG93OyAvKiBsb3cgYml0cyBmb3IgY3VycmVudCByb290IGVudHJ5ICovCiAgICAgICAgICB2YXIgbWFzazsgLyogbWFzayBmb3IgbG93IHJvb3QgYml0cyAqLwogICAgICAgICAgdmFyIG5leHQ7IC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIHRhYmxlICovCiAgICAgICAgICB2YXIgYmFzZSA9IG51bGw7IC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovCiAgICAgICAgICB2YXIgYmFzZV9pbmRleCA9IDA7CiAgICAgICAgICAvLyAgdmFyIHNob2V4dHJhOyAgICAvKiBleHRyYSBiaXRzIHRhYmxlIHRvIHVzZSAqLwogICAgICAgICAgdmFyIGVuZDsgLyogdXNlIGJhc2UgYW5kIGV4dHJhIGZvciBzeW1ib2wgPiBlbmQgKi8KICAgICAgICAgIHZhciBjb3VudCA9IG5ldyBCdWYxNihNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgIC8qIG51bWJlciBvZiBjb2RlcyBvZiBlYWNoIGxlbmd0aCAqLwogICAgICAgICAgdmFyIG9mZnMgPSBuZXcgQnVmMTYoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAgLyogb2Zmc2V0cyBpbiB0YWJsZSBmb3IgZWFjaCBsZW5ndGggKi8KICAgICAgICAgIHZhciBleHRyYSA9IG51bGw7CiAgICAgICAgICB2YXIgZXh0cmFfaW5kZXggPSAwOwoKICAgICAgICAgIHZhciBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOwoKICAgICAgICAgIC8qCiAgICAgICAgICAgUHJvY2VzcyBhIHNldCBvZiBjb2RlIGxlbmd0aHMgdG8gY3JlYXRlIGEgY2Fub25pY2FsIEh1ZmZtYW4gY29kZS4gIFRoZQogICAgICAgICAgIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIEVhY2ggbGVuZ3RoIGNvcnJlc3BvbmRzIHRvIHRoZQogICAgICAgICAgIHN5bWJvbHMgMC4uY29kZXMtMS4gIFRoZSBIdWZmbWFuIGNvZGUgaXMgZ2VuZXJhdGVkIGJ5IGZpcnN0IHNvcnRpbmcgdGhlCiAgICAgICAgICAgc3ltYm9scyBieSBsZW5ndGggZnJvbSBzaG9ydCB0byBsb25nLCBhbmQgcmV0YWluaW5nIHRoZSBzeW1ib2wgb3JkZXIKICAgICAgICAgICBmb3IgY29kZXMgd2l0aCBlcXVhbCBsZW5ndGhzLiAgVGhlbiB0aGUgY29kZSBzdGFydHMgd2l0aCBhbGwgemVybyBiaXRzCiAgICAgICAgICAgZm9yIHRoZSBmaXJzdCBjb2RlIG9mIHRoZSBzaG9ydGVzdCBsZW5ndGgsIGFuZCB0aGUgY29kZXMgYXJlIGludGVnZXIKICAgICAgICAgICBpbmNyZW1lbnRzIGZvciB0aGUgc2FtZSBsZW5ndGgsIGFuZCB6ZXJvcyBhcmUgYXBwZW5kZWQgYXMgdGhlIGxlbmd0aAogICAgICAgICAgIGluY3JlYXNlcy4gIEZvciB0aGUgZGVmbGF0ZSBmb3JtYXQsIHRoZXNlIGJpdHMgYXJlIHN0b3JlZCBiYWNrd2FyZHMKICAgICAgICAgICBmcm9tIHRoZWlyIG1vcmUgbmF0dXJhbCBpbnRlZ2VyIGluY3JlbWVudCBvcmRlcmluZywgYW5kIHNvIHdoZW4gdGhlCiAgICAgICAgICAgZGVjb2RpbmcgdGFibGVzIGFyZSBidWlsdCBpbiB0aGUgbGFyZ2UgbG9vcCBiZWxvdywgdGhlIGludGVnZXIgY29kZXMKICAgICAgICAgICBhcmUgaW5jcmVtZW50ZWQgYmFja3dhcmRzLgoKICAgICAgICAgICBUaGlzIHJvdXRpbmUgYXNzdW1lcywgYnV0IGRvZXMgbm90IGNoZWNrLCB0aGF0IGFsbCBvZiB0aGUgZW50cmllcyBpbgogICAgICAgICAgIGxlbnNbXSBhcmUgaW4gdGhlIHJhbmdlIDAuLk1BWEJJVFMuICBUaGUgY2FsbGVyIG11c3QgYXNzdXJlIHRoaXMuCiAgICAgICAgICAgMS4uTUFYQklUUyBpcyBpbnRlcnByZXRlZCBhcyB0aGF0IGNvZGUgbGVuZ3RoLiAgemVybyBtZWFucyB0aGF0IHRoYXQKICAgICAgICAgICBzeW1ib2wgZG9lcyBub3Qgb2NjdXIgaW4gdGhpcyBjb2RlLgoKICAgICAgICAgICBUaGUgY29kZXMgYXJlIHNvcnRlZCBieSBjb21wdXRpbmcgYSBjb3VudCBvZiBjb2RlcyBmb3IgZWFjaCBsZW5ndGgsCiAgICAgICAgICAgY3JlYXRpbmcgZnJvbSB0aGF0IGEgdGFibGUgb2Ygc3RhcnRpbmcgaW5kaWNlcyBmb3IgZWFjaCBsZW5ndGggaW4gdGhlCiAgICAgICAgICAgc29ydGVkIHRhYmxlLCBhbmQgdGhlbiBlbnRlcmluZyB0aGUgc3ltYm9scyBpbiBvcmRlciBpbiB0aGUgc29ydGVkCiAgICAgICAgICAgdGFibGUuICBUaGUgc29ydGVkIHRhYmxlIGlzIHdvcmtbXSwgd2l0aCB0aGF0IHNwYWNlIGJlaW5nIHByb3ZpZGVkIGJ5CiAgICAgICAgICAgdGhlIGNhbGxlci4KCiAgICAgICAgICAgVGhlIGxlbmd0aCBjb3VudHMgYXJlIHVzZWQgZm9yIG90aGVyIHB1cnBvc2VzIGFzIHdlbGwsIGkuZS4gZmluZGluZwogICAgICAgICAgIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGxlbmd0aCBjb2RlcywgZGV0ZXJtaW5pbmcgaWYgdGhlcmUgYXJlIGFueQogICAgICAgICAgIGNvZGVzIGF0IGFsbCwgY2hlY2tpbmcgZm9yIGEgdmFsaWQgc2V0IG9mIGxlbmd0aHMsIGFuZCBsb29raW5nIGFoZWFkCiAgICAgICAgICAgYXQgbGVuZ3RoIGNvdW50cyB0byBkZXRlcm1pbmUgc3ViLXRhYmxlIHNpemVzIHdoZW4gYnVpbGRpbmcgdGhlCiAgICAgICAgICAgZGVjb2RpbmcgdGFibGVzLgogICAgICAgICAgICovCgogICAgICAgICAgLyogYWNjdW11bGF0ZSBsZW5ndGhzIGZvciBjb2RlcyAoYXNzdW1lcyBsZW5zW10gYWxsIGluIDAuLk1BWEJJVFMpICovCiAgICAgICAgICBmb3IgKGxlbiA9IDA7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykgewogICAgICAgICAgICBjb3VudFtsZW5dID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7CiAgICAgICAgICAgIGNvdW50W2xlbnNbbGVuc19pbmRleCArIHN5bV1dKys7CiAgICAgICAgICB9CgogICAgICAgICAgLyogYm91bmQgY29kZSBsZW5ndGhzLCBmb3JjZSByb290IHRvIGJlIHdpdGhpbiBjb2RlIGxlbmd0aHMgKi8KICAgICAgICAgIHJvb3QgPSBiaXRzOwogICAgICAgICAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pIHsKICAgICAgICAgICAgaWYgKGNvdW50W21heF0gIT09IDApIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHJvb3QgPiBtYXgpIHsKICAgICAgICAgICAgcm9vdCA9IG1heDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChtYXggPT09IDApIHsgLyogbm8gc3ltYm9scyB0byBjb2RlIGF0IGFsbCAqLwogICAgICAgICAgICAvL3RhYmxlLm9wW29wdHMudGFibGVfaW5kZXhdID0gNjQ7ICAvL2hlcmUub3AgPSAodmFyIGNoYXIpNjQ7ICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi8KICAgICAgICAgICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsgICAvL2hlcmUuYml0cyA9ICh2YXIgY2hhcikxOwogICAgICAgICAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDsgICAvL2hlcmUudmFsID0gKHZhciBzaG9ydCkwOwogICAgICAgICAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9ICgxIDw8IDI0KSB8ICg2NCA8PCAxNikgfCAwOwoKCiAgICAgICAgICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDsKICAgICAgICAgICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsKICAgICAgICAgICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7CiAgICAgICAgICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7CgogICAgICAgICAgICBvcHRzLmJpdHMgPSAxOwogICAgICAgICAgICByZXR1cm4gMDsgLyogbm8gc3ltYm9scywgYnV0IHdhaXQgZm9yIGRlY29kaW5nIHRvIHJlcG9ydCBlcnJvciAqLwogICAgICAgICAgfQogICAgICAgICAgZm9yIChtaW4gPSAxOyBtaW4gPCBtYXg7IG1pbisrKSB7CiAgICAgICAgICAgIGlmIChjb3VudFttaW5dICE9PSAwKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChyb290IDwgbWluKSB7CiAgICAgICAgICAgIHJvb3QgPSBtaW47CiAgICAgICAgICB9CgogICAgICAgICAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovCiAgICAgICAgICBsZWZ0ID0gMTsKICAgICAgICAgIGZvciAobGVuID0gMTsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7CiAgICAgICAgICAgIGxlZnQgPDw9IDE7CiAgICAgICAgICAgIGxlZnQgLT0gY291bnRbbGVuXTsKICAgICAgICAgICAgaWYgKGxlZnQgPCAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICB9IC8qIG92ZXItc3Vic2NyaWJlZCAqLwogICAgICAgICAgfQogICAgICAgICAgaWYgKGxlZnQgPiAwICYmICh0eXBlID09PSBDT0RFUyB8fCBtYXggIT09IDEpKSB7CiAgICAgICAgICAgIHJldHVybiAtMTsgLyogaW5jb21wbGV0ZSBzZXQgKi8KICAgICAgICAgIH0KCiAgICAgICAgICAvKiBnZW5lcmF0ZSBvZmZzZXRzIGludG8gc3ltYm9sIHRhYmxlIGZvciBlYWNoIGxlbmd0aCBmb3Igc29ydGluZyAqLwogICAgICAgICAgb2Zmc1sxXSA9IDA7CiAgICAgICAgICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7CiAgICAgICAgICAgIG9mZnNbbGVuICsgMV0gPSBvZmZzW2xlbl0gKyBjb3VudFtsZW5dOwogICAgICAgICAgfQoKICAgICAgICAgIC8qIHNvcnQgc3ltYm9scyBieSBsZW5ndGgsIGJ5IHN5bWJvbCBvcmRlciB3aXRoaW4gZWFjaCBsZW5ndGggKi8KICAgICAgICAgIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7CiAgICAgICAgICAgIGlmIChsZW5zW2xlbnNfaW5kZXggKyBzeW1dICE9PSAwKSB7CiAgICAgICAgICAgICAgd29ya1tvZmZzW2xlbnNbbGVuc19pbmRleCArIHN5bV1dKytdID0gc3ltOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLyoKICAgICAgICAgICBDcmVhdGUgYW5kIGZpbGwgaW4gZGVjb2RpbmcgdGFibGVzLiAgSW4gdGhpcyBsb29wLCB0aGUgdGFibGUgYmVpbmcKICAgICAgICAgICBmaWxsZWQgaXMgYXQgbmV4dCBhbmQgaGFzIGN1cnIgaW5kZXggYml0cy4gIFRoZSBjb2RlIGJlaW5nIHVzZWQgaXMgaHVmZgogICAgICAgICAgIHdpdGggbGVuZ3RoIGxlbi4gIFRoYXQgY29kZSBpcyBjb252ZXJ0ZWQgdG8gYW4gaW5kZXggYnkgZHJvcHBpbmcgZHJvcAogICAgICAgICAgIGJpdHMgb2ZmIG9mIHRoZSBib3R0b20uICBGb3IgY29kZXMgd2hlcmUgbGVuIGlzIGxlc3MgdGhhbiBkcm9wICsgY3VyciwKICAgICAgICAgICB0aG9zZSB0b3AgZHJvcCArIGN1cnIgLSBsZW4gYml0cyBhcmUgaW5jcmVtZW50ZWQgdGhyb3VnaCBhbGwgdmFsdWVzIHRvCiAgICAgICAgICAgZmlsbCB0aGUgdGFibGUgd2l0aCByZXBsaWNhdGVkIGVudHJpZXMuCgogICAgICAgICAgIHJvb3QgaXMgdGhlIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciB0aGUgcm9vdCB0YWJsZS4gIFdoZW4gbGVuIGV4Y2VlZHMKICAgICAgICAgICByb290LCBzdWItdGFibGVzIGFyZSBjcmVhdGVkIHBvaW50ZWQgdG8gYnkgdGhlIHJvb3QgZW50cnkgd2l0aCBhbiBpbmRleAogICAgICAgICAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhCiAgICAgICAgICAgbmV3IHN1Yi10YWJsZSBzaG91bGQgYmUgc3RhcnRlZC4gIGRyb3AgaXMgemVybyB3aGVuIHRoZSByb290IHRhYmxlIGlzCiAgICAgICAgICAgYmVpbmcgZmlsbGVkLCBhbmQgZHJvcCBpcyByb290IHdoZW4gc3ViLXRhYmxlcyBhcmUgYmVpbmcgZmlsbGVkLgoKICAgICAgICAgICBXaGVuIGEgbmV3IHN1Yi10YWJsZSBpcyBuZWVkZWQsIGl0IGlzIG5lY2Vzc2FyeSB0byBsb29rIGFoZWFkIGluIHRoZQogICAgICAgICAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoCiAgICAgICAgICAgY291bnRzIGFyZSB1c2VkIGZvciB0aGlzLCBhbmQgc28gY291bnRbXSBpcyBkZWNyZW1lbnRlZCBhcyBjb2RlcyBhcmUKICAgICAgICAgICBlbnRlcmVkIGluIHRoZSB0YWJsZXMuCgogICAgICAgICAgIHVzZWQga2VlcHMgdHJhY2sgb2YgaG93IG1hbnkgdGFibGUgZW50cmllcyBoYXZlIGJlZW4gYWxsb2NhdGVkIGZyb20gdGhlCiAgICAgICAgICAgcHJvdmlkZWQgKnRhYmxlIHNwYWNlLiAgSXQgaXMgY2hlY2tlZCBmb3IgTEVOUyBhbmQgRElTVCB0YWJsZXMgYWdhaW5zdAogICAgICAgICAgIHRoZSBjb25zdGFudHMgRU5PVUdIX0xFTlMgYW5kIEVOT1VHSF9ESVNUUyB0byBndWFyZCBhZ2FpbnN0IGNoYW5nZXMgaW4KICAgICAgICAgICB0aGUgaW5pdGlhbCByb290IHRhYmxlIHNpemUgY29uc3RhbnRzLiAgU2VlIHRoZSBjb21tZW50cyBpbiBpbmZ0cmVlcy5oCiAgICAgICAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uCgogICAgICAgICAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW4KICAgICAgICAgICBhbGwgY29kZXMgb2YgbGVuZ3RoIG1heCwgaS5lLiBhbGwgY29kZXMsIGhhdmUgYmVlbiBwcm9jZXNzZWQuICBUaGlzCiAgICAgICAgICAgcm91dGluZSBwZXJtaXRzIGluY29tcGxldGUgY29kZXMsIHNvIGFub3RoZXIgbG9vcCBhZnRlciB0aGlzIG9uZSBmaWxscwogICAgICAgICAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy4KICAgICAgICAgICAqLwoKICAgICAgICAgIC8qIHNldCB1cCBmb3IgY29kZSB0eXBlICovCiAgICAgICAgICAvLyBwb29yIG1hbiBvcHRpbWl6YXRpb24gLSB1c2UgaWYtZWxzZSBpbnN0ZWFkIG9mIHN3aXRjaCwKICAgICAgICAgIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjgKICAgICAgICAgIGlmICh0eXBlID09PSBDT0RFUykgewogICAgICAgICAgICBiYXNlID0gZXh0cmEgPSB3b3JrOyAvKiBkdW1teSB2YWx1ZS0tbm90IHVzZWQgKi8KICAgICAgICAgICAgZW5kID0gMTk7CgogICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBMRU5TKSB7CiAgICAgICAgICAgIGJhc2UgPSBsYmFzZTsKICAgICAgICAgICAgYmFzZV9pbmRleCAtPSAyNTc7CiAgICAgICAgICAgIGV4dHJhID0gbGV4dDsKICAgICAgICAgICAgZXh0cmFfaW5kZXggLT0gMjU3OwogICAgICAgICAgICBlbmQgPSAyNTY7CgogICAgICAgICAgfSBlbHNlIHsgLyogRElTVFMgKi8KICAgICAgICAgICAgYmFzZSA9IGRiYXNlOwogICAgICAgICAgICBleHRyYSA9IGRleHQ7CiAgICAgICAgICAgIGVuZCA9IC0xOwogICAgICAgICAgfQoKICAgICAgICAgIC8qIGluaXRpYWxpemUgb3B0cyBmb3IgbG9vcCAqLwogICAgICAgICAgaHVmZiA9IDA7IC8qIHN0YXJ0aW5nIGNvZGUgKi8KICAgICAgICAgIHN5bSA9IDA7IC8qIHN0YXJ0aW5nIGNvZGUgc3ltYm9sICovCiAgICAgICAgICBsZW4gPSBtaW47IC8qIHN0YXJ0aW5nIGNvZGUgbGVuZ3RoICovCiAgICAgICAgICBuZXh0ID0gdGFibGVfaW5kZXg7IC8qIGN1cnJlbnQgdGFibGUgdG8gZmlsbCBpbiAqLwogICAgICAgICAgY3VyciA9IHJvb3Q7IC8qIGN1cnJlbnQgdGFibGUgaW5kZXggYml0cyAqLwogICAgICAgICAgZHJvcCA9IDA7IC8qIGN1cnJlbnQgYml0cyB0byBkcm9wIGZyb20gY29kZSBmb3IgaW5kZXggKi8KICAgICAgICAgIGxvdyA9IC0xOyAvKiB0cmlnZ2VyIG5ldyBzdWItdGFibGUgd2hlbiBsZW4gPiByb290ICovCiAgICAgICAgICB1c2VkID0gMSA8PCByb290OyAvKiB1c2Ugcm9vdCB0YWJsZSBlbnRyaWVzICovCiAgICAgICAgICBtYXNrID0gdXNlZCAtIDE7IC8qIG1hc2sgZm9yIGNvbXBhcmluZyBsb3cgKi8KCiAgICAgICAgICAvKiBjaGVjayBhdmFpbGFibGUgdGFibGUgc3BhY2UgKi8KICAgICAgICAgIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8CiAgICAgICAgICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkgewogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgIH0KICAgICAgICAgIC8qIHByb2Nlc3MgYWxsIGNvZGVzIGFuZCBtYWtlIHRhYmxlIGVudHJpZXMgKi8KICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgLyogY3JlYXRlIHRhYmxlIGVudHJ5ICovCiAgICAgICAgICAgIGhlcmVfYml0cyA9IGxlbiAtIGRyb3A7CiAgICAgICAgICAgIGlmICh3b3JrW3N5bV0gPCBlbmQpIHsKICAgICAgICAgICAgICBoZXJlX29wID0gMDsKICAgICAgICAgICAgICBoZXJlX3ZhbCA9IHdvcmtbc3ltXTsKICAgICAgICAgICAgfSBlbHNlIGlmICh3b3JrW3N5bV0gPiBlbmQpIHsKICAgICAgICAgICAgICBoZXJlX29wID0gZXh0cmFbZXh0cmFfaW5kZXggKyB3b3JrW3N5bV1dOwogICAgICAgICAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBoZXJlX29wID0gMzIgKyA2NDsgLyogZW5kIG9mIGJsb2NrICovCiAgICAgICAgICAgICAgaGVyZV92YWwgPSAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiByZXBsaWNhdGUgZm9yIHRob3NlIGluZGljZXMgd2l0aCBsb3cgbGVuIGJpdHMgZXF1YWwgdG8gaHVmZiAqLwogICAgICAgICAgICBpbmNyID0gMSA8PCAobGVuIC0gZHJvcCk7CiAgICAgICAgICAgIGZpbGwgPSAxIDw8IGN1cnI7CiAgICAgICAgICAgIG1pbiA9IGZpbGw7IC8qIHNhdmUgb2Zmc2V0IHRvIG5leHQgdGFibGUgKi8KICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgIGZpbGwgLT0gaW5jcjsKICAgICAgICAgICAgICB0YWJsZVtuZXh0ICsgKGh1ZmYgPj4gZHJvcCkgKyBmaWxsXSA9IChoZXJlX2JpdHMgPDwgMjQpIHwgKGhlcmVfb3AgPDwgMTYpIHwgaGVyZV92YWwgfCAwOwogICAgICAgICAgICB9IHdoaWxlIChmaWxsICE9PSAwKTsKCiAgICAgICAgICAgIC8qIGJhY2t3YXJkcyBpbmNyZW1lbnQgdGhlIGxlbi1iaXQgY29kZSBodWZmICovCiAgICAgICAgICAgIGluY3IgPSAxIDw8IChsZW4gLSAxKTsKICAgICAgICAgICAgd2hpbGUgKGh1ZmYgJiBpbmNyKSB7CiAgICAgICAgICAgICAgaW5jciA+Pj0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaW5jciAhPT0gMCkgewogICAgICAgICAgICAgIGh1ZmYgJj0gaW5jciAtIDE7CiAgICAgICAgICAgICAgaHVmZiArPSBpbmNyOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGh1ZmYgPSAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBnbyB0byBuZXh0IHN5bWJvbCwgdXBkYXRlIGNvdW50LCBsZW4gKi8KICAgICAgICAgICAgc3ltKys7CiAgICAgICAgICAgIGlmICgtLWNvdW50W2xlbl0gPT09IDApIHsKICAgICAgICAgICAgICBpZiAobGVuID09PSBtYXgpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKiBjcmVhdGUgbmV3IHN1Yi10YWJsZSBpZiBuZWVkZWQgKi8KICAgICAgICAgICAgaWYgKGxlbiA+IHJvb3QgJiYgKGh1ZmYgJiBtYXNrKSAhPT0gbG93KSB7CiAgICAgICAgICAgICAgLyogaWYgZmlyc3QgdGltZSwgdHJhbnNpdGlvbiB0byBzdWItdGFibGVzICovCiAgICAgICAgICAgICAgaWYgKGRyb3AgPT09IDApIHsKICAgICAgICAgICAgICAgIGRyb3AgPSByb290OwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqLwogICAgICAgICAgICAgIG5leHQgKz0gbWluOyAvKiBoZXJlIG1pbiBpcyAxIDw8IGN1cnIgKi8KCiAgICAgICAgICAgICAgLyogZGV0ZXJtaW5lIGxlbmd0aCBvZiBuZXh0IHRhYmxlICovCiAgICAgICAgICAgICAgY3VyciA9IGxlbiAtIGRyb3A7CiAgICAgICAgICAgICAgbGVmdCA9IDEgPDwgY3VycjsKICAgICAgICAgICAgICB3aGlsZSAoY3VyciArIGRyb3AgPCBtYXgpIHsKICAgICAgICAgICAgICAgIGxlZnQgLT0gY291bnRbY3VyciArIGRyb3BdOwogICAgICAgICAgICAgICAgaWYgKGxlZnQgPD0gMCkgewogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGN1cnIrKzsKICAgICAgICAgICAgICAgIGxlZnQgPDw9IDE7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAvKiBjaGVjayBmb3IgZW5vdWdoIHNwYWNlICovCiAgICAgICAgICAgICAgdXNlZCArPSAxIDw8IGN1cnI7CiAgICAgICAgICAgICAgaWYgKCh0eXBlID09PSBMRU5TICYmIHVzZWQgPiBFTk9VR0hfTEVOUykgfHwKICAgICAgICAgICAgICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAvKiBwb2ludCBlbnRyeSBpbiByb290IHRhYmxlIHRvIHN1Yi10YWJsZSAqLwogICAgICAgICAgICAgIGxvdyA9IGh1ZmYgJiBtYXNrOwogICAgICAgICAgICAgIC8qdGFibGUub3BbbG93XSA9IGN1cnI7CiAgICAgICAgICAgICAgdGFibGUuYml0c1tsb3ddID0gcm9vdDsKICAgICAgICAgICAgICB0YWJsZS52YWxbbG93XSA9IG5leHQgLSBvcHRzLnRhYmxlX2luZGV4OyovCiAgICAgICAgICAgICAgdGFibGVbbG93XSA9IChyb290IDw8IDI0KSB8IChjdXJyIDw8IDE2KSB8IChuZXh0IC0gdGFibGVfaW5kZXgpIHwgMDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8qIGZpbGwgaW4gcmVtYWluaW5nIHRhYmxlIGVudHJ5IGlmIGNvZGUgaXMgaW5jb21wbGV0ZSAoZ3VhcmFudGVlZCB0byBoYXZlCiAgICAgICAgICAgYXQgbW9zdCBvbmUgcmVtYWluaW5nIGVudHJ5LCBzaW5jZSBpZiB0aGUgY29kZSBpcyBpbmNvbXBsZXRlLCB0aGUKICAgICAgICAgICBtYXhpbXVtIGNvZGUgbGVuZ3RoIHRoYXQgd2FzIGFsbG93ZWQgdG8gZ2V0IHRoaXMgZmFyIGlzIG9uZSBiaXQpICovCiAgICAgICAgICBpZiAoaHVmZiAhPT0gMCkgewogICAgICAgICAgICAvL3RhYmxlLm9wW25leHQgKyBodWZmXSA9IDY0OyAgICAgICAgICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi8KICAgICAgICAgICAgLy90YWJsZS5iaXRzW25leHQgKyBodWZmXSA9IGxlbiAtIGRyb3A7CiAgICAgICAgICAgIC8vdGFibGUudmFsW25leHQgKyBodWZmXSA9IDA7CiAgICAgICAgICAgIHRhYmxlW25leHQgKyBodWZmXSA9ICgobGVuIC0gZHJvcCkgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7CiAgICAgICAgICB9CgogICAgICAgICAgLyogc2V0IHJldHVybiBwYXJhbWV0ZXJzICovCiAgICAgICAgICAvL29wdHMudGFibGVfaW5kZXggKz0gdXNlZDsKICAgICAgICAgIG9wdHMuYml0cyA9IHJvb3Q7CiAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CgogICAgICAgIHZhciBDT0RFUyQxID0gMDsKICAgICAgICB2YXIgTEVOUyQxID0gMTsKICAgICAgICB2YXIgRElTVFMkMSA9IDI7CgogICAgICAgIC8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KCgogICAgICAgIC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi8KICAgICAgICAvL3ZhciBaX05PX0ZMVVNIICAgICAgPSAwOwogICAgICAgIC8vdmFyIFpfUEFSVElBTF9GTFVTSCA9IDE7CiAgICAgICAgLy92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjsKICAgICAgICAvL3ZhciBaX0ZVTExfRkxVU0ggICAgPSAzOwogICAgICAgIHZhciBaX0ZJTklTSCQxID0gNDsKICAgICAgICB2YXIgWl9CTE9DSyQxID0gNTsKICAgICAgICB2YXIgWl9UUkVFUyA9IDY7CgoKICAgICAgICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzCiAgICAgICAgICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLgogICAgICAgICAqLwogICAgICAgIHZhciBaX09LJDEgPSAwOwogICAgICAgIHZhciBaX1NUUkVBTV9FTkQkMSA9IDE7CiAgICAgICAgdmFyIFpfTkVFRF9ESUNUID0gMjsKICAgICAgICAvL3ZhciBaX0VSUk5PICAgICAgICAgPSAtMTsKICAgICAgICB2YXIgWl9TVFJFQU1fRVJST1IkMSA9IC0yOwogICAgICAgIHZhciBaX0RBVEFfRVJST1IkMSA9IC0zOwogICAgICAgIHZhciBaX01FTV9FUlJPUiA9IC00OwogICAgICAgIHZhciBaX0JVRl9FUlJPUiQxID0gLTU7CiAgICAgICAgLy92YXIgWl9WRVJTSU9OX0VSUk9SID0gLTY7CgogICAgICAgIC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqLwogICAgICAgIHZhciBaX0RFRkxBVEVEJDEgPSA4OwoKCiAgICAgICAgLyogU1RBVEVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwoKCiAgICAgICAgdmFyIEhFQUQgPSAxOyAvKiBpOiB3YWl0aW5nIGZvciBtYWdpYyBoZWFkZXIgKi8KICAgICAgICB2YXIgRkxBR1MgPSAyOyAvKiBpOiB3YWl0aW5nIGZvciBtZXRob2QgYW5kIGZsYWdzIChnemlwKSAqLwogICAgICAgIHZhciBUSU1FID0gMzsgLyogaTogd2FpdGluZyBmb3IgbW9kaWZpY2F0aW9uIHRpbWUgKGd6aXApICovCiAgICAgICAgdmFyIE9TID0gNDsgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovCiAgICAgICAgdmFyIEVYTEVOID0gNTsgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgbGVuZ3RoIChnemlwKSAqLwogICAgICAgIHZhciBFWFRSQSA9IDY7IC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGJ5dGVzIChnemlwKSAqLwogICAgICAgIHZhciBOQU1FID0gNzsgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGZpbGUgbmFtZSAoZ3ppcCkgKi8KICAgICAgICB2YXIgQ09NTUVOVCA9IDg7IC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBjb21tZW50IChnemlwKSAqLwogICAgICAgIHZhciBIQ1JDID0gOTsgLyogaTogd2FpdGluZyBmb3IgaGVhZGVyIGNyYyAoZ3ppcCkgKi8KICAgICAgICB2YXIgRElDVElEID0gMTA7IC8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi8KICAgICAgICB2YXIgRElDVCA9IDExOyAvKiB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGNhbGwgKi8KICAgICAgICB2YXIgVFlQRSQxID0gMTI7IC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi8KICAgICAgICB2YXIgVFlQRURPID0gMTM7IC8qIGk6IHNhbWUsIGJ1dCBza2lwIGNoZWNrIHRvIGV4aXQgaW5mbGF0ZSBvbiBuZXcgYmxvY2sgKi8KICAgICAgICB2YXIgU1RPUkVEID0gMTQ7IC8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovCiAgICAgICAgdmFyIENPUFlfID0gMTU7IC8qIGkvbzogc2FtZSBhcyBDT1BZIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovCiAgICAgICAgdmFyIENPUFkgPSAxNjsgLyogaS9vOiB3YWl0aW5nIGZvciBpbnB1dCBvciBvdXRwdXQgdG8gY29weSBzdG9yZWQgYmxvY2sgKi8KICAgICAgICB2YXIgVEFCTEUgPSAxNzsgLyogaTogd2FpdGluZyBmb3IgZHluYW1pYyBibG9jayB0YWJsZSBsZW5ndGhzICovCiAgICAgICAgdmFyIExFTkxFTlMgPSAxODsgLyogaTogd2FpdGluZyBmb3IgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovCiAgICAgICAgdmFyIENPREVMRU5TID0gMTk7IC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQgYW5kIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqLwogICAgICAgIHZhciBMRU5fID0gMjA7IC8qIGk6IHNhbWUgYXMgTEVOIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovCiAgICAgICAgdmFyIExFTiA9IDIxOyAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0L2VvYiBjb2RlICovCiAgICAgICAgdmFyIExFTkVYVCA9IDIyOyAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGggZXh0cmEgYml0cyAqLwogICAgICAgIHZhciBESVNUID0gMjM7IC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi8KICAgICAgICB2YXIgRElTVEVYVCA9IDI0OyAvKiBpOiB3YWl0aW5nIGZvciBkaXN0YW5jZSBleHRyYSBiaXRzICovCiAgICAgICAgdmFyIE1BVENIID0gMjU7IC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byBjb3B5IHN0cmluZyAqLwogICAgICAgIHZhciBMSVQgPSAyNjsgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi8KICAgICAgICB2YXIgQ0hFQ0sgPSAyNzsgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGNoZWNrIHZhbHVlICovCiAgICAgICAgdmFyIExFTkdUSCA9IDI4OyAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgbGVuZ3RoIChnemlwKSAqLwogICAgICAgIHZhciBET05FID0gMjk7IC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovCiAgICAgICAgdmFyIEJBRCQxID0gMzA7IC8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi8KICAgICAgICB2YXIgTUVNID0gMzE7IC8qIGdvdCBhbiBpbmZsYXRlKCkgbWVtb3J5IGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovCiAgICAgICAgdmFyIFNZTkMgPSAzMjsgLyogbG9va2luZyBmb3Igc3luY2hyb25pemF0aW9uIGJ5dGVzIHRvIHJlc3RhcnQgaW5mbGF0ZSgpICovCgogICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCgoKCiAgICAgICAgdmFyIEVOT1VHSF9MRU5TJDEgPSA4NTI7CiAgICAgICAgdmFyIEVOT1VHSF9ESVNUUyQxID0gNTkyOwoKCiAgICAgICAgZnVuY3Rpb24genN3YXAzMihxKSB7CiAgICAgICAgICByZXR1cm4gKCgocSA+Pj4gMjQpICYgMHhmZikgKwogICAgICAgICAgICAoKHEgPj4+IDgpICYgMHhmZjAwKSArCiAgICAgICAgICAgICgocSAmIDB4ZmYwMCkgPDwgOCkgKwogICAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpOwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIEluZmxhdGVTdGF0ZSgpIHsKICAgICAgICAgIHRoaXMubW9kZSA9IDA7IC8qIGN1cnJlbnQgaW5mbGF0ZSBtb2RlICovCiAgICAgICAgICB0aGlzLmxhc3QgPSBmYWxzZTsgLyogdHJ1ZSBpZiBwcm9jZXNzaW5nIGxhc3QgYmxvY2sgKi8KICAgICAgICAgIHRoaXMud3JhcCA9IDA7IC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi8KICAgICAgICAgIHRoaXMuaGF2ZWRpY3QgPSBmYWxzZTsgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovCiAgICAgICAgICB0aGlzLmZsYWdzID0gMDsgLyogZ3ppcCBoZWFkZXIgbWV0aG9kIGFuZCBmbGFncyAoMCBpZiB6bGliKSAqLwogICAgICAgICAgdGhpcy5kbWF4ID0gMDsgLyogemxpYiBoZWFkZXIgbWF4IGRpc3RhbmNlIChJTkZMQVRFX1NUUklDVCkgKi8KICAgICAgICAgIHRoaXMuY2hlY2sgPSAwOyAvKiBwcm90ZWN0ZWQgY29weSBvZiBjaGVjayB2YWx1ZSAqLwogICAgICAgICAgdGhpcy50b3RhbCA9IDA7IC8qIHByb3RlY3RlZCBjb3B5IG9mIG91dHB1dCBjb3VudCAqLwogICAgICAgICAgLy8gVE9ETzogbWF5IGJlIHt9CiAgICAgICAgICB0aGlzLmhlYWQgPSBudWxsOyAvKiB3aGVyZSB0byBzYXZlIGd6aXAgaGVhZGVyIGluZm9ybWF0aW9uICovCgogICAgICAgICAgLyogc2xpZGluZyB3aW5kb3cgKi8KICAgICAgICAgIHRoaXMud2JpdHMgPSAwOyAvKiBsb2cgYmFzZSAyIG9mIHJlcXVlc3RlZCB3aW5kb3cgc2l6ZSAqLwogICAgICAgICAgdGhpcy53c2l6ZSA9IDA7IC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqLwogICAgICAgICAgdGhpcy53aGF2ZSA9IDA7IC8qIHZhbGlkIGJ5dGVzIGluIHRoZSB3aW5kb3cgKi8KICAgICAgICAgIHRoaXMud25leHQgPSAwOyAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi8KICAgICAgICAgIHRoaXMud2luZG93ID0gbnVsbDsgLyogYWxsb2NhdGVkIHNsaWRpbmcgd2luZG93LCBpZiBuZWVkZWQgKi8KCiAgICAgICAgICAvKiBiaXQgYWNjdW11bGF0b3IgKi8KICAgICAgICAgIHRoaXMuaG9sZCA9IDA7IC8qIGlucHV0IGJpdCBhY2N1bXVsYXRvciAqLwogICAgICAgICAgdGhpcy5iaXRzID0gMDsgLyogbnVtYmVyIG9mIGJpdHMgaW4gImluIiAqLwoKICAgICAgICAgIC8qIGZvciBzdHJpbmcgYW5kIHN0b3JlZCBibG9jayBjb3B5aW5nICovCiAgICAgICAgICB0aGlzLmxlbmd0aCA9IDA7IC8qIGxpdGVyYWwgb3IgbGVuZ3RoIG9mIGRhdGEgdG8gY29weSAqLwogICAgICAgICAgdGhpcy5vZmZzZXQgPSAwOyAvKiBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgc3RyaW5nIGZyb20gKi8KCiAgICAgICAgICAvKiBmb3IgdGFibGUgYW5kIGNvZGUgZGVjb2RpbmcgKi8KICAgICAgICAgIHRoaXMuZXh0cmEgPSAwOyAvKiBleHRyYSBiaXRzIG5lZWRlZCAqLwoKICAgICAgICAgIC8qIGZpeGVkIGFuZCBkeW5hbWljIGNvZGUgdGFibGVzICovCiAgICAgICAgICB0aGlzLmxlbmNvZGUgPSBudWxsOyAvKiBzdGFydGluZyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKi8KICAgICAgICAgIHRoaXMuZGlzdGNvZGUgPSBudWxsOyAvKiBzdGFydGluZyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKi8KICAgICAgICAgIHRoaXMubGVuYml0cyA9IDA7IC8qIGluZGV4IGJpdHMgZm9yIGxlbmNvZGUgKi8KICAgICAgICAgIHRoaXMuZGlzdGJpdHMgPSAwOyAvKiBpbmRleCBiaXRzIGZvciBkaXN0Y29kZSAqLwoKICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgYnVpbGRpbmcgKi8KICAgICAgICAgIHRoaXMubmNvZGUgPSAwOyAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovCiAgICAgICAgICB0aGlzLm5sZW4gPSAwOyAvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqLwogICAgICAgICAgdGhpcy5uZGlzdCA9IDA7IC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi8KICAgICAgICAgIHRoaXMuaGF2ZSA9IDA7IC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aHMgaW4gbGVuc1tdICovCiAgICAgICAgICB0aGlzLm5leHQgPSBudWxsOyAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiBjb2Rlc1tdICovCgogICAgICAgICAgdGhpcy5sZW5zID0gbmV3IEJ1ZjE2KDMyMCk7IC8qIHRlbXBvcmFyeSBzdG9yYWdlIGZvciBjb2RlIGxlbmd0aHMgKi8KICAgICAgICAgIHRoaXMud29yayA9IG5ldyBCdWYxNigyODgpOyAvKiB3b3JrIGFyZWEgZm9yIGNvZGUgdGFibGUgYnVpbGRpbmcgKi8KCiAgICAgICAgICAvKgogICAgICAgICAgIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBwb2ludGVycyBpbiBqcywgd2UgdXNlIGxlbmNvZGUgYW5kIGRpc3Rjb2RlIGRpcmVjdGx5CiAgICAgICAgICAgYXMgYnVmZmVycyBzbyB3ZSBkb24ndCBuZWVkIGNvZGVzCiAgICAgICAgICAqLwogICAgICAgICAgLy90aGlzLmNvZGVzID0gbmV3IEJ1ZjMyKEVOT1VHSCk7ICAgICAgIC8qIHNwYWNlIGZvciBjb2RlIHRhYmxlcyAqLwogICAgICAgICAgdGhpcy5sZW5keW4gPSBudWxsOyAvKiBkeW5hbWljIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAoSlMgc3BlY2lmaWMpICovCiAgICAgICAgICB0aGlzLmRpc3RkeW4gPSBudWxsOyAvKiBkeW5hbWljIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAoSlMgc3BlY2lmaWMpICovCiAgICAgICAgICB0aGlzLnNhbmUgPSAwOyAvKiBpZiBmYWxzZSwgYWxsb3cgaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyICovCiAgICAgICAgICB0aGlzLmJhY2sgPSAwOyAvKiBiaXRzIGJhY2sgb2YgbGFzdCB1bnByb2Nlc3NlZCBsZW5ndGgvbGl0ICovCiAgICAgICAgICB0aGlzLndhcyA9IDA7IC8qIGluaXRpYWwgbGVuZ3RoIG9mIG1hdGNoICovCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pIHsKICAgICAgICAgIHZhciBzdGF0ZTsKCiAgICAgICAgICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsKICAgICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7CiAgICAgICAgICB9CiAgICAgICAgICBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7CiAgICAgICAgICBzdHJtLm1zZyA9ICcnOyAvKlpfTlVMTCovCiAgICAgICAgICBpZiAoc3RhdGUud3JhcCkgeyAvKiB0byBzdXBwb3J0IGlsbC1jb25jZWl2ZWQgSmF2YSB0ZXN0IHN1aXRlICovCiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTsKICAgICAgICAgIH0KICAgICAgICAgIHN0YXRlLm1vZGUgPSBIRUFEOwogICAgICAgICAgc3RhdGUubGFzdCA9IDA7CiAgICAgICAgICBzdGF0ZS5oYXZlZGljdCA9IDA7CiAgICAgICAgICBzdGF0ZS5kbWF4ID0gMzI3Njg7CiAgICAgICAgICBzdGF0ZS5oZWFkID0gbnVsbCAvKlpfTlVMTCovIDsKICAgICAgICAgIHN0YXRlLmhvbGQgPSAwOwogICAgICAgICAgc3RhdGUuYml0cyA9IDA7CiAgICAgICAgICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQgPSBzdGF0ZS5jb2RlczsKICAgICAgICAgIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW4gPSBuZXcgQnVmMzIoRU5PVUdIX0xFTlMkMSk7CiAgICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW4gPSBuZXcgQnVmMzIoRU5PVUdIX0RJU1RTJDEpOwoKICAgICAgICAgIHN0YXRlLnNhbmUgPSAxOwogICAgICAgICAgc3RhdGUuYmFjayA9IC0xOwogICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6IHJlc2V0XG4iKSk7CiAgICAgICAgICByZXR1cm4gWl9PSyQxOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaW5mbGF0ZVJlc2V0KHN0cm0pIHsKICAgICAgICAgIHZhciBzdGF0ZTsKCiAgICAgICAgICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsKICAgICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7CiAgICAgICAgICB9CiAgICAgICAgICBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgICBzdGF0ZS53c2l6ZSA9IDA7CiAgICAgICAgICBzdGF0ZS53aGF2ZSA9IDA7CiAgICAgICAgICBzdGF0ZS53bmV4dCA9IDA7CiAgICAgICAgICByZXR1cm4gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKTsKCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpIHsKICAgICAgICAgIHZhciB3cmFwOwogICAgICAgICAgdmFyIHN0YXRlOwoKICAgICAgICAgIC8qIGdldCB0aGUgc3RhdGUgKi8KICAgICAgICAgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgewogICAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsKICAgICAgICAgIH0KICAgICAgICAgIHN0YXRlID0gc3RybS5zdGF0ZTsKCiAgICAgICAgICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovCiAgICAgICAgICBpZiAod2luZG93Qml0cyA8IDApIHsKICAgICAgICAgICAgd3JhcCA9IDA7CiAgICAgICAgICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0czsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdyYXAgPSAod2luZG93Qml0cyA+PiA0KSArIDE7CiAgICAgICAgICAgIGlmICh3aW5kb3dCaXRzIDwgNDgpIHsKICAgICAgICAgICAgICB3aW5kb3dCaXRzICY9IDE1OwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLyogc2V0IG51bWJlciBvZiB3aW5kb3cgYml0cywgZnJlZSB3aW5kb3cgaWYgZGlmZmVyZW50ICovCiAgICAgICAgICBpZiAod2luZG93Qml0cyAmJiAod2luZG93Qml0cyA8IDggfHwgd2luZG93Qml0cyA+IDE1KSkgewogICAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdGF0ZS53aW5kb3cgIT09IG51bGwgJiYgc3RhdGUud2JpdHMgIT09IHdpbmRvd0JpdHMpIHsKICAgICAgICAgICAgc3RhdGUud2luZG93ID0gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICAvKiB1cGRhdGUgc3RhdGUgYW5kIHJlc2V0IHRoZSByZXN0IG9mIGl0ICovCiAgICAgICAgICBzdGF0ZS53cmFwID0gd3JhcDsKICAgICAgICAgIHN0YXRlLndiaXRzID0gd2luZG93Qml0czsKICAgICAgICAgIHJldHVybiBpbmZsYXRlUmVzZXQoc3RybSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbmZsYXRlSW5pdDIoc3RybSwgd2luZG93Qml0cykgewogICAgICAgICAgdmFyIHJldDsKICAgICAgICAgIHZhciBzdGF0ZTsKCiAgICAgICAgICBpZiAoIXN0cm0pIHsKICAgICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7CiAgICAgICAgICB9CiAgICAgICAgICAvL3N0cm0ubXNnID0gWl9OVUxMOyAgICAgICAgICAgICAgICAgLyogaW4gY2FzZSB3ZSByZXR1cm4gYW4gZXJyb3IgKi8KCiAgICAgICAgICBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTsKCiAgICAgICAgICAvL2lmIChzdGF0ZSA9PT0gWl9OVUxMKSByZXR1cm4gWl9NRU1fRVJST1I7CiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAiaW5mbGF0ZTogYWxsb2NhdGVkXG4iKSk7CiAgICAgICAgICBzdHJtLnN0YXRlID0gc3RhdGU7CiAgICAgICAgICBzdGF0ZS53aW5kb3cgPSBudWxsIC8qWl9OVUxMKi8gOwogICAgICAgICAgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTsKICAgICAgICAgIGlmIChyZXQgIT09IFpfT0skMSkgewogICAgICAgICAgICBzdHJtLnN0YXRlID0gbnVsbCAvKlpfTlVMTCovIDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfQoKCiAgICAgICAgLyoKICAgICAgICAgUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0bwogICAgICAgICBmaXhlZCBjb2RlIGRlY29kaW5nLiAgTm9ybWFsbHkgdGhpcyByZXR1cm5zIGZpeGVkIHRhYmxlcyBmcm9tIGluZmZpeGVkLmguCiAgICAgICAgIElmIEJVSUxERklYRUQgaXMgZGVmaW5lZCwgdGhlbiBpbnN0ZWFkIHRoaXMgcm91dGluZSBidWlsZHMgdGhlIHRhYmxlcyB0aGUKICAgICAgICAgZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZAogICAgICAgICB0aGVyZWFmdGVyLiAgVGhpcyByZWR1Y2VzIHRoZSBzaXplIG9mIHRoZSBjb2RlIGJ5IGFib3V0IDJLIGJ5dGVzLCBpbgogICAgICAgICBleGNoYW5nZSBmb3IgYSBsaXR0bGUgZXhlY3V0aW9uIHRpbWUuICBIb3dldmVyLCBCVUlMREZJWEVEIHNob3VsZCBub3QgYmUKICAgICAgICAgdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpbgogICAgICAgICBtYXkgbm90IGJlIHRocmVhZC1zYWZlLgogICAgICAgICAqLwogICAgICAgIHZhciB2aXJnaW4gPSB0cnVlOwoKICAgICAgICB2YXIgbGVuZml4LCBkaXN0Zml4OyAvLyBXZSBoYXZlIG5vIHBvaW50ZXJzIGluIEpTLCBzbyBrZWVwIHRhYmxlcyBzZXBhcmF0ZQoKICAgICAgICBmdW5jdGlvbiBmaXhlZHRhYmxlcyhzdGF0ZSkgewogICAgICAgICAgLyogYnVpbGQgZml4ZWQgaHVmZm1hbiB0YWJsZXMgaWYgZmlyc3QgY2FsbCAobWF5IG5vdCBiZSB0aHJlYWQgc2FmZSkgKi8KICAgICAgICAgIGlmICh2aXJnaW4pIHsKICAgICAgICAgICAgdmFyIHN5bTsKCiAgICAgICAgICAgIGxlbmZpeCA9IG5ldyBCdWYzMig1MTIpOwogICAgICAgICAgICBkaXN0Zml4ID0gbmV3IEJ1ZjMyKDMyKTsKCiAgICAgICAgICAgIC8qIGxpdGVyYWwvbGVuZ3RoIHRhYmxlICovCiAgICAgICAgICAgIHN5bSA9IDA7CiAgICAgICAgICAgIHdoaWxlIChzeW0gPCAxNDQpIHsKICAgICAgICAgICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUgKHN5bSA8IDI1NikgewogICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gOTsKICAgICAgICAgICAgfQogICAgICAgICAgICB3aGlsZSAoc3ltIDwgMjgwKSB7CiAgICAgICAgICAgICAgc3RhdGUubGVuc1tzeW0rK10gPSA3OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHdoaWxlIChzeW0gPCAyODgpIHsKICAgICAgICAgICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGluZmxhdGVfdGFibGUoTEVOUyQxLCBzdGF0ZS5sZW5zLCAwLCAyODgsIGxlbmZpeCwgMCwgc3RhdGUud29yaywgewogICAgICAgICAgICAgIGJpdHM6IDkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvKiBkaXN0YW5jZSB0YWJsZSAqLwogICAgICAgICAgICBzeW0gPSAwOwogICAgICAgICAgICB3aGlsZSAoc3ltIDwgMzIpIHsKICAgICAgICAgICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGluZmxhdGVfdGFibGUoRElTVFMkMSwgc3RhdGUubGVucywgMCwgMzIsIGRpc3RmaXgsIDAsIHN0YXRlLndvcmssIHsKICAgICAgICAgICAgICBiaXRzOiA1CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLyogZG8gdGhpcyBqdXN0IG9uY2UgKi8KICAgICAgICAgICAgdmlyZ2luID0gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgICAgc3RhdGUubGVuY29kZSA9IGxlbmZpeDsKICAgICAgICAgIHN0YXRlLmxlbmJpdHMgPSA5OwogICAgICAgICAgc3RhdGUuZGlzdGNvZGUgPSBkaXN0Zml4OwogICAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSA1OwogICAgICAgIH0KCgogICAgICAgIC8qCiAgICAgICAgIFVwZGF0ZSB0aGUgd2luZG93IHdpdGggdGhlIGxhc3Qgd3NpemUgKG5vcm1hbGx5IDMySykgYnl0ZXMgd3JpdHRlbiBiZWZvcmUKICAgICAgICAgcmV0dXJuaW5nLiAgSWYgd2luZG93IGRvZXMgbm90IGV4aXN0IHlldCwgY3JlYXRlIGl0LiAgVGhpcyBpcyBvbmx5IGNhbGxlZAogICAgICAgICB3aGVuIGEgd2luZG93IGlzIGFscmVhZHkgaW4gdXNlLCBvciB3aGVuIG91dHB1dCBoYXMgYmVlbiB3cml0dGVuIGR1cmluZyB0aGlzCiAgICAgICAgIGluZmxhdGUgY2FsbCwgYnV0IHRoZSBlbmQgb2YgdGhlIGRlZmxhdGUgc3RyZWFtIGhhcyBub3QgYmVlbiByZWFjaGVkIHlldC4KICAgICAgICAgSXQgaXMgYWxzbyBjYWxsZWQgdG8gY3JlYXRlIGEgd2luZG93IGZvciBkaWN0aW9uYXJ5IGRhdGEgd2hlbiBhIGRpY3Rpb25hcnkKICAgICAgICAgaXMgbG9hZGVkLgoKICAgICAgICAgUHJvdmlkaW5nIG91dHB1dCBidWZmZXJzIGxhcmdlciB0aGFuIDMySyB0byBpbmZsYXRlKCkgc2hvdWxkIHByb3ZpZGUgYSBzcGVlZAogICAgICAgICBhZHZhbnRhZ2UsIHNpbmNlIG9ubHkgdGhlIGxhc3QgMzJLIG9mIG91dHB1dCBpcyBjb3BpZWQgdG8gdGhlIHNsaWRpbmcgd2luZG93CiAgICAgICAgIHVwb24gcmV0dXJuIGZyb20gaW5mbGF0ZSgpLCBhbmQgc2luY2UgYWxsIGRpc3RhbmNlcyBhZnRlciB0aGUgZmlyc3QgMzJLIG9mCiAgICAgICAgIG91dHB1dCB3aWxsIGZhbGwgaW4gdGhlIG91dHB1dCBkYXRhLCBtYWtpbmcgbWF0Y2ggY29waWVzIHNpbXBsZXIgYW5kIGZhc3Rlci4KICAgICAgICAgVGhlIGFkdmFudGFnZSBtYXkgYmUgZGVwZW5kZW50IG9uIHRoZSBzaXplIG9mIHRoZSBwcm9jZXNzb3IncyBkYXRhIGNhY2hlcy4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiB1cGRhdGV3aW5kb3coc3RybSwgc3JjLCBlbmQsIGNvcHkpIHsKICAgICAgICAgIHZhciBkaXN0OwogICAgICAgICAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTsKCiAgICAgICAgICAvKiBpZiBpdCBoYXNuJ3QgYmVlbiBkb25lIGFscmVhZHksIGFsbG9jYXRlIHNwYWNlIGZvciB0aGUgd2luZG93ICovCiAgICAgICAgICBpZiAoc3RhdGUud2luZG93ID09PSBudWxsKSB7CiAgICAgICAgICAgIHN0YXRlLndzaXplID0gMSA8PCBzdGF0ZS53Yml0czsKICAgICAgICAgICAgc3RhdGUud25leHQgPSAwOwogICAgICAgICAgICBzdGF0ZS53aGF2ZSA9IDA7CgogICAgICAgICAgICBzdGF0ZS53aW5kb3cgPSBuZXcgQnVmOChzdGF0ZS53c2l6ZSk7CiAgICAgICAgICB9CgogICAgICAgICAgLyogY29weSBzdGF0ZS0+d3NpemUgb3IgbGVzcyBvdXRwdXQgYnl0ZXMgaW50byB0aGUgY2lyY3VsYXIgd2luZG93ICovCiAgICAgICAgICBpZiAoY29weSA+PSBzdGF0ZS53c2l6ZSkgewogICAgICAgICAgICBhcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gc3RhdGUud3NpemUsIHN0YXRlLndzaXplLCAwKTsKICAgICAgICAgICAgc3RhdGUud25leHQgPSAwOwogICAgICAgICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZGlzdCA9IHN0YXRlLndzaXplIC0gc3RhdGUud25leHQ7CiAgICAgICAgICAgIGlmIChkaXN0ID4gY29weSkgewogICAgICAgICAgICAgIGRpc3QgPSBjb3B5OwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93ICsgc3RhdGUtPnduZXh0LCBlbmQgLSBjb3B5LCBkaXN0KTsKICAgICAgICAgICAgYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIGNvcHksIGRpc3QsIHN0YXRlLnduZXh0KTsKICAgICAgICAgICAgY29weSAtPSBkaXN0OwogICAgICAgICAgICBpZiAoY29weSkgewogICAgICAgICAgICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93LCBlbmQgLSBjb3B5LCBjb3B5KTsKICAgICAgICAgICAgICBhcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgY29weSwgMCk7CiAgICAgICAgICAgICAgc3RhdGUud25leHQgPSBjb3B5OwogICAgICAgICAgICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc3RhdGUud25leHQgKz0gZGlzdDsKICAgICAgICAgICAgICBpZiAoc3RhdGUud25leHQgPT09IHN0YXRlLndzaXplKSB7CiAgICAgICAgICAgICAgICBzdGF0ZS53bmV4dCA9IDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzdGF0ZS53aGF2ZSA8IHN0YXRlLndzaXplKSB7CiAgICAgICAgICAgICAgICBzdGF0ZS53aGF2ZSArPSBkaXN0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbmZsYXRlKHN0cm0sIGZsdXNoKSB7CiAgICAgICAgICB2YXIgc3RhdGU7CiAgICAgICAgICB2YXIgaW5wdXQsIG91dHB1dDsgLy8gaW5wdXQvb3V0cHV0IGJ1ZmZlcnMKICAgICAgICAgIHZhciBuZXh0OyAvKiBuZXh0IGlucHV0IElOREVYICovCiAgICAgICAgICB2YXIgcHV0OyAvKiBuZXh0IG91dHB1dCBJTkRFWCAqLwogICAgICAgICAgdmFyIGhhdmUsIGxlZnQ7IC8qIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovCiAgICAgICAgICB2YXIgaG9sZDsgLyogYml0IGJ1ZmZlciAqLwogICAgICAgICAgdmFyIGJpdHM7IC8qIGJpdHMgaW4gYml0IGJ1ZmZlciAqLwogICAgICAgICAgdmFyIF9pbiwgX291dDsgLyogc2F2ZSBzdGFydGluZyBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqLwogICAgICAgICAgdmFyIGNvcHk7IC8qIG51bWJlciBvZiBzdG9yZWQgb3IgbWF0Y2ggYnl0ZXMgdG8gY29weSAqLwogICAgICAgICAgdmFyIGZyb207IC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggYnl0ZXMgZnJvbSAqLwogICAgICAgICAgdmFyIGZyb21fc291cmNlOwogICAgICAgICAgdmFyIGhlcmUgPSAwOyAvKiBjdXJyZW50IGRlY29kaW5nIHRhYmxlIGVudHJ5ICovCiAgICAgICAgICB2YXIgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsgLy8gcGFrZWQgImhlcmUiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpCiAgICAgICAgICAvL3ZhciBsYXN0OyAgICAgICAgICAgICAgICAgICAvKiBwYXJlbnQgdGFibGUgZW50cnkgKi8KICAgICAgICAgIHZhciBsYXN0X2JpdHMsIGxhc3Rfb3AsIGxhc3RfdmFsOyAvLyBwYWtlZCAibGFzdCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYykKICAgICAgICAgIHZhciBsZW47IC8qIGxlbmd0aCB0byBjb3B5IGZvciByZXBlYXRzLCBiaXRzIHRvIGRyb3AgKi8KICAgICAgICAgIHZhciByZXQ7IC8qIHJldHVybiBjb2RlICovCiAgICAgICAgICB2YXIgaGJ1ZiA9IG5ldyBCdWY4KDQpOyAvKiBidWZmZXIgZm9yIGd6aXAgaGVhZGVyIGNyYyBjYWxjdWxhdGlvbiAqLwogICAgICAgICAgdmFyIG9wdHM7CgogICAgICAgICAgdmFyIG47IC8vIHRlbXBvcmFyeSB2YXIgZm9yIE5FRURfQklUUwoKICAgICAgICAgIHZhciBvcmRlciA9IC8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqLyBbMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNV07CgoKICAgICAgICAgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fCAhc3RybS5vdXRwdXQgfHwKICAgICAgICAgICAgKCFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApKSB7CiAgICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOwogICAgICAgICAgfQoKICAgICAgICAgIHN0YXRlID0gc3RybS5zdGF0ZTsKICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFJDEpIHsKICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEVETzsKICAgICAgICAgIH0gLyogc2tpcCBjaGVjayAqLwoKCiAgICAgICAgICAvLy0tLSBMT0FEKCkgLS0tCiAgICAgICAgICBwdXQgPSBzdHJtLm5leHRfb3V0OwogICAgICAgICAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7CiAgICAgICAgICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7CiAgICAgICAgICBuZXh0ID0gc3RybS5uZXh0X2luOwogICAgICAgICAgaW5wdXQgPSBzdHJtLmlucHV0OwogICAgICAgICAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47CiAgICAgICAgICBob2xkID0gc3RhdGUuaG9sZDsKICAgICAgICAgIGJpdHMgPSBzdGF0ZS5iaXRzOwogICAgICAgICAgLy8tLS0KCiAgICAgICAgICBfaW4gPSBoYXZlOwogICAgICAgICAgX291dCA9IGxlZnQ7CiAgICAgICAgICByZXQgPSBaX09LJDE7CgogICAgICAgICAgaW5mX2xlYXZlOiAvLyBnb3RvIGVtdWxhdGlvbgogICAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgc3dpdGNoIChzdGF0ZS5tb2RlKSB7CiAgICAgICAgICAgICAgY2FzZSBIRUFEOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLndyYXAgPT09IDApIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEVETzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7CiAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDIpICYmIGhvbGQgPT09IDB4OGIxZikgeyAvKiBnemlwIGhlYWRlciAqLwogICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IDAgLypjcmMzMigwTCwgWl9OVUxMLCAwKSovIDsKICAgICAgICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7CiAgICAgICAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjsKICAgICAgICAgICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApOwogICAgICAgICAgICAgICAgICAvLz09PS8vCgogICAgICAgICAgICAgICAgICAvLz09PSBJTklUQklUUygpOwogICAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEZMQUdTOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmZsYWdzID0gMDsgLyogZXhwZWN0IHpsaWIgaGVhZGVyICovCiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghKHN0YXRlLndyYXAgJiAxKSB8fCAvKiBjaGVjayBpZiB6bGliIGhlYWRlciBhbGxvd2VkICovCiAgICAgICAgICAgICAgICAgICgoKGhvbGQgJiAweGZmKSAvKkJJVFMoOCkqLyA8PCA4KSArIChob2xkID4+IDgpKSAlIDMxKSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBoZWFkZXIgY2hlY2snOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKChob2xkICYgMHgwZikgLypCSVRTKDQpKi8gIT09IFpfREVGTEFURUQkMSkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vLwogICAgICAgICAgICAgICAgaG9sZCA+Pj49IDQ7CiAgICAgICAgICAgICAgICBiaXRzIC09IDQ7CiAgICAgICAgICAgICAgICAvLy0tLS8vCiAgICAgICAgICAgICAgICBsZW4gPSAoaG9sZCAmIDB4MGYpIC8qQklUUyg0KSovICsgODsKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53Yml0cyA9PT0gMCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuID4gc3RhdGUud2JpdHMpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCB3aW5kb3cgc2l6ZSc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBsZW47CiAgICAgICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAiaW5mbGF0ZTogICB6bGliIGhlYWRlciBva1xuIikpOwogICAgICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMSAvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLyA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDB4MjAwID8gRElDVElEIDogVFlQRSQxOwogICAgICAgICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTsKICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIEZMQUdTOgogICAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqLwogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICBzdGF0ZS5mbGFncyA9IGhvbGQ7CiAgICAgICAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHhmZikgIT09IFpfREVGTEFURUQkMSkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweGUwMDApIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0JzsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQudGV4dCA9ICgoaG9sZCA+PiA4KSAmIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7CiAgICAgICAgICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpOwogICAgICAgICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7CiAgICAgICAgICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmOwogICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTsKICAgICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTsKICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVElNRTsKICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICAgICAgICBjYXNlIFRJTUU6CiAgICAgICAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovCiAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQudGltZSA9IGhvbGQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHsKICAgICAgICAgICAgICAgICAgLy89PT0gQ1JDNChzdGF0ZS5jaGVjaywgaG9sZCkKICAgICAgICAgICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmOwogICAgICAgICAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjsKICAgICAgICAgICAgICAgICAgaGJ1ZlsyXSA9IChob2xkID4+PiAxNikgJiAweGZmOwogICAgICAgICAgICAgICAgICBoYnVmWzNdID0gKGhvbGQgPj4+IDI0KSAmIDB4ZmY7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDQsIDApOwogICAgICAgICAgICAgICAgICAvLz09PQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTsKICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gT1M7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgICAgY2FzZSBPUzoKICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi8KICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpOwogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLm9zID0gKGhvbGQgPj4gOCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHsKICAgICAgICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7CiAgICAgICAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjsKICAgICAgICAgICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApOwogICAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLz09PSBJTklUQklUUygpOwogICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBFWExFTjsKICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICAgICAgICBjYXNlIEVYTEVOOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwNDAwKSB7CiAgICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi8KICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkOwogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbGVuID0gaG9sZDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHsKICAgICAgICAgICAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTsKICAgICAgICAgICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7CiAgICAgICAgICAgICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7CiAgICAgICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7CiAgICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBudWxsIC8qWl9OVUxMKi8gOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgRVhUUkE6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHsKICAgICAgICAgICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7CiAgICAgICAgICAgICAgICAgICAgY29weSA9IGhhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGNvcHkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICAgICAgbGVuID0gc3RhdGUuaGVhZC5leHRyYV9sZW4gLSBzdGF0ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLmhlYWQuZXh0cmEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHVudHlwZWQgYXJyYXkgZm9yIG1vcmUgY29udmVuaWVuZCBwcm9jZXNzaW5nIGxhdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBuZXcgQXJyYXkoc3RhdGUuaGVhZC5leHRyYV9sZW4pOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYXJyYXlTZXQoCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEsCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LAogICAgICAgICAgICAgICAgICAgICAgICBuZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBpcyBsaW1pdGVkIHRvIDY1NTM2IGJ5dGVzCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0gbm8gbmVlZCBmb3IgYWRkaXRpb25hbCBzaXplIGNoZWNrCiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHksCiAgICAgICAgICAgICAgICAgICAgICAgIC8qbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuID8gc3RhdGUuaGVhZC5leHRyYV9tYXggOiBjb3B5LCovCiAgICAgICAgICAgICAgICAgICAgICAgIGxlbgogICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgIC8vem1lbWNweShzdGF0ZS5oZWFkLmV4dHJhICsgbGVuLCBuZXh0LAogICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIGxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCA/CiAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gOiBjb3B5KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUgLT0gY29weTsKICAgICAgICAgICAgICAgICAgICBuZXh0ICs9IGNvcHk7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoID0gMDsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBOQU1FOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgTkFNRToKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDgwMCkgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBjb3B5ID0gMDsKICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IDIgb3IgMSBieXRlcz8KICAgICAgICAgICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTsKICAgICAgICAgICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqLwogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJgogICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5uYW1lX21heCovICkpIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpOwoKICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUgLT0gY29weTsKICAgICAgICAgICAgICAgICAgbmV4dCArPSBjb3B5OwogICAgICAgICAgICAgICAgICBpZiAobGVuKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ09NTUVOVDsKICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICAgICAgICBjYXNlIENPTU1FTlQ6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDEwMDApIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgY29weSA9IDA7CiAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTsKICAgICAgICAgICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqLwogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJgogICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5jb21tX21heCovICkpIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpOwogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZSAtPSBjb3B5OwogICAgICAgICAgICAgICAgICBuZXh0ICs9IGNvcHk7CiAgICAgICAgICAgICAgICAgIGlmIChsZW4pIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgPSBudWxsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEhDUkM7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgICAgY2FzZSBIQ1JDOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7CiAgICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi8KICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkgewogICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2hlYWRlciBjcmMgbWlzbWF0Y2gnOwogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAvLz09PSBJTklUQklUUygpOwogICAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuaGNyYyA9ICgoc3RhdGUuZmxhZ3MgPj4gOSkgJiAxKTsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRSQxOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBESUNUSUQ6CiAgICAgICAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovCiAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IHpzd2FwMzIoaG9sZCk7CiAgICAgICAgICAgICAgICAvLz09PSBJTklUQklUUygpOwogICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBESUNUOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgRElDVDoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tCiAgICAgICAgICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7CiAgICAgICAgICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDsKICAgICAgICAgICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDsKICAgICAgICAgICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkOwogICAgICAgICAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0czsKICAgICAgICAgICAgICAgICAgLy8tLS0KICAgICAgICAgICAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMSAvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLyA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRSQxOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgVFlQRSQxOgogICAgICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX0JMT0NLJDEgfHwgZmx1c2ggPT09IFpfVFJFRVMpIHsKICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgVFlQRURPOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmxhc3QpIHsKICAgICAgICAgICAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vLwogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7CiAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IENIRUNLOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMpOyAqLwogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgIHN0YXRlLmxhc3QgPSAoaG9sZCAmIDB4MDEpIC8qQklUUygxKSovIDsKICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDEpIC0tLS8vCiAgICAgICAgICAgICAgICBob2xkID4+Pj0gMTsKICAgICAgICAgICAgICAgIGJpdHMgLT0gMTsKICAgICAgICAgICAgICAgIC8vLS0tLy8KCiAgICAgICAgICAgICAgICBzd2l0Y2ggKChob2xkICYgMHgwMykgLypCSVRTKDIpKi8gKSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIC8qIHN0b3JlZCBibG9jayAqLwogICAgICAgICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXG4iLAogICAgICAgICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/ICIgKGxhc3QpIiA6ICIiKSk7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBTVE9SRUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAvKiBmaXhlZCBibG9jayAqLwogICAgICAgICAgICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7CiAgICAgICAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICJpbmZsYXRlOiAgICAgZml4ZWQgY29kZXMgYmxvY2slc1xuIiwKICAgICAgICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyAiIChsYXN0KSIgOiAiIikpOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXzsgLyogZGVjb2RlIGNvZGVzICovCiAgICAgICAgICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgewogICAgICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vCiAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7CiAgICAgICAgICAgICAgICAgICAgYml0cyAtPSAyOwogICAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIC8qIGR5bmFtaWMgYmxvY2sgKi8KICAgICAgICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6ICAgICBkeW5hbWljIGNvZGVzIGJsb2NrJXNcbiIsCiAgICAgICAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gIiAobGFzdCkiIDogIiIpKTsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRBQkxFOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBibG9jayB0eXBlJzsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy8KICAgICAgICAgICAgICAgIGhvbGQgPj4+PSAyOwogICAgICAgICAgICAgICAgYml0cyAtPSAyOwogICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBTVE9SRUQ6CiAgICAgICAgICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vIC8qIGdvIHRvIGJ5dGUgYm91bmRhcnkgKi8KICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNzsKICAgICAgICAgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7CiAgICAgICAgICAgICAgICAvLy0tLS8vCiAgICAgICAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovCiAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgIGlmICgoaG9sZCAmIDB4ZmZmZikgIT09ICgoaG9sZCA+Pj4gMTYpIF4gMHhmZmZmKSkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzJzsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQgJiAweGZmZmY7CiAgICAgICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAiaW5mbGF0ZTogICAgICAgc3RvcmVkIGxlbmd0aCAldVxuIiwKICAgICAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sZW5ndGgpKTsKICAgICAgICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7CiAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IENPUFlfOwogICAgICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICAgICAgICBjYXNlIENPUFlfOgogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgICAgY2FzZSBDT1BZOgogICAgICAgICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmIChjb3B5KSB7CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgewogICAgICAgICAgICAgICAgICAgIGNvcHkgPSBoYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgewogICAgICAgICAgICAgICAgICAgIGNvcHkgPSBsZWZ0OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIC8vLS0tIHptZW1jcHkocHV0LCBuZXh0LCBjb3B5KTsgLS0tCiAgICAgICAgICAgICAgICAgIGFycmF5U2V0KG91dHB1dCwgaW5wdXQsIG5leHQsIGNvcHksIHB1dCk7CiAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgaGF2ZSAtPSBjb3B5OwogICAgICAgICAgICAgICAgICBuZXh0ICs9IGNvcHk7CiAgICAgICAgICAgICAgICAgIGxlZnQgLT0gY29weTsKICAgICAgICAgICAgICAgICAgcHV0ICs9IGNvcHk7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICJpbmZsYXRlOiAgICAgICBzdG9yZWQgZW5kXG4iKSk7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRSQxOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBUQUJMRToKICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE0KTsgKi8KICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgc3RhdGUubmxlbiA9IChob2xkICYgMHgxZikgLypCSVRTKDUpKi8gKyAyNTc7CiAgICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyg1KSAtLS0vLwogICAgICAgICAgICAgICAgaG9sZCA+Pj49IDU7CiAgICAgICAgICAgICAgICBiaXRzIC09IDU7CiAgICAgICAgICAgICAgICAvLy0tLS8vCiAgICAgICAgICAgICAgICBzdGF0ZS5uZGlzdCA9IChob2xkICYgMHgxZikgLypCSVRTKDUpKi8gKyAxOwogICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy8KICAgICAgICAgICAgICAgIGhvbGQgPj4+PSA1OwogICAgICAgICAgICAgICAgYml0cyAtPSA1OwogICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgc3RhdGUubmNvZGUgPSAoaG9sZCAmIDB4MGYpIC8qQklUUyg0KSovICsgNDsKICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vCiAgICAgICAgICAgICAgICBob2xkID4+Pj0gNDsKICAgICAgICAgICAgICAgIGJpdHMgLT0gNDsKICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgIC8vI2lmbmRlZiBQS1pJUF9CVUdfV09SS0FST1VORAogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm5sZW4gPiAyODYgfHwgc3RhdGUubmRpc3QgPiAzMCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICd0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9scyc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyNlbmRpZgogICAgICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6ICAgICAgIHRhYmxlIHNpemVzIG9rXG4iKSk7CiAgICAgICAgICAgICAgICBzdGF0ZS5oYXZlID0gMDsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5MRU5TOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgTEVOTEVOUzoKICAgICAgICAgICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmNvZGUpIHsKICAgICAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7CiAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMykgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gKGhvbGQgJiAweDA3KTsgLy9CSVRTKDMpOwogICAgICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vLwogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gMzsKICAgICAgICAgICAgICAgICAgYml0cyAtPSAzOwogICAgICAgICAgICAgICAgICAvLy0tLS8vCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IDE5KSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC4KICAgICAgICAgICAgICAgIC8vc3RhdGUubmV4dCA9IHN0YXRlLmNvZGVzOwogICAgICAgICAgICAgICAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDsKICAgICAgICAgICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZQogICAgICAgICAgICAgICAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5bjsKICAgICAgICAgICAgICAgIHN0YXRlLmxlbmJpdHMgPSA3OwoKICAgICAgICAgICAgICAgIG9wdHMgPSB7CiAgICAgICAgICAgICAgICAgIGJpdHM6IHN0YXRlLmxlbmJpdHMKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKENPREVTJDEsIHN0YXRlLmxlbnMsIDAsIDE5LCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTsKICAgICAgICAgICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7CgogICAgICAgICAgICAgICAgaWYgKHJldCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXQnOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6ICAgICAgIGNvZGUgbGVuZ3RocyBva1xuIikpOwogICAgICAgICAgICAgICAgc3RhdGUuaGF2ZSA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgICAgY2FzZSBDT0RFTEVOUzoKICAgICAgICAgICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7CiAgICAgICAgICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOyAvKkJJVFMoc3RhdGUubGVuYml0cykqLwogICAgICAgICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjsKICAgICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7CgogICAgICAgICAgICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vLwogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA8IDE2KSB7CiAgICAgICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vLwogICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGhlcmVfdmFsOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA9PT0gMTYpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDIpOwogICAgICAgICAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDI7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vLwogICAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0czsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTsKICAgICAgICAgICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDAzKTsgLy9CSVRTKDIpOwogICAgICAgICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy8KICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSAyOwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSAyOwogICAgICAgICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVyZV92YWwgPT09IDE3KSB7CiAgICAgICAgICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAzKTsKICAgICAgICAgICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAzOwogICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy8KICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0czsKICAgICAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IDA7CiAgICAgICAgICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwNyk7IC8vQklUUygzKTsKICAgICAgICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vCiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gMzsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gMzsKICAgICAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgNyk7CiAgICAgICAgICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNzsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vCiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgICAvLy0tLS8vCiAgICAgICAgICAgICAgICAgICAgICBsZW4gPSAwOwogICAgICAgICAgICAgICAgICAgICAgY29weSA9IDExICsgKGhvbGQgJiAweDdmKTsgLy9CSVRTKDcpOwogICAgICAgICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoNykgLS0tLy8KICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSA3OwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSA3OwogICAgICAgICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSArIGNvcHkgPiBzdGF0ZS5ubGVuICsgc3RhdGUubmRpc3QpIHsKICAgICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnOwogICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGxlbjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovCiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gQkFEJDEpIHsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLyogY2hlY2sgZm9yIGVuZC1vZi1ibG9jayBjb2RlIChiZXR0ZXIgaGF2ZSBvbmUpICovCiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubGVuc1syNTZdID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9jayc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLyogYnVpbGQgY29kZSB0YWJsZXMgLS0gbm90ZTogZG8gbm90IGNoYW5nZSB0aGUgbGVuYml0cyBvciBkaXN0Yml0cwogICAgICAgICAgICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaAogICAgICAgICAgICAgICAgICAgY29uY2VybmluZyB0aGUgRU5PVUdIIGNvbnN0YW50cywgd2hpY2ggZGVwZW5kIG9uIHRob3NlIHZhbHVlcyAqLwogICAgICAgICAgICAgICAgc3RhdGUubGVuYml0cyA9IDk7CgogICAgICAgICAgICAgICAgb3B0cyA9IHsKICAgICAgICAgICAgICAgICAgYml0czogc3RhdGUubGVuYml0cwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoTEVOUyQxLCBzdGF0ZS5sZW5zLCAwLCBzdGF0ZS5ubGVuLCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTsKICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuCiAgICAgICAgICAgICAgICAvLyBzdGF0ZS5uZXh0X2luZGV4ID0gb3B0cy50YWJsZV9pbmRleDsKICAgICAgICAgICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7CiAgICAgICAgICAgICAgICAvLyBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDsKCiAgICAgICAgICAgICAgICBpZiAocmV0KSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldCc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSA2OwogICAgICAgICAgICAgICAgLy9zdGF0ZS5kaXN0Y29kZS5jb3B5KHN0YXRlLmNvZGVzKTsKICAgICAgICAgICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZQogICAgICAgICAgICAgICAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluOwogICAgICAgICAgICAgICAgb3B0cyA9IHsKICAgICAgICAgICAgICAgICAgYml0czogc3RhdGUuZGlzdGJpdHMKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKERJU1RTJDEsIHN0YXRlLmxlbnMsIHN0YXRlLm5sZW4sIHN0YXRlLm5kaXN0LCBzdGF0ZS5kaXN0Y29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7CiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLgogICAgICAgICAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7CiAgICAgICAgICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IG9wdHMuYml0czsKICAgICAgICAgICAgICAgIC8vIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUubmV4dDsKCiAgICAgICAgICAgICAgICBpZiAocmV0KSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2VzIHNldCc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAnaW5mbGF0ZTogICAgICAgY29kZXMgb2tcbicpKTsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fOwogICAgICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICAgICAgICBjYXNlIExFTl86CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgTEVOOgogICAgICAgICAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkgewogICAgICAgICAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tCiAgICAgICAgICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7CiAgICAgICAgICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDsKICAgICAgICAgICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDsKICAgICAgICAgICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkOwogICAgICAgICAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0czsKICAgICAgICAgICAgICAgICAgLy8tLS0KICAgICAgICAgICAgICAgICAgaW5mbGF0ZV9mYXN0KHN0cm0sIF9vdXQpOwogICAgICAgICAgICAgICAgICAvLy0tLSBMT0FEKCkgLS0tCiAgICAgICAgICAgICAgICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7CiAgICAgICAgICAgICAgICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0OwogICAgICAgICAgICAgICAgICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7CiAgICAgICAgICAgICAgICAgIG5leHQgPSBzdHJtLm5leHRfaW47CiAgICAgICAgICAgICAgICAgIGlucHV0ID0gc3RybS5pbnB1dDsKICAgICAgICAgICAgICAgICAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47CiAgICAgICAgICAgICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkOwogICAgICAgICAgICAgICAgICBiaXRzID0gc3RhdGUuYml0czsKICAgICAgICAgICAgICAgICAgLy8tLS0KCiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFJDEpIHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrID0gMDsKICAgICAgICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsgLypCSVRTKHN0YXRlLmxlbmJpdHMpKi8KICAgICAgICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7CiAgICAgICAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjsKICAgICAgICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmOwoKICAgICAgICAgICAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vLwogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChoZXJlX29wICYmIChoZXJlX29wICYgMHhmMCkgPT09IDApIHsKICAgICAgICAgICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDsKICAgICAgICAgICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDsKICAgICAgICAgICAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2xhc3RfdmFsICsKICAgICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpIC8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldOwogICAgICAgICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjsKICAgICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7CgogICAgICAgICAgICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vLwogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy8KICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0czsKICAgICAgICAgICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7CiAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vCiAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAvLy0tLS8vCiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0czsKICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsOwogICAgICAgICAgICAgICAgaWYgKGhlcmVfb3AgPT09IDApIHsKICAgICAgICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID8KICAgICAgICAgICAgICAgICAgLy8gICAgICAgICJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xuIiA6CiAgICAgICAgICAgICAgICAgIC8vICAgICAgICAiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxuIiwgaGVyZS52YWwpKTsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExJVDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoaGVyZV9vcCAmIDMyKSB7CiAgICAgICAgICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCAiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcbiIpKTsKICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayA9IC0xOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRSQxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChoZXJlX29wICYgNjQpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlJzsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1OwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTkVYVDsKICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICAgICAgICBjYXNlIExFTkVYVDoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5leHRyYSkgewogICAgICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7CiAgICAgICAgICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpIC8qQklUUyhzdGF0ZS5leHRyYSkqLyA7CiAgICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vLwogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7CiAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCAiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcbiIsIHN0YXRlLmxlbmd0aCkpOwogICAgICAgICAgICAgICAgc3RhdGUud2FzID0gc3RhdGUubGVuZ3RoOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IERJU1Q7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgICAgY2FzZSBESVNUOgogICAgICAgICAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxKV07IC8qQklUUyhzdGF0ZS5kaXN0Yml0cykqLwogICAgICAgICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDsKICAgICAgICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmOwogICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7CgogICAgICAgICAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy8KICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICAvLy0tLS8vCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkgewogICAgICAgICAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wOwogICAgICAgICAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsOwogICAgICAgICAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2xhc3RfdmFsICsKICAgICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpIC8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldOwogICAgICAgICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjsKICAgICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7CgogICAgICAgICAgICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vLwogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgLy8tLS0vLwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy8KICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0czsKICAgICAgICAgICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7CiAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vCiAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAvLy0tLS8vCiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0czsKICAgICAgICAgICAgICAgIGlmIChoZXJlX29wICYgNjQpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSBjb2RlJzsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm9mZnNldCA9IGhlcmVfdmFsOwogICAgICAgICAgICAgICAgc3RhdGUuZXh0cmEgPSAoaGVyZV9vcCkgJiAxNTsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBESVNURVhUOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgRElTVEVYVDoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5leHRyYSkgewogICAgICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7CiAgICAgICAgICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICAgIHN0YXRlLm9mZnNldCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpIC8qQklUUyhzdGF0ZS5leHRyYSkqLyA7CiAgICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vLwogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7CiAgICAgICAgICAgICAgICAgIC8vLS0tLy8KICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vI2lmZGVmIElORkxBVEVfU1RSSUNUCiAgICAgICAgICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gc3RhdGUuZG1heCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyNlbmRpZgogICAgICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsICJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XG4iLCBzdGF0ZS5vZmZzZXQpKTsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBNQVRDSDsKICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICAgICAgICBjYXNlIE1BVENIOgogICAgICAgICAgICAgICAgaWYgKGxlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29weSA9IF9vdXQgLSBsZWZ0OwogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IGNvcHkpIHsgLyogY29weSBmcm9tIHdpbmRvdyAqLwogICAgICAgICAgICAgICAgICBjb3B5ID0gc3RhdGUub2Zmc2V0IC0gY29weTsKICAgICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53aGF2ZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7CiAgICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhaWx0cywKICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSCiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgVHJhY2UoKHN0ZGVyciwgImluZmxhdGUuYyB0b28gZmFyXG4iKSk7CiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgY29weSAtPSBzdGF0ZS53aGF2ZTsKICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9CiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9CiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgbGVmdCAtPSBjb3B5OwogICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5OwogICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIG91dHB1dFtwdXQrK10gPSAwOwogICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7CiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9CiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgLy8jZW5kaWYKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLnduZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDsKICAgICAgICAgICAgICAgICAgICBmcm9tID0gc3RhdGUud3NpemUgLSBjb3B5OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gc3RhdGUud2luZG93OwogICAgICAgICAgICAgICAgfSBlbHNlIHsgLyogY29weSBmcm9tIG91dHB1dCAqLwogICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDsKICAgICAgICAgICAgICAgICAgZnJvbSA9IHB1dCAtIHN0YXRlLm9mZnNldDsKICAgICAgICAgICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgewogICAgICAgICAgICAgICAgICBjb3B5ID0gbGVmdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxlZnQgLT0gY29weTsKICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5OwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBvdXRwdXRbcHV0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIExJVDoKICAgICAgICAgICAgICAgIGlmIChsZWZ0ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG91dHB1dFtwdXQrK10gPSBzdGF0ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICBsZWZ0LS07CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBDSEVDSzoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53cmFwKSB7CiAgICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICAvLyBVc2UgJ3wnIGluc2RlYWQgb2YgJysnIHRvIG1ha2Ugc3VyZSB0aGF0IHJlc3VsdCBpcyBzaWduZWQKICAgICAgICAgICAgICAgICAgICBob2xkIHw9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgLy89PT0vLwogICAgICAgICAgICAgICAgICBfb3V0IC09IGxlZnQ7CiAgICAgICAgICAgICAgICAgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7CiAgICAgICAgICAgICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7CiAgICAgICAgICAgICAgICAgIGlmIChfb3V0KSB7CiAgICAgICAgICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0KICAgICAgICAgICAgICAgICAgICAgIC8qVVBEQVRFKHN0YXRlLmNoZWNrLCBwdXQgLSBfb3V0LCBfb3V0KTsqLwogICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTsKCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX291dCA9IGxlZnQ7CiAgICAgICAgICAgICAgICAgIC8vIE5COiBjcmMzMiBzdG9yZWQgYXMgc2lnbmVkIDMyLWJpdCBpbnQsIHpzd2FwMzIgcmV0dXJucyBzaWduZWQgdG9vCiAgICAgICAgICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgPyBob2xkIDogenN3YXAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7CiAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGRhdGEgY2hlY2snOwogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAvLz09PSBJTklUQklUUygpOwogICAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6ICAgY2hlY2sgbWF0Y2hlcyB0cmFpbGVyXG4iKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOR1RIOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICAgIGNhc2UgTEVOR1RIOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLndyYXAgJiYgc3RhdGUuZmxhZ3MpIHsKICAgICAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOwogICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAvLz09PS8vCiAgICAgICAgICAgICAgICAgIGlmIChob2xkICE9PSAoc3RhdGUudG90YWwgJiAweGZmZmZmZmZmKSkgewogICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBsZW5ndGggY2hlY2snOwogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAvLz09PSBJTklUQklUUygpOwogICAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICAgIC8vPT09Ly8KICAgICAgICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6ICAgbGVuZ3RoIG1hdGNoZXMgdHJhaWxlclxuIikpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IERPTkU7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgICAgY2FzZSBET05FOgogICAgICAgICAgICAgICAgcmV0ID0gWl9TVFJFQU1fRU5EJDE7CiAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgY2FzZSBCQUQkMToKICAgICAgICAgICAgICAgIHJldCA9IFpfREFUQV9FUlJPUiQxOwogICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgIGNhc2UgTUVNOgogICAgICAgICAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SOwogICAgICAgICAgICAgIGNhc2UgU1lOQzoKICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgLy8gaW5mX2xlYXZlIDwtIGhlcmUgaXMgcmVhbCBwbGFjZSBmb3IgImdvdG8gaW5mX2xlYXZlIiwgZW11bGF0ZWQgdmlhICJicmVhayBpbmZfbGVhdmUiCgogICAgICAgICAgLyoKICAgICAgICAgICAgIFJldHVybiBmcm9tIGluZmxhdGUoKSwgdXBkYXRpbmcgdGhlIHRvdGFsIGNvdW50cyBhbmQgdGhlIGNoZWNrIHZhbHVlLgogICAgICAgICAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlcgogICAgICAgICAgICAgZXJyb3IuICBDYWxsIHVwZGF0ZXdpbmRvdygpIHRvIGNyZWF0ZSBhbmQvb3IgdXBkYXRlIHRoZSB3aW5kb3cgc3RhdGUuCiAgICAgICAgICAgICBOb3RlOiBhIG1lbW9yeSBlcnJvciBmcm9tIGluZmxhdGUoKSBpcyBub24tcmVjb3ZlcmFibGUuCiAgICAgICAgICAgKi8KCiAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tCiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0OwogICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0OwogICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDsKICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlOwogICAgICAgICAgc3RhdGUuaG9sZCA9IGhvbGQ7CiAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0czsKICAgICAgICAgIC8vLS0tCgogICAgICAgICAgaWYgKHN0YXRlLndzaXplIHx8IChfb3V0ICE9PSBzdHJtLmF2YWlsX291dCAmJiBzdGF0ZS5tb2RlIDwgQkFEJDEgJiYKICAgICAgICAgICAgICAoc3RhdGUubW9kZSA8IENIRUNLIHx8IGZsdXNoICE9PSBaX0ZJTklTSCQxKSkpIHsKICAgICAgICAgICAgaWYgKHVwZGF0ZXdpbmRvdyhzdHJtLCBzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCwgX291dCAtIHN0cm0uYXZhaWxfb3V0KSkgOwogICAgICAgICAgfQogICAgICAgICAgX2luIC09IHN0cm0uYXZhaWxfaW47CiAgICAgICAgICBfb3V0IC09IHN0cm0uYXZhaWxfb3V0OwogICAgICAgICAgc3RybS50b3RhbF9pbiArPSBfaW47CiAgICAgICAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0OwogICAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDsKICAgICAgICAgIGlmIChzdGF0ZS53cmFwICYmIF9vdXQpIHsKICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gLypVUERBVEUoc3RhdGUuY2hlY2ssIHN0cm0ubmV4dF9vdXQgLSBfb3V0LCBfb3V0KTsqLwogICAgICAgICAgICAgIChzdGF0ZS5mbGFncyA/IGNyYzMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpKTsKICAgICAgICAgIH0KICAgICAgICAgIHN0cm0uZGF0YV90eXBlID0gc3RhdGUuYml0cyArIChzdGF0ZS5sYXN0ID8gNjQgOiAwKSArCiAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBUWVBFJDEgPyAxMjggOiAwKSArCiAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBMRU5fIHx8IHN0YXRlLm1vZGUgPT09IENPUFlfID8gMjU2IDogMCk7CiAgICAgICAgICBpZiAoKChfaW4gPT09IDAgJiYgX291dCA9PT0gMCkgfHwgZmx1c2ggPT09IFpfRklOSVNIJDEpICYmIHJldCA9PT0gWl9PSyQxKSB7CiAgICAgICAgICAgIHJldCA9IFpfQlVGX0VSUk9SJDE7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaW5mbGF0ZUVuZChzdHJtKSB7CgogICAgICAgICAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIC8qfHwgc3RybS0+emZyZWUgPT0gKGZyZWVfZnVuYykwKi8gKSB7CiAgICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgICBpZiAoc3RhdGUud2luZG93KSB7CiAgICAgICAgICAgIHN0YXRlLndpbmRvdyA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBzdHJtLnN0YXRlID0gbnVsbDsKICAgICAgICAgIHJldHVybiBaX09LJDE7CiAgICAgICAgfQoKICAgICAgICAvKiBOb3QgaW1wbGVtZW50ZWQKICAgICAgICBleHBvcnRzLmluZmxhdGVDb3B5ID0gaW5mbGF0ZUNvcHk7CiAgICAgICAgZXhwb3J0cy5pbmZsYXRlR2V0RGljdGlvbmFyeSA9IGluZmxhdGVHZXREaWN0aW9uYXJ5OwogICAgICAgIGV4cG9ydHMuaW5mbGF0ZU1hcmsgPSBpbmZsYXRlTWFyazsKICAgICAgICBleHBvcnRzLmluZmxhdGVQcmltZSA9IGluZmxhdGVQcmltZTsKICAgICAgICBleHBvcnRzLmluZmxhdGVTeW5jID0gaW5mbGF0ZVN5bmM7CiAgICAgICAgZXhwb3J0cy5pbmZsYXRlU3luY1BvaW50ID0gaW5mbGF0ZVN5bmNQb2ludDsKICAgICAgICBleHBvcnRzLmluZmxhdGVVbmRlcm1pbmUgPSBpbmZsYXRlVW5kZXJtaW5lOwogICAgICAgICovCgogICAgICAgIC8vIGltcG9ydCBjb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMnOwoKCiAgICAgICAgLy8gemxpYiBtb2RlcwogICAgICAgIHZhciBOT05FID0gMDsKICAgICAgICB2YXIgREVGTEFURSA9IDE7CiAgICAgICAgdmFyIElORkxBVEUgPSAyOwogICAgICAgIHZhciBHWklQID0gMzsKICAgICAgICB2YXIgR1VOWklQID0gNDsKICAgICAgICB2YXIgREVGTEFURVJBVyA9IDU7CiAgICAgICAgdmFyIElORkxBVEVSQVcgPSA2OwogICAgICAgIHZhciBVTlpJUCA9IDc7CiAgICAgICAgdmFyIFpfTk9fRkxVU0gkMT0gICAgICAgICAwLAogICAgICAgICAgWl9QQVJUSUFMX0ZMVVNIJDE9ICAgIDEsCiAgICAgICAgICBaX1NZTkNfRkxVU0g9ICAgIDIsCiAgICAgICAgICBaX0ZVTExfRkxVU0gkMT0gICAgICAgMywKICAgICAgICAgIFpfRklOSVNIJDI9ICAgICAgIDQsCiAgICAgICAgICBaX0JMT0NLJDI9ICAgICAgICAgICA1LAogICAgICAgICAgWl9UUkVFUyQxPSAgICAgICAgICAgIDYsCgogICAgICAgICAgLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlcwogICAgICAgICAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuCiAgICAgICAgICAqLwogICAgICAgICAgWl9PSyQyPSAgICAgICAgICAgICAgIDAsCiAgICAgICAgICBaX1NUUkVBTV9FTkQkMj0gICAgICAgMSwKICAgICAgICAgIFpfTkVFRF9ESUNUJDE9ICAgICAgMiwKICAgICAgICAgIFpfRVJSTk89ICAgICAgIC0xLAogICAgICAgICAgWl9TVFJFQU1fRVJST1IkMj0gICAtMiwKICAgICAgICAgIFpfREFUQV9FUlJPUiQyPSAgICAtMywKICAgICAgICAgIC8vWl9NRU1fRVJST1I6ICAgICAtNCwKICAgICAgICAgIFpfQlVGX0VSUk9SJDI9ICAgIC01LAogICAgICAgICAgLy9aX1ZFUlNJT05fRVJST1I6IC02LAoKICAgICAgICAgIC8qIGNvbXByZXNzaW9uIGxldmVscyAqLwogICAgICAgICAgWl9OT19DT01QUkVTU0lPTj0gICAgICAgICAwLAogICAgICAgICAgWl9CRVNUX1NQRUVEPSAgICAgICAgICAgICAxLAogICAgICAgICAgWl9CRVNUX0NPTVBSRVNTSU9OPSAgICAgICA5LAogICAgICAgICAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OJDE9ICAgLTEsCgoKICAgICAgICAgIFpfRklMVEVSRUQkMT0gICAgICAgICAgICAgICAxLAogICAgICAgICAgWl9IVUZGTUFOX09OTFkkMT0gICAgICAgICAgIDIsCiAgICAgICAgICBaX1JMRSQxPSAgICAgICAgICAgICAgICAgICAgMywKICAgICAgICAgIFpfRklYRUQkMj0gICAgICAgICAgICAgICAgICA0LAogICAgICAgICAgWl9ERUZBVUxUX1NUUkFURUdZPSAgICAgICAwLAoKICAgICAgICAgIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi8KICAgICAgICAgIFpfQklOQVJZJDE9ICAgICAgICAgICAgICAgICAwLAogICAgICAgICAgWl9URVhUJDE9ICAgICAgICAgICAgICAgICAgIDEsCiAgICAgICAgICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8vID0gWl9URVhUIChkZXByZWNhdGVkKQogICAgICAgICAgWl9VTktOT1dOJDI9ICAgICAgICAgICAgICAgIDIsCgogICAgICAgICAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovCiAgICAgICAgICBaX0RFRkxBVEVEJDI9ICAgICAgICAgICAgICAgODsKICAgICAgICBmdW5jdGlvbiBabGliKG1vZGUpIHsKICAgICAgICAgIGlmIChtb2RlIDwgREVGTEFURSB8fCBtb2RlID4gVU5aSVApCiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBhcmd1bWVudCcpOwoKICAgICAgICAgIHRoaXMubW9kZSA9IG1vZGU7CiAgICAgICAgICB0aGlzLmluaXRfZG9uZSA9IGZhbHNlOwogICAgICAgICAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlOwogICAgICAgICAgdGhpcy5wZW5kaW5nX2Nsb3NlID0gZmFsc2U7CiAgICAgICAgICB0aGlzLndpbmRvd0JpdHMgPSAwOwogICAgICAgICAgdGhpcy5sZXZlbCA9IDA7CiAgICAgICAgICB0aGlzLm1lbUxldmVsID0gMDsKICAgICAgICAgIHRoaXMuc3RyYXRlZ3kgPSAwOwogICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIFpsaWIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbih3aW5kb3dCaXRzLCBsZXZlbCwgbWVtTGV2ZWwsIHN0cmF0ZWd5LCBkaWN0aW9uYXJ5KSB7CiAgICAgICAgICB0aGlzLndpbmRvd0JpdHMgPSB3aW5kb3dCaXRzOwogICAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsOwogICAgICAgICAgdGhpcy5tZW1MZXZlbCA9IG1lbUxldmVsOwogICAgICAgICAgdGhpcy5zdHJhdGVneSA9IHN0cmF0ZWd5OwogICAgICAgICAgLy8gZGljdGlvbmFyeSBub3Qgc3VwcG9ydGVkLgoKICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09IEdaSVAgfHwgdGhpcy5tb2RlID09PSBHVU5aSVApCiAgICAgICAgICAgIHRoaXMud2luZG93Qml0cyArPSAxNjsKCiAgICAgICAgICBpZiAodGhpcy5tb2RlID09PSBVTlpJUCkKICAgICAgICAgICAgdGhpcy53aW5kb3dCaXRzICs9IDMyOwoKICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09IERFRkxBVEVSQVcgfHwgdGhpcy5tb2RlID09PSBJTkZMQVRFUkFXKQogICAgICAgICAgICB0aGlzLndpbmRvd0JpdHMgPSAtdGhpcy53aW5kb3dCaXRzOwoKICAgICAgICAgIHRoaXMuc3RybSA9IG5ldyBaU3RyZWFtKCk7CiAgICAgICAgICB2YXIgc3RhdHVzOwogICAgICAgICAgc3dpdGNoICh0aGlzLm1vZGUpIHsKICAgICAgICAgIGNhc2UgREVGTEFURToKICAgICAgICAgIGNhc2UgR1pJUDoKICAgICAgICAgIGNhc2UgREVGTEFURVJBVzoKICAgICAgICAgICAgc3RhdHVzID0gZGVmbGF0ZUluaXQyKAogICAgICAgICAgICAgIHRoaXMuc3RybSwKICAgICAgICAgICAgICB0aGlzLmxldmVsLAogICAgICAgICAgICAgIFpfREVGTEFURUQkMiwKICAgICAgICAgICAgICB0aGlzLndpbmRvd0JpdHMsCiAgICAgICAgICAgICAgdGhpcy5tZW1MZXZlbCwKICAgICAgICAgICAgICB0aGlzLnN0cmF0ZWd5CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBJTkZMQVRFOgogICAgICAgICAgY2FzZSBHVU5aSVA6CiAgICAgICAgICBjYXNlIElORkxBVEVSQVc6CiAgICAgICAgICBjYXNlIFVOWklQOgogICAgICAgICAgICBzdGF0dXMgID0gaW5mbGF0ZUluaXQyKAogICAgICAgICAgICAgIHRoaXMuc3RybSwKICAgICAgICAgICAgICB0aGlzLndpbmRvd0JpdHMKICAgICAgICAgICAgKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbW9kZSAnICsgdGhpcy5tb2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoc3RhdHVzICE9PSBaX09LJDIpIHsKICAgICAgICAgICAgdGhpcy5fZXJyb3Ioc3RhdHVzKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSBmYWxzZTsKICAgICAgICAgIHRoaXMuaW5pdF9kb25lID0gdHJ1ZTsKICAgICAgICB9OwoKICAgICAgICBabGliLnByb3RvdHlwZS5wYXJhbXMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGVmbGF0ZVBhcmFtcyBOb3Qgc3VwcG9ydGVkJyk7CiAgICAgICAgfTsKCiAgICAgICAgWmxpYi5wcm90b3R5cGUuX3dyaXRlQ2hlY2sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICghdGhpcy5pbml0X2RvbmUpCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignd3JpdGUgYmVmb3JlIGluaXQnKTsKCiAgICAgICAgICBpZiAodGhpcy5tb2RlID09PSBOT05FKQogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscmVhZHkgZmluYWxpemVkJyk7CgogICAgICAgICAgaWYgKHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MpCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignd3JpdGUgYWxyZWFkeSBpbiBwcm9ncmVzcycpOwoKICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdfY2xvc2UpCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2xvc2UgaXMgcGVuZGluZycpOwogICAgICAgIH07CgogICAgICAgIFpsaWIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKSB7CiAgICAgICAgICB0aGlzLl93cml0ZUNoZWNrKCk7CiAgICAgICAgICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gdHJ1ZTsKCiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgc2VsZi53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlOwogICAgICAgICAgICB2YXIgcmVzID0gc2VsZi5fd3JpdGUoZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKTsKICAgICAgICAgICAgc2VsZi5jYWxsYmFjayhyZXNbMF0sIHJlc1sxXSk7CgogICAgICAgICAgICBpZiAoc2VsZi5wZW5kaW5nX2Nsb3NlKQogICAgICAgICAgICAgIHNlbGYuY2xvc2UoKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CgogICAgICAgIC8vIHNldCBtZXRob2QgZm9yIE5vZGUgYnVmZmVycywgdXNlZCBieSBwYWtvCiAgICAgICAgZnVuY3Rpb24gYnVmZmVyU2V0KGRhdGEsIG9mZnNldCkgewogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSBkYXRhW2ldOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgWmxpYi5wcm90b3R5cGUud3JpdGVTeW5jID0gZnVuY3Rpb24oZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKSB7CiAgICAgICAgICB0aGlzLl93cml0ZUNoZWNrKCk7CiAgICAgICAgICByZXR1cm4gdGhpcy5fd3JpdGUoZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKTsKICAgICAgICB9OwoKICAgICAgICBabGliLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbihmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pIHsKICAgICAgICAgIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSB0cnVlOwoKICAgICAgICAgIGlmIChmbHVzaCAhPT0gWl9OT19GTFVTSCQxICYmCiAgICAgICAgICAgICAgZmx1c2ggIT09IFpfUEFSVElBTF9GTFVTSCQxICYmCiAgICAgICAgICAgICAgZmx1c2ggIT09IFpfU1lOQ19GTFVTSCAmJgogICAgICAgICAgICAgIGZsdXNoICE9PSBaX0ZVTExfRkxVU0gkMSAmJgogICAgICAgICAgICAgIGZsdXNoICE9PSBaX0ZJTklTSCQyICYmCiAgICAgICAgICAgICAgZmx1c2ggIT09IFpfQkxPQ0skMikgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZmx1c2ggdmFsdWUnKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkgewogICAgICAgICAgICBpbnB1dCA9IG5ldyBCdWZmZXIoMCk7CiAgICAgICAgICAgIGluX2xlbiA9IDA7CiAgICAgICAgICAgIGluX29mZiA9IDA7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG91dC5fc2V0KQogICAgICAgICAgICBvdXQuc2V0ID0gb3V0Ll9zZXQ7CiAgICAgICAgICBlbHNlCiAgICAgICAgICAgIG91dC5zZXQgPSBidWZmZXJTZXQ7CgogICAgICAgICAgdmFyIHN0cm0gPSB0aGlzLnN0cm07CiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaW5fbGVuOwogICAgICAgICAgc3RybS5pbnB1dCA9IGlucHV0OwogICAgICAgICAgc3RybS5uZXh0X2luID0gaW5fb2ZmOwogICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBvdXRfbGVuOwogICAgICAgICAgc3RybS5vdXRwdXQgPSBvdXQ7CiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gb3V0X29mZjsKICAgICAgICAgIHZhciBzdGF0dXM7CiAgICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZSkgewogICAgICAgICAgY2FzZSBERUZMQVRFOgogICAgICAgICAgY2FzZSBHWklQOgogICAgICAgICAgY2FzZSBERUZMQVRFUkFXOgogICAgICAgICAgICBzdGF0dXMgPSBkZWZsYXRlKHN0cm0sIGZsdXNoKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIFVOWklQOgogICAgICAgICAgY2FzZSBJTkZMQVRFOgogICAgICAgICAgY2FzZSBHVU5aSVA6CiAgICAgICAgICBjYXNlIElORkxBVEVSQVc6CiAgICAgICAgICAgIHN0YXR1cyA9IGluZmxhdGUoc3RybSwgZmx1c2gpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlICcgKyB0aGlzLm1vZGUpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChzdGF0dXMgIT09IFpfU1RSRUFNX0VORCQyICYmIHN0YXR1cyAhPT0gWl9PSyQyKSB7CiAgICAgICAgICAgIHRoaXMuX2Vycm9yKHN0YXR1cyk7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIFtzdHJtLmF2YWlsX2luLCBzdHJtLmF2YWlsX291dF07CiAgICAgICAgfTsKCiAgICAgICAgWmxpYi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICh0aGlzLndyaXRlX2luX3Byb2dyZXNzKSB7CiAgICAgICAgICAgIHRoaXMucGVuZGluZ19jbG9zZSA9IHRydWU7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnBlbmRpbmdfY2xvc2UgPSBmYWxzZTsKCiAgICAgICAgICBpZiAodGhpcy5tb2RlID09PSBERUZMQVRFIHx8IHRoaXMubW9kZSA9PT0gR1pJUCB8fCB0aGlzLm1vZGUgPT09IERFRkxBVEVSQVcpIHsKICAgICAgICAgICAgZGVmbGF0ZUVuZCh0aGlzLnN0cm0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW5mbGF0ZUVuZCh0aGlzLnN0cm0pOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMubW9kZSA9IE5PTkU7CiAgICAgICAgfTsKICAgICAgICB2YXIgc3RhdHVzOwogICAgICAgIFpsaWIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZSkgewogICAgICAgICAgY2FzZSBERUZMQVRFOgogICAgICAgICAgY2FzZSBERUZMQVRFUkFXOgogICAgICAgICAgICBzdGF0dXMgPSBkZWZsYXRlUmVzZXQodGhpcy5zdHJtKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIElORkxBVEU6CiAgICAgICAgICBjYXNlIElORkxBVEVSQVc6CiAgICAgICAgICAgIHN0YXR1cyA9IGluZmxhdGVSZXNldCh0aGlzLnN0cm0pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoc3RhdHVzICE9PSBaX09LJDIpIHsKICAgICAgICAgICAgdGhpcy5fZXJyb3Ioc3RhdHVzKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBabGliLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbihzdGF0dXMpIHsKICAgICAgICAgIHRoaXMub25lcnJvcihtc2dbc3RhdHVzXSArICc6ICcgKyB0aGlzLnN0cm0ubXNnLCBzdGF0dXMpOwoKICAgICAgICAgIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSBmYWxzZTsKICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdfY2xvc2UpCiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgX2JpbmRpbmcgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICAgICAgICAgIF9fcHJvdG9fXzogbnVsbCwKICAgICAgICAgICAgTk9ORTogTk9ORSwKICAgICAgICAgICAgREVGTEFURTogREVGTEFURSwKICAgICAgICAgICAgSU5GTEFURTogSU5GTEFURSwKICAgICAgICAgICAgR1pJUDogR1pJUCwKICAgICAgICAgICAgR1VOWklQOiBHVU5aSVAsCiAgICAgICAgICAgIERFRkxBVEVSQVc6IERFRkxBVEVSQVcsCiAgICAgICAgICAgIElORkxBVEVSQVc6IElORkxBVEVSQVcsCiAgICAgICAgICAgIFVOWklQOiBVTlpJUCwKICAgICAgICAgICAgWl9OT19GTFVTSDogWl9OT19GTFVTSCQxLAogICAgICAgICAgICBaX1BBUlRJQUxfRkxVU0g6IFpfUEFSVElBTF9GTFVTSCQxLAogICAgICAgICAgICBaX1NZTkNfRkxVU0g6IFpfU1lOQ19GTFVTSCwKICAgICAgICAgICAgWl9GVUxMX0ZMVVNIOiBaX0ZVTExfRkxVU0gkMSwKICAgICAgICAgICAgWl9GSU5JU0g6IFpfRklOSVNIJDIsCiAgICAgICAgICAgIFpfQkxPQ0s6IFpfQkxPQ0skMiwKICAgICAgICAgICAgWl9UUkVFUzogWl9UUkVFUyQxLAogICAgICAgICAgICBaX09LOiBaX09LJDIsCiAgICAgICAgICAgIFpfU1RSRUFNX0VORDogWl9TVFJFQU1fRU5EJDIsCiAgICAgICAgICAgIFpfTkVFRF9ESUNUOiBaX05FRURfRElDVCQxLAogICAgICAgICAgICBaX0VSUk5POiBaX0VSUk5PLAogICAgICAgICAgICBaX1NUUkVBTV9FUlJPUjogWl9TVFJFQU1fRVJST1IkMiwKICAgICAgICAgICAgWl9EQVRBX0VSUk9SOiBaX0RBVEFfRVJST1IkMiwKICAgICAgICAgICAgWl9CVUZfRVJST1I6IFpfQlVGX0VSUk9SJDIsCiAgICAgICAgICAgIFpfTk9fQ09NUFJFU1NJT046IFpfTk9fQ09NUFJFU1NJT04sCiAgICAgICAgICAgIFpfQkVTVF9TUEVFRDogWl9CRVNUX1NQRUVELAogICAgICAgICAgICBaX0JFU1RfQ09NUFJFU1NJT046IFpfQkVTVF9DT01QUkVTU0lPTiwKICAgICAgICAgICAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiBaX0RFRkFVTFRfQ09NUFJFU1NJT04kMSwKICAgICAgICAgICAgWl9GSUxURVJFRDogWl9GSUxURVJFRCQxLAogICAgICAgICAgICBaX0hVRkZNQU5fT05MWTogWl9IVUZGTUFOX09OTFkkMSwKICAgICAgICAgICAgWl9STEU6IFpfUkxFJDEsCiAgICAgICAgICAgIFpfRklYRUQ6IFpfRklYRUQkMiwKICAgICAgICAgICAgWl9ERUZBVUxUX1NUUkFURUdZOiBaX0RFRkFVTFRfU1RSQVRFR1ksCiAgICAgICAgICAgIFpfQklOQVJZOiBaX0JJTkFSWSQxLAogICAgICAgICAgICBaX1RFWFQ6IFpfVEVYVCQxLAogICAgICAgICAgICBaX1VOS05PV046IFpfVU5LTk9XTiQyLAogICAgICAgICAgICBaX0RFRkxBVEVEOiBaX0RFRkxBVEVEJDIsCiAgICAgICAgICAgIFpsaWI6IFpsaWIKICAgICAgICB9KTsKCiAgICAgICAgZnVuY3Rpb24gYXNzZXJ0IChhLCBtc2cpIHsKICAgICAgICAgIGlmICghYSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFyIGJpbmRpbmcgPSB7fTsKICAgICAgICBPYmplY3Qua2V5cyhfYmluZGluZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICBiaW5kaW5nW2tleV0gPSBfYmluZGluZ1trZXldOwogICAgICAgIH0pOwogICAgICAgIC8vIHpsaWIgZG9lc24ndCBwcm92aWRlIHRoZXNlLCBzbyBrbHVkZ2UgdGhlbSBpbiBmb2xsb3dpbmcgdGhlIHNhbWUKICAgICAgICAvLyBjb25zdCBuYW1pbmcgc2NoZW1lIHpsaWIgdXNlcy4KICAgICAgICBiaW5kaW5nLlpfTUlOX1dJTkRPV0JJVFMgPSA4OwogICAgICAgIGJpbmRpbmcuWl9NQVhfV0lORE9XQklUUyA9IDE1OwogICAgICAgIGJpbmRpbmcuWl9ERUZBVUxUX1dJTkRPV0JJVFMgPSAxNTsKCiAgICAgICAgLy8gZmV3ZXIgdGhhbiA2NCBieXRlcyBwZXIgY2h1bmsgaXMgc3R1cGlkLgogICAgICAgIC8vIHRlY2huaWNhbGx5IGl0IGNvdWxkIHdvcmsgd2l0aCBhcyBmZXcgYXMgOCwgYnV0IGV2ZW4gNjQgYnl0ZXMKICAgICAgICAvLyBpcyBhYnN1cmRseSBsb3cuICBVc3VhbGx5IGEgTUIgb3IgbW9yZSBpcyBiZXN0LgogICAgICAgIGJpbmRpbmcuWl9NSU5fQ0hVTksgPSA2NDsKICAgICAgICBiaW5kaW5nLlpfTUFYX0NIVU5LID0gSW5maW5pdHk7CiAgICAgICAgYmluZGluZy5aX0RFRkFVTFRfQ0hVTksgPSAoMTYgKiAxMDI0KTsKCiAgICAgICAgYmluZGluZy5aX01JTl9NRU1MRVZFTCA9IDE7CiAgICAgICAgYmluZGluZy5aX01BWF9NRU1MRVZFTCA9IDk7CiAgICAgICAgYmluZGluZy5aX0RFRkFVTFRfTUVNTEVWRUwgPSA4OwoKICAgICAgICBiaW5kaW5nLlpfTUlOX0xFVkVMID0gLTE7CiAgICAgICAgYmluZGluZy5aX01BWF9MRVZFTCA9IDk7CiAgICAgICAgYmluZGluZy5aX0RFRkFVTFRfTEVWRUwgPSBiaW5kaW5nLlpfREVGQVVMVF9DT01QUkVTU0lPTjsKCgogICAgICAgIC8vIHRyYW5zbGF0aW9uIHRhYmxlIGZvciByZXR1cm4gY29kZXMuCiAgICAgICAgdmFyIGNvZGVzID0gewogICAgICAgICAgWl9PSzogYmluZGluZy5aX09LLAogICAgICAgICAgWl9TVFJFQU1fRU5EOiBiaW5kaW5nLlpfU1RSRUFNX0VORCwKICAgICAgICAgIFpfTkVFRF9ESUNUOiBiaW5kaW5nLlpfTkVFRF9ESUNULAogICAgICAgICAgWl9FUlJOTzogYmluZGluZy5aX0VSUk5PLAogICAgICAgICAgWl9TVFJFQU1fRVJST1I6IGJpbmRpbmcuWl9TVFJFQU1fRVJST1IsCiAgICAgICAgICBaX0RBVEFfRVJST1I6IGJpbmRpbmcuWl9EQVRBX0VSUk9SLAogICAgICAgICAgWl9NRU1fRVJST1I6IGJpbmRpbmcuWl9NRU1fRVJST1IsCiAgICAgICAgICBaX0JVRl9FUlJPUjogYmluZGluZy5aX0JVRl9FUlJPUiwKICAgICAgICAgIFpfVkVSU0lPTl9FUlJPUjogYmluZGluZy5aX1ZFUlNJT05fRVJST1IKICAgICAgICB9OwoKICAgICAgICBPYmplY3Qua2V5cyhjb2RlcykuZm9yRWFjaChmdW5jdGlvbihrKSB7CiAgICAgICAgICBjb2Rlc1tjb2Rlc1trXV0gPSBrOwogICAgICAgIH0pOwoKICAgICAgICBmdW5jdGlvbiBjcmVhdGVEZWZsYXRlKG8pIHsKICAgICAgICAgIHJldHVybiBuZXcgRGVmbGF0ZShvKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUluZmxhdGUobykgewogICAgICAgICAgcmV0dXJuIG5ldyBJbmZsYXRlKG8pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRGVmbGF0ZVJhdyhvKSB7CiAgICAgICAgICByZXR1cm4gbmV3IERlZmxhdGVSYXcobyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjcmVhdGVJbmZsYXRlUmF3KG8pIHsKICAgICAgICAgIHJldHVybiBuZXcgSW5mbGF0ZVJhdyhvKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUd6aXAobykgewogICAgICAgICAgcmV0dXJuIG5ldyBHemlwKG8pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gY3JlYXRlR3VuemlwKG8pIHsKICAgICAgICAgIHJldHVybiBuZXcgR3VuemlwKG8pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gY3JlYXRlVW56aXAobykgewogICAgICAgICAgcmV0dXJuIG5ldyBVbnppcChvKTsKICAgICAgICB9CgoKICAgICAgICAvLyBDb252ZW5pZW5jZSBtZXRob2RzLgogICAgICAgIC8vIGNvbXByZXNzL2RlY29tcHJlc3MgYSBzdHJpbmcgb3IgYnVmZmVyIGluIG9uZSBzdGVwLgogICAgICAgIGZ1bmN0aW9uIGRlZmxhdGUkMShidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7CiAgICAgICAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRzOwogICAgICAgICAgICBvcHRzID0ge307CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgRGVmbGF0ZShvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkZWZsYXRlU3luYyhidWZmZXIsIG9wdHMpIHsKICAgICAgICAgIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgRGVmbGF0ZShvcHRzKSwgYnVmZmVyKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGd6aXAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykgewogICAgICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0czsKICAgICAgICAgICAgb3B0cyA9IHt9OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEd6aXAob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ3ppcFN5bmMoYnVmZmVyLCBvcHRzKSB7CiAgICAgICAgICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEd6aXAob3B0cyksIGJ1ZmZlcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkZWZsYXRlUmF3KGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHsKICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBjYWxsYmFjayA9IG9wdHM7CiAgICAgICAgICAgIG9wdHMgPSB7fTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB6bGliQnVmZmVyKG5ldyBEZWZsYXRlUmF3KG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGRlZmxhdGVSYXdTeW5jKGJ1ZmZlciwgb3B0cykgewogICAgICAgICAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBEZWZsYXRlUmF3KG9wdHMpLCBidWZmZXIpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdW56aXAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykgewogICAgICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0czsKICAgICAgICAgICAgb3B0cyA9IHt9OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IFVuemlwKG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVuemlwU3luYyhidWZmZXIsIG9wdHMpIHsKICAgICAgICAgIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgVW56aXAob3B0cyksIGJ1ZmZlcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbmZsYXRlJDEoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykgewogICAgICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0czsKICAgICAgICAgICAgb3B0cyA9IHt9OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEluZmxhdGUob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaW5mbGF0ZVN5bmMoYnVmZmVyLCBvcHRzKSB7CiAgICAgICAgICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEluZmxhdGUob3B0cyksIGJ1ZmZlcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBndW56aXAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykgewogICAgICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0czsKICAgICAgICAgICAgb3B0cyA9IHt9OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEd1bnppcChvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBndW56aXBTeW5jKGJ1ZmZlciwgb3B0cykgewogICAgICAgICAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBHdW56aXAob3B0cyksIGJ1ZmZlcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbmZsYXRlUmF3KGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHsKICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBjYWxsYmFjayA9IG9wdHM7CiAgICAgICAgICAgIG9wdHMgPSB7fTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB6bGliQnVmZmVyKG5ldyBJbmZsYXRlUmF3KG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGluZmxhdGVSYXdTeW5jKGJ1ZmZlciwgb3B0cykgewogICAgICAgICAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBJbmZsYXRlUmF3KG9wdHMpLCBidWZmZXIpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gemxpYkJ1ZmZlcihlbmdpbmUsIGJ1ZmZlciwgY2FsbGJhY2spIHsKICAgICAgICAgIHZhciBidWZmZXJzID0gW107CiAgICAgICAgICB2YXIgbnJlYWQgPSAwOwoKICAgICAgICAgIGVuZ2luZS5vbignZXJyb3InLCBvbkVycm9yKTsKICAgICAgICAgIGVuZ2luZS5vbignZW5kJywgb25FbmQpOwoKICAgICAgICAgIGVuZ2luZS5lbmQoYnVmZmVyKTsKICAgICAgICAgIGZsb3coKTsKCiAgICAgICAgICBmdW5jdGlvbiBmbG93KCkgewogICAgICAgICAgICB2YXIgY2h1bms7CiAgICAgICAgICAgIHdoaWxlIChudWxsICE9PSAoY2h1bmsgPSBlbmdpbmUucmVhZCgpKSkgewogICAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChjaHVuayk7CiAgICAgICAgICAgICAgbnJlYWQgKz0gY2h1bmsubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVuZ2luZS5vbmNlKCdyZWFkYWJsZScsIGZsb3cpOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7CiAgICAgICAgICAgIGVuZ2luZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25FbmQpOwogICAgICAgICAgICBlbmdpbmUucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgZmxvdyk7CiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gb25FbmQoKSB7CiAgICAgICAgICAgIHZhciBidWYgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIG5yZWFkKTsKICAgICAgICAgICAgYnVmZmVycyA9IFtdOwogICAgICAgICAgICBjYWxsYmFjayhudWxsLCBidWYpOwogICAgICAgICAgICBlbmdpbmUuY2xvc2UoKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHpsaWJCdWZmZXJTeW5jKGVuZ2luZSwgYnVmZmVyKSB7CiAgICAgICAgICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ3N0cmluZycpCiAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKTsKICAgICAgICAgIGlmICghaXNCdWZmZXIoYnVmZmVyKSkKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm90IGEgc3RyaW5nIG9yIGJ1ZmZlcicpOwoKICAgICAgICAgIHZhciBmbHVzaEZsYWcgPSBiaW5kaW5nLlpfRklOSVNIOwoKICAgICAgICAgIHJldHVybiBlbmdpbmUuX3Byb2Nlc3NDaHVuayhidWZmZXIsIGZsdXNoRmxhZyk7CiAgICAgICAgfQoKICAgICAgICAvLyBnZW5lcmljIHpsaWIKICAgICAgICAvLyBtaW5pbWFsIDItYnl0ZSBoZWFkZXIKICAgICAgICBmdW5jdGlvbiBEZWZsYXRlKG9wdHMpIHsKICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWZsYXRlKSkgcmV0dXJuIG5ldyBEZWZsYXRlKG9wdHMpOwogICAgICAgICAgWmxpYiQxLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5ERUZMQVRFKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEluZmxhdGUob3B0cykgewogICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGUpKSByZXR1cm4gbmV3IEluZmxhdGUob3B0cyk7CiAgICAgICAgICBabGliJDEuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLklORkxBVEUpOwogICAgICAgIH0KCgoKICAgICAgICAvLyBnemlwIC0gYmlnZ2VyIGhlYWRlciwgc2FtZSBkZWZsYXRlIGNvbXByZXNzaW9uCiAgICAgICAgZnVuY3Rpb24gR3ppcChvcHRzKSB7CiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgR3ppcCkpIHJldHVybiBuZXcgR3ppcChvcHRzKTsKICAgICAgICAgIFpsaWIkMS5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuR1pJUCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBHdW56aXAob3B0cykgewogICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEd1bnppcCkpIHJldHVybiBuZXcgR3VuemlwKG9wdHMpOwogICAgICAgICAgWmxpYiQxLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5HVU5aSVApOwogICAgICAgIH0KCgoKICAgICAgICAvLyByYXcgLSBubyBoZWFkZXIKICAgICAgICBmdW5jdGlvbiBEZWZsYXRlUmF3KG9wdHMpIHsKICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWZsYXRlUmF3KSkgcmV0dXJuIG5ldyBEZWZsYXRlUmF3KG9wdHMpOwogICAgICAgICAgWmxpYiQxLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5ERUZMQVRFUkFXKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEluZmxhdGVSYXcob3B0cykgewogICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGVSYXcpKSByZXR1cm4gbmV3IEluZmxhdGVSYXcob3B0cyk7CiAgICAgICAgICBabGliJDEuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLklORkxBVEVSQVcpOwogICAgICAgIH0KCgogICAgICAgIC8vIGF1dG8tZGV0ZWN0IGhlYWRlci4KICAgICAgICBmdW5jdGlvbiBVbnppcChvcHRzKSB7CiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVW56aXApKSByZXR1cm4gbmV3IFVuemlwKG9wdHMpOwogICAgICAgICAgWmxpYiQxLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5VTlpJUCk7CiAgICAgICAgfQoKCiAgICAgICAgLy8gdGhlIFpsaWIgY2xhc3MgdGhleSBhbGwgaW5oZXJpdCBmcm9tCiAgICAgICAgLy8gVGhpcyB0aGluZyBtYW5hZ2VzIHRoZSBxdWV1ZSBvZiByZXF1ZXN0cywgYW5kIHJldHVybnMKICAgICAgICAvLyB0cnVlIG9yIGZhbHNlIGlmIHRoZXJlIGlzIGFueXRoaW5nIGluIHRoZSBxdWV1ZSB3aGVuCiAgICAgICAgLy8geW91IGNhbGwgdGhlIC53cml0ZSgpIG1ldGhvZC4KCiAgICAgICAgZnVuY3Rpb24gWmxpYiQxKG9wdHMsIG1vZGUpIHsKICAgICAgICAgIHRoaXMuX29wdHMgPSBvcHRzID0gb3B0cyB8fCB7fTsKICAgICAgICAgIHRoaXMuX2NodW5rU2l6ZSA9IG9wdHMuY2h1bmtTaXplIHx8IGJpbmRpbmcuWl9ERUZBVUxUX0NIVU5LOwoKICAgICAgICAgIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdHMpOwoKICAgICAgICAgIGlmIChvcHRzLmZsdXNoKSB7CiAgICAgICAgICAgIGlmIChvcHRzLmZsdXNoICE9PSBiaW5kaW5nLlpfTk9fRkxVU0ggJiYKICAgICAgICAgICAgICAgIG9wdHMuZmx1c2ggIT09IGJpbmRpbmcuWl9QQVJUSUFMX0ZMVVNIICYmCiAgICAgICAgICAgICAgICBvcHRzLmZsdXNoICE9PSBiaW5kaW5nLlpfU1lOQ19GTFVTSCAmJgogICAgICAgICAgICAgICAgb3B0cy5mbHVzaCAhPT0gYmluZGluZy5aX0ZVTExfRkxVU0ggJiYKICAgICAgICAgICAgICAgIG9wdHMuZmx1c2ggIT09IGJpbmRpbmcuWl9GSU5JU0ggJiYKICAgICAgICAgICAgICAgIG9wdHMuZmx1c2ggIT09IGJpbmRpbmcuWl9CTE9DSykgewogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmbHVzaCBmbGFnOiAnICsgb3B0cy5mbHVzaCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuX2ZsdXNoRmxhZyA9IG9wdHMuZmx1c2ggfHwgYmluZGluZy5aX05PX0ZMVVNIOwoKICAgICAgICAgIGlmIChvcHRzLmNodW5rU2l6ZSkgewogICAgICAgICAgICBpZiAob3B0cy5jaHVua1NpemUgPCBiaW5kaW5nLlpfTUlOX0NIVU5LIHx8CiAgICAgICAgICAgICAgICBvcHRzLmNodW5rU2l6ZSA+IGJpbmRpbmcuWl9NQVhfQ0hVTkspIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2h1bmsgc2l6ZTogJyArIG9wdHMuY2h1bmtTaXplKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChvcHRzLndpbmRvd0JpdHMpIHsKICAgICAgICAgICAgaWYgKG9wdHMud2luZG93Qml0cyA8IGJpbmRpbmcuWl9NSU5fV0lORE9XQklUUyB8fAogICAgICAgICAgICAgICAgb3B0cy53aW5kb3dCaXRzID4gYmluZGluZy5aX01BWF9XSU5ET1dCSVRTKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHdpbmRvd0JpdHM6ICcgKyBvcHRzLndpbmRvd0JpdHMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG9wdHMubGV2ZWwpIHsKICAgICAgICAgICAgaWYgKG9wdHMubGV2ZWwgPCBiaW5kaW5nLlpfTUlOX0xFVkVMIHx8CiAgICAgICAgICAgICAgICBvcHRzLmxldmVsID4gYmluZGluZy5aX01BWF9MRVZFTCkgewogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb21wcmVzc2lvbiBsZXZlbDogJyArIG9wdHMubGV2ZWwpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG9wdHMubWVtTGV2ZWwpIHsKICAgICAgICAgICAgaWYgKG9wdHMubWVtTGV2ZWwgPCBiaW5kaW5nLlpfTUlOX01FTUxFVkVMIHx8CiAgICAgICAgICAgICAgICBvcHRzLm1lbUxldmVsID4gYmluZGluZy5aX01BWF9NRU1MRVZFTCkgewogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZW1MZXZlbDogJyArIG9wdHMubWVtTGV2ZWwpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG9wdHMuc3RyYXRlZ3kpIHsKICAgICAgICAgICAgaWYgKG9wdHMuc3RyYXRlZ3kgIT0gYmluZGluZy5aX0ZJTFRFUkVEICYmCiAgICAgICAgICAgICAgICBvcHRzLnN0cmF0ZWd5ICE9IGJpbmRpbmcuWl9IVUZGTUFOX09OTFkgJiYKICAgICAgICAgICAgICAgIG9wdHMuc3RyYXRlZ3kgIT0gYmluZGluZy5aX1JMRSAmJgogICAgICAgICAgICAgICAgb3B0cy5zdHJhdGVneSAhPSBiaW5kaW5nLlpfRklYRUQgJiYKICAgICAgICAgICAgICAgIG9wdHMuc3RyYXRlZ3kgIT0gYmluZGluZy5aX0RFRkFVTFRfU1RSQVRFR1kpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyYXRlZ3k6ICcgKyBvcHRzLnN0cmF0ZWd5KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChvcHRzLmRpY3Rpb25hcnkpIHsKICAgICAgICAgICAgaWYgKCFpc0J1ZmZlcihvcHRzLmRpY3Rpb25hcnkpKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRpY3Rpb25hcnk6IGl0IHNob3VsZCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5fYmluZGluZyA9IG5ldyBiaW5kaW5nLlpsaWIobW9kZSk7CgogICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgdGhpcy5faGFkRXJyb3IgPSBmYWxzZTsKICAgICAgICAgIHRoaXMuX2JpbmRpbmcub25lcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIGVycm5vKSB7CiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIHdheSB0byBjbGVhbmx5IHJlY292ZXIuCiAgICAgICAgICAgIC8vIGNvbnRpbnVpbmcgb25seSBvYnNjdXJlcyBwcm9ibGVtcy4KICAgICAgICAgICAgc2VsZi5fYmluZGluZyA9IG51bGw7CiAgICAgICAgICAgIHNlbGYuX2hhZEVycm9yID0gdHJ1ZTsKCiAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTsKICAgICAgICAgICAgZXJyb3IuZXJybm8gPSBlcnJubzsKICAgICAgICAgICAgZXJyb3IuY29kZSA9IGJpbmRpbmcuY29kZXNbZXJybm9dOwogICAgICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyb3IpOwogICAgICAgICAgfTsKCiAgICAgICAgICB2YXIgbGV2ZWwgPSBiaW5kaW5nLlpfREVGQVVMVF9DT01QUkVTU0lPTjsKICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5sZXZlbCA9PT0gJ251bWJlcicpIGxldmVsID0gb3B0cy5sZXZlbDsKCiAgICAgICAgICB2YXIgc3RyYXRlZ3kgPSBiaW5kaW5nLlpfREVGQVVMVF9TVFJBVEVHWTsKICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5zdHJhdGVneSA9PT0gJ251bWJlcicpIHN0cmF0ZWd5ID0gb3B0cy5zdHJhdGVneTsKCiAgICAgICAgICB0aGlzLl9iaW5kaW5nLmluaXQob3B0cy53aW5kb3dCaXRzIHx8IGJpbmRpbmcuWl9ERUZBVUxUX1dJTkRPV0JJVFMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5tZW1MZXZlbCB8fCBiaW5kaW5nLlpfREVGQVVMVF9NRU1MRVZFTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJhdGVneSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmRpY3Rpb25hcnkpOwoKICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBCdWZmZXIodGhpcy5fY2h1bmtTaXplKTsKICAgICAgICAgIHRoaXMuX29mZnNldCA9IDA7CiAgICAgICAgICB0aGlzLl9jbG9zZWQgPSBmYWxzZTsKICAgICAgICAgIHRoaXMuX2xldmVsID0gbGV2ZWw7CiAgICAgICAgICB0aGlzLl9zdHJhdGVneSA9IHN0cmF0ZWd5OwoKICAgICAgICAgIHRoaXMub25jZSgnZW5kJywgdGhpcy5jbG9zZSk7CiAgICAgICAgfQoKICAgICAgICBpbmhlcml0cyQxKFpsaWIkMSwgVHJhbnNmb3JtKTsKCiAgICAgICAgWmxpYiQxLnByb3RvdHlwZS5wYXJhbXMgPSBmdW5jdGlvbihsZXZlbCwgc3RyYXRlZ3ksIGNhbGxiYWNrKSB7CiAgICAgICAgICBpZiAobGV2ZWwgPCBiaW5kaW5nLlpfTUlOX0xFVkVMIHx8CiAgICAgICAgICAgICAgbGV2ZWwgPiBiaW5kaW5nLlpfTUFYX0xFVkVMKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIGNvbXByZXNzaW9uIGxldmVsOiAnICsgbGV2ZWwpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHN0cmF0ZWd5ICE9IGJpbmRpbmcuWl9GSUxURVJFRCAmJgogICAgICAgICAgICAgIHN0cmF0ZWd5ICE9IGJpbmRpbmcuWl9IVUZGTUFOX09OTFkgJiYKICAgICAgICAgICAgICBzdHJhdGVneSAhPSBiaW5kaW5nLlpfUkxFICYmCiAgICAgICAgICAgICAgc3RyYXRlZ3kgIT0gYmluZGluZy5aX0ZJWEVEICYmCiAgICAgICAgICAgICAgc3RyYXRlZ3kgIT0gYmluZGluZy5aX0RFRkFVTFRfU1RSQVRFR1kpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBzdHJhdGVneTogJyArIHN0cmF0ZWd5KTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5fbGV2ZWwgIT09IGxldmVsIHx8IHRoaXMuX3N0cmF0ZWd5ICE9PSBzdHJhdGVneSkgewogICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgIHRoaXMuZmx1c2goYmluZGluZy5aX1NZTkNfRkxVU0gsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHNlbGYuX2JpbmRpbmcucGFyYW1zKGxldmVsLCBzdHJhdGVneSk7CiAgICAgICAgICAgICAgaWYgKCFzZWxmLl9oYWRFcnJvcikgewogICAgICAgICAgICAgICAgc2VsZi5fbGV2ZWwgPSBsZXZlbDsKICAgICAgICAgICAgICAgIHNlbGYuX3N0cmF0ZWd5ID0gc3RyYXRlZ3k7CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5leHRUaWNrKGNhbGxiYWNrKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBabGliJDEucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZy5yZXNldCgpOwogICAgICAgIH07CgogICAgICAgIC8vIFRoaXMgaXMgdGhlIF9mbHVzaCBmdW5jdGlvbiBjYWxsZWQgYnkgdGhlIHRyYW5zZm9ybSBjbGFzcywKICAgICAgICAvLyBpbnRlcm5hbGx5LCB3aGVuIHRoZSBsYXN0IGNodW5rIGhhcyBiZWVuIHdyaXR0ZW4uCiAgICAgICAgWmxpYiQxLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICAgICAgdGhpcy5fdHJhbnNmb3JtKG5ldyBCdWZmZXIoMCksICcnLCBjYWxsYmFjayk7CiAgICAgICAgfTsKCiAgICAgICAgWmxpYiQxLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uKGtpbmQsIGNhbGxiYWNrKSB7CiAgICAgICAgICB2YXIgd3MgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoKICAgICAgICAgIGlmICh0eXBlb2Yga2luZCA9PT0gJ2Z1bmN0aW9uJyB8fCAoa2luZCA9PT0gdm9pZCAwICYmICFjYWxsYmFjaykpIHsKICAgICAgICAgICAgY2FsbGJhY2sgPSBraW5kOwogICAgICAgICAgICBraW5kID0gYmluZGluZy5aX0ZVTExfRkxVU0g7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHdzLmVuZGVkKSB7CiAgICAgICAgICAgIGlmIChjYWxsYmFjaykKICAgICAgICAgICAgICBuZXh0VGljayhjYWxsYmFjayk7CiAgICAgICAgICB9IGVsc2UgaWYgKHdzLmVuZGluZykgewogICAgICAgICAgICBpZiAoY2FsbGJhY2spCiAgICAgICAgICAgICAgdGhpcy5vbmNlKCdlbmQnLCBjYWxsYmFjayk7CiAgICAgICAgICB9IGVsc2UgaWYgKHdzLm5lZWREcmFpbikgewogICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBzZWxmLmZsdXNoKGNhbGxiYWNrKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl9mbHVzaEZsYWcgPSBraW5kOwogICAgICAgICAgICB0aGlzLndyaXRlKG5ldyBCdWZmZXIoMCksICcnLCBjYWxsYmFjayk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgWmxpYiQxLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgICAgICBpZiAoY2FsbGJhY2spCiAgICAgICAgICAgIG5leHRUaWNrKGNhbGxiYWNrKTsKCiAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKQogICAgICAgICAgICByZXR1cm47CgogICAgICAgICAgdGhpcy5fY2xvc2VkID0gdHJ1ZTsKCiAgICAgICAgICB0aGlzLl9iaW5kaW5nLmNsb3NlKCk7CgogICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNlbGYuZW1pdCgnY2xvc2UnKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIFpsaWIkMS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHsKICAgICAgICAgIHZhciBmbHVzaEZsYWc7CiAgICAgICAgICB2YXIgd3MgPSB0aGlzLl93cml0YWJsZVN0YXRlOwogICAgICAgICAgdmFyIGVuZGluZyA9IHdzLmVuZGluZyB8fCB3cy5lbmRlZDsKICAgICAgICAgIHZhciBsYXN0ID0gZW5kaW5nICYmICghY2h1bmsgfHwgd3MubGVuZ3RoID09PSBjaHVuay5sZW5ndGgpOwoKICAgICAgICAgIGlmICghY2h1bmsgPT09IG51bGwgJiYgIWlzQnVmZmVyKGNodW5rKSkKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcignaW52YWxpZCBpbnB1dCcpKTsKCiAgICAgICAgICAvLyBJZiBpdCdzIHRoZSBsYXN0IGNodW5rLCBvciBhIGZpbmFsIGZsdXNoLCB3ZSB1c2UgdGhlIFpfRklOSVNIIGZsdXNoIGZsYWcuCiAgICAgICAgICAvLyBJZiBpdCdzIGV4cGxpY2l0bHkgZmx1c2hpbmcgYXQgc29tZSBvdGhlciB0aW1lLCB0aGVuIHdlIHVzZQogICAgICAgICAgLy8gWl9GVUxMX0ZMVVNILiBPdGhlcndpc2UsIHVzZSBaX05PX0ZMVVNIIGZvciBtYXhpbXVtIGNvbXByZXNzaW9uCiAgICAgICAgICAvLyBnb29kbmVzcy4KICAgICAgICAgIGlmIChsYXN0KQogICAgICAgICAgICBmbHVzaEZsYWcgPSBiaW5kaW5nLlpfRklOSVNIOwogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGZsdXNoRmxhZyA9IHRoaXMuX2ZsdXNoRmxhZzsKICAgICAgICAgICAgLy8gb25jZSB3ZSd2ZSBmbHVzaGVkIHRoZSBsYXN0IG9mIHRoZSBxdWV1ZSwgc3RvcCBmbHVzaGluZyBhbmQKICAgICAgICAgICAgLy8gZ28gYmFjayB0byB0aGUgbm9ybWFsIGJlaGF2aW9yLgogICAgICAgICAgICBpZiAoY2h1bmsubGVuZ3RoID49IHdzLmxlbmd0aCkgewogICAgICAgICAgICAgIHRoaXMuX2ZsdXNoRmxhZyA9IHRoaXMuX29wdHMuZmx1c2ggfHwgYmluZGluZy5aX05PX0ZMVVNIOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5fcHJvY2Vzc0NodW5rKGNodW5rLCBmbHVzaEZsYWcsIGNiKTsKICAgICAgICB9OwoKICAgICAgICBabGliJDEucHJvdG90eXBlLl9wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbihjaHVuaywgZmx1c2hGbGFnLCBjYikgewogICAgICAgICAgdmFyIGF2YWlsSW5CZWZvcmUgPSBjaHVuayAmJiBjaHVuay5sZW5ndGg7CiAgICAgICAgICB2YXIgYXZhaWxPdXRCZWZvcmUgPSB0aGlzLl9jaHVua1NpemUgLSB0aGlzLl9vZmZzZXQ7CiAgICAgICAgICB2YXIgaW5PZmYgPSAwOwoKICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgICAgICB2YXIgYXN5bmMgPSB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbic7CgogICAgICAgICAgaWYgKCFhc3luYykgewogICAgICAgICAgICB2YXIgYnVmZmVycyA9IFtdOwogICAgICAgICAgICB2YXIgbnJlYWQgPSAwOwoKICAgICAgICAgICAgdmFyIGVycm9yOwogICAgICAgICAgICB0aGlzLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVyKSB7CiAgICAgICAgICAgICAgZXJyb3IgPSBlcjsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX2JpbmRpbmcud3JpdGVTeW5jKGZsdXNoRmxhZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmssIC8vIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluT2ZmLCAvLyBpbl9vZmYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxJbkJlZm9yZSwgLy8gaW5fbGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlciwgLy8gb3V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCwgLy9vdXRfb2ZmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsT3V0QmVmb3JlKTsgLy8gb3V0X2xlbgogICAgICAgICAgICB9IHdoaWxlICghdGhpcy5faGFkRXJyb3IgJiYgY2FsbGJhY2socmVzWzBdLCByZXNbMV0pKTsKCiAgICAgICAgICAgIGlmICh0aGlzLl9oYWRFcnJvcikgewogICAgICAgICAgICAgIHRocm93IGVycm9yOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBucmVhZCk7CiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTsKCiAgICAgICAgICAgIHJldHVybiBidWY7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHJlcSA9IHRoaXMuX2JpbmRpbmcud3JpdGUoZmx1c2hGbGFnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmssIC8vIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbk9mZiwgLy8gaW5fb2ZmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbEluQmVmb3JlLCAvLyBpbl9sZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlciwgLy8gb3V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQsIC8vb3V0X29mZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxPdXRCZWZvcmUpOyAvLyBvdXRfbGVuCgogICAgICAgICAgcmVxLmJ1ZmZlciA9IGNodW5rOwogICAgICAgICAgcmVxLmNhbGxiYWNrID0gY2FsbGJhY2s7CgogICAgICAgICAgZnVuY3Rpb24gY2FsbGJhY2soYXZhaWxJbkFmdGVyLCBhdmFpbE91dEFmdGVyKSB7CiAgICAgICAgICAgIGlmIChzZWxmLl9oYWRFcnJvcikKICAgICAgICAgICAgICByZXR1cm47CgogICAgICAgICAgICB2YXIgaGF2ZSA9IGF2YWlsT3V0QmVmb3JlIC0gYXZhaWxPdXRBZnRlcjsKICAgICAgICAgICAgYXNzZXJ0KGhhdmUgPj0gMCwgJ2hhdmUgc2hvdWxkIG5vdCBnbyBkb3duJyk7CgogICAgICAgICAgICBpZiAoaGF2ZSA+IDApIHsKICAgICAgICAgICAgICB2YXIgb3V0ID0gc2VsZi5fYnVmZmVyLnNsaWNlKHNlbGYuX29mZnNldCwgc2VsZi5fb2Zmc2V0ICsgaGF2ZSk7CiAgICAgICAgICAgICAgc2VsZi5fb2Zmc2V0ICs9IGhhdmU7CiAgICAgICAgICAgICAgLy8gc2VydmUgc29tZSBvdXRwdXQgdG8gdGhlIGNvbnN1bWVyLgogICAgICAgICAgICAgIGlmIChhc3luYykgewogICAgICAgICAgICAgICAgc2VsZi5wdXNoKG91dCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChvdXQpOwogICAgICAgICAgICAgICAgbnJlYWQgKz0gb3V0Lmxlbmd0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGV4aGF1c3RlZCB0aGUgb3V0cHV0IGJ1ZmZlciwgb3IgdXNlZCBhbGwgdGhlIGlucHV0IGNyZWF0ZSBhIG5ldyBvbmUuCiAgICAgICAgICAgIGlmIChhdmFpbE91dEFmdGVyID09PSAwIHx8IHNlbGYuX29mZnNldCA+PSBzZWxmLl9jaHVua1NpemUpIHsKICAgICAgICAgICAgICBhdmFpbE91dEJlZm9yZSA9IHNlbGYuX2NodW5rU2l6ZTsKICAgICAgICAgICAgICBzZWxmLl9vZmZzZXQgPSAwOwogICAgICAgICAgICAgIHNlbGYuX2J1ZmZlciA9IG5ldyBCdWZmZXIoc2VsZi5fY2h1bmtTaXplKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGF2YWlsT3V0QWZ0ZXIgPT09IDApIHsKICAgICAgICAgICAgICAvLyBOb3QgYWN0dWFsbHkgZG9uZS4gIE5lZWQgdG8gcmVwcm9jZXNzLgogICAgICAgICAgICAgIC8vIEFsc28sIHVwZGF0ZSB0aGUgYXZhaWxJbkJlZm9yZSB0byB0aGUgYXZhaWxJbkFmdGVyIHZhbHVlLAogICAgICAgICAgICAgIC8vIHNvIHRoYXQgaWYgd2UgaGF2ZSB0byBoaXQgaXQgYSB0aGlyZCAoZm91cnRoLCBldGMuKSB0aW1lLAogICAgICAgICAgICAgIC8vIGl0J2xsIGhhdmUgdGhlIGNvcnJlY3QgYnl0ZSBjb3VudHMuCiAgICAgICAgICAgICAgaW5PZmYgKz0gKGF2YWlsSW5CZWZvcmUgLSBhdmFpbEluQWZ0ZXIpOwogICAgICAgICAgICAgIGF2YWlsSW5CZWZvcmUgPSBhdmFpbEluQWZ0ZXI7CgogICAgICAgICAgICAgIGlmICghYXN5bmMpCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgICAgICAgdmFyIG5ld1JlcSA9IHNlbGYuX2JpbmRpbmcud3JpdGUoZmx1c2hGbGFnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluT2ZmLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsSW5CZWZvcmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fYnVmZmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX29mZnNldCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaHVua1NpemUpOwogICAgICAgICAgICAgIG5ld1JlcS5jYWxsYmFjayA9IGNhbGxiYWNrOyAvLyB0aGlzIHNhbWUgZnVuY3Rpb24KICAgICAgICAgICAgICBuZXdSZXEuYnVmZmVyID0gY2h1bms7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIWFzeW5jKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgIC8vIGZpbmlzaGVkIHdpdGggdGhlIGNodW5rLgogICAgICAgICAgICBjYigpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGluaGVyaXRzJDEoRGVmbGF0ZSwgWmxpYiQxKTsKICAgICAgICBpbmhlcml0cyQxKEluZmxhdGUsIFpsaWIkMSk7CiAgICAgICAgaW5oZXJpdHMkMShHemlwLCBabGliJDEpOwogICAgICAgIGluaGVyaXRzJDEoR3VuemlwLCBabGliJDEpOwogICAgICAgIGluaGVyaXRzJDEoRGVmbGF0ZVJhdywgWmxpYiQxKTsKICAgICAgICBpbmhlcml0cyQxKEluZmxhdGVSYXcsIFpsaWIkMSk7CiAgICAgICAgaW5oZXJpdHMkMShVbnppcCwgWmxpYiQxKTsKICAgICAgICB2YXIgemxpYiA9IHsKICAgICAgICAgIGNvZGVzOiBjb2RlcywKICAgICAgICAgIGNyZWF0ZURlZmxhdGU6IGNyZWF0ZURlZmxhdGUsCiAgICAgICAgICBjcmVhdGVJbmZsYXRlOiBjcmVhdGVJbmZsYXRlLAogICAgICAgICAgY3JlYXRlRGVmbGF0ZVJhdzogY3JlYXRlRGVmbGF0ZVJhdywKICAgICAgICAgIGNyZWF0ZUluZmxhdGVSYXc6IGNyZWF0ZUluZmxhdGVSYXcsCiAgICAgICAgICBjcmVhdGVHemlwOiBjcmVhdGVHemlwLAogICAgICAgICAgY3JlYXRlR3VuemlwOiBjcmVhdGVHdW56aXAsCiAgICAgICAgICBjcmVhdGVVbnppcDogY3JlYXRlVW56aXAsCiAgICAgICAgICBkZWZsYXRlOiBkZWZsYXRlJDEsCiAgICAgICAgICBkZWZsYXRlU3luYzogZGVmbGF0ZVN5bmMsCiAgICAgICAgICBnemlwOiBnemlwLAogICAgICAgICAgZ3ppcFN5bmM6IGd6aXBTeW5jLAogICAgICAgICAgZGVmbGF0ZVJhdzogZGVmbGF0ZVJhdywKICAgICAgICAgIGRlZmxhdGVSYXdTeW5jOiBkZWZsYXRlUmF3U3luYywKICAgICAgICAgIHVuemlwOiB1bnppcCwKICAgICAgICAgIHVuemlwU3luYzogdW56aXBTeW5jLAogICAgICAgICAgaW5mbGF0ZTogaW5mbGF0ZSQxLAogICAgICAgICAgaW5mbGF0ZVN5bmM6IGluZmxhdGVTeW5jLAogICAgICAgICAgZ3VuemlwOiBndW56aXAsCiAgICAgICAgICBndW56aXBTeW5jOiBndW56aXBTeW5jLAogICAgICAgICAgaW5mbGF0ZVJhdzogaW5mbGF0ZVJhdywKICAgICAgICAgIGluZmxhdGVSYXdTeW5jOiBpbmZsYXRlUmF3U3luYywKICAgICAgICAgIERlZmxhdGU6IERlZmxhdGUsCiAgICAgICAgICBJbmZsYXRlOiBJbmZsYXRlLAogICAgICAgICAgR3ppcDogR3ppcCwKICAgICAgICAgIEd1bnppcDogR3VuemlwLAogICAgICAgICAgRGVmbGF0ZVJhdzogRGVmbGF0ZVJhdywKICAgICAgICAgIEluZmxhdGVSYXc6IEluZmxhdGVSYXcsCiAgICAgICAgICBVbnppcDogVW56aXAsCiAgICAgICAgICBabGliOiBabGliJDEKICAgICAgICB9OwoKICAgICAgICBjbGFzcyBQREZSZWZlcmVuY2UgZXh0ZW5kcyBQREZBYnN0cmFjdFJlZmVyZW5jZSB7CiAgICAgICAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgaWQsIGRhdGEgPSB7fSkgewogICAgICAgICAgICBzdXBlcigpOwogICAgICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7CiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDsKICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTsKICAgICAgICAgICAgdGhpcy5nZW4gPSAwOwogICAgICAgICAgICB0aGlzLmNvbXByZXNzID0gdGhpcy5kb2N1bWVudC5jb21wcmVzcyAmJiAhdGhpcy5kYXRhLkZpbHRlcjsKICAgICAgICAgICAgdGhpcy51bmNvbXByZXNzZWRMZW5ndGggPSAwOwogICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdOwogICAgICAgICAgfQoKICAgICAgICAgIHdyaXRlKGNodW5rKSB7CiAgICAgICAgICAgIGlmICghaXNCdWZmZXIoY2h1bmspKSB7CiAgICAgICAgICAgICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rICsgJ1xuJywgJ2JpbmFyeScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnVuY29tcHJlc3NlZExlbmd0aCArPSBjaHVuay5sZW5ndGg7CiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuTGVuZ3RoID09IG51bGwpIHsKICAgICAgICAgICAgICB0aGlzLmRhdGEuTGVuZ3RoID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKGNodW5rKTsKICAgICAgICAgICAgdGhpcy5kYXRhLkxlbmd0aCArPSBjaHVuay5sZW5ndGg7CiAgICAgICAgICAgIGlmICh0aGlzLmNvbXByZXNzKSB7CiAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRhdGEuRmlsdGVyID0gJ0ZsYXRlRGVjb2RlJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBlbmQoY2h1bmspIHsKICAgICAgICAgICAgaWYgKGNodW5rKSB7CiAgICAgICAgICAgICAgdGhpcy53cml0ZShjaHVuayk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUoKTsKICAgICAgICAgIH0KCiAgICAgICAgICBmaW5hbGl6ZSgpIHsKICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLmRvY3VtZW50Ll9vZmZzZXQ7CgogICAgICAgICAgICBjb25zdCBlbmNyeXB0Rm4gPSB0aGlzLmRvY3VtZW50Ll9zZWN1cml0eQogICAgICAgICAgICAgID8gdGhpcy5kb2N1bWVudC5fc2VjdXJpdHkuZ2V0RW5jcnlwdEZuKHRoaXMuaWQsIHRoaXMuZ2VuKQogICAgICAgICAgICAgIDogbnVsbDsKCiAgICAgICAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGgpIHsKICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQodGhpcy5idWZmZXIpOwogICAgICAgICAgICAgIGlmICh0aGlzLmNvbXByZXNzKSB7CiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IHpsaWIuZGVmbGF0ZVN5bmModGhpcy5idWZmZXIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKGVuY3J5cHRGbikgewogICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBlbmNyeXB0Rm4odGhpcy5idWZmZXIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5kYXRhLkxlbmd0aCA9IHRoaXMuYnVmZmVyLmxlbmd0aDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5fd3JpdGUoYCR7dGhpcy5pZH0gJHt0aGlzLmdlbn0gb2JqYCk7CiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuX3dyaXRlKFBERk9iamVjdC5jb252ZXJ0KHRoaXMuZGF0YSwgZW5jcnlwdEZuKSk7CgogICAgICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5fd3JpdGUoJ3N0cmVhbScpOwogICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuX3dyaXRlKHRoaXMuYnVmZmVyKTsKCiAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbXTsgLy8gZnJlZSB1cCBtZW1vcnkKICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50Ll93cml0ZSgnXG5lbmRzdHJlYW0nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5fd3JpdGUoJ2VuZG9iaicpOwogICAgICAgICAgICB0aGlzLmRvY3VtZW50Ll9yZWZFbmQodGhpcyk7CiAgICAgICAgICB9CiAgICAgICAgICB0b1N0cmluZygpIHsKICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuaWR9ICR7dGhpcy5nZW59IFJgOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyoKICAgICAgICBQREZQYWdlIC0gcmVwcmVzZW50cyBhIHNpbmdsZSBwYWdlIGluIHRoZSBQREYgZG9jdW1lbnQKICAgICAgICBCeSBEZXZvbiBHb3ZldHQKICAgICAgICAqLwoKICAgICAgICBjb25zdCBERUZBVUxUX01BUkdJTlMgPSB7CiAgICAgICAgICB0b3A6IDcyLAogICAgICAgICAgbGVmdDogNzIsCiAgICAgICAgICBib3R0b206IDcyLAogICAgICAgICAgcmlnaHQ6IDcyCiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgU0laRVMgPSB7CiAgICAgICAgICAnNEEwJzogWzQ3NjcuODcsIDY3NDAuNzldLAogICAgICAgICAgJzJBMCc6IFszMzcwLjM5LCA0NzY3Ljg3XSwKICAgICAgICAgIEEwOiBbMjM4My45NCwgMzM3MC4zOV0sCiAgICAgICAgICBBMTogWzE2ODMuNzgsIDIzODMuOTRdLAogICAgICAgICAgQTI6IFsxMTkwLjU1LCAxNjgzLjc4XSwKICAgICAgICAgIEEzOiBbODQxLjg5LCAxMTkwLjU1XSwKICAgICAgICAgIEE0OiBbNTk1LjI4LCA4NDEuODldLAogICAgICAgICAgQTU6IFs0MTkuNTMsIDU5NS4yOF0sCiAgICAgICAgICBBNjogWzI5Ny42NCwgNDE5LjUzXSwKICAgICAgICAgIEE3OiBbMjA5Ljc2LCAyOTcuNjRdLAogICAgICAgICAgQTg6IFsxNDcuNCwgMjA5Ljc2XSwKICAgICAgICAgIEE5OiBbMTA0Ljg4LCAxNDcuNF0sCiAgICAgICAgICBBMTA6IFs3My43LCAxMDQuODhdLAogICAgICAgICAgQjA6IFsyODM0LjY1LCA0MDA4LjE5XSwKICAgICAgICAgIEIxOiBbMjAwNC4wOSwgMjgzNC42NV0sCiAgICAgICAgICBCMjogWzE0MTcuMzIsIDIwMDQuMDldLAogICAgICAgICAgQjM6IFsxMDAwLjYzLCAxNDE3LjMyXSwKICAgICAgICAgIEI0OiBbNzA4LjY2LCAxMDAwLjYzXSwKICAgICAgICAgIEI1OiBbNDk4LjksIDcwOC42Nl0sCiAgICAgICAgICBCNjogWzM1NC4zMywgNDk4LjldLAogICAgICAgICAgQjc6IFsyNDkuNDUsIDM1NC4zM10sCiAgICAgICAgICBCODogWzE3NS43NSwgMjQ5LjQ1XSwKICAgICAgICAgIEI5OiBbMTI0LjcyLCAxNzUuNzVdLAogICAgICAgICAgQjEwOiBbODcuODcsIDEyNC43Ml0sCiAgICAgICAgICBDMDogWzI1OTkuMzcsIDM2NzYuNTRdLAogICAgICAgICAgQzE6IFsxODM2Ljg1LCAyNTk5LjM3XSwKICAgICAgICAgIEMyOiBbMTI5OC4yNywgMTgzNi44NV0sCiAgICAgICAgICBDMzogWzkxOC40MywgMTI5OC4yN10sCiAgICAgICAgICBDNDogWzY0OS4xMywgOTE4LjQzXSwKICAgICAgICAgIEM1OiBbNDU5LjIxLCA2NDkuMTNdLAogICAgICAgICAgQzY6IFszMjMuMTUsIDQ1OS4yMV0sCiAgICAgICAgICBDNzogWzIyOS42MSwgMzIzLjE1XSwKICAgICAgICAgIEM4OiBbMTYxLjU3LCAyMjkuNjFdLAogICAgICAgICAgQzk6IFsxMTMuMzksIDE2MS41N10sCiAgICAgICAgICBDMTA6IFs3OS4zNywgMTEzLjM5XSwKICAgICAgICAgIFJBMDogWzI0MzcuOCwgMzQ1OC4yN10sCiAgICAgICAgICBSQTE6IFsxNzI5LjEzLCAyNDM3LjhdLAogICAgICAgICAgUkEyOiBbMTIxOC45LCAxNzI5LjEzXSwKICAgICAgICAgIFJBMzogWzg2NC41NywgMTIxOC45XSwKICAgICAgICAgIFJBNDogWzYwOS40NSwgODY0LjU3XSwKICAgICAgICAgIFNSQTA6IFsyNTUxLjE4LCAzNjI4LjM1XSwKICAgICAgICAgIFNSQTE6IFsxODE0LjE3LCAyNTUxLjE4XSwKICAgICAgICAgIFNSQTI6IFsxMjc1LjU5LCAxODE0LjE3XSwKICAgICAgICAgIFNSQTM6IFs5MDcuMDksIDEyNzUuNTldLAogICAgICAgICAgU1JBNDogWzYzNy44LCA5MDcuMDldLAogICAgICAgICAgRVhFQ1VUSVZFOiBbNTIxLjg2LCA3NTYuMF0sCiAgICAgICAgICBGT0xJTzogWzYxMi4wLCA5MzYuMF0sCiAgICAgICAgICBMRUdBTDogWzYxMi4wLCAxMDA4LjBdLAogICAgICAgICAgTEVUVEVSOiBbNjEyLjAsIDc5Mi4wXSwKICAgICAgICAgIFRBQkxPSUQ6IFs3OTIuMCwgMTIyNC4wXQogICAgICAgIH07CgogICAgICAgIGNsYXNzIFBERlBhZ2UgewogICAgICAgICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG9wdGlvbnMgPSB7fSkgewogICAgICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7CiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IG9wdGlvbnMuc2l6ZSB8fCAnbGV0dGVyJzsKICAgICAgICAgICAgdGhpcy5sYXlvdXQgPSBvcHRpb25zLmxheW91dCB8fCAncG9ydHJhaXQnOwoKICAgICAgICAgICAgLy8gcHJvY2VzcyBtYXJnaW5zCiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXJnaW4gPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgdGhpcy5tYXJnaW5zID0gewogICAgICAgICAgICAgICAgdG9wOiBvcHRpb25zLm1hcmdpbiwKICAgICAgICAgICAgICAgIGxlZnQ6IG9wdGlvbnMubWFyZ2luLAogICAgICAgICAgICAgICAgYm90dG9tOiBvcHRpb25zLm1hcmdpbiwKICAgICAgICAgICAgICAgIHJpZ2h0OiBvcHRpb25zLm1hcmdpbgogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gMSBpbmNoIG1hcmdpbnMKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLm1hcmdpbnMgPSBvcHRpb25zLm1hcmdpbnMgfHwgREVGQVVMVF9NQVJHSU5TOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBjYWxjdWxhdGUgcGFnZSBkaW1lbnNpb25zCiAgICAgICAgICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBBcnJheS5pc0FycmF5KHRoaXMuc2l6ZSkKICAgICAgICAgICAgICA/IHRoaXMuc2l6ZQogICAgICAgICAgICAgIDogU0laRVNbdGhpcy5zaXplLnRvVXBwZXJDYXNlKCldOwogICAgICAgICAgICB0aGlzLndpZHRoID0gZGltZW5zaW9uc1t0aGlzLmxheW91dCA9PT0gJ3BvcnRyYWl0JyA/IDAgOiAxXTsKICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBkaW1lbnNpb25zW3RoaXMubGF5b3V0ID09PSAncG9ydHJhaXQnID8gMSA6IDBdOwoKICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5kb2N1bWVudC5yZWYoKTsKCiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIEZvbnQsIFhPYmplY3QsIGFuZCBFeHRHU3RhdGUgZGljdGlvbmFyaWVzCiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzID0gdGhpcy5kb2N1bWVudC5yZWYoewogICAgICAgICAgICAgIFByb2NTZXQ6IFsnUERGJywgJ1RleHQnLCAnSW1hZ2VCJywgJ0ltYWdlQycsICdJbWFnZUknXQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIFRoZSBwYWdlIGRpY3Rpb25hcnkKICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5ID0gdGhpcy5kb2N1bWVudC5yZWYoewogICAgICAgICAgICAgIFR5cGU6ICdQYWdlJywKICAgICAgICAgICAgICBQYXJlbnQ6IHRoaXMuZG9jdW1lbnQuX3Jvb3QuZGF0YS5QYWdlcywKICAgICAgICAgICAgICBNZWRpYUJveDogWzAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0XSwKICAgICAgICAgICAgICBDb250ZW50czogdGhpcy5jb250ZW50LAogICAgICAgICAgICAgIFJlc291cmNlczogdGhpcy5yZXNvdXJjZXMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gTGF6aWx5IGNyZWF0ZSB0aGVzZSBkaWN0aW9uYXJpZXMKICAgICAgICAgIGdldCBmb250cygpIHsKICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMucmVzb3VyY2VzLmRhdGE7CiAgICAgICAgICAgIHJldHVybiBkYXRhLkZvbnQgIT0gbnVsbCA/IGRhdGEuRm9udCA6IChkYXRhLkZvbnQgPSB7fSk7CiAgICAgICAgICB9CgogICAgICAgICAgZ2V0IHhvYmplY3RzKCkgewogICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5yZXNvdXJjZXMuZGF0YTsKICAgICAgICAgICAgcmV0dXJuIGRhdGEuWE9iamVjdCAhPSBudWxsID8gZGF0YS5YT2JqZWN0IDogKGRhdGEuWE9iamVjdCA9IHt9KTsKICAgICAgICAgIH0KCiAgICAgICAgICBnZXQgZXh0X2dzdGF0ZXMoKSB7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc291cmNlcy5kYXRhOwogICAgICAgICAgICByZXR1cm4gZGF0YS5FeHRHU3RhdGUgIT0gbnVsbCA/IGRhdGEuRXh0R1N0YXRlIDogKGRhdGEuRXh0R1N0YXRlID0ge30pOwogICAgICAgICAgfQoKICAgICAgICAgIGdldCBwYXR0ZXJucygpIHsKICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMucmVzb3VyY2VzLmRhdGE7CiAgICAgICAgICAgIHJldHVybiBkYXRhLlBhdHRlcm4gIT0gbnVsbCA/IGRhdGEuUGF0dGVybiA6IChkYXRhLlBhdHRlcm4gPSB7fSk7CiAgICAgICAgICB9CgogICAgICAgICAgZ2V0IGFubm90YXRpb25zKCkgewogICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kaWN0aW9uYXJ5LmRhdGE7CiAgICAgICAgICAgIHJldHVybiBkYXRhLkFubm90cyAhPSBudWxsID8gZGF0YS5Bbm5vdHMgOiAoZGF0YS5Bbm5vdHMgPSBbXSk7CiAgICAgICAgICB9CgogICAgICAgICAgbWF4WSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLmJvdHRvbTsKICAgICAgICAgIH0KCiAgICAgICAgICB3cml0ZShjaHVuaykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50LndyaXRlKGNodW5rKTsKICAgICAgICAgIH0KCiAgICAgICAgICBlbmQoKSB7CiAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyeS5lbmQoKTsKICAgICAgICAgICAgdGhpcy5yZXNvdXJjZXMuZW5kKCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZW5kKCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsJDEgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsJDEgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307CgogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHsKICAgICAgICAJcmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzOwogICAgICAgIH0KCiAgICAgICAgdmFyIGNvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KCk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoKSB7CgogICAgICAgIAkvKioKICAgICAgICAJICogQ3J5cHRvSlMgY29yZSBjb21wb25lbnRzLgogICAgICAgIAkgKi8KICAgICAgICAJdmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQkMSkgewogICAgICAgIAkgICAgLyoKICAgICAgICAJICAgICAqIExvY2FsIHBvbHlmaWwgb2YgT2JqZWN0LmNyZWF0ZQogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCAoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgIGZ1bmN0aW9uIEYoKSB7fQogICAgICAgIAkgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBzdWJ0eXBlOwoKICAgICAgICAJICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBvYmo7CgogICAgICAgIAkgICAgICAgICAgICBzdWJ0eXBlID0gbmV3IEYoKTsKCiAgICAgICAgCSAgICAgICAgICAgIEYucHJvdG90eXBlID0gbnVsbDsKCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBzdWJ0eXBlOwogICAgICAgIAkgICAgICAgIH07CiAgICAgICAgCSAgICB9KCkpOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQ3J5cHRvSlMgbmFtZXNwYWNlLgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgQyA9IHt9OwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogTGlicmFyeSBuYW1lc3BhY2UuCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBDX2xpYiA9IEMubGliID0ge307CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBCYXNlIG9iamVjdCBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlID0gKGZ1bmN0aW9uICgpIHsKCgogICAgICAgIAkgICAgICAgIHJldHVybiB7CiAgICAgICAgCSAgICAgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuCiAgICAgICAgCSAgICAgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgUHJvcGVydGllcyB0byBjb3B5IGludG8gdGhlIG5ldyBvYmplY3QuCiAgICAgICAgCSAgICAgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuCiAgICAgICAgCSAgICAgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnLAogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICAgKiAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgICogICAgIH0pOwogICAgICAgIAkgICAgICAgICAgICAgKi8KICAgICAgICAJICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBTcGF3bgogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHN1YnR5cGUgPSBjcmVhdGUodGhpcyk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gQXVnbWVudAogICAgICAgIAkgICAgICAgICAgICAgICAgaWYgKG92ZXJyaWRlcykgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUubWl4SW4ob3ZlcnJpZGVzKTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBDcmVhdGUgZGVmYXVsdCBpbml0aWFsaXplcgogICAgICAgIAkgICAgICAgICAgICAgICAgaWYgKCFzdWJ0eXBlLmhhc093blByb3BlcnR5KCdpbml0JykgfHwgdGhpcy5pbml0ID09PSBzdWJ0eXBlLmluaXQpIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyLmluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemVyJ3MgcHJvdG90eXBlIGlzIHRoZSBzdWJ0eXBlIG9iamVjdAogICAgICAgIAkgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gUmVmZXJlbmNlIHN1cGVydHlwZQogICAgICAgIAkgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIgPSB0aGlzOwoKICAgICAgICAJICAgICAgICAgICAgICAgIHJldHVybiBzdWJ0eXBlOwogICAgICAgIAkgICAgICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLgogICAgICAgIAkgICAgICAgICAgICAgKiBBcmd1bWVudHMgdG8gY3JlYXRlKCkgd2lsbCBiZSBwYXNzZWQgdG8gaW5pdCgpLgogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LgogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7CiAgICAgICAgCSAgICAgICAgICAgICAqLwogICAgICAgIAkgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKCk7CiAgICAgICAgCSAgICAgICAgICAgICAgICBpbnN0YW5jZS5pbml0LmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpOwoKICAgICAgICAJICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTsKICAgICAgICAJICAgICAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgb2JqZWN0LgogICAgICAgIAkgICAgICAgICAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBhZGQgc29tZSBsb2dpYyB3aGVuIHlvdXIgb2JqZWN0cyBhcmUgY3JlYXRlZC4KICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgICAgICAgKiAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgICogICAgICAgICAgICAgLy8gLi4uCiAgICAgICAgCSAgICAgICAgICAgICAqICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICAgKiAgICAgfSk7CiAgICAgICAgCSAgICAgICAgICAgICAqLwogICAgICAgIAkgICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgICAgICogQ29waWVzIHByb3BlcnRpZXMgaW50byB0aGlzIG9iamVjdC4KICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLgogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiAgICAgTXlUeXBlLm1peEluKHsKICAgICAgICAJICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJwogICAgICAgIAkgICAgICAgICAgICAgKiAgICAgfSk7CiAgICAgICAgCSAgICAgICAgICAgICAqLwogICAgICAgIAkgICAgICAgICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIElFIHdvbid0IGNvcHkgdG9TdHJpbmcgdXNpbmcgdGhlIGxvb3AgYWJvdmUKICAgICAgICAJICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmluZyA9IHByb3BlcnRpZXMudG9TdHJpbmc7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBvYmplY3QuCiAgICAgICAgCSAgICAgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGNsb25lLgogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gaW5zdGFuY2UuY2xvbmUoKTsKICAgICAgICAJICAgICAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICB9OwogICAgICAgIAkgICAgfSgpKTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgMzItYml0IHdvcmRzLgogICAgICAgIAkgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZSgpOwogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddKTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSwgNik7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykgewogICAgICAgIAkgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTsKCiAgICAgICAgCSAgICAgICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQkMSkgewogICAgICAgIAkgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHNpZ0J5dGVzOwogICAgICAgIAkgICAgICAgICAgICB9IGVsc2UgewogICAgICAgIAkgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHdvcmRzLmxlbmd0aCAqIDQ7CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXIgKE9wdGlvbmFsKSBUaGUgZW5jb2Rpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBDcnlwdG9KUy5lbmMuSGV4CiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5ICsgJyc7CiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7CiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiAoZW5jb2RlciB8fCBIZXgpLnN0cmluZ2lmeSh0aGlzKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb25jYXRlbmF0ZXMgYSB3b3JkIGFycmF5IHRvIHRoaXMgd29yZCBhcnJheS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkgdG8gYXBwZW5kLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGlzIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHdvcmRBcnJheTEuY29uY2F0KHdvcmRBcnJheTIpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNvbmNhdDogZnVuY3Rpb24gKHdvcmRBcnJheSkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgdmFyIHRoaXNXb3JkcyA9IHRoaXMud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciB0aGF0V29yZHMgPSB3b3JkQXJyYXkud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciB0aGlzU2lnQnl0ZXMgPSB0aGlzLnNpZ0J5dGVzOwogICAgICAgIAkgICAgICAgICAgICB2YXIgdGhhdFNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHMKICAgICAgICAJICAgICAgICAgICAgdGhpcy5jbGFtcCgpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29uY2F0CiAgICAgICAgCSAgICAgICAgICAgIGlmICh0aGlzU2lnQnl0ZXMgJSA0KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZQogICAgICAgIAkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpOwogICAgICAgIAkgICAgICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICB9IGVsc2UgewogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgd29yZCBhdCBhIHRpbWUKICAgICAgICAJICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdFNpZ0J5dGVzOyBpICs9IDQpIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB0aGlzV29yZHNbKHRoaXNTaWdCeXRlcyArIGkpID4+PiAyXSA9IHRoYXRXb3Jkc1tpID4+PiAyXTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzICs9IHRoYXRTaWdCeXRlczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENoYWluYWJsZQogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBSZW1vdmVzIGluc2lnbmlmaWNhbnQgYml0cy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgd29yZEFycmF5LmNsYW1wKCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgY2xhbXA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciB3b3JkcyA9IHRoaXMud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHRoaXMuc2lnQnl0ZXM7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDbGFtcAogICAgICAgIAkgICAgICAgICAgICB3b3Jkc1tzaWdCeXRlcyA+Pj4gMl0gJj0gMHhmZmZmZmZmZiA8PCAoMzIgLSAoc2lnQnl0ZXMgJSA0KSAqIDgpOwogICAgICAgIAkgICAgICAgICAgICB3b3Jkcy5sZW5ndGggPSBNYXRoLmNlaWwoc2lnQnl0ZXMgLyA0KTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBjbG9uZS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gd29yZEFycmF5LmNsb25lKCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpOwogICAgICAgIAkgICAgICAgICAgICBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ3JlYXRlcyBhIHdvcmQgYXJyYXkgZmlsbGVkIHdpdGggcmFuZG9tIGJ5dGVzLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG5CeXRlcyBUaGUgbnVtYmVyIG9mIHJhbmRvbSBieXRlcyB0byBnZW5lcmF0ZS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHJhbmRvbSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTYpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHJhbmRvbTogZnVuY3Rpb24gKG5CeXRlcykgewogICAgICAgIAkgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTsKCiAgICAgICAgCSAgICAgICAgICAgIHZhciByID0gKGZ1bmN0aW9uIChtX3cpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBtX3cgPSBtX3c7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgbV96ID0gMHgzYWRlNjhiMTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBtYXNrID0gMHhmZmZmZmZmZjsKCiAgICAgICAgCSAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIG1feiA9ICgweDkwNjkgKiAobV96ICYgMHhGRkZGKSArIChtX3ogPj4gMHgxMCkpICYgbWFzazsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBtX3cgPSAoMHg0NjUwICogKG1fdyAmIDB4RkZGRikgKyAobV93ID4+IDB4MTApKSAmIG1hc2s7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICgobV96IDw8IDB4MTApICsgbV93KSAmIG1hc2s7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgcmVzdWx0IC89IDB4MTAwMDAwMDAwOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAwLjU7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChNYXRoLnJhbmRvbSgpID4gLjUgPyAxIDogLTEpOwogICAgICAgIAkgICAgICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICB9KTsKCiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCByY2FjaGU7IGkgPCBuQnl0ZXM7IGkgKz0gNCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIF9yID0gcigocmNhY2hlIHx8IE1hdGgucmFuZG9tKCkpICogMHgxMDAwMDAwMDApOwoKICAgICAgICAJICAgICAgICAgICAgICAgIHJjYWNoZSA9IF9yKCkgKiAweDNhZGU2N2I3OwogICAgICAgIAkgICAgICAgICAgICAgICAgd29yZHMucHVzaCgoX3IoKSAqIDB4MTAwMDAwMDAwKSB8IDApOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBuQnl0ZXMpOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogRW5jb2RlciBuYW1lc3BhY2UuCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBDX2VuYyA9IEMuZW5jID0ge307CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBIZXggZW5jb2Rpbmcgc3RyYXRlZ3kuCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBIZXggPSBDX2VuYy5IZXggPSB7CiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgaGV4IHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXggc3RyaW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkod29yZEFycmF5KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3JkczsKICAgICAgICAJICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29udmVydAogICAgICAgIAkgICAgICAgICAgICB2YXIgaGV4Q2hhcnMgPSBbXTsKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7CiAgICAgICAgCSAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlID4+PiA0KS50b1N0cmluZygxNikpOwogICAgICAgIAkgICAgICAgICAgICAgICAgaGV4Q2hhcnMucHVzaCgoYml0ZSAmIDB4MGYpLnRvU3RyaW5nKDE2KSk7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBoZXhDaGFycy5qb2luKCcnKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb252ZXJ0cyBhIGhleCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGhleFN0ciBUaGUgaGV4IHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGhleFN0cmluZyk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChoZXhTdHIpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgdmFyIGhleFN0ckxlbmd0aCA9IGhleFN0ci5sZW5ndGg7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb252ZXJ0CiAgICAgICAgCSAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhleFN0ckxlbmd0aDsgaSArPSAyKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAzXSB8PSBwYXJzZUludChoZXhTdHIuc3Vic3RyKGksIDIpLCAxNikgPDwgKDI0IC0gKGkgJSA4KSAqIDQpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBoZXhTdHJMZW5ndGggLyAyKTsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9OwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogTGF0aW4xIGVuY29kaW5nIHN0cmF0ZWd5LgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgTGF0aW4xID0gQ19lbmMuTGF0aW4xID0gewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIExhdGluMSBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgTGF0aW4xIHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGxhdGluMVN0cmluZyA9IENyeXB0b0pTLmVuYy5MYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQKICAgICAgICAJICAgICAgICAgICAgdmFyIGxhdGluMUNoYXJzID0gW107CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGJpdGUgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmOwogICAgICAgIAkgICAgICAgICAgICAgICAgbGF0aW4xQ2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJpdGUpKTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbnZlcnRzIGEgTGF0aW4xIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF0aW4xU3RyIFRoZSBMYXRpbjEgc3RyaW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5MYXRpbjEucGFyc2UobGF0aW4xU3RyaW5nKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGxhdGluMVN0cikgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgbGF0aW4xU3RyTGVuZ3RoID0gbGF0aW4xU3RyLmxlbmd0aDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQKICAgICAgICAJICAgICAgICAgICAgdmFyIHdvcmRzID0gW107CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF0aW4xU3RyTGVuZ3RoOyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDJdIHw9IChsYXRpbjFTdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYpIDw8ICgyNCAtIChpICUgNCkgKiA4KTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbGF0aW4xU3RyTGVuZ3RoKTsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9OwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogVVRGLTggZW5jb2Rpbmcgc3RyYXRlZ3kuCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmOCA9IHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtOCBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVRGLTggc3RyaW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgdXRmOFN0cmluZyA9IENyeXB0b0pTLmVuYy5VdGY4LnN0cmluZ2lmeSh3b3JkQXJyYXkpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkgewogICAgICAgIAkgICAgICAgICAgICB0cnkgewogICAgICAgIAkgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpKSk7CiAgICAgICAgCSAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFVURi04IGRhdGEnKTsKICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTggc3RyaW5nIHRvIGEgd29yZCBhcnJheS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGY4U3RyIFRoZSBVVEYtOCBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UodXRmOFN0cmluZyk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGY4U3RyKSB7CiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBMYXRpbjEucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHV0ZjhTdHIpKSk7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIEFic3RyYWN0IGJ1ZmZlcmVkIGJsb2NrIGFsZ29yaXRobSB0ZW1wbGF0ZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBUaGUgcHJvcGVydHkgYmxvY2tTaXplIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gYSBjb25jcmV0ZSBzdWJ0eXBlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfbWluQnVmZmVyU2l6ZSBUaGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IHNob3VsZCBiZSBrZXB0IHVucHJvY2Vzc2VkIGluIHRoZSBidWZmZXIuIERlZmF1bHQ6IDAKICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIFJlc2V0cyB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGRhdGEgYnVmZmVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0KCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXMKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBXb3JkQXJyYXkuaW5pdCgpOwogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzID0gMDsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBBZGRzIG5ldyBkYXRhIHRvIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgYnVmZmVyLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGFwcGVuZC4gU3RyaW5ncyBhcmUgY29udmVydGVkIHRvIGEgV29yZEFycmF5IHVzaW5nIFVURi04LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9hcHBlbmQoJ2RhdGEnKTsKICAgICAgICAJICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgX2FwcGVuZDogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gV29yZEFycmF5LCBlbHNlIGFzc3VtZSBXb3JkQXJyYXkgYWxyZWFkeQogICAgICAgIAkgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGRhdGEgPSBVdGY4LnBhcnNlKGRhdGEpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBBcHBlbmQKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fZGF0YS5jb25jYXQoZGF0YSk7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX25EYXRhQnl0ZXMgKz0gZGF0YS5zaWdCeXRlczsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBfZG9Qcm9jZXNzQmxvY2sob2Zmc2V0KSwgd2hpY2ggbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBhIGNvbmNyZXRlIHN1YnR5cGUuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvRmx1c2ggV2hldGhlciBhbGwgYmxvY2tzIGFuZCBwYXJ0aWFsIGJsb2NrcyBzaG91bGQgYmUgcHJvY2Vzc2VkLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcygpOwogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoISEnZmx1c2gnKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBfcHJvY2VzczogZnVuY3Rpb24gKGRvRmx1c2gpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBkYXRhU2lnQnl0ZXMgPSBkYXRhLnNpZ0J5dGVzOwogICAgICAgIAkgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gdGhpcy5ibG9ja1NpemU7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb3VudCBibG9ja3MgcmVhZHkKICAgICAgICAJICAgICAgICAgICAgdmFyIG5CbG9ja3NSZWFkeSA9IGRhdGFTaWdCeXRlcyAvIGJsb2NrU2l6ZUJ5dGVzOwogICAgICAgIAkgICAgICAgICAgICBpZiAoZG9GbHVzaCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gUm91bmQgdXAgdG8gaW5jbHVkZSBwYXJ0aWFsIGJsb2NrcwogICAgICAgIAkgICAgICAgICAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5jZWlsKG5CbG9ja3NSZWFkeSk7CiAgICAgICAgCSAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBSb3VuZCBkb3duIHRvIGluY2x1ZGUgb25seSBmdWxsIGJsb2NrcywKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIGxlc3MgdGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBtdXN0IHJlbWFpbiBpbiB0aGUgYnVmZmVyCiAgICAgICAgCSAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLm1heCgobkJsb2Nrc1JlYWR5IHwgMCkgLSB0aGlzLl9taW5CdWZmZXJTaXplLCAwKTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gQ291bnQgd29yZHMgcmVhZHkKICAgICAgICAJICAgICAgICAgICAgdmFyIG5Xb3Jkc1JlYWR5ID0gbkJsb2Nrc1JlYWR5ICogYmxvY2tTaXplOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ291bnQgYnl0ZXMgcmVhZHkKICAgICAgICAJICAgICAgICAgICAgdmFyIG5CeXRlc1JlYWR5ID0gTWF0aC5taW4obldvcmRzUmVhZHkgKiA0LCBkYXRhU2lnQnl0ZXMpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gUHJvY2VzcyBibG9ja3MKICAgICAgICAJICAgICAgICAgICAgaWYgKG5Xb3Jkc1JlYWR5KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBuV29yZHNSZWFkeTsgb2Zmc2V0ICs9IGJsb2NrU2l6ZSkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtYWxnb3JpdGhtIGxvZ2ljCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9Qcm9jZXNzQmxvY2soZGF0YVdvcmRzLCBvZmZzZXQpOwogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9jZXNzZWQgd29yZHMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzZWRXb3JkcyA9IGRhdGFXb3Jkcy5zcGxpY2UoMCwgbldvcmRzUmVhZHkpOwogICAgICAgIAkgICAgICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyAtPSBuQnl0ZXNSZWFkeTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gUmV0dXJuIHByb2Nlc3NlZCB3b3JkcwogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHByb2Nlc3NlZFdvcmRzLCBuQnl0ZXNSZWFkeSk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBvYmplY3QuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjbG9uZS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5jbG9uZSgpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTsKICAgICAgICAJICAgICAgICAgICAgY2xvbmUuX2RhdGEgPSB0aGlzLl9kYXRhLmNsb25lKCk7CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX21pbkJ1ZmZlclNpemU6IDAKICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQWJzdHJhY3QgaGFzaGVyIHRlbXBsYXRlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBoYXNoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDE2ICg1MTIgYml0cykKICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgaGFzaGVyLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGhhc2ggY29tcHV0YXRpb24uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBoYXNoZXIgPSBDcnlwdG9KUy5hbGdvLlNIQTI1Ni5jcmVhdGUoKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0cwogICAgICAgIAkgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzCiAgICAgICAgCSAgICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBSZXNldHMgdGhpcyBoYXNoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIGhhc2hlci5yZXNldCgpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFJlc2V0IGRhdGEgYnVmZmVyCiAgICAgICAgCSAgICAgICAgICAgIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQuY2FsbCh0aGlzKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljCiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RvUmVzZXQoKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBVcGRhdGVzIHRoaXMgaGFzaGVyIHdpdGggYSBtZXNzYWdlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge0hhc2hlcn0gVGhpcyBoYXNoZXIuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTsKICAgICAgICAJICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gQXBwZW5kCiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaGFzaAogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDaGFpbmFibGUKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLgogICAgICAgIAkgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUod29yZEFycmF5KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGUKICAgICAgICAJICAgICAgICAgICAgaWYgKG1lc3NhZ2VVcGRhdGUpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWMKICAgICAgICAJICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9kb0ZpbmFsaXplKCk7CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gaGFzaDsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBibG9ja1NpemU6IDUxMi8zMiwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIGEgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIFNIQTI1NiA9IENyeXB0b0pTLmxpYi5IYXNoZXIuX2NyZWF0ZUhlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgX2NyZWF0ZUhlbHBlcjogZnVuY3Rpb24gKGhhc2hlcikgewogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGNmZykgewogICAgICAgIAkgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBoYXNoZXIuaW5pdChjZmcpLmZpbmFsaXplKG1lc3NhZ2UpOwogICAgICAgIAkgICAgICAgICAgICB9OwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gdXNlIGluIHRoaXMgSE1BQyBoZWxwZXIuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIHNob3J0Y3V0IGZ1bmN0aW9uLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgSG1hY1NIQTI1NiA9IENyeXB0b0pTLmxpYi5IYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIF9jcmVhdGVIbWFjSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7CiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwga2V5KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENfYWxnby5ITUFDLmluaXQoaGFzaGVyLCBrZXkpLmZpbmFsaXplKG1lc3NhZ2UpOwogICAgICAgIAkgICAgICAgICAgICB9OwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQWxnb3JpdGhtIG5hbWVzcGFjZS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIENfYWxnbyA9IEMuYWxnbyA9IHt9OwoKICAgICAgICAJICAgIHJldHVybiBDOwogICAgICAgIAl9KE1hdGgpKTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlM7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIHg2NENvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkoZnVuY3Rpb24gKHVuZGVmaW5lZCQxKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTsKICAgICAgICAJICAgIHZhciBYMzJXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiB4NjQgbmFtZXNwYWNlLgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgQ194NjQgPSBDLng2NCA9IHt9OwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQSA2NC1iaXQgd29yZC4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkID0gQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCA2NC1iaXQgd29yZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIDMyIGJpdHMuCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IDMyIGJpdHMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciB4NjRXb3JkID0gQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChoaWdoLCBsb3cpIHsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5oaWdoID0gaGlnaDsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5sb3cgPSBsb3c7CiAgICAgICAgCSAgICAgICAgfQoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBCaXR3aXNlIE5PVHMgdGhpcyB3b3JkLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIG5lZ2F0aW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgbmVnYXRlZCA9IHg2NFdvcmQubm90KCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgLy8gbm90OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIHZhciBoaWdoID0gfnRoaXMuaGlnaDsKICAgICAgICAJICAgICAgICAgICAgLy8gdmFyIGxvdyA9IH50aGlzLmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwogICAgICAgIAkgICAgICAgIC8vIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEJpdHdpc2UgQU5EcyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIEFORCB3aXRoIHRoaXMgd29yZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBBTkRpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBhbmRlZCA9IHg2NFdvcmQuYW5kKGFub3RoZXJYNjRXb3JkKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICAvLyBhbmQ6IGZ1bmN0aW9uICh3b3JkKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoICYgd29yZC5oaWdoOwogICAgICAgIAkgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgJiB3b3JkLmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwogICAgICAgIAkgICAgICAgIC8vIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEJpdHdpc2UgT1JzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gT1Igd2l0aCB0aGlzIHdvcmQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgT1JpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBvcmVkID0geDY0V29yZC5vcihhbm90aGVyWDY0V29yZCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgLy8gb3I6IGZ1bmN0aW9uICh3b3JkKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoIHwgd29yZC5oaWdoOwogICAgICAgIAkgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgfCB3b3JkLmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwogICAgICAgIAkgICAgICAgIC8vIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEJpdHdpc2UgWE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIFhPUiB3aXRoIHRoaXMgd29yZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBYT1JpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciB4b3JlZCA9IHg2NFdvcmQueG9yKGFub3RoZXJYNjRXb3JkKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICAvLyB4b3I6IGZ1bmN0aW9uICh3b3JkKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoIF4gd29yZC5oaWdoOwogICAgICAgIAkgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgXiB3b3JkLmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwogICAgICAgIAkgICAgICAgIC8vIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIFNoaWZ0cyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSBsZWZ0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHNoaWZ0aW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRMKDI1KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICAvLyBzaGlmdEw6IGZ1bmN0aW9uIChuKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIGlmIChuIDwgMzIpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gKHRoaXMuaGlnaCA8PCBuKSB8ICh0aGlzLmxvdyA+Pj4gKDMyIC0gbikpOwogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IDw8IG47CiAgICAgICAgCSAgICAgICAgICAgIC8vIH0gZWxzZSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMubG93IDw8IChuIC0gMzIpOwogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IDA7CiAgICAgICAgCSAgICAgICAgICAgIC8vIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwogICAgICAgIAkgICAgICAgIC8vIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIFNoaWZ0cyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSByaWdodC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byBzaGlmdC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBzaGlmdGluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHNoaWZ0ZWQgPSB4NjRXb3JkLnNoaWZ0Uig3KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICAvLyBzaGlmdFI6IGZ1bmN0aW9uIChuKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIGlmIChuIDwgMzIpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIHZhciBsb3cgPSAodGhpcy5sb3cgPj4+IG4pIHwgKHRoaXMuaGlnaCA8PCAoMzIgLSBuKSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCA+Pj4gbjsKICAgICAgICAJICAgICAgICAgICAgLy8gfSBlbHNlIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmhpZ2ggPj4+IChuIC0gMzIpOwogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAwOwogICAgICAgIAkgICAgICAgICAgICAvLyB9CgogICAgICAgIAkgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTsKICAgICAgICAJICAgICAgICAvLyB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBSb3RhdGVzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHJvdGF0aW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90TCgyNSk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgLy8gcm90TDogZnVuY3Rpb24gKG4pIHsKICAgICAgICAJICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRMKG4pLm9yKHRoaXMuc2hpZnRSKDY0IC0gbikpOwogICAgICAgIAkgICAgICAgIC8vIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIFJvdGF0ZXMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgcmlnaHQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHJvdGF0aW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90Uig3KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICAvLyByb3RSOiBmdW5jdGlvbiAobikgewogICAgICAgIAkgICAgICAgICAgICAvLyByZXR1cm4gdGhpcy5zaGlmdFIobikub3IodGhpcy5zaGlmdEwoNjQgLSBuKSk7CiAgICAgICAgCSAgICAgICAgLy8gfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQWRkcyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIGFkZCB3aXRoIHRoaXMgd29yZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBhZGRpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBhZGRlZCA9IHg2NFdvcmQuYWRkKGFub3RoZXJYNjRXb3JkKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICAvLyBhZGQ6IGZ1bmN0aW9uICh3b3JkKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIHZhciBsb3cgPSAodGhpcy5sb3cgKyB3b3JkLmxvdykgfCAwOwogICAgICAgIAkgICAgICAgICAgICAvLyB2YXIgY2FycnkgPSAobG93ID4+PiAwKSA8ICh0aGlzLmxvdyA+Pj4gMCkgPyAxIDogMDsKICAgICAgICAJICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoICsgd29yZC5oaWdoICsgY2FycnkpIHwgMDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwogICAgICAgIAkgICAgICAgIC8vIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQW4gYXJyYXkgb2YgNjQtYml0IHdvcmRzLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IHdvcmRzIFRoZSBhcnJheSBvZiBDcnlwdG9KUy54NjQuV29yZCBvYmplY3RzLgogICAgICAgIAkgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiBDcnlwdG9KUy54NjQuV29yZCBvYmplY3RzLgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaWdCeXRlcyAoT3B0aW9uYWwpIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhlIHdvcmRzLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoKTsKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoWwogICAgICAgIAkgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpLAogICAgICAgIAkgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MTgxOTFhMWIsIDB4MWMxZDFlMWYpCiAgICAgICAgCSAgICAgICAgICogICAgIF0pOwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZShbCiAgICAgICAgCSAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyksCiAgICAgICAgCSAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgxODE5MWExYiwgMHgxYzFkMWUxZikKICAgICAgICAJICAgICAgICAgKiAgICAgXSwgMTApOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGluaXQ6IGZ1bmN0aW9uICh3b3Jkcywgc2lnQnl0ZXMpIHsKICAgICAgICAJICAgICAgICAgICAgd29yZHMgPSB0aGlzLndvcmRzID0gd29yZHMgfHwgW107CgogICAgICAgIAkgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkJDEpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlczsKICAgICAgICAJICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA4OwogICAgICAgIAkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ29udmVydHMgdGhpcyA2NC1iaXQgd29yZCBhcnJheSB0byBhIDMyLWJpdCB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7Q3J5cHRvSlMubGliLldvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5J3MgZGF0YSBhcyBhIDMyLWJpdCB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgeDMyV29yZEFycmF5ID0geDY0V29yZEFycmF5LnRvWDMyKCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgdG9YMzI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciB4NjRXb3JkcyA9IHRoaXMud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciB4NjRXb3Jkc0xlbmd0aCA9IHg2NFdvcmRzLmxlbmd0aDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQKICAgICAgICAJICAgICAgICAgICAgdmFyIHgzMldvcmRzID0gW107CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeDY0V29yZHNMZW5ndGg7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHg2NFdvcmQgPSB4NjRXb3Jkc1tpXTsKICAgICAgICAJICAgICAgICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5oaWdoKTsKICAgICAgICAJICAgICAgICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5sb3cpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gWDMyV29yZEFycmF5LmNyZWF0ZSh4MzJXb3JkcywgdGhpcy5zaWdCeXRlcyk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7WDY0V29yZEFycmF5fSBUaGUgY2xvbmUuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBjbG9uZSA9IHg2NFdvcmRBcnJheS5jbG9uZSgpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENsb25lICJ3b3JkcyIgYXJyYXkKICAgICAgICAJICAgICAgICAgICAgdmFyIHdvcmRzID0gY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ2xvbmUgZWFjaCBYNjRXb3JkIG9iamVjdAogICAgICAgIAkgICAgICAgICAgICB2YXIgd29yZHNMZW5ndGggPSB3b3Jkcy5sZW5ndGg7CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHNMZW5ndGg7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgd29yZHNbaV0gPSB3b3Jkc1tpXS5jbG9uZSgpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CiAgICAgICAgCX0oKSk7CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTOwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBsaWJUeXBlZGFycmF5cyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAvLyBDaGVjayBpZiB0eXBlZCBhcnJheXMgYXJlIHN1cHBvcnRlZAogICAgICAgIAkgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAnZnVuY3Rpb24nKSB7CiAgICAgICAgCSAgICAgICAgcmV0dXJuOwogICAgICAgIAkgICAgfQoKICAgICAgICAJICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgdmFyIEMgPSBDcnlwdG9KUzsKICAgICAgICAJICAgIHZhciBDX2xpYiA9IEMubGliOwogICAgICAgIAkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKCiAgICAgICAgCSAgICAvLyBSZWZlcmVuY2Ugb3JpZ2luYWwgaW5pdAogICAgICAgIAkgICAgdmFyIHN1cGVySW5pdCA9IFdvcmRBcnJheS5pbml0OwoKICAgICAgICAJICAgIC8vIEF1Z21lbnQgV29yZEFycmF5LmluaXQgdG8gaGFuZGxlIHR5cGVkIGFycmF5cwogICAgICAgIAkgICAgdmFyIHN1YkluaXQgPSBXb3JkQXJyYXkuaW5pdCA9IGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7CiAgICAgICAgCSAgICAgICAgLy8gQ29udmVydCBidWZmZXJzIHRvIHVpbnQ4CiAgICAgICAgCSAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewogICAgICAgIAkgICAgICAgICAgICB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodHlwZWRBcnJheSk7CiAgICAgICAgCSAgICAgICAgfQoKICAgICAgICAJICAgICAgICAvLyBDb252ZXJ0IG90aGVyIGFycmF5IHZpZXdzIHRvIHVpbnQ4CiAgICAgICAgCSAgICAgICAgaWYgKAogICAgICAgIAkgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5IHx8CiAgICAgICAgCSAgICAgICAgICAgICh0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICJ1bmRlZmluZWQiICYmIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSkgfHwKICAgICAgICAJICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgfHwKICAgICAgICAJICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5IHx8CiAgICAgICAgCSAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5IHx8CiAgICAgICAgCSAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fAogICAgICAgIAkgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8CiAgICAgICAgCSAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkKICAgICAgICAJICAgICAgICApIHsKICAgICAgICAJICAgICAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkuYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkuYnl0ZUxlbmd0aCk7CiAgICAgICAgCSAgICAgICAgfQoKICAgICAgICAJICAgICAgICAvLyBIYW5kbGUgVWludDhBcnJheQogICAgICAgIAkgICAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgdHlwZWRBcnJheUJ5dGVMZW5ndGggPSB0eXBlZEFycmF5LmJ5dGVMZW5ndGg7CgogICAgICAgIAkgICAgICAgICAgICAvLyBFeHRyYWN0IGJ5dGVzCiAgICAgICAgCSAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkQXJyYXlCeXRlTGVuZ3RoOyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDJdIHw9IHR5cGVkQXJyYXlbaV0gPDwgKDI0IC0gKGkgJSA0KSAqIDgpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoaXMgd29yZCBhcnJheQogICAgICAgIAkgICAgICAgICAgICBzdXBlckluaXQuY2FsbCh0aGlzLCB3b3JkcywgdHlwZWRBcnJheUJ5dGVMZW5ndGgpOwogICAgICAgIAkgICAgICAgIH0gZWxzZSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIEVsc2UgY2FsbCBub3JtYWwgaW5pdAogICAgICAgIAkgICAgICAgICAgICBzdXBlckluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9OwoKICAgICAgICAJICAgIHN1YkluaXQucHJvdG90eXBlID0gV29yZEFycmF5OwogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5saWIuV29yZEFycmF5OwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBlbmNVdGYxNiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CiAgICAgICAgCSAgICB2YXIgQ19lbmMgPSBDLmVuYzsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFVURi0xNiBCRSBlbmNvZGluZyBzdHJhdGVneS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFV0ZjE2QkUgPSBDX2VuYy5VdGYxNiA9IENfZW5jLlV0ZjE2QkUgPSB7CiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTE2IEJFIHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgQkUgc3RyaW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgdXRmMTZTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmMTYuc3RyaW5naWZ5KHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQKICAgICAgICAJICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTsKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmOwogICAgICAgIAkgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiB1dGYxNkNoYXJzLmpvaW4oJycpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTE2IEJFIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmMTZTdHIgVGhlIFVURi0xNiBCRSBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjE2LnBhcnNlKHV0ZjE2U3RyaW5nKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjE2U3RyKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CiAgICAgICAgCSAgICAgICAgICAgIHZhciB1dGYxNlN0ckxlbmd0aCA9IHV0ZjE2U3RyLmxlbmd0aDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQKICAgICAgICAJICAgICAgICAgICAgdmFyIHdvcmRzID0gW107CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXRmMTZTdHJMZW5ndGg7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gdXRmMTZTdHIuY2hhckNvZGVBdChpKSA8PCAoMTYgLSAoaSAlIDIpICogMTYpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgdXRmMTZTdHJMZW5ndGggKiAyKTsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9OwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogVVRGLTE2IExFIGVuY29kaW5nIHN0cmF0ZWd5LgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDX2VuYy5VdGYxNkxFID0gewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi0xNiBMRSBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVRGLTE2IExFIHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHV0ZjE2U3RyID0gQ3J5cHRvSlMuZW5jLlV0ZjE2TEUuc3RyaW5naWZ5KHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQKICAgICAgICAJICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTsKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gc3dhcEVuZGlhbigod29yZHNbaSA+Pj4gMl0gPj4+ICgxNiAtIChpICUgNCkgKiA4KSkgJiAweGZmZmYpOwogICAgICAgIAkgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiB1dGYxNkNoYXJzLmpvaW4oJycpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTE2IExFIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmMTZTdHIgVGhlIFVURi0xNiBMRSBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjE2TEUucGFyc2UodXRmMTZTdHIpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmMTZTdHIpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgdmFyIHV0ZjE2U3RyTGVuZ3RoID0gdXRmMTZTdHIubGVuZ3RoOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29udmVydAogICAgICAgIAkgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTsKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGYxNlN0ckxlbmd0aDsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAxXSB8PSBzd2FwRW5kaWFuKHV0ZjE2U3RyLmNoYXJDb2RlQXQoaSkgPDwgKDE2IC0gKGkgJSAyKSAqIDE2KSk7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBXb3JkQXJyYXkuY3JlYXRlKHdvcmRzLCB1dGYxNlN0ckxlbmd0aCAqIDIpOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH07CgogICAgICAgIAkgICAgZnVuY3Rpb24gc3dhcEVuZGlhbih3b3JkKSB7CiAgICAgICAgCSAgICAgICAgcmV0dXJuICgod29yZCA8PCA4KSAmIDB4ZmYwMGZmMDApIHwgKCh3b3JkID4+PiA4KSAmIDB4MDBmZjAwZmYpOwogICAgICAgIAkgICAgfQogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5lbmMuVXRmMTY7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIGVuY0Jhc2U2NCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CiAgICAgICAgCSAgICB2YXIgQ19lbmMgPSBDLmVuYzsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIEJhc2U2NCBlbmNvZGluZyBzdHJhdGVneS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIEJhc2U2NCA9IENfZW5jLkJhc2U2NCA9IHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBCYXNlNjQgc3RyaW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEJhc2U2NCBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBiYXNlNjRTdHJpbmcgPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeSh3b3JkQXJyYXkpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzOwogICAgICAgIAkgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXA7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0cwogICAgICAgIAkgICAgICAgICAgICB3b3JkQXJyYXkuY2xhbXAoKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQKICAgICAgICAJICAgICAgICAgICAgdmFyIGJhc2U2NENoYXJzID0gW107CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMykgewogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGJ5dGUxID0gKHdvcmRzW2kgPj4+IDJdICAgICAgID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICAgICAgICYgMHhmZjsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmY7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgYnl0ZTMgPSAod29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAweGZmOwoKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0cmlwbGV0ID0gKGJ5dGUxIDw8IDE2KSB8IChieXRlMiA8PCA4KSB8IGJ5dGUzOwoKICAgICAgICAJICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyAoaiA8IDQpICYmIChpICsgaiAqIDAuNzUgPCBzaWdCeXRlcyk7IGorKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGJhc2U2NENoYXJzLnB1c2gobWFwLmNoYXJBdCgodHJpcGxldCA+Pj4gKDYgKiAoMyAtIGopKSkgJiAweDNmKSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nCiAgICAgICAgCSAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpOwogICAgICAgIAkgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlNjRDaGFycy5sZW5ndGggJSA0KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChwYWRkaW5nQ2hhcik7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBiYXNlNjRDaGFycy5qb2luKCcnKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFN0ciBUaGUgQmFzZTY0IHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlKGJhc2U2NFN0cmluZyk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChiYXNlNjRTdHIpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBiYXNlNjRTdHJMZW5ndGggPSBiYXNlNjRTdHIubGVuZ3RoOwogICAgICAgIAkgICAgICAgICAgICB2YXIgbWFwID0gdGhpcy5fbWFwOwogICAgICAgIAkgICAgICAgICAgICB2YXIgcmV2ZXJzZU1hcCA9IHRoaXMuX3JldmVyc2VNYXA7CgogICAgICAgIAkgICAgICAgICAgICBpZiAoIXJldmVyc2VNYXApIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcCA9IFtdOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWFwLmxlbmd0aDsgaisrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VNYXBbbWFwLmNoYXJDb2RlQXQoaildID0gajsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIElnbm9yZSBwYWRkaW5nCiAgICAgICAgCSAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpOwogICAgICAgIAkgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nSW5kZXggPSBiYXNlNjRTdHIuaW5kZXhPZihwYWRkaW5nQ2hhcik7CiAgICAgICAgCSAgICAgICAgICAgICAgICBpZiAocGFkZGluZ0luZGV4ICE9PSAtMSkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGJhc2U2NFN0ckxlbmd0aCA9IHBhZGRpbmdJbmRleDsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29udmVydAogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gcGFyc2VMb29wKGJhc2U2NFN0ciwgYmFzZTY0U3RyTGVuZ3RoLCByZXZlcnNlTWFwKTsKCiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX21hcDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JwogICAgICAgIAkgICAgfTsKCiAgICAgICAgCSAgICBmdW5jdGlvbiBwYXJzZUxvb3AoYmFzZTY0U3RyLCBiYXNlNjRTdHJMZW5ndGgsIHJldmVyc2VNYXApIHsKICAgICAgICAJICAgICAgdmFyIHdvcmRzID0gW107CiAgICAgICAgCSAgICAgIHZhciBuQnl0ZXMgPSAwOwogICAgICAgIAkgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhc2U2NFN0ckxlbmd0aDsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICBpZiAoaSAlIDQpIHsKICAgICAgICAJICAgICAgICAgICAgICB2YXIgYml0czEgPSByZXZlcnNlTWFwW2Jhc2U2NFN0ci5jaGFyQ29kZUF0KGkgLSAxKV0gPDwgKChpICUgNCkgKiAyKTsKICAgICAgICAJICAgICAgICAgICAgICB2YXIgYml0czIgPSByZXZlcnNlTWFwW2Jhc2U2NFN0ci5jaGFyQ29kZUF0KGkpXSA+Pj4gKDYgLSAoaSAlIDQpICogMik7CiAgICAgICAgCSAgICAgICAgICAgICAgd29yZHNbbkJ5dGVzID4+PiAyXSB8PSAoYml0czEgfCBiaXRzMikgPDwgKDI0IC0gKG5CeXRlcyAlIDQpICogOCk7CiAgICAgICAgCSAgICAgICAgICAgICAgbkJ5dGVzKys7CiAgICAgICAgCSAgICAgICAgICB9CiAgICAgICAgCSAgICAgIH0KICAgICAgICAJICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIG5CeXRlcyk7CiAgICAgICAgCSAgICB9CiAgICAgICAgCX0oKSk7CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLmVuYy5CYXNlNjQ7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIG1kNSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoTWF0aCkgewogICAgICAgIAkgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICB2YXIgQyA9IENyeXB0b0pTOwogICAgICAgIAkgICAgdmFyIENfbGliID0gQy5saWI7CiAgICAgICAgCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwogICAgICAgIAkgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjsKICAgICAgICAJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CgogICAgICAgIAkgICAgLy8gQ29uc3RhbnRzIHRhYmxlCiAgICAgICAgCSAgICB2YXIgVCA9IFtdOwoKICAgICAgICAJICAgIC8vIENvbXB1dGUgY29uc3RhbnRzCiAgICAgICAgCSAgICAoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICBUW2ldID0gKE1hdGguYWJzKE1hdGguc2luKGkgKyAxKSkgKiAweDEwMDAwMDAwMCkgfCAwOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0oKSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBNRDUgaGFzaCBhbGdvcml0aG0uCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBNRDUgPSBDX2FsZ28uTUQ1ID0gSGFzaGVyLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChbCiAgICAgICAgCSAgICAgICAgICAgICAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LAogICAgICAgIAkgICAgICAgICAgICAgICAgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NgogICAgICAgIAkgICAgICAgICAgICBdKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldOwoKICAgICAgICAJICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKAogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgOCkgIHwgKE1fb2Zmc2V0X2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApCiAgICAgICAgCSAgICAgICAgICAgICAgICApOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzOwoKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzAgID0gTVtvZmZzZXQgKyAwXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEgID0gTVtvZmZzZXQgKyAxXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzIgID0gTVtvZmZzZXQgKyAyXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzMgID0gTVtvZmZzZXQgKyAzXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzQgID0gTVtvZmZzZXQgKyA0XTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzUgID0gTVtvZmZzZXQgKyA1XTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzYgID0gTVtvZmZzZXQgKyA2XTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzcgID0gTVtvZmZzZXQgKyA3XTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzggID0gTVtvZmZzZXQgKyA4XTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzkgID0gTVtvZmZzZXQgKyA5XTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEwID0gTVtvZmZzZXQgKyAxMF07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xMSA9IE1bb2Zmc2V0ICsgMTFdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTIgPSBNW29mZnNldCArIDEyXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEzID0gTVtvZmZzZXQgKyAxM107CiAgICAgICAgCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xNCA9IE1bb2Zmc2V0ICsgMTRdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTUgPSBNW29mZnNldCArIDE1XTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFsYmVzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBhID0gSFswXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGIgPSBIWzFdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgYyA9IEhbMl07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBkID0gSFszXTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uCiAgICAgICAgCSAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNywgIFRbMF0pOwogICAgICAgIAkgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMSwgIDEyLCBUWzFdKTsKICAgICAgICAJICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzIsICAxNywgVFsyXSk7CiAgICAgICAgCSAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8zLCAgMjIsIFRbM10pOwogICAgICAgIAkgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfNCwgIDcsICBUWzRdKTsKICAgICAgICAJICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzUsICAxMiwgVFs1XSk7CiAgICAgICAgCSAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF82LCAgMTcsIFRbNl0pOwogICAgICAgIAkgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfNywgIDIyLCBUWzddKTsKICAgICAgICAJICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzgsICA3LCAgVFs4XSk7CiAgICAgICAgCSAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF85LCAgMTIsIFRbOV0pOwogICAgICAgIAkgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE3LCBUWzEwXSk7CiAgICAgICAgCSAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xMSwgMjIsIFRbMTFdKTsKICAgICAgICAJICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA3LCAgVFsxMl0pOwogICAgICAgIAkgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTMsIDEyLCBUWzEzXSk7CiAgICAgICAgCSAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTcsIFRbMTRdKTsKICAgICAgICAJICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE1LCAyMiwgVFsxNV0pOwoKICAgICAgICAJICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA1LCAgVFsxNl0pOwogICAgICAgIAkgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfNiwgIDksICBUWzE3XSk7CiAgICAgICAgCSAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTQsIFRbMThdKTsKICAgICAgICAJICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzAsICAyMCwgVFsxOV0pOwogICAgICAgIAkgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfNSwgIDUsICBUWzIwXSk7CiAgICAgICAgCSAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8xMCwgOSwgIFRbMjFdKTsKICAgICAgICAJICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNCwgVFsyMl0pOwogICAgICAgIAkgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfNCwgIDIwLCBUWzIzXSk7CiAgICAgICAgCSAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF85LCAgNSwgIFRbMjRdKTsKICAgICAgICAJICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE0LCA5LCAgVFsyNV0pOwogICAgICAgIAkgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE0LCBUWzI2XSk7CiAgICAgICAgCSAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF84LCAgMjAsIFRbMjddKTsKICAgICAgICAJICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA1LCAgVFsyOF0pOwogICAgICAgIAkgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMiwgIDksICBUWzI5XSk7CiAgICAgICAgCSAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF83LCAgMTQsIFRbMzBdKTsKICAgICAgICAJICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEyLCAyMCwgVFszMV0pOwoKICAgICAgICAJICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA0LCAgVFszMl0pOwogICAgICAgIAkgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfOCwgIDExLCBUWzMzXSk7CiAgICAgICAgCSAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTYsIFRbMzRdKTsKICAgICAgICAJICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE0LCAyMywgVFszNV0pOwogICAgICAgIAkgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDQsICBUWzM2XSk7CiAgICAgICAgCSAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAgMTEsIFRbMzddKTsKICAgICAgICAJICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNiwgVFszOF0pOwogICAgICAgIAkgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTAsIDIzLCBUWzM5XSk7CiAgICAgICAgCSAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNCwgIFRbNDBdKTsKICAgICAgICAJICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzAsICAxMSwgVFs0MV0pOwogICAgICAgIAkgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE2LCBUWzQyXSk7CiAgICAgICAgCSAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF82LCAgMjMsIFRbNDNdKTsKICAgICAgICAJICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA0LCAgVFs0NF0pOwogICAgICAgIAkgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTIsIDExLCBUWzQ1XSk7CiAgICAgICAgCSAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTYsIFRbNDZdKTsKICAgICAgICAJICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzIsICAyMywgVFs0N10pOwoKICAgICAgICAJICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzAsICA2LCAgVFs0OF0pOwogICAgICAgIAkgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfNywgIDEwLCBUWzQ5XSk7CiAgICAgICAgCSAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTUsIFRbNTBdKTsKICAgICAgICAJICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzUsICAyMSwgVFs1MV0pOwogICAgICAgIAkgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDYsICBUWzUyXSk7CiAgICAgICAgCSAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8zLCAgMTAsIFRbNTNdKTsKICAgICAgICAJICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNSwgVFs1NF0pOwogICAgICAgIAkgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMSwgIDIxLCBUWzU1XSk7CiAgICAgICAgCSAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNiwgIFRbNTZdKTsKICAgICAgICAJICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE1LCAxMCwgVFs1N10pOwogICAgICAgIAkgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE1LCBUWzU4XSk7CiAgICAgICAgCSAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF8xMywgMjEsIFRbNTldKTsKICAgICAgICAJICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA2LCAgVFs2MF0pOwogICAgICAgIAkgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTEsIDEwLCBUWzYxXSk7CiAgICAgICAgCSAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTUsIFRbNjJdKTsKICAgICAgICAJICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzksICAyMSwgVFs2M10pOwoKICAgICAgICAJICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWUKICAgICAgICAJICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwOwogICAgICAgIAkgICAgICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDsKICAgICAgICAJICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzOwoKICAgICAgICAJICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODsKICAgICAgICAJICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4OwoKICAgICAgICAJICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmcKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7CgogICAgICAgIAkgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEggPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBuQml0c1RvdGFsTCA9IG5CaXRzVG90YWw7CiAgICAgICAgCSAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gKAogICAgICAgIAkgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgOCkgIHwgKG5CaXRzVG90YWxIID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfAogICAgICAgIAkgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgMjQpIHwgKG5CaXRzVG90YWxIID4+PiA4KSkgICYgMHhmZjAwZmYwMCkKICAgICAgICAJICAgICAgICAgICAgKTsKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoCiAgICAgICAgCSAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSAgfCAobkJpdHNUb3RhbEwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CiAgICAgICAgCSAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCAyNCkgfCAobkJpdHNUb3RhbEwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQogICAgICAgIAkgICAgICAgICAgICApOwoKICAgICAgICAJICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IChkYXRhV29yZHMubGVuZ3RoICsgMSkgKiA0OwoKICAgICAgICAJICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3MKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaDsKICAgICAgICAJICAgICAgICAgICAgdmFyIEggPSBoYXNoLndvcmRzOwoKICAgICAgICAJICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgSF9pID0gSFtpXTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2gKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGhhc2g7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7CiAgICAgICAgCSAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpOwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIGZ1bmN0aW9uIEZGKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHsKICAgICAgICAJICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIHggKyB0OwogICAgICAgIAkgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7CiAgICAgICAgCSAgICB9CgogICAgICAgIAkgICAgZnVuY3Rpb24gR0coYSwgYiwgYywgZCwgeCwgcywgdCkgewogICAgICAgIAkgICAgICAgIHZhciBuID0gYSArICgoYiAmIGQpIHwgKGMgJiB+ZCkpICsgeCArIHQ7CiAgICAgICAgCSAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjsKICAgICAgICAJICAgIH0KCiAgICAgICAgCSAgICBmdW5jdGlvbiBISChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7CiAgICAgICAgCSAgICAgICAgdmFyIG4gPSBhICsgKGIgXiBjIF4gZCkgKyB4ICsgdDsKICAgICAgICAJICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiOwogICAgICAgIAkgICAgfQoKICAgICAgICAJICAgIGZ1bmN0aW9uIElJKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHsKICAgICAgICAJICAgICAgICB2YXIgbiA9IGEgKyAoYyBeIChiIHwgfmQpKSArIHggKyB0OwogICAgICAgIAkgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7CiAgICAgICAgCSAgICB9CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSgnbWVzc2FnZScpOwogICAgICAgIAkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuTUQ1KHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuTUQ1ID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoTUQ1KTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY01ENShtZXNzYWdlLCBrZXkpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLkhtYWNNRDUgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoTUQ1KTsKICAgICAgICAJfShNYXRoKSk7CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLk1ENTsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgc2hhMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CiAgICAgICAgCSAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyOwogICAgICAgIAkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKCiAgICAgICAgCSAgICAvLyBSZXVzYWJsZSBvYmplY3QKICAgICAgICAJICAgIHZhciBXID0gW107CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTSEEtMSBoYXNoIGFsZ29yaXRobS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFNIQTEgPSBDX2FsZ28uU0hBMSA9IEhhc2hlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoWwogICAgICAgIAkgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwKICAgICAgICAJICAgICAgICAgICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsCiAgICAgICAgCSAgICAgICAgICAgICAgICAweGMzZDJlMWYwCiAgICAgICAgCSAgICAgICAgICAgIF0pOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7CgogICAgICAgIAkgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlcwogICAgICAgIAkgICAgICAgICAgICB2YXIgYSA9IEhbMF07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBiID0gSFsxXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGMgPSBIWzJdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgZCA9IEhbM107CiAgICAgICAgCSAgICAgICAgICAgIHZhciBlID0gSFs0XTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uCiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgaWYgKGkgPCAxNikgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBNW29mZnNldCArIGldIHwgMDsKICAgICAgICAJICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIFdbaV0gPSAobiA8PCAxKSB8IChuID4+PiAzMSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGUgKyBXW2ldOwogICAgICAgIAkgICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHQgKz0gKChiICYgYykgfCAofmIgJiBkKSkgKyAweDVhODI3OTk5OwogICAgICAgIAkgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgNDApIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB0ICs9IChiIF4gYyBeIGQpICsgMHg2ZWQ5ZWJhMTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IDYwKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdCArPSAoKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKSAtIDB4NzBlNDQzMjQ7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2UgLyogaWYgKGkgPCA4MCkgKi8gewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgLSAweDM1OWQzZTJhOwogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIGUgPSBkOwogICAgICAgIAkgICAgICAgICAgICAgICAgZCA9IGM7CiAgICAgICAgCSAgICAgICAgICAgICAgICBjID0gKGIgPDwgMzApIHwgKGIgPj4+IDIpOwogICAgICAgIAkgICAgICAgICAgICAgICAgYiA9IGE7CiAgICAgICAgCSAgICAgICAgICAgICAgICBhID0gdDsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWUKICAgICAgICAJICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwOwogICAgICAgIAkgICAgICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDsKICAgICAgICAJICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwOwogICAgICAgIAkgICAgICAgICAgICBIWzRdID0gKEhbNF0gKyBlKSB8IDA7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7CgogICAgICAgIAkgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4OwogICAgICAgIAkgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7CgogICAgICAgIAkgICAgICAgICAgICAvLyBBZGQgcGFkZGluZwogICAgICAgIAkgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTsKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7CiAgICAgICAgCSAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gbkJpdHNUb3RhbDsKICAgICAgICAJICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0OwoKICAgICAgICAJICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3MKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2gKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7CiAgICAgICAgCSAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpOwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKCdtZXNzYWdlJyk7CiAgICAgICAgCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuU0hBMSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTEpOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAgICAgIAkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMShtZXNzYWdlLCBrZXkpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLkhtYWNTSEExID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTEpOwogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5TSEExOwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBzaGEyNTYgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkoZnVuY3Rpb24gKE1hdGgpIHsKICAgICAgICAJICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgdmFyIEMgPSBDcnlwdG9KUzsKICAgICAgICAJICAgIHZhciBDX2xpYiA9IEMubGliOwogICAgICAgIAkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKICAgICAgICAJICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7CiAgICAgICAgCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKICAgICAgICAJICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCByb3VuZCBjb25zdGFudHMgdGFibGVzCiAgICAgICAgCSAgICB2YXIgSCA9IFtdOwogICAgICAgIAkgICAgdmFyIEsgPSBbXTsKCiAgICAgICAgCSAgICAvLyBDb21wdXRlIGNvbnN0YW50cwogICAgICAgIAkgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICBmdW5jdGlvbiBpc1ByaW1lKG4pIHsKICAgICAgICAJICAgICAgICAgICAgdmFyIHNxcnROID0gTWF0aC5zcXJ0KG4pOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBmYWN0b3IgPSAyOyBmYWN0b3IgPD0gc3FydE47IGZhY3RvcisrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBpZiAoIShuICUgZmFjdG9yKSkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgCSAgICAgICAgfQoKICAgICAgICAJICAgICAgICBmdW5jdGlvbiBnZXRGcmFjdGlvbmFsQml0cyhuKSB7CiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiAoKG4gLSAobiB8IDApKSAqIDB4MTAwMDAwMDAwKSB8IDA7CiAgICAgICAgCSAgICAgICAgfQoKICAgICAgICAJICAgICAgICB2YXIgbiA9IDI7CiAgICAgICAgCSAgICAgICAgdmFyIG5QcmltZSA9IDA7CiAgICAgICAgCSAgICAgICAgd2hpbGUgKG5QcmltZSA8IDY0KSB7CiAgICAgICAgCSAgICAgICAgICAgIGlmIChpc1ByaW1lKG4pKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBpZiAoblByaW1lIDwgOCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIEhbblByaW1lXSA9IGdldEZyYWN0aW9uYWxCaXRzKE1hdGgucG93KG4sIDEgLyAyKSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgICAgICBLW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMykpOwoKICAgICAgICAJICAgICAgICAgICAgICAgIG5QcmltZSsrOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICBuKys7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSgpKTsKCiAgICAgICAgCSAgICAvLyBSZXVzYWJsZSBvYmplY3QKICAgICAgICAJICAgIHZhciBXID0gW107CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTSEEtMjU2IGhhc2ggYWxnb3JpdGhtLgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgU0hBMjU2ID0gQ19hbGdvLlNIQTI1NiA9IEhhc2hlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoSC5zbGljZSgwKSk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CiAgICAgICAgCSAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBhID0gSFswXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGIgPSBIWzFdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgYyA9IEhbMl07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBkID0gSFszXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGUgPSBIWzRdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgZiA9IEhbNV07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBnID0gSFs2XTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGggPSBIWzddOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29tcHV0YXRpb24KICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBpZiAoaSA8IDE2KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgV1tpXSA9IE1bb2Zmc2V0ICsgaV0gfCAwOwogICAgICAgIAkgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweCA9IFdbaSAtIDE1XTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwICA9ICgoZ2FtbWEweCA8PCAyNSkgfCAoZ2FtbWEweCA+Pj4gNykpICBeCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMHggPDwgMTQpIHwgKGdhbW1hMHggPj4+IDE4KSkgXgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnYW1tYTB4ID4+PiAzKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggPSBXW2kgLSAyXTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExICA9ICgoZ2FtbWExeCA8PCAxNSkgfCAoZ2FtbWExeCA+Pj4gMTcpKSBeCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMXggPDwgMTMpIHwgKGdhbW1hMXggPj4+IDE5KSkgXgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnYW1tYTF4ID4+PiAxMCk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgY2ggID0gKGUgJiBmKSBeICh+ZSAmIGcpOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIG1haiA9IChhICYgYikgXiAoYSAmIGMpIF4gKGIgJiBjKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgc2lnbWExID0gKChlIDw8IDI2KSB8IChlID4+PiA2KSkgXiAoKGUgPDwgMjEpIHwgKGUgPj4+IDExKSkgXiAoKGUgPDwgNykgIHwgKGUgPj4+IDI1KSk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tpXSArIFdbaV07CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgdDIgPSBzaWdtYTAgKyBtYWo7CgogICAgICAgIAkgICAgICAgICAgICAgICAgaCA9IGc7CiAgICAgICAgCSAgICAgICAgICAgICAgICBnID0gZjsKICAgICAgICAJICAgICAgICAgICAgICAgIGYgPSBlOwogICAgICAgIAkgICAgICAgICAgICAgICAgZSA9IChkICsgdDEpIHwgMDsKICAgICAgICAJICAgICAgICAgICAgICAgIGQgPSBjOwogICAgICAgIAkgICAgICAgICAgICAgICAgYyA9IGI7CiAgICAgICAgCSAgICAgICAgICAgICAgICBiID0gYTsKICAgICAgICAJICAgICAgICAgICAgICAgIGEgPSAodDEgKyB0MikgfCAwOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZQogICAgICAgIAkgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDsKICAgICAgICAJICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwOwogICAgICAgIAkgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDsKICAgICAgICAJICAgICAgICAgICAgSFs1XSA9IChIWzVdICsgZikgfCAwOwogICAgICAgIAkgICAgICAgICAgICBIWzZdID0gKEhbNl0gKyBnKSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgIEhbN10gPSAoSFs3XSArIGgpIHwgMDsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhOwogICAgICAgIAkgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkczsKCiAgICAgICAgCSAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nCiAgICAgICAgCSAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpOwogICAgICAgIAkgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTsKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsOwogICAgICAgIAkgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7CgogICAgICAgIAkgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2NrcwogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaAogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzaDsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTsKICAgICAgICAJICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTI1NignbWVzc2FnZScpOwogICAgICAgIAkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuU0hBMjU2ID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMjU2KTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTI1NihtZXNzYWdlLCBrZXkpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLkhtYWNTSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjU2KTsKICAgICAgICAJfShNYXRoKSk7CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLlNIQTI1NjsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgc2hhMjI0ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSwgc2hhMjU2KTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJKGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgdmFyIEMgPSBDcnlwdG9KUzsKICAgICAgICAJICAgIHZhciBDX2xpYiA9IEMubGliOwogICAgICAgIAkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKICAgICAgICAJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CiAgICAgICAgCSAgICB2YXIgU0hBMjU2ID0gQ19hbGdvLlNIQTI1NjsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFNIQS0yMjQgaGFzaCBhbGdvcml0aG0uCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBTSEEyMjQgPSBDX2FsZ28uU0hBMjI0ID0gU0hBMjU2LmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChbCiAgICAgICAgCSAgICAgICAgICAgICAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LAogICAgICAgIAkgICAgICAgICAgICAgICAgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNAogICAgICAgIAkgICAgICAgICAgICBdKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICB2YXIgaGFzaCA9IFNIQTI1Ni5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpOwoKICAgICAgICAJICAgICAgICAgICAgaGFzaC5zaWdCeXRlcyAtPSA0OwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGhhc2g7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTIyNCgnbWVzc2FnZScpOwogICAgICAgIAkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjI0KHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIZWxwZXIoU0hBMjI0KTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTIyNChtZXNzYWdlLCBrZXkpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLkhtYWNTSEEyMjQgPSBTSEEyNTYuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjI0KTsKICAgICAgICAJfSgpKTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMuU0hBMjI0OwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBzaGE1MTIgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCB4NjRDb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJKGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgdmFyIEMgPSBDcnlwdG9KUzsKICAgICAgICAJICAgIHZhciBDX2xpYiA9IEMubGliOwogICAgICAgIAkgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjsKICAgICAgICAJICAgIHZhciBDX3g2NCA9IEMueDY0OwogICAgICAgIAkgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkOwogICAgICAgIAkgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheTsKICAgICAgICAJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CgogICAgICAgIAkgICAgZnVuY3Rpb24gWDY0V29yZF9jcmVhdGUoKSB7CiAgICAgICAgCSAgICAgICAgcmV0dXJuIFg2NFdvcmQuY3JlYXRlLmFwcGx5KFg2NFdvcmQsIGFyZ3VtZW50cyk7CiAgICAgICAgCSAgICB9CgogICAgICAgIAkgICAgLy8gQ29uc3RhbnRzCiAgICAgICAgCSAgICB2YXIgSyA9IFsKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDQyOGEyZjk4LCAweGQ3MjhhZTIyKSwgWDY0V29yZF9jcmVhdGUoMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiksIFg2NFdvcmRfY3JlYXRlKDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgpLCBYNjRXb3JkX2NyZWF0ZSgweDU5ZjExMWYxLCAweGI2MDVkMDE5KSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDkyM2Y4MmE0LCAweGFmMTk0ZjliKSwgWDY0V29yZF9jcmVhdGUoMHhhYjFjNWVkNSwgMHhkYTZkODExOCksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhkODA3YWE5OCwgMHhhMzAzMDI0MiksIFg2NFdvcmRfY3JlYXRlKDB4MTI4MzViMDEsIDB4NDU3MDZmYmUpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMpLCBYNjRXb3JkX2NyZWF0ZSgweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyKSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDcyYmU1ZDc0LCAweGYyN2I4OTZmKSwgWDY0V29yZF9jcmVhdGUoMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5YmRjMDZhNywgMHgyNWM3MTIzNSksIFg2NFdvcmRfY3JlYXRlKDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIpLCBYNjRXb3JkX2NyZWF0ZSgweGVmYmU0Nzg2LCAweDM4NGYyNWUzKSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDBmYzE5ZGM2LCAweDhiOGNkNWI1KSwgWDY0V29yZF9jcmVhdGUoMHgyNDBjYTFjYywgMHg3N2FjOWM2NSksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSksIFg2NFdvcmRfY3JlYXRlKDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQpLCBYNjRXb3JkX2NyZWF0ZSgweDc2Zjk4OGRhLCAweDgzMTE1M2I1KSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDk4M2U1MTUyLCAweGVlNjZkZmFiKSwgWDY0V29yZF9jcmVhdGUoMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiksIFg2NFdvcmRfY3JlYXRlKDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YzZlMDBiZjMsIDB4M2RhODhmYzIpLCBYNjRXb3JkX2NyZWF0ZSgweGQ1YTc5MTQ3LCAweDkzMGFhNzI1KSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDA2Y2E2MzUxLCAweGUwMDM4MjZmKSwgWDY0V29yZF9jcmVhdGUoMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyN2I3MGE4NSwgMHg0NmQyMmZmYyksIFg2NFdvcmRfY3JlYXRlKDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQpLCBYNjRXb3JkX2NyZWF0ZSgweDUzMzgwZDEzLCAweDlkOTViM2RmKSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDY1MGE3MzU0LCAweDhiYWY2M2RlKSwgWDY0V29yZF9jcmVhdGUoMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiksIFg2NFdvcmRfY3JlYXRlKDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQpLCBYNjRXb3JkX2NyZWF0ZSgweGE4MWE2NjRiLCAweGJjNDIzMDAxKSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGMyNGI4YjcwLCAweGQwZjg5NzkxKSwgWDY0V29yZF9jcmVhdGUoMHhjNzZjNTFhMywgMHgwNjU0YmUzMCksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCksIFg2NFdvcmRfY3JlYXRlKDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTApLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEpLCBYNjRXb3JkX2NyZWF0ZSgweDEwNmFhMDcwLCAweDMyYmJkMWI4KSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDE5YTRjMTE2LCAweGI4ZDJkMGM4KSwgWDY0V29yZF9jcmVhdGUoMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSksIFg2NFdvcmRfY3JlYXRlKDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMpLCBYNjRXb3JkX2NyZWF0ZSgweDRlZDhhYTRhLCAweGUzNDE4YWNiKSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDViOWNjYTRmLCAweDc3NjNlMzczKSwgWDY0V29yZF9jcmVhdGUoMHg2ODJlNmZmMywgMHhkNmIyYjhhMyksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg3NDhmODJlZSwgMHg1ZGVmYjJmYyksIFg2NFdvcmRfY3JlYXRlKDB4NzhhNTYzNmYsIDB4NDMxNzJmNjApLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODRjODc4MTQsIDB4YTFmMGFiNzIpLCBYNjRXb3JkX2NyZWF0ZSgweDhjYzcwMjA4LCAweDFhNjQzOWVjKSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDkwYmVmZmZhLCAweDIzNjMxZTI4KSwgWDY0V29yZF9jcmVhdGUoMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiZWY5YTNmNywgMHhiMmM2NzkxNSksIFg2NFdvcmRfY3JlYXRlKDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMpLCBYNjRXb3JkX2NyZWF0ZSgweGQxODZiOGM3LCAweDIxYzBjMjA3KSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGVhZGE3ZGQ2LCAweGNkZTBlYjFlKSwgWDY0V29yZF9jcmVhdGUoMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSksIFg2NFdvcmRfY3JlYXRlKDB4MGE2MzdkYzUsIDB4YTJjODk4YTYpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUpLCBYNjRXb3JkX2NyZWF0ZSgweDFiNzEwYjM1LCAweDEzMWM0NzFiKSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0KSwgWDY0V29yZF9jcmVhdGUoMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyksCiAgICAgICAgCSAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgzYzllYmUwYSwgMHgxNWM5YmViYyksIFg2NFdvcmRfY3JlYXRlKDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMpLAogICAgICAgIAkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYpLCBYNjRXb3JkX2NyZWF0ZSgweDU5N2YyOTljLCAweGZjNjU3ZTJhKSwKICAgICAgICAJICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDVmY2I2ZmFiLCAweDNhZDZmYWVjKSwgWDY0V29yZF9jcmVhdGUoMHg2YzQ0MTk4YywgMHg0YTQ3NTgxNykKICAgICAgICAJICAgIF07CgogICAgICAgIAkgICAgLy8gUmV1c2FibGUgb2JqZWN0cwogICAgICAgIAkgICAgdmFyIFcgPSBbXTsKICAgICAgICAJICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgIFdbaV0gPSBYNjRXb3JkX2NyZWF0ZSgpOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0oKSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTSEEtNTEyIGhhc2ggYWxnb3JpdGhtLgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgU0hBNTEyID0gQ19hbGdvLlNIQTUxMiA9IEhhc2hlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoWwogICAgICAgIAkgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDZhMDllNjY3LCAweGYzYmNjOTA4KSwgbmV3IFg2NFdvcmQuaW5pdCgweGJiNjdhZTg1LCAweDg0Y2FhNzNiKSwKICAgICAgICAJICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYiksIG5ldyBYNjRXb3JkLmluaXQoMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSksCiAgICAgICAgCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpLCBuZXcgWDY0V29yZC5pbml0KDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYpLAogICAgICAgIAkgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDFmODNkOWFiLCAweGZiNDFiZDZiKSwgbmV3IFg2NFdvcmQuaW5pdCgweDViZTBjZDE5LCAweDEzN2UyMTc5KQogICAgICAgIAkgICAgICAgICAgICBdKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkczsKCiAgICAgICAgCSAgICAgICAgICAgIHZhciBIMCA9IEhbMF07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBIMSA9IEhbMV07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBIMiA9IEhbMl07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBIMyA9IEhbM107CiAgICAgICAgCSAgICAgICAgICAgIHZhciBINCA9IEhbNF07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBINSA9IEhbNV07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBINiA9IEhbNl07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBINyA9IEhbN107CgogICAgICAgIAkgICAgICAgICAgICB2YXIgSDBoID0gSDAuaGlnaDsKICAgICAgICAJICAgICAgICAgICAgdmFyIEgwbCA9IEgwLmxvdzsKICAgICAgICAJICAgICAgICAgICAgdmFyIEgxaCA9IEgxLmhpZ2g7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBIMWwgPSBIMS5sb3c7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBIMmggPSBIMi5oaWdoOwogICAgICAgIAkgICAgICAgICAgICB2YXIgSDJsID0gSDIubG93OwogICAgICAgIAkgICAgICAgICAgICB2YXIgSDNoID0gSDMuaGlnaDsKICAgICAgICAJICAgICAgICAgICAgdmFyIEgzbCA9IEgzLmxvdzsKICAgICAgICAJICAgICAgICAgICAgdmFyIEg0aCA9IEg0LmhpZ2g7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBINGwgPSBINC5sb3c7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBINWggPSBINS5oaWdoOwogICAgICAgIAkgICAgICAgICAgICB2YXIgSDVsID0gSDUubG93OwogICAgICAgIAkgICAgICAgICAgICB2YXIgSDZoID0gSDYuaGlnaDsKICAgICAgICAJICAgICAgICAgICAgdmFyIEg2bCA9IEg2LmxvdzsKICAgICAgICAJICAgICAgICAgICAgdmFyIEg3aCA9IEg3LmhpZ2g7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBIN2wgPSBINy5sb3c7CgogICAgICAgIAkgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlcwogICAgICAgIAkgICAgICAgICAgICB2YXIgYWggPSBIMGg7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBhbCA9IEgwbDsKICAgICAgICAJICAgICAgICAgICAgdmFyIGJoID0gSDFoOwogICAgICAgIAkgICAgICAgICAgICB2YXIgYmwgPSBIMWw7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBjaCA9IEgyaDsKICAgICAgICAJICAgICAgICAgICAgdmFyIGNsID0gSDJsOwogICAgICAgIAkgICAgICAgICAgICB2YXIgZGggPSBIM2g7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBkbCA9IEgzbDsKICAgICAgICAJICAgICAgICAgICAgdmFyIGVoID0gSDRoOwogICAgICAgIAkgICAgICAgICAgICB2YXIgZWwgPSBINGw7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBmaCA9IEg1aDsKICAgICAgICAJICAgICAgICAgICAgdmFyIGZsID0gSDVsOwogICAgICAgIAkgICAgICAgICAgICB2YXIgZ2ggPSBINmg7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBnbCA9IEg2bDsKICAgICAgICAJICAgICAgICAgICAgdmFyIGhoID0gSDdoOwogICAgICAgIAkgICAgICAgICAgICB2YXIgaGwgPSBIN2w7CgogICAgICAgIAkgICAgICAgICAgICAvLyBSb3VuZHMKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIFdpID0gV1tpXTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBFeHRlbmQgbWVzc2FnZQogICAgICAgIAkgICAgICAgICAgICAgICAgaWYgKGkgPCAxNikgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBXaWggPSBXaS5oaWdoID0gTVtvZmZzZXQgKyBpICogMl0gICAgIHwgMDsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gV2kubG93ICA9IE1bb2Zmc2V0ICsgaSAqIDIgKyAxXSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIC8vIEdhbW1hMAogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4ICA9IFdbaSAtIDE1XTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweGggPSBnYW1tYTB4LmhpZ2g7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHhsID0gZ2FtbWEweC5sb3c7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMGggID0gKChnYW1tYTB4aCA+Pj4gMSkgfCAoZ2FtbWEweGwgPDwgMzEpKSBeICgoZ2FtbWEweGggPj4+IDgpIHwgKGdhbW1hMHhsIDw8IDI0KSkgXiAoZ2FtbWEweGggPj4+IDcpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTBsICA9ICgoZ2FtbWEweGwgPj4+IDEpIHwgKGdhbW1hMHhoIDw8IDMxKSkgXiAoKGdhbW1hMHhsID4+PiA4KSB8IChnYW1tYTB4aCA8PCAyNCkpIF4gKChnYW1tYTB4bCA+Pj4gNykgfCAoZ2FtbWEweGggPDwgMjUpKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWExCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggID0gV1tpIC0gMl07CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXhoID0gZ2FtbWExeC5oaWdoOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4bCA9IGdhbW1hMXgubG93OwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTFoICA9ICgoZ2FtbWExeGggPj4+IDE5KSB8IChnYW1tYTF4bCA8PCAxMykpIF4gKChnYW1tYTF4aCA8PCAzKSB8IChnYW1tYTF4bCA+Pj4gMjkpKSBeIChnYW1tYTF4aCA+Pj4gNik7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMWwgID0gKChnYW1tYTF4bCA+Pj4gMTkpIHwgKGdhbW1hMXhoIDw8IDEzKSkgXiAoKGdhbW1hMXhsIDw8IDMpIHwgKGdhbW1hMXhoID4+PiAyOSkpIF4gKChnYW1tYTF4bCA+Pj4gNikgfCAoZ2FtbWExeGggPDwgMjYpKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIFdpNyAgPSBXW2kgLSA3XTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgV2k3aCA9IFdpNy5oaWdoOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBXaTdsID0gV2k3LmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIFdpMTYgID0gV1tpIC0gMTZdOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBXaTE2aCA9IFdpMTYuaGlnaDsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNmwgPSBXaTE2LmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIFdpbCA9IGdhbW1hMGwgKyBXaTdsOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBXaWggPSBnYW1tYTBoICsgV2k3aCArICgoV2lsID4+PiAwKSA8IChnYW1tYTBsID4+PiAwKSA/IDEgOiAwKTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gV2lsICsgZ2FtbWExbDsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgV2loID0gV2loICsgZ2FtbWExaCArICgoV2lsID4+PiAwKSA8IChnYW1tYTFsID4+PiAwKSA/IDEgOiAwKTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gV2lsICsgV2kxNmw7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIFdpaCA9IFdpaCArIFdpMTZoICsgKChXaWwgPj4+IDApIDwgKFdpMTZsID4+PiAwKSA/IDEgOiAwKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgV2kuaGlnaCA9IFdpaDsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBXaS5sb3cgID0gV2lsOwogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBjaGggID0gKGVoICYgZmgpIF4gKH5laCAmIGdoKTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBjaGwgID0gKGVsICYgZmwpIF4gKH5lbCAmIGdsKTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBtYWpoID0gKGFoICYgYmgpIF4gKGFoICYgY2gpIF4gKGJoICYgY2gpOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIG1hamwgPSAoYWwgJiBibCkgXiAoYWwgJiBjbCkgXiAoYmwgJiBjbCk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHNpZ21hMGggPSAoKGFoID4+PiAyOCkgfCAoYWwgPDwgNCkpICBeICgoYWggPDwgMzApICB8IChhbCA+Pj4gMikpIF4gKChhaCA8PCAyNSkgfCAoYWwgPj4+IDcpKTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBzaWdtYTBsID0gKChhbCA+Pj4gMjgpIHwgKGFoIDw8IDQpKSAgXiAoKGFsIDw8IDMwKSAgfCAoYWggPj4+IDIpKSBeICgoYWwgPDwgMjUpIHwgKGFoID4+PiA3KSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgc2lnbWExaCA9ICgoZWggPj4+IDE0KSB8IChlbCA8PCAxOCkpIF4gKChlaCA+Pj4gMTgpIHwgKGVsIDw8IDE0KSkgXiAoKGVoIDw8IDIzKSB8IChlbCA+Pj4gOSkpOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHNpZ21hMWwgPSAoKGVsID4+PiAxNCkgfCAoZWggPDwgMTgpKSBeICgoZWwgPj4+IDE4KSB8IChlaCA8PCAxNCkpIF4gKChlbCA8PCAyMykgfCAoZWggPj4+IDkpKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldCiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgS2kgID0gS1tpXTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBLaWggPSBLaS5oaWdoOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIEtpbCA9IEtpLmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgdDFsID0gaGwgKyBzaWdtYTFsOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHQxaCA9IGhoICsgc2lnbWExaCArICgodDFsID4+PiAwKSA8IChobCA+Pj4gMCkgPyAxIDogMCk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgY2hsOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIGNoaCArICgodDFsID4+PiAwKSA8IChjaGwgPj4+IDApID8gMSA6IDApOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIEtpbDsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBLaWggKyAoKHQxbCA+Pj4gMCkgPCAoS2lsID4+PiAwKSA/IDEgOiAwKTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBXaWw7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgV2loICsgKCh0MWwgPj4+IDApIDwgKFdpbCA+Pj4gMCkgPyAxIDogMCk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gdDIgPSBzaWdtYTAgKyBtYWoKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbDsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0MmggPSBzaWdtYTBoICsgbWFqaCArICgodDJsID4+PiAwKSA8IChzaWdtYTBsID4+PiAwKSA/IDEgOiAwKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBVcGRhdGUgd29ya2luZyB2YXJpYWJsZXMKICAgICAgICAJICAgICAgICAgICAgICAgIGhoID0gZ2g7CiAgICAgICAgCSAgICAgICAgICAgICAgICBobCA9IGdsOwogICAgICAgIAkgICAgICAgICAgICAgICAgZ2ggPSBmaDsKICAgICAgICAJICAgICAgICAgICAgICAgIGdsID0gZmw7CiAgICAgICAgCSAgICAgICAgICAgICAgICBmaCA9IGVoOwogICAgICAgIAkgICAgICAgICAgICAgICAgZmwgPSBlbDsKICAgICAgICAJICAgICAgICAgICAgICAgIGVsID0gKGRsICsgdDFsKSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgICAgICBlaCA9IChkaCArIHQxaCArICgoZWwgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSkgfCAwOwogICAgICAgIAkgICAgICAgICAgICAgICAgZGggPSBjaDsKICAgICAgICAJICAgICAgICAgICAgICAgIGRsID0gY2w7CiAgICAgICAgCSAgICAgICAgICAgICAgICBjaCA9IGJoOwogICAgICAgIAkgICAgICAgICAgICAgICAgY2wgPSBibDsKICAgICAgICAJICAgICAgICAgICAgICAgIGJoID0gYWg7CiAgICAgICAgCSAgICAgICAgICAgICAgICBibCA9IGFsOwogICAgICAgIAkgICAgICAgICAgICAgICAgYWwgPSAodDFsICsgdDJsKSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgICAgICBhaCA9ICh0MWggKyB0MmggKyAoKGFsID4+PiAwKSA8ICh0MWwgPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlCiAgICAgICAgCSAgICAgICAgICAgIEgwbCA9IEgwLmxvdyAgPSAoSDBsICsgYWwpOwogICAgICAgIAkgICAgICAgICAgICBIMC5oaWdoID0gKEgwaCArIGFoICsgKChIMGwgPj4+IDApIDwgKGFsID4+PiAwKSA/IDEgOiAwKSk7CiAgICAgICAgCSAgICAgICAgICAgIEgxbCA9IEgxLmxvdyAgPSAoSDFsICsgYmwpOwogICAgICAgIAkgICAgICAgICAgICBIMS5oaWdoID0gKEgxaCArIGJoICsgKChIMWwgPj4+IDApIDwgKGJsID4+PiAwKSA/IDEgOiAwKSk7CiAgICAgICAgCSAgICAgICAgICAgIEgybCA9IEgyLmxvdyAgPSAoSDJsICsgY2wpOwogICAgICAgIAkgICAgICAgICAgICBIMi5oaWdoID0gKEgyaCArIGNoICsgKChIMmwgPj4+IDApIDwgKGNsID4+PiAwKSA/IDEgOiAwKSk7CiAgICAgICAgCSAgICAgICAgICAgIEgzbCA9IEgzLmxvdyAgPSAoSDNsICsgZGwpOwogICAgICAgIAkgICAgICAgICAgICBIMy5oaWdoID0gKEgzaCArIGRoICsgKChIM2wgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSk7CiAgICAgICAgCSAgICAgICAgICAgIEg0bCA9IEg0LmxvdyAgPSAoSDRsICsgZWwpOwogICAgICAgIAkgICAgICAgICAgICBINC5oaWdoID0gKEg0aCArIGVoICsgKChINGwgPj4+IDApIDwgKGVsID4+PiAwKSA/IDEgOiAwKSk7CiAgICAgICAgCSAgICAgICAgICAgIEg1bCA9IEg1LmxvdyAgPSAoSDVsICsgZmwpOwogICAgICAgIAkgICAgICAgICAgICBINS5oaWdoID0gKEg1aCArIGZoICsgKChINWwgPj4+IDApIDwgKGZsID4+PiAwKSA/IDEgOiAwKSk7CiAgICAgICAgCSAgICAgICAgICAgIEg2bCA9IEg2LmxvdyAgPSAoSDZsICsgZ2wpOwogICAgICAgIAkgICAgICAgICAgICBINi5oaWdoID0gKEg2aCArIGdoICsgKChINmwgPj4+IDApIDwgKGdsID4+PiAwKSA/IDEgOiAwKSk7CiAgICAgICAgCSAgICAgICAgICAgIEg3bCA9IEg3LmxvdyAgPSAoSDdsICsgaGwpOwogICAgICAgIAkgICAgICAgICAgICBINy5oaWdoID0gKEg3aCArIGhoICsgKChIN2wgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKSk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7CgogICAgICAgIAkgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4OwogICAgICAgIAkgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7CgogICAgICAgIAkgICAgICAgICAgICAvLyBBZGQgcGFkZGluZwogICAgICAgIAkgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTsKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDEyOCkgPj4+IDEwKSA8PCA1KSArIDMwXSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTsKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDEyOCkgPj4+IDEwKSA8PCA1KSArIDMxXSA9IG5CaXRzVG90YWw7CiAgICAgICAgCSAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzCiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQgaGFzaCB0byAzMi1iaXQgd29yZCBhcnJheSBiZWZvcmUgcmV0dXJuaW5nCiAgICAgICAgCSAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaC50b1gzMigpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2gKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGhhc2g7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7CiAgICAgICAgCSAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpOwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIGJsb2NrU2l6ZTogMTAyNC8zMgogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTUxMignbWVzc2FnZScpOwogICAgICAgIAkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBNTEyKTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTUxMihtZXNzYWdlLCBrZXkpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLkhtYWNTSEE1MTIgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBNTEyKTsKICAgICAgICAJfSgpKTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMuU0hBNTEyOwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBzaGEzODQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCB4NjRDb3JlLCBzaGE1MTIpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICB2YXIgQyA9IENyeXB0b0pTOwogICAgICAgIAkgICAgdmFyIENfeDY0ID0gQy54NjQ7CiAgICAgICAgCSAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7CiAgICAgICAgCSAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5OwogICAgICAgIAkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKICAgICAgICAJICAgIHZhciBTSEE1MTIgPSBDX2FsZ28uU0hBNTEyOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU0hBLTM4NCBoYXNoIGFsZ29yaXRobS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFNIQTM4NCA9IENfYWxnby5TSEEzODQgPSBTSEE1MTIuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFg2NFdvcmRBcnJheS5pbml0KFsKICAgICAgICAJICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCksIG5ldyBYNjRXb3JkLmluaXQoMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyksCiAgICAgICAgCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcpLCBuZXcgWDY0V29yZC5pbml0KDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzkpLAogICAgICAgIAkgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDY3MzMyNjY3LCAweGZmYzAwYjMxKSwgbmV3IFg2NFdvcmQuaW5pdCgweDhlYjQ0YTg3LCAweDY4NTgxNTExKSwKICAgICAgICAJICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyksIG5ldyBYNjRXb3JkLmluaXQoMHg0N2I1NDgxZCwgMHhiZWZhNGZhNCkKICAgICAgICAJICAgICAgICAgICAgXSk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgdmFyIGhhc2ggPSBTSEE1MTIuX2RvRmluYWxpemUuY2FsbCh0aGlzKTsKCiAgICAgICAgCSAgICAgICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gMTY7CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gaGFzaDsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9KTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMzg0KCdtZXNzYWdlJyk7CiAgICAgICAgCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzODQod29yZEFycmF5KTsKICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgQy5TSEEzODQgPSBTSEE1MTIuX2NyZWF0ZUhlbHBlcihTSEEzODQpOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAgICAgIAkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMzg0KG1lc3NhZ2UsIGtleSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuSG1hY1NIQTM4NCA9IFNIQTUxMi5fY3JlYXRlSG1hY0hlbHBlcihTSEEzODQpOwogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5TSEEzODQ7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIHNoYTMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCB4NjRDb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJKGZ1bmN0aW9uIChNYXRoKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CiAgICAgICAgCSAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyOwogICAgICAgIAkgICAgdmFyIENfeDY0ID0gQy54NjQ7CiAgICAgICAgCSAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7CiAgICAgICAgCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKICAgICAgICAJICAgIC8vIENvbnN0YW50cyB0YWJsZXMKICAgICAgICAJICAgIHZhciBSSE9fT0ZGU0VUUyA9IFtdOwogICAgICAgIAkgICAgdmFyIFBJX0lOREVYRVMgID0gW107CiAgICAgICAgCSAgICB2YXIgUk9VTkRfQ09OU1RBTlRTID0gW107CgogICAgICAgIAkgICAgLy8gQ29tcHV0ZSBDb25zdGFudHMKICAgICAgICAJICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgLy8gQ29tcHV0ZSByaG8gb2Zmc2V0IGNvbnN0YW50cwogICAgICAgIAkgICAgICAgIHZhciB4ID0gMSwgeSA9IDA7CiAgICAgICAgCSAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCAyNDsgdCsrKSB7CiAgICAgICAgCSAgICAgICAgICAgIFJIT19PRkZTRVRTW3ggKyA1ICogeV0gPSAoKHQgKyAxKSAqICh0ICsgMikgLyAyKSAlIDY0OwoKICAgICAgICAJICAgICAgICAgICAgdmFyIG5ld1ggPSB5ICUgNTsKICAgICAgICAJICAgICAgICAgICAgdmFyIG5ld1kgPSAoMiAqIHggKyAzICogeSkgJSA1OwogICAgICAgIAkgICAgICAgICAgICB4ID0gbmV3WDsKICAgICAgICAJICAgICAgICAgICAgeSA9IG5ld1k7CiAgICAgICAgCSAgICAgICAgfQoKICAgICAgICAJICAgICAgICAvLyBDb21wdXRlIHBpIGluZGV4IGNvbnN0YW50cwogICAgICAgIAkgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBQSV9JTkRFWEVTW3ggKyA1ICogeV0gPSB5ICsgKCgyICogeCArIDMgKiB5KSAlIDUpICogNTsKICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgLy8gQ29tcHV0ZSByb3VuZCBjb25zdGFudHMKICAgICAgICAJICAgICAgICB2YXIgTEZTUiA9IDB4MDE7CiAgICAgICAgCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgIHZhciByb3VuZENvbnN0YW50TXN3ID0gMDsKICAgICAgICAJICAgICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnRMc3cgPSAwOwoKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA3OyBqKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGlmIChMRlNSICYgMHgwMSkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBiaXRQb3NpdGlvbiA9ICgxIDw8IGopIC0gMTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBpZiAoYml0UG9zaXRpb24gPCAzMikgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICByb3VuZENvbnN0YW50THN3IF49IDEgPDwgYml0UG9zaXRpb247CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChiaXRQb3NpdGlvbiA+PSAzMikgKi8gewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICByb3VuZENvbnN0YW50TXN3IF49IDEgPDwgKGJpdFBvc2l0aW9uIC0gMzIpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBDb21wdXRlIG5leHQgTEZTUgogICAgICAgIAkgICAgICAgICAgICAgICAgaWYgKExGU1IgJiAweDgwKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gUHJpbWl0aXZlIHBvbHlub21pYWwgb3ZlciBHRigyKTogeF44ICsgeF42ICsgeF41ICsgeF40ICsgMQogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIExGU1IgPSAoTEZTUiA8PCAxKSBeIDB4NzE7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIExGU1IgPDw9IDE7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIFJPVU5EX0NPTlNUQU5UU1tpXSA9IFg2NFdvcmQuY3JlYXRlKHJvdW5kQ29uc3RhbnRNc3csIHJvdW5kQ29uc3RhbnRMc3cpOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0oKSk7CgogICAgICAgIAkgICAgLy8gUmV1c2FibGUgb2JqZWN0cyBmb3IgdGVtcG9yYXJ5IHZhbHVlcwogICAgICAgIAkgICAgdmFyIFQgPSBbXTsKICAgICAgICAJICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgIFRbaV0gPSBYNjRXb3JkLmNyZWF0ZSgpOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0oKSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTSEEtMyBoYXNoIGFsZ29yaXRobS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFNIQTMgPSBDX2FsZ28uU0hBMyA9IEhhc2hlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBvdXRwdXRMZW5ndGgKICAgICAgICAJICAgICAgICAgKiAgIFRoZSBkZXNpcmVkIG51bWJlciBvZiBiaXRzIGluIHRoZSBvdXRwdXQgaGFzaC4KICAgICAgICAJICAgICAgICAgKiAgIE9ubHkgdmFsdWVzIHBlcm1pdHRlZCBhcmU6IDIyNCwgMjU2LCAzODQsIDUxMi4KICAgICAgICAJICAgICAgICAgKiAgIERlZmF1bHQ6IDUxMgogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNmZzogSGFzaGVyLmNmZy5leHRlbmQoewogICAgICAgIAkgICAgICAgICAgICBvdXRwdXRMZW5ndGg6IDUxMgogICAgICAgIAkgICAgICAgIH0pLAoKICAgICAgICAJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZSA9IFtdOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHN0YXRlW2ldID0gbmV3IFg2NFdvcmQuaW5pdCgpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICB0aGlzLmJsb2NrU2l6ZSA9ICgxNjAwIC0gMiAqIHRoaXMuY2ZnLm91dHB1dExlbmd0aCkgLyAzMjsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlOwogICAgICAgIAkgICAgICAgICAgICB2YXIgbkJsb2NrU2l6ZUxhbmVzID0gdGhpcy5ibG9ja1NpemUgLyAyOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQWJzb3JiCiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkJsb2NrU2l6ZUxhbmVzOyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIE0yaSAgPSBNW29mZnNldCArIDIgKiBpXTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBNMmkxID0gTVtvZmZzZXQgKyAyICogaSArIDFdOwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuCiAgICAgICAgCSAgICAgICAgICAgICAgICBNMmkgPSAoCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgKCgoTTJpIDw8IDgpICB8IChNMmkgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgKCgoTTJpIDw8IDI0KSB8IChNMmkgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQogICAgICAgIAkgICAgICAgICAgICAgICAgKTsKICAgICAgICAJICAgICAgICAgICAgICAgIE0yaTEgPSAoCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgKCgoTTJpMSA8PCA4KSAgfCAoTTJpMSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAoKChNMmkxIDw8IDI0KSB8IChNMmkxID4+PiA4KSkgICYgMHhmZjAwZmYwMCkKICAgICAgICAJICAgICAgICAgICAgICAgICk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gQWJzb3JiIG1lc3NhZ2UgaW50byBzdGF0ZQogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtpXTsKICAgICAgICAJICAgICAgICAgICAgICAgIGxhbmUuaGlnaCBePSBNMmkxOwogICAgICAgIAkgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IE0yaTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gUm91bmRzCiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMDsgcm91bmQgPCAyNDsgcm91bmQrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gVGhldGEKICAgICAgICAJICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gTWl4IGNvbHVtbiBsYW5lcwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3ID0gMCwgdExzdyA9IDA7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVt4ICsgNSAqIHldOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICB0TXN3IF49IGxhbmUuaGlnaDsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgdExzdyBePSBsYW5lLmxvdzsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIC8vIFRlbXBvcmFyeSB2YWx1ZXMKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgVHggPSBUW3hdOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIFR4LmhpZ2ggPSB0TXN3OwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIFR4LmxvdyAgPSB0THN3OwogICAgICAgIAkgICAgICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCA1OyB4KyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgVHg0ID0gVFsoeCArIDQpICUgNV07CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIFR4MSA9IFRbKHggKyAxKSAlIDVdOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBUeDFNc3cgPSBUeDEuaGlnaDsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgVHgxTHN3ID0gVHgxLmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gTWl4IHN1cnJvdW5kaW5nIGNvbHVtbnMKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IFR4NC5oaWdoIF4gKChUeDFNc3cgPDwgMSkgfCAoVHgxTHN3ID4+PiAzMSkpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciB0THN3ID0gVHg0LmxvdyAgXiAoKFR4MUxzdyA8PCAxKSB8IChUeDFNc3cgPj4+IDMxKSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVt4ICsgNSAqIHldOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gdE1zdzsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHRMc3c7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFJobyBQaQogICAgICAgIAkgICAgICAgICAgICAgICAgZm9yICh2YXIgbGFuZUluZGV4ID0gMTsgbGFuZUluZGV4IDwgMjU7IGxhbmVJbmRleCsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtsYW5lSW5kZXhdOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTXN3ID0gbGFuZS5oaWdoOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3c7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIHJob09mZnNldCA9IFJIT19PRkZTRVRTW2xhbmVJbmRleF07CgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIC8vIFJvdGF0ZSBsYW5lcwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGlmIChyaG9PZmZzZXQgPCAzMikgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IChsYW5lTXN3IDw8IHJob09mZnNldCkgfCAobGFuZUxzdyA+Pj4gKDMyIC0gcmhvT2Zmc2V0KSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0THN3ID0gKGxhbmVMc3cgPDwgcmhvT2Zmc2V0KSB8IChsYW5lTXN3ID4+PiAoMzIgLSByaG9PZmZzZXQpKTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHJob09mZnNldCA+PSAzMikgKi8gewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IChsYW5lTHN3IDw8IChyaG9PZmZzZXQgLSAzMikpIHwgKGxhbmVNc3cgPj4+ICg2NCAtIHJob09mZnNldCkpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdExzdyA9IChsYW5lTXN3IDw8IChyaG9PZmZzZXQgLSAzMikpIHwgKGxhbmVMc3cgPj4+ICg2NCAtIHJob09mZnNldCkpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gVHJhbnNwb3NlIGxhbmVzCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIFRQaUxhbmUgPSBUW1BJX0lOREVYRVNbbGFuZUluZGV4XV07CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgVFBpTGFuZS5oaWdoID0gdE1zdzsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBUUGlMYW5lLmxvdyAgPSB0THN3OwogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFJobyBwaSBhdCB4ID0geSA9IDAKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBUMCA9IFRbMF07CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgc3RhdGUwID0gc3RhdGVbMF07CiAgICAgICAgCSAgICAgICAgICAgICAgICBUMC5oaWdoID0gc3RhdGUwLmhpZ2g7CiAgICAgICAgCSAgICAgICAgICAgICAgICBUMC5sb3cgID0gc3RhdGUwLmxvdzsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBDaGkKICAgICAgICAJICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lSW5kZXggPSB4ICsgNSAqIHk7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbbGFuZUluZGV4XTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFRMYW5lID0gVFtsYW5lSW5kZXhdOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgVHgxTGFuZSA9IFRbKCh4ICsgMSkgJSA1KSArIDUgKiB5XTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR4MkxhbmUgPSBUWygoeCArIDIpICUgNSkgKyA1ICogeV07CgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaXggcm93cwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggPSBUTGFuZS5oaWdoIF4gKH5UeDFMYW5lLmhpZ2ggJiBUeDJMYW5lLmhpZ2gpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmxvdyAgPSBUTGFuZS5sb3cgIF4gKH5UeDFMYW5lLmxvdyAgJiBUeDJMYW5lLmxvdyk7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIElvdGEKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbMF07CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudCA9IFJPVU5EX0NPTlNUQU5UU1tyb3VuZF07CiAgICAgICAgCSAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gcm91bmRDb25zdGFudC5oaWdoOwogICAgICAgIAkgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHJvdW5kQ29uc3RhbnQubG93OwkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODsKICAgICAgICAJICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJpdHMgPSB0aGlzLmJsb2NrU2l6ZSAqIDMyOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmcKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHgxIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTsKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzWygoTWF0aC5jZWlsKChuQml0c0xlZnQgKyAxKSAvIGJsb2NrU2l6ZUJpdHMpICogYmxvY2tTaXplQml0cykgPj4+IDUpIC0gMV0gfD0gMHg4MDsKICAgICAgICAJICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0OwoKICAgICAgICAJICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3MKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlOwogICAgICAgIAkgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoQnl0ZXMgPSB0aGlzLmNmZy5vdXRwdXRMZW5ndGggLyA4OwogICAgICAgIAkgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoTGFuZXMgPSBvdXRwdXRMZW5ndGhCeXRlcyAvIDg7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTcXVlZXplCiAgICAgICAgCSAgICAgICAgICAgIHZhciBoYXNoV29yZHMgPSBbXTsKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRwdXRMZW5ndGhMYW5lczsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbaV07CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgbGFuZU1zdyA9IGxhbmUuaGlnaDsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3c7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KICAgICAgICAJICAgICAgICAgICAgICAgIGxhbmVNc3cgPSAoCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgKCgobGFuZU1zdyA8PCA4KSAgfCAobGFuZU1zdyA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAoKChsYW5lTXN3IDw8IDI0KSB8IChsYW5lTXN3ID4+PiA4KSkgICYgMHhmZjAwZmYwMCkKICAgICAgICAJICAgICAgICAgICAgICAgICk7CiAgICAgICAgCSAgICAgICAgICAgICAgICBsYW5lTHN3ID0gKAogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICgoKGxhbmVMc3cgPDwgOCkgIHwgKGxhbmVMc3cgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgKCgobGFuZUxzdyA8PCAyNCkgfCAobGFuZUxzdyA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApCiAgICAgICAgCSAgICAgICAgICAgICAgICApOwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFNxdWVlemUgc3RhdGUgdG8gcmV0cmlldmUgaGFzaAogICAgICAgIAkgICAgICAgICAgICAgICAgaGFzaFdvcmRzLnB1c2gobGFuZUxzdyk7CiAgICAgICAgCSAgICAgICAgICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTXN3KTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2gKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdChoYXNoV29yZHMsIG91dHB1dExlbmd0aEJ5dGVzKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTsKCiAgICAgICAgCSAgICAgICAgICAgIHZhciBzdGF0ZSA9IGNsb25lLl9zdGF0ZSA9IHRoaXMuX3N0YXRlLnNsaWNlKDApOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHN0YXRlW2ldID0gc3RhdGVbaV0uY2xvbmUoKTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzKCdtZXNzYWdlJyk7CiAgICAgICAgCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzKHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuU0hBMyA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTMpOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAgICAgIAkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMyhtZXNzYWdlLCBrZXkpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLkhtYWNTSEEzID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTMpOwogICAgICAgIAl9KE1hdGgpKTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMuU0hBMzsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgcmlwZW1kMTYwID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJLyoqIEBwcmVzZXJ2ZQogICAgICAgIAkoYykgMjAxMiBieSBDw6lkcmljIE1lc25pbC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KCiAgICAgICAgCVJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKCiAgICAgICAgCSAgICAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KICAgICAgICAJICAgIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgoKICAgICAgICAJVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KICAgICAgICAJKi8KCiAgICAgICAgCShmdW5jdGlvbiAoTWF0aCkgewogICAgICAgIAkgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICB2YXIgQyA9IENyeXB0b0pTOwogICAgICAgIAkgICAgdmFyIENfbGliID0gQy5saWI7CiAgICAgICAgCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwogICAgICAgIAkgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjsKICAgICAgICAJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CgogICAgICAgIAkgICAgLy8gQ29uc3RhbnRzIHRhYmxlCiAgICAgICAgCSAgICB2YXIgX3psID0gV29yZEFycmF5LmNyZWF0ZShbCiAgICAgICAgCSAgICAgICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwKICAgICAgICAJICAgICAgICA3LCAgNCwgMTMsICAxLCAxMCwgIDYsIDE1LCAgMywgMTIsICAwLCAgOSwgIDUsICAyLCAxNCwgMTEsICA4LAogICAgICAgIAkgICAgICAgIDMsIDEwLCAxNCwgIDQsICA5LCAxNSwgIDgsICAxLCAgMiwgIDcsICAwLCAgNiwgMTMsIDExLCAgNSwgMTIsCiAgICAgICAgCSAgICAgICAgMSwgIDksIDExLCAxMCwgIDAsICA4LCAxMiwgIDQsIDEzLCAgMywgIDcsIDE1LCAxNCwgIDUsICA2LCAgMiwKICAgICAgICAJICAgICAgICA0LCAgMCwgIDUsICA5LCAgNywgMTIsICAyLCAxMCwgMTQsICAxLCAgMywgIDgsIDExLCAgNiwgMTUsIDEzXSk7CiAgICAgICAgCSAgICB2YXIgX3pyID0gV29yZEFycmF5LmNyZWF0ZShbCiAgICAgICAgCSAgICAgICAgNSwgMTQsICA3LCAgMCwgIDksICAyLCAxMSwgIDQsIDEzLCAgNiwgMTUsICA4LCAgMSwgMTAsICAzLCAxMiwKICAgICAgICAJICAgICAgICA2LCAxMSwgIDMsICA3LCAgMCwgMTMsICA1LCAxMCwgMTQsIDE1LCAgOCwgMTIsICA0LCAgOSwgIDEsICAyLAogICAgICAgIAkgICAgICAgIDE1LCAgNSwgIDEsICAzLCAgNywgMTQsICA2LCAgOSwgMTEsICA4LCAxMiwgIDIsIDEwLCAgMCwgIDQsIDEzLAogICAgICAgIAkgICAgICAgIDgsICA2LCAgNCwgIDEsICAzLCAxMSwgMTUsICAwLCAgNSwgMTIsICAyLCAxMywgIDksICA3LCAxMCwgMTQsCiAgICAgICAgCSAgICAgICAgMTIsIDE1LCAxMCwgIDQsICAxLCAgNSwgIDgsICA3LCAgNiwgIDIsIDEzLCAxNCwgIDAsICAzLCAgOSwgMTFdKTsKICAgICAgICAJICAgIHZhciBfc2wgPSBXb3JkQXJyYXkuY3JlYXRlKFsKICAgICAgICAJICAgICAgICAgMTEsIDE0LCAxNSwgMTIsICA1LCAgOCwgIDcsICA5LCAxMSwgMTMsIDE0LCAxNSwgIDYsICA3LCAgOSwgIDgsCiAgICAgICAgCSAgICAgICAgNywgNiwgICA4LCAxMywgMTEsICA5LCAgNywgMTUsICA3LCAxMiwgMTUsICA5LCAxMSwgIDcsIDEzLCAxMiwKICAgICAgICAJICAgICAgICAxMSwgMTMsICA2LCAgNywgMTQsICA5LCAxMywgMTUsIDE0LCAgOCwgMTMsICA2LCAgNSwgMTIsICA3LCAgNSwKICAgICAgICAJICAgICAgICAgIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsICA5LCAgOCwgIDksIDE0LCAgNSwgIDYsICA4LCAgNiwgIDUsIDEyLAogICAgICAgIAkgICAgICAgIDksIDE1LCAgNSwgMTEsICA2LCAgOCwgMTMsIDEyLCAgNSwgMTIsIDEzLCAxNCwgMTEsICA4LCAgNSwgIDYgXSk7CiAgICAgICAgCSAgICB2YXIgX3NyID0gV29yZEFycmF5LmNyZWF0ZShbCiAgICAgICAgCSAgICAgICAgOCwgIDksICA5LCAxMSwgMTMsIDE1LCAxNSwgIDUsICA3LCAgNywgIDgsIDExLCAxNCwgMTQsIDEyLCAgNiwKICAgICAgICAJICAgICAgICA5LCAxMywgMTUsICA3LCAxMiwgIDgsICA5LCAxMSwgIDcsICA3LCAxMiwgIDcsICA2LCAxNSwgMTMsIDExLAogICAgICAgIAkgICAgICAgIDksICA3LCAxNSwgMTEsICA4LCAgNiwgIDYsIDE0LCAxMiwgMTMsICA1LCAxNCwgMTMsIDEzLCAgNywgIDUsCiAgICAgICAgCSAgICAgICAgMTUsICA1LCAgOCwgMTEsIDE0LCAxNCwgIDYsIDE0LCAgNiwgIDksIDEyLCAgOSwgMTIsICA1LCAxNSwgIDgsCiAgICAgICAgCSAgICAgICAgOCwgIDUsIDEyLCAgOSwgMTIsICA1LCAxNCwgIDYsICA4LCAxMywgIDYsICA1LCAxNSwgMTMsIDExLCAxMSBdKTsKCiAgICAgICAgCSAgICB2YXIgX2hsID0gIFdvcmRBcnJheS5jcmVhdGUoWyAweDAwMDAwMDAwLCAweDVBODI3OTk5LCAweDZFRDlFQkExLCAweDhGMUJCQ0RDLCAweEE5NTNGRDRFXSk7CiAgICAgICAgCSAgICB2YXIgX2hyID0gIFdvcmRBcnJheS5jcmVhdGUoWyAweDUwQTI4QkU2LCAweDVDNEREMTI0LCAweDZENzAzRUYzLCAweDdBNkQ3NkU5LCAweDAwMDAwMDAwXSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBSSVBFTUQxNjAgaGFzaCBhbGdvcml0aG0uCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBSSVBFTUQxNjAgPSBDX2FsZ28uUklQRU1EMTYwID0gSGFzaGVyLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5faGFzaCAgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDY3NDUyMzAxLCAweEVGQ0RBQjg5LCAweDk4QkFEQ0ZFLCAweDEwMzI1NDc2LCAweEMzRDJFMUYwXSk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTd2FwIGVuZGlhbgogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV07CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gU3dhcAogICAgICAgIAkgICAgICAgICAgICAgICAgTVtvZmZzZXRfaV0gPSAoCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSAgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDI0KSB8IChNX29mZnNldF9pID4+PiA4KSkgICYgMHhmZjAwZmYwMCkKICAgICAgICAJICAgICAgICAgICAgICAgICk7CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgdmFyIEggID0gdGhpcy5faGFzaC53b3JkczsKICAgICAgICAJICAgICAgICAgICAgdmFyIGhsID0gX2hsLndvcmRzOwogICAgICAgIAkgICAgICAgICAgICB2YXIgaHIgPSBfaHIud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciB6bCA9IF96bC53b3JkczsKICAgICAgICAJICAgICAgICAgICAgdmFyIHpyID0gX3pyLndvcmRzOwogICAgICAgIAkgICAgICAgICAgICB2YXIgc2wgPSBfc2wud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBzciA9IF9zci53b3JkczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBhbCwgYmwsIGNsLCBkbCwgZWw7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBhciwgYnIsIGNyLCBkciwgZXI7CgogICAgICAgIAkgICAgICAgICAgICBhciA9IGFsID0gSFswXTsKICAgICAgICAJICAgICAgICAgICAgYnIgPSBibCA9IEhbMV07CiAgICAgICAgCSAgICAgICAgICAgIGNyID0gY2wgPSBIWzJdOwogICAgICAgIAkgICAgICAgICAgICBkciA9IGRsID0gSFszXTsKICAgICAgICAJICAgICAgICAgICAgZXIgPSBlbCA9IEhbNF07CiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uCiAgICAgICAgCSAgICAgICAgICAgIHZhciB0OwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpICs9IDEpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHQgPSAoYWwgKyAgTVtvZmZzZXQremxbaV1dKXwwOwogICAgICAgIAkgICAgICAgICAgICAgICAgaWYgKGk8MTYpewogICAgICAgIAkJICAgICAgICAgICAgdCArPSAgZjEoYmwsY2wsZGwpICsgaGxbMF07CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8MzIpIHsKICAgICAgICAJCSAgICAgICAgICAgIHQgKz0gIGYyKGJsLGNsLGRsKSArIGhsWzFdOwogICAgICAgIAkgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7CiAgICAgICAgCQkgICAgICAgICAgICB0ICs9ICBmMyhibCxjbCxkbCkgKyBobFsyXTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTw2NCkgewogICAgICAgIAkJICAgICAgICAgICAgdCArPSAgZjQoYmwsY2wsZGwpICsgaGxbM107CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2Ugey8vIGlmIChpPDgwKSB7CiAgICAgICAgCQkgICAgICAgICAgICB0ICs9ICBmNShibCxjbCxkbCkgKyBobFs0XTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgICAgIHQgPSB0fDA7CiAgICAgICAgCSAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzbFtpXSk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB0ID0gKHQrZWwpfDA7CiAgICAgICAgCSAgICAgICAgICAgICAgICBhbCA9IGVsOwogICAgICAgIAkgICAgICAgICAgICAgICAgZWwgPSBkbDsKICAgICAgICAJICAgICAgICAgICAgICAgIGRsID0gcm90bChjbCwgMTApOwogICAgICAgIAkgICAgICAgICAgICAgICAgY2wgPSBibDsKICAgICAgICAJICAgICAgICAgICAgICAgIGJsID0gdDsKCiAgICAgICAgCSAgICAgICAgICAgICAgICB0ID0gKGFyICsgTVtvZmZzZXQrenJbaV1dKXwwOwogICAgICAgIAkgICAgICAgICAgICAgICAgaWYgKGk8MTYpewogICAgICAgIAkJICAgICAgICAgICAgdCArPSAgZjUoYnIsY3IsZHIpICsgaHJbMF07CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8MzIpIHsKICAgICAgICAJCSAgICAgICAgICAgIHQgKz0gIGY0KGJyLGNyLGRyKSArIGhyWzFdOwogICAgICAgIAkgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7CiAgICAgICAgCQkgICAgICAgICAgICB0ICs9ICBmMyhicixjcixkcikgKyBoclsyXTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTw2NCkgewogICAgICAgIAkJICAgICAgICAgICAgdCArPSAgZjIoYnIsY3IsZHIpICsgaHJbM107CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2Ugey8vIGlmIChpPDgwKSB7CiAgICAgICAgCQkgICAgICAgICAgICB0ICs9ICBmMShicixjcixkcikgKyBocls0XTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgICAgIHQgPSB0fDA7CiAgICAgICAgCSAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzcltpXSkgOwogICAgICAgIAkgICAgICAgICAgICAgICAgdCA9ICh0K2VyKXwwOwogICAgICAgIAkgICAgICAgICAgICAgICAgYXIgPSBlcjsKICAgICAgICAJICAgICAgICAgICAgICAgIGVyID0gZHI7CiAgICAgICAgCSAgICAgICAgICAgICAgICBkciA9IHJvdGwoY3IsIDEwKTsKICAgICAgICAJICAgICAgICAgICAgICAgIGNyID0gYnI7CiAgICAgICAgCSAgICAgICAgICAgICAgICBiciA9IHQ7CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWUKICAgICAgICAJICAgICAgICAgICAgdCAgICA9IChIWzFdICsgY2wgKyBkcil8MDsKICAgICAgICAJICAgICAgICAgICAgSFsxXSA9IChIWzJdICsgZGwgKyBlcil8MDsKICAgICAgICAJICAgICAgICAgICAgSFsyXSA9IChIWzNdICsgZWwgKyBhcil8MDsKICAgICAgICAJICAgICAgICAgICAgSFszXSA9IChIWzRdICsgYWwgKyBicil8MDsKICAgICAgICAJICAgICAgICAgICAgSFs0XSA9IChIWzBdICsgYmwgKyBjcil8MDsKICAgICAgICAJICAgICAgICAgICAgSFswXSA9ICB0OwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzOwoKICAgICAgICAJICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODsKICAgICAgICAJICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4OwoKICAgICAgICAJICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmcKICAgICAgICAJICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7CiAgICAgICAgCSAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKAogICAgICAgIAkgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbCA8PCA4KSAgfCAobkJpdHNUb3RhbCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAJICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWwgPDwgMjQpIHwgKG5CaXRzVG90YWwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQogICAgICAgIAkgICAgICAgICAgICApOwogICAgICAgIAkgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7CgogICAgICAgIAkgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2NrcwogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoOwogICAgICAgIAkgICAgICAgICAgICB2YXIgSCA9IGhhc2gud29yZHM7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTd2FwIGVuZGlhbgogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldOwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFN3YXAKICAgICAgICAJICAgICAgICAgICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaAogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gaGFzaDsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTsKICAgICAgICAJICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CgoKICAgICAgICAJICAgIGZ1bmN0aW9uIGYxKHgsIHksIHopIHsKICAgICAgICAJICAgICAgICByZXR1cm4gKCh4KSBeICh5KSBeICh6KSk7CgogICAgICAgIAkgICAgfQoKICAgICAgICAJICAgIGZ1bmN0aW9uIGYyKHgsIHksIHopIHsKICAgICAgICAJICAgICAgICByZXR1cm4gKCgoeCkmKHkpKSB8ICgofngpJih6KSkpOwogICAgICAgIAkgICAgfQoKICAgICAgICAJICAgIGZ1bmN0aW9uIGYzKHgsIHksIHopIHsKICAgICAgICAJICAgICAgICByZXR1cm4gKCgoeCkgfCAofih5KSkpIF4gKHopKTsKICAgICAgICAJICAgIH0KCiAgICAgICAgCSAgICBmdW5jdGlvbiBmNCh4LCB5LCB6KSB7CiAgICAgICAgCSAgICAgICAgcmV0dXJuICgoKHgpICYgKHopKSB8ICgoeSkmKH4oeikpKSk7CiAgICAgICAgCSAgICB9CgogICAgICAgIAkgICAgZnVuY3Rpb24gZjUoeCwgeSwgeikgewogICAgICAgIAkgICAgICAgIHJldHVybiAoKHgpIF4gKCh5KSB8KH4oeikpKSk7CgogICAgICAgIAkgICAgfQoKICAgICAgICAJICAgIGZ1bmN0aW9uIHJvdGwoeCxuKSB7CiAgICAgICAgCSAgICAgICAgcmV0dXJuICh4PDxuKSB8ICh4Pj4+KDMyLW4pKTsKICAgICAgICAJICAgIH0KCgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlJJUEVNRDE2MCgnbWVzc2FnZScpOwogICAgICAgIAkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuUklQRU1EMTYwKHdvcmRBcnJheSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoUklQRU1EMTYwKTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1JJUEVNRDE2MChtZXNzYWdlLCBrZXkpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLkhtYWNSSVBFTUQxNjAgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoUklQRU1EMTYwKTsKICAgICAgICAJfSgpKTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMuUklQRU1EMTYwOwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBobWFjID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJKGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgdmFyIEMgPSBDcnlwdG9KUzsKICAgICAgICAJICAgIHZhciBDX2xpYiA9IEMubGliOwogICAgICAgIAkgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlOwogICAgICAgIAkgICAgdmFyIENfZW5jID0gQy5lbmM7CiAgICAgICAgCSAgICB2YXIgVXRmOCA9IENfZW5jLlV0Zjg7CiAgICAgICAgCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogSE1BQyBhbGdvcml0aG0uCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBITUFDID0gQ19hbGdvLkhNQUMgPSBCYXNlLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIEhNQUMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoIGFsZ29yaXRobSB0byB1c2UuCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBobWFjSGFzaGVyID0gQ3J5cHRvSlMuYWxnby5ITUFDLmNyZWF0ZShDcnlwdG9KUy5hbGdvLlNIQTI1Niwga2V5KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBpbml0OiBmdW5jdGlvbiAoaGFzaGVyLCBrZXkpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gSW5pdCBoYXNoZXIKICAgICAgICAJICAgICAgICAgICAgaGFzaGVyID0gdGhpcy5faGFzaGVyID0gbmV3IGhhc2hlci5pbml0KCk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBXb3JkQXJyYXksIGVsc2UgYXNzdW1lIFdvcmRBcnJheSBhbHJlYWR5CiAgICAgICAgCSAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBrZXkgPSBVdGY4LnBhcnNlKGtleSk7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgaGFzaGVyQmxvY2tTaXplID0gaGFzaGVyLmJsb2NrU2l6ZTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGhhc2hlckJsb2NrU2l6ZUJ5dGVzID0gaGFzaGVyQmxvY2tTaXplICogNDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEFsbG93IGFyYml0cmFyeSBsZW5ndGgga2V5cwogICAgICAgIAkgICAgICAgICAgICBpZiAoa2V5LnNpZ0J5dGVzID4gaGFzaGVyQmxvY2tTaXplQnl0ZXMpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGtleSA9IGhhc2hlci5maW5hbGl6ZShrZXkpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0cwogICAgICAgIAkgICAgICAgICAgICBrZXkuY2xhbXAoKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENsb25lIGtleSBmb3IgaW5uZXIgYW5kIG91dGVyIHBhZHMKICAgICAgICAJICAgICAgICAgICAgdmFyIG9LZXkgPSB0aGlzLl9vS2V5ID0ga2V5LmNsb25lKCk7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBpS2V5ID0gdGhpcy5faUtleSA9IGtleS5jbG9uZSgpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBvS2V5V29yZHMgPSBvS2V5LndvcmRzOwogICAgICAgIAkgICAgICAgICAgICB2YXIgaUtleVdvcmRzID0gaUtleS53b3JkczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFhPUiBrZXlzIHdpdGggcGFkIGNvbnN0YW50cwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhc2hlckJsb2NrU2l6ZTsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBvS2V5V29yZHNbaV0gXj0gMHg1YzVjNWM1YzsKICAgICAgICAJICAgICAgICAgICAgICAgIGlLZXlXb3Jkc1tpXSBePSAweDM2MzYzNjM2OwogICAgICAgIAkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIG9LZXkuc2lnQnl0ZXMgPSBpS2V5LnNpZ0J5dGVzID0gaGFzaGVyQmxvY2tTaXplQnl0ZXM7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXMKICAgICAgICAJICAgICAgICAgICAgdGhpcy5yZXNldCgpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIFJlc2V0cyB0aGlzIEhNQUMgdG8gaXRzIGluaXRpYWwgc3RhdGUuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIGhtYWNIYXNoZXIucmVzZXQoKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICByZXNldDogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgaGFzaGVyID0gdGhpcy5faGFzaGVyOwoKICAgICAgICAJICAgICAgICAgICAgLy8gUmVzZXQKICAgICAgICAJICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7CiAgICAgICAgCSAgICAgICAgICAgIGhhc2hlci51cGRhdGUodGhpcy5faUtleSk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogVXBkYXRlcyB0aGlzIEhNQUMgd2l0aCBhIG1lc3NhZ2UuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7SE1BQ30gVGhpcyBITUFDIGluc3RhbmNlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpOwogICAgICAgIAkgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5faGFzaGVyLnVwZGF0ZShtZXNzYWdlVXBkYXRlKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENoYWluYWJsZQogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIEhNQUMgY29tcHV0YXRpb24uCiAgICAgICAgCSAgICAgICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSAoT3B0aW9uYWwpIEEgZmluYWwgbWVzc2FnZSB1cGRhdGUuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUoKTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKCdtZXNzYWdlJyk7CiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSh3b3JkQXJyYXkpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGZpbmFsaXplOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgaGFzaGVyID0gdGhpcy5faGFzaGVyOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29tcHV0ZSBITUFDCiAgICAgICAgCSAgICAgICAgICAgIHZhciBpbm5lckhhc2ggPSBoYXNoZXIuZmluYWxpemUobWVzc2FnZVVwZGF0ZSk7CiAgICAgICAgCSAgICAgICAgICAgIGhhc2hlci5yZXNldCgpOwogICAgICAgIAkgICAgICAgICAgICB2YXIgaG1hYyA9IGhhc2hlci5maW5hbGl6ZSh0aGlzLl9vS2V5LmNsb25lKCkuY29uY2F0KGlubmVySGFzaCkpOwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGhtYWM7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CiAgICAgICAgCX0oKSk7CgoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBwYmtkZjIgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCBzaGExLCBobWFjKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJKGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgdmFyIEMgPSBDcnlwdG9KUzsKICAgICAgICAJICAgIHZhciBDX2xpYiA9IEMubGliOwogICAgICAgIAkgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlOwogICAgICAgIAkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKICAgICAgICAJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CiAgICAgICAgCSAgICB2YXIgU0hBMSA9IENfYWxnby5TSEExOwogICAgICAgIAkgICAgdmFyIEhNQUMgPSBDX2FsZ28uSE1BQzsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIgYWxnb3JpdGhtLgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgUEJLREYyID0gQ19hbGdvLlBCS0RGMiA9IEJhc2UuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGUga2V5IHNpemUgaW4gd29yZHMgdG8gZ2VuZXJhdGUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKQogICAgICAgIAkgICAgICAgICAqIEBwcm9wZXJ0eSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UuIERlZmF1bHQ6IFNIQTEKICAgICAgICAJICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXRlcmF0aW9ucyBUaGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gcGVyZm9ybS4gRGVmYXVsdDogMQogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNmZzogQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgICAgICBrZXlTaXplOiAxMjgvMzIsCiAgICAgICAgCSAgICAgICAgICAgIGhhc2hlcjogU0hBMSwKICAgICAgICAJICAgICAgICAgICAgaXRlcmF0aW9uczogMQogICAgICAgIAkgICAgICAgIH0pLAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBkZXJpdmF0aW9uLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKCk7CiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLlBCS0RGMi5jcmVhdGUoeyBrZXlTaXplOiA4IH0pOwogICAgICAgIAkgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ29tcHV0ZXMgdGhlIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBrZXkgPSBrZGYuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CiAgICAgICAgCSAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZzsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEluaXQgSE1BQwogICAgICAgIAkgICAgICAgICAgICB2YXIgaG1hYyA9IEhNQUMuY3JlYXRlKGNmZy5oYXNoZXIsIHBhc3N3b3JkKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5ID0gV29yZEFycmF5LmNyZWF0ZSgpOwogICAgICAgIAkgICAgICAgICAgICB2YXIgYmxvY2tJbmRleCA9IFdvcmRBcnJheS5jcmVhdGUoWzB4MDAwMDAwMDFdKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgZGVyaXZlZEtleVdvcmRzID0gZGVyaXZlZEtleS53b3JkczsKICAgICAgICAJICAgICAgICAgICAgdmFyIGJsb2NrSW5kZXhXb3JkcyA9IGJsb2NrSW5kZXgud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBrZXlTaXplID0gY2ZnLmtleVNpemU7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBpdGVyYXRpb25zID0gY2ZnLml0ZXJhdGlvbnM7CgogICAgICAgIAkgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXkKICAgICAgICAJICAgICAgICAgICAgd2hpbGUgKGRlcml2ZWRLZXlXb3Jkcy5sZW5ndGggPCBrZXlTaXplKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBobWFjLnVwZGF0ZShzYWx0KS5maW5hbGl6ZShibG9ja0luZGV4KTsKICAgICAgICAJICAgICAgICAgICAgICAgIGhtYWMucmVzZXQoKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBibG9ja1dvcmRzID0gYmxvY2sud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgYmxvY2tXb3Jkc0xlbmd0aCA9IGJsb2NrV29yZHMubGVuZ3RoOwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGlvbnMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBpbnRlcm1lZGlhdGUgPSBibG9jazsKICAgICAgICAJICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgaW50ZXJtZWRpYXRlID0gaG1hYy5maW5hbGl6ZShpbnRlcm1lZGlhdGUpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGhtYWMucmVzZXQoKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJtZWRpYXRlV29yZHMgPSBpbnRlcm1lZGlhdGUud29yZHM7CgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIC8vIFhPUiBpbnRlcm1lZGlhdGUgd2l0aCBibG9jawogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYmxvY2tXb3Jkc0xlbmd0aDsgaisrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrV29yZHNbal0gXj0gaW50ZXJtZWRpYXRlV29yZHNbal07CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIGRlcml2ZWRLZXkuY29uY2F0KGJsb2NrKTsKICAgICAgICAJICAgICAgICAgICAgICAgIGJsb2NrSW5kZXhXb3Jkc1swXSsrOwogICAgICAgIAkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIGRlcml2ZWRLZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDsKCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBkZXJpdmVkS2V5OwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQ29tcHV0ZXMgdGhlIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LgogICAgICAgIAkgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGNvbXB1dGF0aW9uLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0KTsKICAgICAgICAJICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDggfSk7CiAgICAgICAgCSAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLlBCS0RGMiA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgY2ZnKSB7CiAgICAgICAgCSAgICAgICAgcmV0dXJuIFBCS0RGMi5jcmVhdGUoY2ZnKS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTsKICAgICAgICAJICAgIH07CiAgICAgICAgCX0oKSk7CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLlBCS0RGMjsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgZXZwa2RmID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSwgc2hhMSwgaG1hYyk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTsKICAgICAgICAJICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CiAgICAgICAgCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwogICAgICAgIAkgICAgdmFyIE1ENSA9IENfYWxnby5NRDU7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBUaGlzIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIGlzIG1lYW50IHRvIGNvbmZvcm0gd2l0aCBFVlBfQnl0ZXNUb0tleS4KICAgICAgICAJICAgICAqIHd3dy5vcGVuc3NsLm9yZy9kb2NzL2NyeXB0by9FVlBfQnl0ZXNUb0tleS5odG1sCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBFdnBLREYgPSBDX2FsZ28uRXZwS0RGID0gQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoZSBrZXkgc2l6ZSBpbiB3b3JkcyB0byBnZW5lcmF0ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpCiAgICAgICAgCSAgICAgICAgICogQHByb3BlcnR5IHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLiBEZWZhdWx0OiBNRDUKICAgICAgICAJICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXRlcmF0aW9ucyBUaGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gcGVyZm9ybS4gRGVmYXVsdDogMQogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNmZzogQmFzZS5leHRlbmQoewogICAgICAgIAkgICAgICAgICAgICBrZXlTaXplOiAxMjgvMzIsCiAgICAgICAgCSAgICAgICAgICAgIGhhc2hlcjogTUQ1LAogICAgICAgIAkgICAgICAgICAgICBpdGVyYXRpb25zOiAxCiAgICAgICAgCSAgICAgICAgfSksCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIGRlcml2YXRpb24uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLkV2cEtERi5jcmVhdGUoKTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDggfSk7CiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLkV2cEtERi5jcmVhdGUoeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBEZXJpdmVzIGEga2V5IGZyb20gYSBwYXNzd29yZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGtleSA9IGtkZi5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgdmFyIGNmZyA9IHRoaXMuY2ZnOwoKICAgICAgICAJICAgICAgICAgICAgLy8gSW5pdCBoYXNoZXIKICAgICAgICAJICAgICAgICAgICAgdmFyIGhhc2hlciA9IGNmZy5oYXNoZXIuY3JlYXRlKCk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlcwogICAgICAgIAkgICAgICAgICAgICB2YXIgZGVyaXZlZEtleSA9IFdvcmRBcnJheS5jcmVhdGUoKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgZGVyaXZlZEtleVdvcmRzID0gZGVyaXZlZEtleS53b3JkczsKICAgICAgICAJICAgICAgICAgICAgdmFyIGtleVNpemUgPSBjZmcua2V5U2l6ZTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBjZmcuaXRlcmF0aW9uczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleQogICAgICAgIAkgICAgICAgICAgICB3aGlsZSAoZGVyaXZlZEtleVdvcmRzLmxlbmd0aCA8IGtleVNpemUpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGlmIChibG9jaykgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGhhc2hlci51cGRhdGUoYmxvY2spOwogICAgICAgIAkgICAgICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gaGFzaGVyLnVwZGF0ZShwYXNzd29yZCkuZmluYWxpemUoc2FsdCk7CiAgICAgICAgCSAgICAgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBJdGVyYXRpb25zCiAgICAgICAgCSAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGl0ZXJhdGlvbnM7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGJsb2NrID0gaGFzaGVyLmZpbmFsaXplKGJsb2NrKTsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgICAgICBkZXJpdmVkS2V5LmNvbmNhdChibG9jayk7CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgZGVyaXZlZEtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0OwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGRlcml2ZWRLZXk7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBEZXJpdmVzIGEga2V5IGZyb20gYSBwYXNzd29yZC4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC4KICAgICAgICAJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuCiAgICAgICAgCSAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgY29tcHV0YXRpb24uCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQpOwogICAgICAgIAkgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCB9KTsKICAgICAgICAJICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuRXZwS0RGID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBjZmcpIHsKICAgICAgICAJICAgICAgICByZXR1cm4gRXZwS0RGLmNyZWF0ZShjZmcpLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpOwogICAgICAgIAkgICAgfTsKICAgICAgICAJfSgpKTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMuRXZwS0RGOwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBjaXBoZXJDb3JlID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSwgZXZwa2RmKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJLyoqCiAgICAgICAgCSAqIENpcGhlciBjb3JlIGNvbXBvbmVudHMuCiAgICAgICAgCSAqLwogICAgICAgIAlDcnlwdG9KUy5saWIuQ2lwaGVyIHx8IChmdW5jdGlvbiAodW5kZWZpbmVkJDEpIHsKICAgICAgICAJICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgdmFyIEMgPSBDcnlwdG9KUzsKICAgICAgICAJICAgIHZhciBDX2xpYiA9IEMubGliOwogICAgICAgIAkgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlOwogICAgICAgIAkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKICAgICAgICAJICAgIHZhciBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQ19saWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobTsKICAgICAgICAJICAgIHZhciBDX2VuYyA9IEMuZW5jOwogICAgICAgIAkgICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4OwogICAgICAgIAkgICAgdmFyIEJhc2U2NCA9IENfZW5jLkJhc2U2NDsKICAgICAgICAJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CiAgICAgICAgCSAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERjsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIEFic3RyYWN0IGJhc2UgY2lwaGVyIHRlbXBsYXRlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoaXMgY2lwaGVyJ3Mga2V5IHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKQogICAgICAgIAkgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl2U2l6ZSBUaGlzIGNpcGhlcidzIElWIHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKQogICAgICAgIAkgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9FTkNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBlbmNyeXB0aW9uIG1vZGUuCiAgICAgICAgCSAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX0RFQ19YRk9STV9NT0RFIEEgY29uc3RhbnQgcmVwcmVzZW50aW5nIGRlY3J5cHRpb24gbW9kZS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIENpcGhlciA9IENfbGliLkNpcGhlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDcmVhdGVzIHRoaXMgY2lwaGVyIGluIGVuY3J5cHRpb24gbW9kZS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7Q2lwaGVyfSBBIGNpcGhlciBpbnN0YW5jZS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZUVuY3J5cHRvcihrZXlXb3JkQXJyYXksIHsgaXY6IGl2V29yZEFycmF5IH0pOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNyZWF0ZUVuY3J5cHRvcjogZnVuY3Rpb24gKGtleSwgY2ZnKSB7CiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh0aGlzLl9FTkNfWEZPUk1fTU9ERSwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENyZWF0ZXMgdGhpcyBjaXBoZXIgaW4gZGVjcnlwdGlvbiBtb2RlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJ9IEEgY2lwaGVyIGluc3RhbmNlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlRGVjcnlwdG9yKGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgY3JlYXRlRGVjcnlwdG9yOiBmdW5jdGlvbiAoa2V5LCBjZmcpIHsKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0RFQ19YRk9STV9NT0RFLCBrZXksIGNmZyk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlci4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4Zm9ybU1vZGUgRWl0aGVyIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gdHJhbnNvcm1hdGlvbiBtb2RlIGNvbnN0YW50LgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlKENyeXB0b0pTLmFsZ28uQUVTLl9FTkNfWEZPUk1fTU9ERSwga2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBpbml0OiBmdW5jdGlvbiAoeGZvcm1Nb2RlLCBrZXksIGNmZykgewogICAgICAgIAkgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHMKICAgICAgICAJICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFN0b3JlIHRyYW5zZm9ybSBtb2RlIGFuZCBrZXkKICAgICAgICAJICAgICAgICAgICAgdGhpcy5feGZvcm1Nb2RlID0geGZvcm1Nb2RlOwogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9rZXkgPSBrZXk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXMKICAgICAgICAJICAgICAgICAgICAgdGhpcy5yZXNldCgpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIFJlc2V0cyB0aGlzIGNpcGhlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgY2lwaGVyLnJlc2V0KCk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXIKICAgICAgICAJICAgICAgICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1jaXBoZXIgbG9naWMKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEFkZHMgZGF0YSB0byBiZSBlbmNyeXB0ZWQgb3IgZGVjcnlwdGVkLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhVXBkYXRlIFRoZSBkYXRhIHRvIGVuY3J5cHQgb3IgZGVjcnlwdC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgcHJvY2Vzc2luZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5wcm9jZXNzKCdkYXRhJyk7CiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIucHJvY2Vzcyh3b3JkQXJyYXkpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uIChkYXRhVXBkYXRlKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIEFwcGVuZAogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9hcHBlbmQoZGF0YVVwZGF0ZSk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBQcm9jZXNzIGF2YWlsYWJsZSBibG9ja3MKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3MoKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIGVuY3J5cHRpb24gb3IgZGVjcnlwdGlvbiBwcm9jZXNzLgogICAgICAgIAkgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGZpbmFsIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBmaW5hbCBwcm9jZXNzaW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCk7CiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUoJ2RhdGEnKTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSh3b3JkQXJyYXkpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGZpbmFsaXplOiBmdW5jdGlvbiAoZGF0YVVwZGF0ZSkgewogICAgICAgIAkgICAgICAgICAgICAvLyBGaW5hbCBkYXRhIHVwZGF0ZQogICAgICAgIAkgICAgICAgICAgICBpZiAoZGF0YVVwZGF0ZSkgewogICAgICAgIAkgICAgICAgICAgICAgICAgdGhpcy5fYXBwZW5kKGRhdGFVcGRhdGUpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWNpcGhlciBsb2dpYwogICAgICAgIAkgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWREYXRhID0gdGhpcy5fZG9GaW5hbGl6ZSgpOwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkRGF0YTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBrZXlTaXplOiAxMjgvMzIsCgogICAgICAgIAkgICAgICAgIGl2U2l6ZTogMTI4LzMyLAoKICAgICAgICAJICAgICAgICBfRU5DX1hGT1JNX01PREU6IDEsCgogICAgICAgIAkgICAgICAgIF9ERUNfWEZPUk1fTU9ERTogMiwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ3JlYXRlcyBzaG9ydGN1dCBmdW5jdGlvbnMgdG8gYSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIHRvIGNyZWF0ZSBhIGhlbHBlciBmb3IuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIGVuY3J5cHQgYW5kIGRlY3J5cHQgc2hvcnRjdXQgZnVuY3Rpb25zLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgQUVTID0gQ3J5cHRvSlMubGliLkNpcGhlci5fY3JlYXRlSGVscGVyKENyeXB0b0pTLmFsZ28uQUVTKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBfY3JlYXRlSGVscGVyOiAoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICBmdW5jdGlvbiBzZWxlY3RDaXBoZXJTdHJhdGVneShrZXkpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBhc3N3b3JkQmFzZWRDaXBoZXI7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZXJpYWxpemFibGVDaXBoZXI7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2lwaGVyKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChtZXNzYWdlLCBrZXksIGNmZykgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KS5lbmNyeXB0KGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBrZXksIGNmZykgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KS5kZWNyeXB0KGNpcGhlciwgY2lwaGVydGV4dCwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgICAgIH07CiAgICAgICAgCSAgICAgICAgICAgIH07CiAgICAgICAgCSAgICAgICAgfSgpKQogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBBYnN0cmFjdCBiYXNlIHN0cmVhbSBjaXBoZXIgdGVtcGxhdGUuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGNpcGhlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogMSAoMzIgYml0cykKICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFN0cmVhbUNpcGhlciA9IENfbGliLlN0cmVhbUNpcGhlciA9IENpcGhlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFByb2Nlc3MgcGFydGlhbCBibG9ja3MKICAgICAgICAJICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpOwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkQmxvY2tzOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIGJsb2NrU2l6ZTogMQogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBNb2RlIG5hbWVzcGFjZS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIENfbW9kZSA9IEMubW9kZSA9IHt9OwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQWJzdHJhY3QgYmFzZSBibG9jayBjaXBoZXIgbW9kZSB0ZW1wbGF0ZS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIEJsb2NrQ2lwaGVyTW9kZSA9IENfbGliLkJsb2NrQ2lwaGVyTW9kZSA9IEJhc2UuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZW5jcnlwdGlvbi4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZUVuY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7CiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiB0aGlzLkVuY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdik7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ3JlYXRlcyB0aGlzIG1vZGUgZm9yIGRlY3J5cHRpb24uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5jcmVhdGVEZWNyeXB0b3IoY2lwaGVyLCBpdi53b3Jkcyk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgY3JlYXRlRGVjcnlwdG9yOiBmdW5jdGlvbiAoY2lwaGVyLCBpdikgewogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gdGhpcy5EZWNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBtb2RlLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuRW5jcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2LndvcmRzKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyLCBpdikgewogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9jaXBoZXIgPSBjaXBoZXI7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2l2ID0gaXY7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBDaXBoZXIgQmxvY2sgQ2hhaW5pbmcgbW9kZS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIENCQyA9IENfbW9kZS5DQkMgPSAoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEFic3RyYWN0IGJhc2UgQ0JDIG1vZGUuCiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgdmFyIENCQyA9IEJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTsKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ0JDIGVuY3J5cHRvci4KICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBDQkMuRW5jcnlwdG9yID0gQ0JDLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAgICAgKiBQcm9jZXNzZXMgdGhlIGRhdGEgYmxvY2sgYXQgb2Zmc2V0LgogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyBUaGUgZGF0YSB3b3JkcyB0byBvcGVyYXRlIG9uLgogICAgICAgIAkgICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgd2hlcmUgdGhlIGJsb2NrIHN0YXJ0cy4KICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogICAgIG1vZGUucHJvY2Vzc0Jsb2NrKGRhdGEud29yZHMsIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgICAgICAqLwogICAgICAgIAkgICAgICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBYT1IgYW5kIGVuY3J5cHQKICAgICAgICAJICAgICAgICAgICAgICAgIHhvckJsb2NrLmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplKTsKICAgICAgICAJICAgICAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrCiAgICAgICAgCSAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICB9KTsKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ0JDIGRlY3J5cHRvci4KICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBDQkMuRGVjcnlwdG9yID0gQ0JDLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAgICAgKiBQcm9jZXNzZXMgdGhlIGRhdGEgYmxvY2sgYXQgb2Zmc2V0LgogICAgICAgIAkgICAgICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyBUaGUgZGF0YSB3b3JkcyB0byBvcGVyYXRlIG9uLgogICAgICAgIAkgICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgd2hlcmUgdGhlIGJsb2NrIHN0YXJ0cy4KICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgICAgICoKICAgICAgICAJICAgICAgICAgICAgICogICAgIG1vZGUucHJvY2Vzc0Jsb2NrKGRhdGEud29yZHMsIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgICAgICAqLwogICAgICAgIAkgICAgICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2sKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gRGVjcnlwdCBhbmQgWE9SCiAgICAgICAgCSAgICAgICAgICAgICAgICBjaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpOwogICAgICAgIAkgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpOwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFRoaXMgYmxvY2sgYmVjb21lcyB0aGUgcHJldmlvdXMgYmxvY2sKICAgICAgICAJICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHRoaXNCbG9jazsKICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0pOwoKICAgICAgICAJICAgICAgICBmdW5jdGlvbiB4b3JCbG9jayh3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDaG9vc2UgbWl4aW5nIGJsb2NrCiAgICAgICAgCSAgICAgICAgICAgIGlmIChpdikgewogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gaXY7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2NrcwogICAgICAgIAkgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQkMTsKICAgICAgICAJICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBibG9jayA9IHRoaXMuX3ByZXZCbG9jazsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gWE9SIGJsb2NrcwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBibG9ja1tpXTsKICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgcmV0dXJuIENCQzsKICAgICAgICAJICAgIH0oKSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBQYWRkaW5nIG5hbWVzcGFjZS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIENfcGFkID0gQy5wYWQgPSB7fTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFBLQ1MgIzUvNyBwYWRkaW5nIHN0cmF0ZWd5LgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgUGtjczcgPSBDX3BhZC5Qa2NzNyA9IHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBQYWRzIGRhdGEgdXNpbmcgdGhlIGFsZ29yaXRobSBkZWZpbmVkIGluIFBLQ1MgIzUvNy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHBhZC4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gYmxvY2tTaXplIFRoZSBtdWx0aXBsZSB0aGF0IHRoZSBkYXRhIHNob3VsZCBiZSBwYWRkZWQgdG8uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy5wYWQod29yZEFycmF5LCA0KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXMKICAgICAgICAJICAgICAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBibG9ja1NpemVCeXRlcyAtIGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENyZWF0ZSBwYWRkaW5nIHdvcmQKICAgICAgICAJICAgICAgICAgICAgdmFyIHBhZGRpbmdXb3JkID0gKG5QYWRkaW5nQnl0ZXMgPDwgMjQpIHwgKG5QYWRkaW5nQnl0ZXMgPDwgMTYpIHwgKG5QYWRkaW5nQnl0ZXMgPDwgOCkgfCBuUGFkZGluZ0J5dGVzOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ3JlYXRlIHBhZGRpbmcKICAgICAgICAJICAgICAgICAgICAgdmFyIHBhZGRpbmdXb3JkcyA9IFtdOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5QYWRkaW5nQnl0ZXM7IGkgKz0gNCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgcGFkZGluZ1dvcmRzLnB1c2gocGFkZGluZ1dvcmQpOwogICAgICAgIAkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgICAgIHZhciBwYWRkaW5nID0gV29yZEFycmF5LmNyZWF0ZShwYWRkaW5nV29yZHMsIG5QYWRkaW5nQnl0ZXMpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmcKICAgICAgICAJICAgICAgICAgICAgZGF0YS5jb25jYXQocGFkZGluZyk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogVW5wYWRzIGRhdGEgdGhhdCBoYWQgYmVlbiBwYWRkZWQgdXNpbmcgdGhlIGFsZ29yaXRobSBkZWZpbmVkIGluIFBLQ1MgIzUvNy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHVucGFkLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICBDcnlwdG9KUy5wYWQuUGtjczcudW5wYWQod29yZEFycmF5KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gR2V0IG51bWJlciBvZiBwYWRkaW5nIGJ5dGVzIGZyb20gbGFzdCBieXRlCiAgICAgICAgCSAgICAgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7CgogICAgICAgIAkgICAgICAgICAgICAvLyBSZW1vdmUgcGFkZGluZwogICAgICAgIAkgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIHRlbXBsYXRlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBjaXBoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDQgKDEyOCBiaXRzKQogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlciA9IENpcGhlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwcm9wZXJ0eSB7TW9kZX0gbW9kZSBUaGUgYmxvY2sgbW9kZSB0byB1c2UuIERlZmF1bHQ6IENCQwogICAgICAgIAkgICAgICAgICAqIEBwcm9wZXJ0eSB7UGFkZGluZ30gcGFkZGluZyBUaGUgcGFkZGluZyBzdHJhdGVneSB0byB1c2UuIERlZmF1bHQ6IFBrY3M3CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgY2ZnOiBDaXBoZXIuY2ZnLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgICAgIG1vZGU6IENCQywKICAgICAgICAJICAgICAgICAgICAgcGFkZGluZzogUGtjczcKICAgICAgICAJICAgICAgICB9KSwKCiAgICAgICAgCSAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gUmVzZXQgY2lwaGVyCiAgICAgICAgCSAgICAgICAgICAgIENpcGhlci5yZXNldC5jYWxsKHRoaXMpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZzsKICAgICAgICAJICAgICAgICAgICAgdmFyIGl2ID0gY2ZnLml2OwogICAgICAgIAkgICAgICAgICAgICB2YXIgbW9kZSA9IGNmZy5tb2RlOwoKICAgICAgICAJICAgICAgICAgICAgLy8gUmVzZXQgYmxvY2sgbW9kZQogICAgICAgIAkgICAgICAgICAgICBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0VOQ19YRk9STV9NT0RFKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgbW9kZUNyZWF0b3IgPSBtb2RlLmNyZWF0ZUVuY3J5cHRvcjsKICAgICAgICAJICAgICAgICAgICAgfSBlbHNlIC8qIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fREVDX1hGT1JNX01PREUpICovIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBtb2RlQ3JlYXRvciA9IG1vZGUuY3JlYXRlRGVjcnlwdG9yOwogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gS2VlcCBhdCBsZWFzdCBvbmUgYmxvY2sgaW4gdGhlIGJ1ZmZlciBmb3IgdW5wYWRkaW5nCiAgICAgICAgCSAgICAgICAgICAgICAgICB0aGlzLl9taW5CdWZmZXJTaXplID0gMTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgaWYgKHRoaXMuX21vZGUgJiYgdGhpcy5fbW9kZS5fX2NyZWF0b3IgPT0gbW9kZUNyZWF0b3IpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHRoaXMuX21vZGUuaW5pdCh0aGlzLCBpdiAmJiBpdi53b3Jkcyk7CiAgICAgICAgCSAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB0aGlzLl9tb2RlID0gbW9kZUNyZWF0b3IuY2FsbChtb2RlLCB0aGlzLCBpdiAmJiBpdi53b3Jkcyk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB0aGlzLl9tb2RlLl9fY3JlYXRvciA9IG1vZGVDcmVhdG9yOwogICAgICAgIAkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkgewogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9tb2RlLnByb2Nlc3NCbG9jayh3b3Jkcywgb2Zmc2V0KTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgcGFkZGluZyA9IHRoaXMuY2ZnLnBhZGRpbmc7CgogICAgICAgIAkgICAgICAgICAgICAvLyBGaW5hbGl6ZQogICAgICAgIAkgICAgICAgICAgICBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0VOQ19YRk9STV9NT0RFKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBQYWQgZGF0YQogICAgICAgIAkgICAgICAgICAgICAgICAgcGFkZGluZy5wYWQodGhpcy5fZGF0YSwgdGhpcy5ibG9ja1NpemUpOwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgZmluYWwgYmxvY2tzCiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7CiAgICAgICAgCSAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0RFQ19YRk9STV9NT0RFKSAqLyB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGZpbmFsIGJsb2NrcwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpOwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFVucGFkIGRhdGEKICAgICAgICAJICAgICAgICAgICAgICAgIHBhZGRpbmcudW5wYWQoZmluYWxQcm9jZXNzZWRCbG9ja3MpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWRCbG9ja3M7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgYmxvY2tTaXplOiAxMjgvMzIKICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQSBjb2xsZWN0aW9uIG9mIGNpcGhlciBwYXJhbWV0ZXJzLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBjaXBoZXJ0ZXh0IFRoZSByYXcgY2lwaGVydGV4dC4KICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBrZXkgVGhlIGtleSB0byB0aGlzIGNpcGhlcnRleHQuCiAgICAgICAgCSAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uCiAgICAgICAgCSAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gc2FsdCBUaGUgc2FsdCB1c2VkIHdpdGggYSBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi4KICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7Q2lwaGVyfSBhbGdvcml0aG0gVGhlIGNpcGhlciBhbGdvcml0aG0uCiAgICAgICAgCSAgICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi4KICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7UGFkZGluZ30gcGFkZGluZyBUaGUgcGFkZGluZyBzY2hlbWUgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi4KICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIGJsb2NrIHNpemUgb2YgdGhlIGNpcGhlci4KICAgICAgICAJICAgICAqIEBwcm9wZXJ0eSB7Rm9ybWF0fSBmb3JtYXR0ZXIgVGhlIGRlZmF1bHQgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IHRoaXMgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBzdHJpbmcuCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBDaXBoZXJQYXJhbXMgPSBDX2xpYi5DaXBoZXJQYXJhbXMgPSBCYXNlLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNpcGhlclBhcmFtcyBBbiBvYmplY3Qgd2l0aCBhbnkgb2YgdGhlIHBvc3NpYmxlIGNpcGhlciBwYXJhbWV0ZXJzLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMubGliLkNpcGhlclBhcmFtcy5jcmVhdGUoewogICAgICAgIAkgICAgICAgICAqICAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dFdvcmRBcnJheSwKICAgICAgICAJICAgICAgICAgKiAgICAgICAgIGtleToga2V5V29yZEFycmF5LAogICAgICAgIAkgICAgICAgICAqICAgICAgICAgaXY6IGl2V29yZEFycmF5LAogICAgICAgIAkgICAgICAgICAqICAgICAgICAgc2FsdDogc2FsdFdvcmRBcnJheSwKICAgICAgICAJICAgICAgICAgKiAgICAgICAgIGFsZ29yaXRobTogQ3J5cHRvSlMuYWxnby5BRVMsCiAgICAgICAgCSAgICAgICAgICogICAgICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQywKICAgICAgICAJICAgICAgICAgKiAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5QS0NTNywKICAgICAgICAJICAgICAgICAgKiAgICAgICAgIGJsb2NrU2l6ZTogNCwKICAgICAgICAJICAgICAgICAgKiAgICAgICAgIGZvcm1hdHRlcjogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wKICAgICAgICAJICAgICAgICAgKiAgICAgfSk7CiAgICAgICAgCSAgICAgICAgICovCiAgICAgICAgCSAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykgewogICAgICAgIAkgICAgICAgICAgICB0aGlzLm1peEluKGNpcGhlclBhcmFtcyk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ29udmVydHMgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0fSBmb3JtYXR0ZXIgKE9wdGlvbmFsKSBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byB1c2UuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCBjaXBoZXIgcGFyYW1zLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHRocm93cyBFcnJvciBJZiBuZWl0aGVyIHRoZSBmb3JtYXR0ZXIgbm9yIHRoZSBkZWZhdWx0IGZvcm1hdHRlciBpcyBzZXQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMgKyAnJzsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcy50b1N0cmluZygpOwogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGZvcm1hdHRlcikgewogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gKGZvcm1hdHRlciB8fCB0aGlzLmZvcm1hdHRlcikuc3RyaW5naWZ5KHRoaXMpOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogRm9ybWF0IG5hbWVzcGFjZS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIENfZm9ybWF0ID0gQy5mb3JtYXQgPSB7fTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIE9wZW5TU0wgZm9ybWF0dGluZyBzdHJhdGVneS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIE9wZW5TU0xGb3JtYXR0ZXIgPSBDX2Zvcm1hdC5PcGVuU1NMID0gewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbnZlcnRzIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYW4gT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfSBjaXBoZXJQYXJhbXMgVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIG9wZW5TU0xTdHJpbmcgPSBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTC5zdHJpbmdpZnkoY2lwaGVyUGFyYW1zKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gY2lwaGVyUGFyYW1zLmNpcGhlcnRleHQ7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBzYWx0ID0gY2lwaGVyUGFyYW1zLnNhbHQ7CgogICAgICAgIAkgICAgICAgICAgICAvLyBGb3JtYXQKICAgICAgICAJICAgICAgICAgICAgaWYgKHNhbHQpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDUzNjE2Yzc0LCAweDY1NjQ1ZjVmXSkuY29uY2F0KHNhbHQpLmNvbmNhdChjaXBoZXJ0ZXh0KTsKICAgICAgICAJICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBjaXBoZXJ0ZXh0OwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gd29yZEFycmF5LnRvU3RyaW5nKEJhc2U2NCk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ29udmVydHMgYW4gT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZyB0byBhIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9wZW5TU0xTdHIgVGhlIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGNpcGhlclBhcmFtcyA9IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMLnBhcnNlKG9wZW5TU0xTdHJpbmcpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAob3BlblNTTFN0cikgewogICAgICAgIAkgICAgICAgICAgICAvLyBQYXJzZSBiYXNlNjQKICAgICAgICAJICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBCYXNlNjQucGFyc2Uob3BlblNTTFN0cik7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgY2lwaGVydGV4dFdvcmRzID0gY2lwaGVydGV4dC53b3JkczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFRlc3QgZm9yIHNhbHQKICAgICAgICAJICAgICAgICAgICAgaWYgKGNpcGhlcnRleHRXb3Jkc1swXSA9PSAweDUzNjE2Yzc0ICYmIGNpcGhlcnRleHRXb3Jkc1sxXSA9PSAweDY1NjQ1ZjVmKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHNhbHQKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBzYWx0ID0gV29yZEFycmF5LmNyZWF0ZShjaXBoZXJ0ZXh0V29yZHMuc2xpY2UoMiwgNCkpOwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBzYWx0IGZyb20gY2lwaGVydGV4dAogICAgICAgIAkgICAgICAgICAgICAgICAgY2lwaGVydGV4dFdvcmRzLnNwbGljZSgwLCA0KTsKICAgICAgICAJICAgICAgICAgICAgICAgIGNpcGhlcnRleHQuc2lnQnl0ZXMgLT0gMTY7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsgY2lwaGVydGV4dDogY2lwaGVydGV4dCwgc2FsdDogc2FsdCB9KTsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9OwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogQSBjaXBoZXIgd3JhcHBlciB0aGF0IHJldHVybnMgY2lwaGVydGV4dCBhcyBhIHNlcmlhbGl6YWJsZSBjaXBoZXIgcGFyYW1zIG9iamVjdC4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFNlcmlhbGl6YWJsZUNpcGhlciA9IENfbGliLlNlcmlhbGl6YWJsZUNpcGhlciA9IEJhc2UuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcHJvcGVydHkge0Zvcm1hdHRlcn0gZm9ybWF0IFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIGNvbnZlcnQgY2lwaGVyIHBhcmFtIG9iamVjdHMgdG8gYW5kIGZyb20gYSBzdHJpbmcuIERlZmF1bHQ6IE9wZW5TU0wKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICAgICAgZm9ybWF0OiBPcGVuU1NMRm9ybWF0dGVyCiAgICAgICAgCSAgICAgICAgfSksCgogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIEVuY3J5cHRzIGEgbWVzc2FnZS4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5KTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSwgeyBpdjogaXYgfSk7CiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXksIHsgaXY6IGl2LCBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIG1lc3NhZ2UsIGtleSwgY2ZnKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0cwogICAgICAgIAkgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEVuY3J5cHQKICAgICAgICAJICAgICAgICAgICAgdmFyIGVuY3J5cHRvciA9IGNpcGhlci5jcmVhdGVFbmNyeXB0b3Ioa2V5LCBjZmcpOwogICAgICAgIAkgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGVuY3J5cHRvci5maW5hbGl6ZShtZXNzYWdlKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CiAgICAgICAgCSAgICAgICAgICAgIHZhciBjaXBoZXJDZmcgPSBlbmNyeXB0b3IuY2ZnOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoewogICAgICAgIAkgICAgICAgICAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dCwKICAgICAgICAJICAgICAgICAgICAgICAgIGtleToga2V5LAogICAgICAgIAkgICAgICAgICAgICAgICAgaXY6IGNpcGhlckNmZy5pdiwKICAgICAgICAJICAgICAgICAgICAgICAgIGFsZ29yaXRobTogY2lwaGVyLAogICAgICAgIAkgICAgICAgICAgICAgICAgbW9kZTogY2lwaGVyQ2ZnLm1vZGUsCiAgICAgICAgCSAgICAgICAgICAgICAgICBwYWRkaW5nOiBjaXBoZXJDZmcucGFkZGluZywKICAgICAgICAJICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogY2lwaGVyLmJsb2NrU2l6ZSwKICAgICAgICAJICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogY2ZnLmZvcm1hdAogICAgICAgIAkgICAgICAgICAgICB9KTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBrZXksIGNmZykgewogICAgICAgIAkgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHMKICAgICAgICAJICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBDaXBoZXJQYXJhbXMKICAgICAgICAJICAgICAgICAgICAgY2lwaGVydGV4dCA9IHRoaXMuX3BhcnNlKGNpcGhlcnRleHQsIGNmZy5mb3JtYXQpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gRGVjcnlwdAogICAgICAgIAkgICAgICAgICAgICB2YXIgcGxhaW50ZXh0ID0gY2lwaGVyLmNyZWF0ZURlY3J5cHRvcihrZXksIGNmZykuZmluYWxpemUoY2lwaGVydGV4dC5jaXBoZXJ0ZXh0KTsKCiAgICAgICAgCSAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ29udmVydHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0IHRvIENpcGhlclBhcmFtcywKICAgICAgICAJICAgICAgICAgKiBlbHNlIGFzc3VtZWQgQ2lwaGVyUGFyYW1zIGFscmVhZHkgYW5kIHJldHVybnMgY2lwaGVydGV4dCB1bmNoYW5nZWQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQuCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtGb3JtYXR0ZXJ9IGZvcm1hdCBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byB1c2UgdG8gcGFyc2Ugc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBUaGUgdW5zZXJpYWxpemVkIGNpcGhlcnRleHQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5fcGFyc2UoY2lwaGVydGV4dFN0cmluZ09yUGFyYW1zLCBmb3JtYXQpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIF9wYXJzZTogZnVuY3Rpb24gKGNpcGhlcnRleHQsIGZvcm1hdCkgewogICAgICAgIAkgICAgICAgICAgICBpZiAodHlwZW9mIGNpcGhlcnRleHQgPT0gJ3N0cmluZycpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQucGFyc2UoY2lwaGVydGV4dCwgdGhpcyk7CiAgICAgICAgCSAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICByZXR1cm4gY2lwaGVydGV4dDsKICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogS2V5IGRlcml2YXRpb24gZnVuY3Rpb24gbmFtZXNwYWNlLgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgQ19rZGYgPSBDLmtkZiA9IHt9OwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogT3BlblNTTCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIE9wZW5TU0xLZGYgPSBDX2tkZi5PcGVuU1NMID0gewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIERlcml2ZXMgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gZGVyaXZlIGZyb20uCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIGtleSB0byBnZW5lcmF0ZS4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaXZTaXplIFRoZSBzaXplIGluIHdvcmRzIG9mIHRoZSBJViB0byBnZW5lcmF0ZS4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgKE9wdGlvbmFsKSBBIDY0LWJpdCBzYWx0IHRvIHVzZS4gSWYgb21pdHRlZCwgYSBzYWx0IHdpbGwgYmUgZ2VuZXJhdGVkIHJhbmRvbWx5LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0IHdpdGggdGhlIGtleSwgSVYsIGFuZCBzYWx0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIpOwogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIsICdzYWx0c2FsdCcpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwga2V5U2l6ZSwgaXZTaXplLCBzYWx0KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBzYWx0CiAgICAgICAgCSAgICAgICAgICAgIGlmICghc2FsdCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgc2FsdCA9IFdvcmRBcnJheS5yYW5kb20oNjQvOCk7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIERlcml2ZSBrZXkgYW5kIElWCiAgICAgICAgCSAgICAgICAgICAgIHZhciBrZXkgPSBFdnBLREYuY3JlYXRlKHsga2V5U2l6ZToga2V5U2l6ZSArIGl2U2l6ZSB9KS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFNlcGFyYXRlIGtleSBhbmQgSVYKICAgICAgICAJICAgICAgICAgICAgdmFyIGl2ID0gV29yZEFycmF5LmNyZWF0ZShrZXkud29yZHMuc2xpY2Uoa2V5U2l6ZSksIGl2U2l6ZSAqIDQpOwogICAgICAgIAkgICAgICAgICAgICBrZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFJldHVybiBwYXJhbXMKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBrZXk6IGtleSwgaXY6IGl2LCBzYWx0OiBzYWx0IH0pOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH07CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBBIHNlcmlhbGl6YWJsZSBjaXBoZXIgd3JhcHBlciB0aGF0IGRlcml2ZXMgdGhlIGtleSBmcm9tIGEgcGFzc3dvcmQsCiAgICAgICAgCSAgICAgKiBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgUGFzc3dvcmRCYXNlZENpcGhlciA9IENfbGliLlBhc3N3b3JkQmFzZWRDaXBoZXIgPSBTZXJpYWxpemFibGVDaXBoZXIuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcHJvcGVydHkge0tERn0ga2RmIFRoZSBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiB0byB1c2UgdG8gZ2VuZXJhdGUgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC4gRGVmYXVsdDogT3BlblNTTAogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNmZzogU2VyaWFsaXphYmxlQ2lwaGVyLmNmZy5leHRlbmQoewogICAgICAgIAkgICAgICAgICAgICBrZGY6IE9wZW5TU0xLZGYKICAgICAgICAJICAgICAgICB9KSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogRW5jcnlwdHMgYSBtZXNzYWdlIHVzaW5nIGEgcGFzc3dvcmQuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZW5jcnlwdC4KICAgICAgICAJICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwgJ3Bhc3N3b3JkJyk7CiAgICAgICAgCSAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIG1lc3NhZ2UsIHBhc3N3b3JkLCBjZmcpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzCiAgICAgICAgCSAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zCiAgICAgICAgCSAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBBZGQgSVYgdG8gY29uZmlnCiAgICAgICAgCSAgICAgICAgICAgIGNmZy5pdiA9IGRlcml2ZWRQYXJhbXMuaXY7CgogICAgICAgIAkgICAgICAgICAgICAvLyBFbmNyeXB0CiAgICAgICAgCSAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIG1lc3NhZ2UsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gTWl4IGluIGRlcml2ZWQgcGFyYW1zCiAgICAgICAgCSAgICAgICAgICAgIGNpcGhlcnRleHQubWl4SW4oZGVyaXZlZFBhcmFtcyk7CgogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gY2lwaGVydGV4dDsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQgdXNpbmcgYSBwYXNzd29yZC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dCB0byBkZWNyeXB0LgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGZvcm1hdHRlZENpcGhlcnRleHQsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKICAgICAgICAJICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGNpcGhlcnRleHRQYXJhbXMsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBwYXNzd29yZCwgY2ZnKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0cwogICAgICAgIAkgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIENpcGhlclBhcmFtcwogICAgICAgIAkgICAgICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdCk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBvdGhlciBwYXJhbXMKICAgICAgICAJICAgICAgICAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBjZmcua2RmLmV4ZWN1dGUocGFzc3dvcmQsIGNpcGhlci5rZXlTaXplLCBjaXBoZXIuaXZTaXplLCBjaXBoZXJ0ZXh0LnNhbHQpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZwogICAgICAgIAkgICAgICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2OwoKICAgICAgICAJICAgICAgICAgICAgLy8gRGVjcnlwdAogICAgICAgIAkgICAgICAgICAgICB2YXIgcGxhaW50ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIGNpcGhlcnRleHQsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpOwoKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIHBsYWludGV4dDsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9KTsKICAgICAgICAJfSgpKTsKCgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIG1vZGVDZmIgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCBjaXBoZXJDb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJLyoqCiAgICAgICAgCSAqIENpcGhlciBGZWVkYmFjayBibG9jayBtb2RlLgogICAgICAgIAkgKi8KICAgICAgICAJQ3J5cHRvSlMubW9kZS5DRkIgPSAoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgdmFyIENGQiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7CgogICAgICAgIAkgICAgQ0ZCLkVuY3J5cHRvciA9IENGQi5leHRlbmQoewogICAgICAgIAkgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplOwoKICAgICAgICAJICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0LmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpOwoKICAgICAgICAJICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrCiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9KTsKCiAgICAgICAgCSAgICBDRkIuRGVjcnlwdG9yID0gQ0ZCLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjsKICAgICAgICAJICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7CgogICAgICAgIAkgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2sKICAgICAgICAJICAgICAgICAgICAgdmFyIHRoaXNCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTsKCiAgICAgICAgCSAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdC5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSwgY2lwaGVyKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFRoaXMgYmxvY2sgYmVjb21lcyB0aGUgcHJldmlvdXMgYmxvY2sKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gdGhpc0Jsb2NrOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIGZ1bmN0aW9uIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdCh3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUsIGNpcGhlcikgewogICAgICAgIAkgICAgICAgIC8vIFNob3J0Y3V0CiAgICAgICAgCSAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7CgogICAgICAgIAkgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbQogICAgICAgIAkgICAgICAgIGlmIChpdikgewogICAgICAgIAkgICAgICAgICAgICB2YXIga2V5c3RyZWFtID0gaXYuc2xpY2UoMCk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzCiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkOwogICAgICAgIAkgICAgICAgIH0gZWxzZSB7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSB0aGlzLl9wcmV2QmxvY2s7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTsKCiAgICAgICAgCSAgICAgICAgLy8gRW5jcnlwdAogICAgICAgIAkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldOwogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0KCiAgICAgICAgCSAgICByZXR1cm4gQ0ZCOwogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5tb2RlLkNGQjsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgbW9kZUN0ciA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUsIGNpcGhlckNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkvKioKICAgICAgICAJICogQ291bnRlciBibG9jayBtb2RlLgogICAgICAgIAkgKi8KICAgICAgICAJQ3J5cHRvSlMubW9kZS5DVFIgPSAoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgdmFyIENUUiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7CgogICAgICAgIAkgICAgdmFyIEVuY3J5cHRvciA9IENUUi5FbmNyeXB0b3IgPSBDVFIuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyOwogICAgICAgIAkgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBjb3VudGVyID0gdGhpcy5fY291bnRlcjsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbQogICAgICAgIAkgICAgICAgICAgICBpZiAoaXYpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyID0gaXYuc2xpY2UoMCk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2NrcwogICAgICAgIAkgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMCk7CiAgICAgICAgCSAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEluY3JlbWVudCBjb3VudGVyCiAgICAgICAgCSAgICAgICAgICAgIGNvdW50ZXJbYmxvY2tTaXplIC0gMV0gPSAoY291bnRlcltibG9ja1NpemUgLSAxXSArIDEpIHwgMDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEVuY3J5cHQKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldOwogICAgICAgIAkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgQ1RSLkRlY3J5cHRvciA9IEVuY3J5cHRvcjsKCiAgICAgICAgCSAgICByZXR1cm4gQ1RSOwogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5tb2RlLkNUUjsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgbW9kZUN0ckdsYWRtYW4gPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCBjaXBoZXJDb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJLyoqIEBwcmVzZXJ2ZQogICAgICAgIAkgKiBDb3VudGVyIGJsb2NrIG1vZGUgY29tcGF0aWJsZSB3aXRoICBEciBCcmlhbiBHbGFkbWFuIGZpbGVlbmMuYwogICAgICAgIAkgKiBkZXJpdmVkIGZyb20gQ3J5cHRvSlMubW9kZS5DVFIKICAgICAgICAJICogSmFuIEhydWJ5IGpocnVieS53ZWJAZ21haWwuY29tCiAgICAgICAgCSAqLwogICAgICAgIAlDcnlwdG9KUy5tb2RlLkNUUkdsYWRtYW4gPSAoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgdmFyIENUUkdsYWRtYW4gPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpOwoKICAgICAgICAJCWZ1bmN0aW9uIGluY1dvcmQod29yZCkKICAgICAgICAJCXsKICAgICAgICAJCQlpZiAoKCh3b3JkID4+IDI0KSAmIDB4ZmYpID09PSAweGZmKSB7IC8vb3ZlcmZsb3cKICAgICAgICAJCQl2YXIgYjEgPSAod29yZCA+PiAxNikmMHhmZjsKICAgICAgICAJCQl2YXIgYjIgPSAod29yZCA+PiA4KSYweGZmOwogICAgICAgIAkJCXZhciBiMyA9IHdvcmQgJiAweGZmOwoKICAgICAgICAJCQlpZiAoYjEgPT09IDB4ZmYpIC8vIG92ZXJmbG93IGIxCiAgICAgICAgCQkJewogICAgICAgIAkJCWIxID0gMDsKICAgICAgICAJCQlpZiAoYjIgPT09IDB4ZmYpCiAgICAgICAgCQkJewogICAgICAgIAkJCQliMiA9IDA7CiAgICAgICAgCQkJCWlmIChiMyA9PT0gMHhmZikKICAgICAgICAJCQkJewogICAgICAgIAkJCQkJYjMgPSAwOwogICAgICAgIAkJCQl9CiAgICAgICAgCQkJCWVsc2UKICAgICAgICAJCQkJewogICAgICAgIAkJCQkJKytiMzsKICAgICAgICAJCQkJfQogICAgICAgIAkJCX0KICAgICAgICAJCQllbHNlCiAgICAgICAgCQkJewogICAgICAgIAkJCQkrK2IyOwogICAgICAgIAkJCX0KICAgICAgICAJCQl9CiAgICAgICAgCQkJZWxzZQogICAgICAgIAkJCXsKICAgICAgICAJCQkrK2IxOwogICAgICAgIAkJCX0KCiAgICAgICAgCQkJd29yZCA9IDA7CiAgICAgICAgCQkJd29yZCArPSAoYjEgPDwgMTYpOwogICAgICAgIAkJCXdvcmQgKz0gKGIyIDw8IDgpOwogICAgICAgIAkJCXdvcmQgKz0gYjM7CiAgICAgICAgCQkJfQogICAgICAgIAkJCWVsc2UKICAgICAgICAJCQl7CiAgICAgICAgCQkJd29yZCArPSAoMHgwMSA8PCAyNCk7CiAgICAgICAgCQkJfQogICAgICAgIAkJCXJldHVybiB3b3JkOwogICAgICAgIAkJfQoKICAgICAgICAJCWZ1bmN0aW9uIGluY0NvdW50ZXIoY291bnRlcikKICAgICAgICAJCXsKICAgICAgICAJCQlpZiAoKGNvdW50ZXJbMF0gPSBpbmNXb3JkKGNvdW50ZXJbMF0pKSA9PT0gMCkKICAgICAgICAJCQl7CiAgICAgICAgCQkJCS8vIGVuY3JfZGF0YSBpbiBmaWxlZW5jLmMgZnJvbSAgRHIgQnJpYW4gR2xhZG1hbidzIGNvdW50cyBvbmx5IHdpdGggRFdPUkQgaiA8IDgKICAgICAgICAJCQkJY291bnRlclsxXSA9IGluY1dvcmQoY291bnRlclsxXSk7CiAgICAgICAgCQkJfQogICAgICAgIAkJCXJldHVybiBjb3VudGVyOwogICAgICAgIAkJfQoKICAgICAgICAJICAgIHZhciBFbmNyeXB0b3IgPSBDVFJHbGFkbWFuLkVuY3J5cHRvciA9IENUUkdsYWRtYW4uZXh0ZW5kKHsKICAgICAgICAJICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyOwogICAgICAgIAkgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBjb3VudGVyID0gdGhpcy5fY291bnRlcjsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbQogICAgICAgIAkgICAgICAgICAgICBpZiAoaXYpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyID0gaXYuc2xpY2UoMCk7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2NrcwogICAgICAgIAkgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCQkJCWluY0NvdW50ZXIoY291bnRlcik7CgogICAgICAgIAkJCQl2YXIga2V5c3RyZWFtID0gY291bnRlci5zbGljZSgwKTsKICAgICAgICAJICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApOwoKICAgICAgICAJICAgICAgICAgICAgLy8gRW5jcnlwdAogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9KTsKCiAgICAgICAgCSAgICBDVFJHbGFkbWFuLkRlY3J5cHRvciA9IEVuY3J5cHRvcjsKCiAgICAgICAgCSAgICByZXR1cm4gQ1RSR2xhZG1hbjsKICAgICAgICAJfSgpKTsKCgoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5tb2RlLkNUUkdsYWRtYW47CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIG1vZGVPZmIgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCBjaXBoZXJDb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJLyoqCiAgICAgICAgCSAqIE91dHB1dCBGZWVkYmFjayBibG9jayBtb2RlLgogICAgICAgIAkgKi8KICAgICAgICAJQ3J5cHRvSlMubW9kZS5PRkIgPSAoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgdmFyIE9GQiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7CgogICAgICAgIAkgICAgdmFyIEVuY3J5cHRvciA9IE9GQi5FbmNyeXB0b3IgPSBPRkIuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyOwogICAgICAgIAkgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSB0aGlzLl9rZXlzdHJlYW07CgogICAgICAgIAkgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW0KICAgICAgICAJICAgICAgICAgICAgaWYgKGl2KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBrZXlzdHJlYW0gPSB0aGlzLl9rZXlzdHJlYW0gPSBpdi5zbGljZSgwKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzCiAgICAgICAgCSAgICAgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDsKICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBFbmNyeXB0CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTsKICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIE9GQi5EZWNyeXB0b3IgPSBFbmNyeXB0b3I7CgogICAgICAgIAkgICAgcmV0dXJuIE9GQjsKICAgICAgICAJfSgpKTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMubW9kZS5PRkI7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIG1vZGVFY2IgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCBjaXBoZXJDb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJLyoqCiAgICAgICAgCSAqIEVsZWN0cm9uaWMgQ29kZWJvb2sgYmxvY2sgbW9kZS4KICAgICAgICAJICovCiAgICAgICAgCUNyeXB0b0pTLm1vZGUuRUNCID0gKGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgIHZhciBFQ0IgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpOwoKICAgICAgICAJICAgIEVDQi5FbmNyeXB0b3IgPSBFQ0IuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgRUNCLkRlY3J5cHRvciA9IEVDQi5leHRlbmQoewogICAgICAgIAkgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fY2lwaGVyLmRlY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICB9KTsKCiAgICAgICAgCSAgICByZXR1cm4gRUNCOwogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5tb2RlLkVDQjsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgcGFkQW5zaXg5MjMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCBjaXBoZXJDb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJLyoqCiAgICAgICAgCSAqIEFOU0kgWC45MjMgcGFkZGluZyBzdHJhdGVneS4KICAgICAgICAJICovCiAgICAgICAgCUNyeXB0b0pTLnBhZC5BbnNpWDkyMyA9IHsKICAgICAgICAJICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkgewogICAgICAgIAkgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgIHZhciBkYXRhU2lnQnl0ZXMgPSBkYXRhLnNpZ0J5dGVzOwogICAgICAgIAkgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7CgogICAgICAgIAkgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXMKICAgICAgICAJICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YVNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7CgogICAgICAgIAkgICAgICAgIC8vIENvbXB1dGUgbGFzdCBieXRlIHBvc2l0aW9uCiAgICAgICAgCSAgICAgICAgdmFyIGxhc3RCeXRlUG9zID0gZGF0YVNpZ0J5dGVzICsgblBhZGRpbmdCeXRlcyAtIDE7CgogICAgICAgIAkgICAgICAgIC8vIFBhZAogICAgICAgIAkgICAgICAgIGRhdGEuY2xhbXAoKTsKICAgICAgICAJICAgICAgICBkYXRhLndvcmRzW2xhc3RCeXRlUG9zID4+PiAyXSB8PSBuUGFkZGluZ0J5dGVzIDw8ICgyNCAtIChsYXN0Qnl0ZVBvcyAlIDQpICogOCk7CiAgICAgICAgCSAgICAgICAgZGF0YS5zaWdCeXRlcyArPSBuUGFkZGluZ0J5dGVzOwogICAgICAgIAkgICAgfSwKCiAgICAgICAgCSAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAJICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGUKICAgICAgICAJICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmOwoKICAgICAgICAJICAgICAgICAvLyBSZW1vdmUgcGFkZGluZwogICAgICAgIAkgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlczsKICAgICAgICAJICAgIH0KICAgICAgICAJfTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMucGFkLkFuc2l4OTIzOwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBwYWRJc28xMDEyNiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUsIGNpcGhlckNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkvKioKICAgICAgICAJICogSVNPIDEwMTI2IHBhZGRpbmcgc3RyYXRlZ3kuCiAgICAgICAgCSAqLwogICAgICAgIAlDcnlwdG9KUy5wYWQuSXNvMTAxMjYgPSB7CiAgICAgICAgCSAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHsKICAgICAgICAJICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7CgogICAgICAgIAkgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXMKICAgICAgICAJICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzOwoKICAgICAgICAJICAgICAgICAvLyBQYWQKICAgICAgICAJICAgICAgICBkYXRhLmNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbShuUGFkZGluZ0J5dGVzIC0gMSkpLgogICAgICAgIAkgICAgICAgICAgICAgY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFtuUGFkZGluZ0J5dGVzIDw8IDI0XSwgMSkpOwogICAgICAgIAkgICAgfSwKCiAgICAgICAgCSAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAJICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGUKICAgICAgICAJICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmOwoKICAgICAgICAJICAgICAgICAvLyBSZW1vdmUgcGFkZGluZwogICAgICAgIAkgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlczsKICAgICAgICAJICAgIH0KICAgICAgICAJfTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMucGFkLklzbzEwMTI2OwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBwYWRJc285Nzk3MSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUsIGNpcGhlckNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkvKioKICAgICAgICAJICogSVNPL0lFQyA5Nzk3LTEgUGFkZGluZyBNZXRob2QgMi4KICAgICAgICAJICovCiAgICAgICAgCUNyeXB0b0pTLnBhZC5Jc285Nzk3MSA9IHsKICAgICAgICAJICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkgewogICAgICAgIAkgICAgICAgIC8vIEFkZCAweDgwIGJ5dGUKICAgICAgICAJICAgICAgICBkYXRhLmNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHg4MDAwMDAwMF0sIDEpKTsKCiAgICAgICAgCSAgICAgICAgLy8gWmVybyBwYWQgdGhlIHJlc3QKICAgICAgICAJICAgICAgICBDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmcucGFkKGRhdGEsIGJsb2NrU2l6ZSk7CiAgICAgICAgCSAgICB9LAoKICAgICAgICAJICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIAkgICAgICAgIC8vIFJlbW92ZSB6ZXJvIHBhZGRpbmcKICAgICAgICAJICAgICAgICBDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmcudW5wYWQoZGF0YSk7CgogICAgICAgIAkgICAgICAgIC8vIFJlbW92ZSBvbmUgbW9yZSBieXRlIC0tIHRoZSAweDgwIGJ5dGUKICAgICAgICAJICAgICAgICBkYXRhLnNpZ0J5dGVzLS07CiAgICAgICAgCSAgICB9CiAgICAgICAgCX07CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLnBhZC5Jc285Nzk3MTsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgcGFkWmVyb3BhZGRpbmcgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCBjaXBoZXJDb3JlKTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJLyoqCiAgICAgICAgCSAqIFplcm8gcGFkZGluZyBzdHJhdGVneS4KICAgICAgICAJICovCiAgICAgICAgCUNyeXB0b0pTLnBhZC5aZXJvUGFkZGluZyA9IHsKICAgICAgICAJICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkgewogICAgICAgIAkgICAgICAgIC8vIFNob3J0Y3V0CiAgICAgICAgCSAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDsKCiAgICAgICAgCSAgICAgICAgLy8gUGFkCiAgICAgICAgCSAgICAgICAgZGF0YS5jbGFtcCgpOwogICAgICAgIAkgICAgICAgIGRhdGEuc2lnQnl0ZXMgKz0gYmxvY2tTaXplQnl0ZXMgLSAoKGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcykgfHwgYmxvY2tTaXplQnl0ZXMpOwogICAgICAgIAkgICAgfSwKCiAgICAgICAgCSAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAJICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzOwoKICAgICAgICAJICAgICAgICAvLyBVbnBhZAogICAgICAgIAkgICAgICAgIHZhciBpID0gZGF0YS5zaWdCeXRlcyAtIDE7CiAgICAgICAgCSAgICAgICAgd2hpbGUgKCEoKGRhdGFXb3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmYpKSB7CiAgICAgICAgCSAgICAgICAgICAgIGktLTsKICAgICAgICAJICAgICAgICB9CiAgICAgICAgCSAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGkgKyAxOwogICAgICAgIAkgICAgfQogICAgICAgIAl9OwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmc7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIHBhZE5vcGFkZGluZyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUsIGNpcGhlckNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkvKioKICAgICAgICAJICogQSBub29wIHBhZGRpbmcgc3RyYXRlZ3kuCiAgICAgICAgCSAqLwogICAgICAgIAlDcnlwdG9KUy5wYWQuTm9QYWRkaW5nID0gewogICAgICAgIAkgICAgcGFkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICB9LAoKICAgICAgICAJICAgIHVucGFkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICB9CiAgICAgICAgCX07CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLnBhZC5Ob1BhZGRpbmc7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIGZvcm1hdEhleCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUsIGNpcGhlckNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkoZnVuY3Rpb24gKHVuZGVmaW5lZCQxKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBDaXBoZXJQYXJhbXMgPSBDX2xpYi5DaXBoZXJQYXJhbXM7CiAgICAgICAgCSAgICB2YXIgQ19lbmMgPSBDLmVuYzsKICAgICAgICAJICAgIHZhciBIZXggPSBDX2VuYy5IZXg7CiAgICAgICAgCSAgICB2YXIgQ19mb3JtYXQgPSBDLmZvcm1hdDsKCiAgICAgICAgCSAgICB2YXIgSGV4Rm9ybWF0dGVyID0gQ19mb3JtYXQuSGV4ID0gewogICAgICAgIAkgICAgICAgIC8qKgogICAgICAgIAkgICAgICAgICAqIENvbnZlcnRzIHRoZSBjaXBoZXJ0ZXh0IG9mIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5zdHJpbmdpZnkoY2lwaGVyUGFyYW1zKTsKICAgICAgICAJICAgICAgICAgKi8KICAgICAgICAJICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHsKICAgICAgICAJICAgICAgICAgICAgcmV0dXJuIGNpcGhlclBhcmFtcy5jaXBoZXJ0ZXh0LnRvU3RyaW5nKEhleCk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgLyoqCiAgICAgICAgCSAgICAgICAgICogQ29udmVydHMgYSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgY2lwaGVydGV4dCBzdHJpbmcgdG8gYSBjaXBoZXIgcGFyYW1zIG9iamVjdC4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBUaGUgaGV4YWRlY2ltYWxseSBlbmNvZGVkIHN0cmluZy4KICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQHN0YXRpYwogICAgICAgIAkgICAgICAgICAqCiAgICAgICAgCSAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAgICAgKgogICAgICAgIAkgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5wYXJzZShoZXhTdHJpbmcpOwogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAJICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBIZXgucGFyc2UoaW5wdXQpOwogICAgICAgIAkgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7IGNpcGhlcnRleHQ6IGNpcGhlcnRleHQgfSk7CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfTsKICAgICAgICAJfSgpKTsKCgogICAgICAgIAlyZXR1cm4gQ3J5cHRvSlMuZm9ybWF0LkhleDsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgYWVzID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSwgZW5jQmFzZTY0LCBtZDUsIGV2cGtkZiwgY2lwaGVyQ29yZSk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBCbG9ja0NpcGhlciA9IENfbGliLkJsb2NrQ2lwaGVyOwogICAgICAgIAkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKCiAgICAgICAgCSAgICAvLyBMb29rdXAgdGFibGVzCiAgICAgICAgCSAgICB2YXIgU0JPWCA9IFtdOwogICAgICAgIAkgICAgdmFyIElOVl9TQk9YID0gW107CiAgICAgICAgCSAgICB2YXIgU1VCX01JWF8wID0gW107CiAgICAgICAgCSAgICB2YXIgU1VCX01JWF8xID0gW107CiAgICAgICAgCSAgICB2YXIgU1VCX01JWF8yID0gW107CiAgICAgICAgCSAgICB2YXIgU1VCX01JWF8zID0gW107CiAgICAgICAgCSAgICB2YXIgSU5WX1NVQl9NSVhfMCA9IFtdOwogICAgICAgIAkgICAgdmFyIElOVl9TVUJfTUlYXzEgPSBbXTsKICAgICAgICAJICAgIHZhciBJTlZfU1VCX01JWF8yID0gW107CiAgICAgICAgCSAgICB2YXIgSU5WX1NVQl9NSVhfMyA9IFtdOwoKICAgICAgICAJICAgIC8vIENvbXB1dGUgbG9va3VwIHRhYmxlcwogICAgICAgIAkgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZQogICAgICAgIAkgICAgICAgIHZhciBkID0gW107CiAgICAgICAgCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICBpZiAoaSA8IDEyOCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgZFtpXSA9IGkgPDwgMTsKICAgICAgICAJICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGRbaV0gPSAoaSA8PCAxKSBeIDB4MTFiOwogICAgICAgIAkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgfQoKICAgICAgICAJICAgICAgICAvLyBXYWxrIEdGKDJeOCkKICAgICAgICAJICAgICAgICB2YXIgeCA9IDA7CiAgICAgICAgCSAgICAgICAgdmFyIHhpID0gMDsKICAgICAgICAJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbXB1dGUgc2JveAogICAgICAgIAkgICAgICAgICAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KTsKICAgICAgICAJICAgICAgICAgICAgc3ggPSAoc3ggPj4+IDgpIF4gKHN4ICYgMHhmZikgXiAweDYzOwogICAgICAgIAkgICAgICAgICAgICBTQk9YW3hdID0gc3g7CiAgICAgICAgCSAgICAgICAgICAgIElOVl9TQk9YW3N4XSA9IHg7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb21wdXRlIG11bHRpcGxpY2F0aW9uCiAgICAgICAgCSAgICAgICAgICAgIHZhciB4MiA9IGRbeF07CiAgICAgICAgCSAgICAgICAgICAgIHZhciB4NCA9IGRbeDJdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgeDggPSBkW3g0XTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXMKICAgICAgICAJICAgICAgICAgICAgdmFyIHQgPSAoZFtzeF0gKiAweDEwMSkgXiAoc3ggKiAweDEwMTAxMDApOwogICAgICAgIAkgICAgICAgICAgICBTVUJfTUlYXzBbeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7CiAgICAgICAgCSAgICAgICAgICAgIFNVQl9NSVhfMVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNik7CiAgICAgICAgCSAgICAgICAgICAgIFNVQl9NSVhfMlt4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7CiAgICAgICAgCSAgICAgICAgICAgIFNVQl9NSVhfM1t4XSA9IHQ7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXMKICAgICAgICAJICAgICAgICAgICAgdmFyIHQgPSAoeDggKiAweDEwMTAxMDEpIF4gKHg0ICogMHgxMDAwMSkgXiAoeDIgKiAweDEwMSkgXiAoeCAqIDB4MTAxMDEwMCk7CiAgICAgICAgCSAgICAgICAgICAgIElOVl9TVUJfTUlYXzBbc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpOwogICAgICAgIAkgICAgICAgICAgICBJTlZfU1VCX01JWF8xW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNik7CiAgICAgICAgCSAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbc3hdID0gKHQgPDwgOCkgIHwgKHQgPj4+IDI0KTsKICAgICAgICAJICAgICAgICAgICAgSU5WX1NVQl9NSVhfM1tzeF0gPSB0OwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IGNvdW50ZXIKICAgICAgICAJICAgICAgICAgICAgaWYgKCF4KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICB4ID0geGkgPSAxOwogICAgICAgIAkgICAgICAgICAgICB9IGVsc2UgewogICAgICAgIAkgICAgICAgICAgICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXTsKICAgICAgICAJICAgICAgICAgICAgICAgIHhpIF49IGRbZFt4aV1dOwogICAgICAgIAkgICAgICAgICAgICB9CiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgfSgpKTsKCiAgICAgICAgCSAgICAvLyBQcmVjb21wdXRlZCBSY29uIGxvb2t1cAogICAgICAgIAkgICAgdmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl07CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBBRVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIEFFUyA9IENfYWxnby5BRVMgPSBCbG9ja0NpcGhlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNraXAgcmVzZXQgb2YgblJvdW5kcyBoYXMgYmVlbiBzZXQgYmVmb3JlIGFuZCBrZXkgZGlkIG5vdCBjaGFuZ2UKICAgICAgICAJICAgICAgICAgICAgaWYgKHRoaXMuX25Sb3VuZHMgJiYgdGhpcy5fa2V5UHJpb3JSZXNldCA9PT0gdGhpcy5fa2V5KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5UHJpb3JSZXNldCA9IHRoaXMuX2tleTsKICAgICAgICAJICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzOwogICAgICAgIAkgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGtleS5zaWdCeXRlcyAvIDQ7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiByb3VuZHMKICAgICAgICAJICAgICAgICAgICAgdmFyIG5Sb3VuZHMgPSB0aGlzLl9uUm91bmRzID0ga2V5U2l6ZSArIDY7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiBrZXkgc2NoZWR1bGUgcm93cwogICAgICAgIAkgICAgICAgICAgICB2YXIga3NSb3dzID0gKG5Sb3VuZHMgKyAxKSAqIDQ7CgogICAgICAgIAkgICAgICAgICAgICAvLyBDb21wdXRlIGtleSBzY2hlZHVsZQogICAgICAgIAkgICAgICAgICAgICB2YXIga2V5U2NoZWR1bGUgPSB0aGlzLl9rZXlTY2hlZHVsZSA9IFtdOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBrc1JvdyA9IDA7IGtzUm93IDwga3NSb3dzOyBrc1JvdysrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBpZiAoa3NSb3cgPCBrZXlTaXplKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAga2V5U2NoZWR1bGVba3NSb3ddID0ga2V5V29yZHNba3NSb3ddOwogICAgICAgIAkgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93IC0gMV07CgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGlmICghKGtzUm93ICUga2V5U2l6ZSkpIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm90IHdvcmQKICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YiB3b3JkCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAoU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFt0ICYgMHhmZl07CgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaXggUmNvbgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICB0IF49IFJDT05bKGtzUm93IC8ga2V5U2l6ZSkgfCAwXSA8PCAyNDsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PSA0KSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YiB3b3JkCiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAoU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFt0ICYgMHhmZl07CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlTY2hlZHVsZVtrc1JvdyAtIGtleVNpemVdIF4gdDsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29tcHV0ZSBpbnYga2V5IHNjaGVkdWxlCiAgICAgICAgCSAgICAgICAgICAgIHZhciBpbnZLZXlTY2hlZHVsZSA9IHRoaXMuX2ludktleVNjaGVkdWxlID0gW107CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGludktzUm93ID0gMDsgaW52S3NSb3cgPCBrc1Jvd3M7IGludktzUm93KyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBrc1JvdyA9IGtzUm93cyAtIGludktzUm93OwoKICAgICAgICAJICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyAlIDQpIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93XTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrc1JvdyAtIDRdOwogICAgICAgIAkgICAgICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IHQ7CiAgICAgICAgCSAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IElOVl9TVUJfTUlYXzBbU0JPWFt0ID4+PiAyNF1dIF4gSU5WX1NVQl9NSVhfMVtTQk9YWyh0ID4+PiAxNikgJiAweGZmXV0gXgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBJTlZfU1VCX01JWF8zW1NCT1hbdCAmIDB4ZmZdXTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIGVuY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9rZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKTsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU3dhcCAybmQgYW5kIDR0aCByb3dzCiAgICAgICAgCSAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTsKICAgICAgICAJICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM107CiAgICAgICAgCSAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0OwoKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52S2V5U2NoZWR1bGUsIElOVl9TVUJfTUlYXzAsIElOVl9TVUJfTUlYXzEsIElOVl9TVUJfTUlYXzIsIElOVl9TVUJfTUlYXzMsIElOVl9TQk9YKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEludiBzd2FwIDJuZCBhbmQgNHRoIHJvd3MKICAgICAgICAJICAgICAgICAgICAgdmFyIHQgPSBNW29mZnNldCArIDFdOwogICAgICAgIAkgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTsKICAgICAgICAJICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQ7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgX2RvQ3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCwga2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgblJvdW5kcyA9IHRoaXMuX25Sb3VuZHM7CgogICAgICAgIAkgICAgICAgICAgICAvLyBHZXQgaW5wdXQsIGFkZCByb3VuZCBrZXkKICAgICAgICAJICAgICAgICAgICAgdmFyIHMwID0gTVtvZmZzZXRdICAgICBeIGtleVNjaGVkdWxlWzBdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgczEgPSBNW29mZnNldCArIDFdIF4ga2V5U2NoZWR1bGVbMV07CiAgICAgICAgCSAgICAgICAgICAgIHZhciBzMiA9IE1bb2Zmc2V0ICsgMl0gXiBrZXlTY2hlZHVsZVsyXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIHMzID0gTVtvZmZzZXQgKyAzXSBeIGtleVNjaGVkdWxlWzNdOwoKICAgICAgICAJICAgICAgICAgICAgLy8gS2V5IHNjaGVkdWxlIHJvdyBjb3VudGVyCiAgICAgICAgCSAgICAgICAgICAgIHZhciBrc1JvdyA9IDQ7CgogICAgICAgIAkgICAgICAgICAgICAvLyBSb3VuZHMKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFNoaWZ0IHJvd3MsIHN1YiBieXRlcywgbWl4IGNvbHVtbnMsIGFkZCByb3VuZCBrZXkKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0MCA9IFNVQl9NSVhfMFtzMCA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMSA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MzICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0MSA9IFNVQl9NSVhfMFtzMSA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMiA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0MiA9IFNVQl9NSVhfMFtzMiA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MxICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0MyA9IFNVQl9NSVhfMFtzMyA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMCA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MyICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3RhdGUKICAgICAgICAJICAgICAgICAgICAgICAgIHMwID0gdDA7CiAgICAgICAgCSAgICAgICAgICAgICAgICBzMSA9IHQxOwogICAgICAgIAkgICAgICAgICAgICAgICAgczIgPSB0MjsKICAgICAgICAJICAgICAgICAgICAgICAgIHMzID0gdDM7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIFNoaWZ0IHJvd3MsIHN1YiBieXRlcywgYWRkIHJvdW5kIGtleQogICAgICAgIAkgICAgICAgICAgICB2YXIgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKICAgICAgICAJICAgICAgICAgICAgdmFyIHQxID0gKChTQk9YW3MxID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMyID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczMgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MwICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107CiAgICAgICAgCSAgICAgICAgICAgIHZhciB0MiA9ICgoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMyA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMwID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwogICAgICAgIAkgICAgICAgICAgICB2YXIgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFNldCBvdXRwdXQKICAgICAgICAJICAgICAgICAgICAgTVtvZmZzZXRdICAgICA9IHQwOwogICAgICAgIAkgICAgICAgICAgICBNW29mZnNldCArIDFdID0gdDE7CiAgICAgICAgCSAgICAgICAgICAgIE1bb2Zmc2V0ICsgMl0gPSB0MjsKICAgICAgICAJICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQzOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIGtleVNpemU6IDI1Ni8zMgogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7CiAgICAgICAgCSAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuQUVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihBRVMpOwogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5BRVM7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIHRyaXBsZWRlcyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUsIGVuY0Jhc2U2NCwgbWQ1LCBldnBrZGYsIGNpcGhlckNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICB2YXIgQyA9IENyeXB0b0pTOwogICAgICAgIAkgICAgdmFyIENfbGliID0gQy5saWI7CiAgICAgICAgCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwogICAgICAgIAkgICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXI7CiAgICAgICAgCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKICAgICAgICAJICAgIC8vIFBlcm11dGVkIENob2ljZSAxIGNvbnN0YW50cwogICAgICAgIAkgICAgdmFyIFBDMSA9IFsKICAgICAgICAJICAgICAgICA1NywgNDksIDQxLCAzMywgMjUsIDE3LCA5LCAgMSwKICAgICAgICAJICAgICAgICA1OCwgNTAsIDQyLCAzNCwgMjYsIDE4LCAxMCwgMiwKICAgICAgICAJICAgICAgICA1OSwgNTEsIDQzLCAzNSwgMjcsIDE5LCAxMSwgMywKICAgICAgICAJICAgICAgICA2MCwgNTIsIDQ0LCAzNiwgNjMsIDU1LCA0NywgMzksCiAgICAgICAgCSAgICAgICAgMzEsIDIzLCAxNSwgNywgIDYyLCA1NCwgNDYsIDM4LAogICAgICAgIAkgICAgICAgIDMwLCAyMiwgMTQsIDYsICA2MSwgNTMsIDQ1LCAzNywKICAgICAgICAJICAgICAgICAyOSwgMjEsIDEzLCA1LCAgMjgsIDIwLCAxMiwgNAogICAgICAgIAkgICAgXTsKCiAgICAgICAgCSAgICAvLyBQZXJtdXRlZCBDaG9pY2UgMiBjb25zdGFudHMKICAgICAgICAJICAgIHZhciBQQzIgPSBbCiAgICAgICAgCSAgICAgICAgMTQsIDE3LCAxMSwgMjQsIDEsICA1LAogICAgICAgIAkgICAgICAgIDMsICAyOCwgMTUsIDYsICAyMSwgMTAsCiAgICAgICAgCSAgICAgICAgMjMsIDE5LCAxMiwgNCwgIDI2LCA4LAogICAgICAgIAkgICAgICAgIDE2LCA3LCAgMjcsIDIwLCAxMywgMiwKICAgICAgICAJICAgICAgICA0MSwgNTIsIDMxLCAzNywgNDcsIDU1LAogICAgICAgIAkgICAgICAgIDMwLCA0MCwgNTEsIDQ1LCAzMywgNDgsCiAgICAgICAgCSAgICAgICAgNDQsIDQ5LCAzOSwgNTYsIDM0LCA1MywKICAgICAgICAJICAgICAgICA0NiwgNDIsIDUwLCAzNiwgMjksIDMyCiAgICAgICAgCSAgICBdOwoKICAgICAgICAJICAgIC8vIEN1bXVsYXRpdmUgYml0IHNoaWZ0IGNvbnN0YW50cwogICAgICAgIAkgICAgdmFyIEJJVF9TSElGVFMgPSBbMSwgIDIsICA0LCAgNiwgIDgsICAxMCwgMTIsIDE0LCAxNSwgMTcsIDE5LCAyMSwgMjMsIDI1LCAyNywgMjhdOwoKICAgICAgICAJICAgIC8vIFNCT1hlcyBhbmQgcm91bmQgcGVybXV0YXRpb24gY29uc3RhbnRzCiAgICAgICAgCSAgICB2YXIgU0JPWF9QID0gWwogICAgICAgIAkgICAgICAgIHsKICAgICAgICAJICAgICAgICAgICAgMHgwOiAweDgwODIwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMDAwMDAwMDogMHg4MDAwLAogICAgICAgIAkgICAgICAgICAgICAweDIwMDAwMDAwOiAweDgwODAwMiwKICAgICAgICAJICAgICAgICAgICAgMHgzMDAwMDAwMDogMHgyLAogICAgICAgIAkgICAgICAgICAgICAweDQwMDAwMDAwOiAweDIwMCwKICAgICAgICAJICAgICAgICAgICAgMHg1MDAwMDAwMDogMHg4MDgyMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4NjAwMDAwMDA6IDB4ODAwMjAyLAogICAgICAgIAkgICAgICAgICAgICAweDcwMDAwMDAwOiAweDgwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAwMDogMHgyMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4OTAwMDAwMDA6IDB4ODAwMjAwLAogICAgICAgIAkgICAgICAgICAgICAweGEwMDAwMDAwOiAweDgyMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YjAwMDAwMDA6IDB4ODA4MDAwLAogICAgICAgIAkgICAgICAgICAgICAweGMwMDAwMDAwOiAweDgwMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZDAwMDAwMDA6IDB4ODAwMDAyLAogICAgICAgIAkgICAgICAgICAgICAweGUwMDAwMDAwOiAweDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZjAwMDAwMDA6IDB4ODIwMiwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAwOiAweDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTgwMDAwMDA6IDB4ODA4MjAyLAogICAgICAgIAkgICAgICAgICAgICAweDI4MDAwMDAwOiAweDgyMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4MzgwMDAwMDA6IDB4ODAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg0ODAwMDAwMDogMHg4MDgyMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NTgwMDAwMDA6IDB4MjAwLAogICAgICAgIAkgICAgICAgICAgICAweDY4MDAwMDAwOiAweDgwODAwMiwKICAgICAgICAJICAgICAgICAgICAgMHg3ODAwMDAwMDogMHgyLAogICAgICAgIAkgICAgICAgICAgICAweDg4MDAwMDAwOiAweDgwMDIwMCwKICAgICAgICAJICAgICAgICAgICAgMHg5ODAwMDAwMDogMHg4MjAwLAogICAgICAgIAkgICAgICAgICAgICAweGE4MDAwMDAwOiAweDgwODAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhiODAwMDAwMDogMHg4MDAyMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4YzgwMDAwMDA6IDB4ODAwMDAyLAogICAgICAgIAkgICAgICAgICAgICAweGQ4MDAwMDAwOiAweDgwMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZTgwMDAwMDA6IDB4MjAyLAogICAgICAgIAkgICAgICAgICAgICAweGY4MDAwMDAwOiAweDgwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxOiAweDgwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTAwMDAwMDE6IDB4MiwKICAgICAgICAJICAgICAgICAgICAgMHgyMDAwMDAwMTogMHg4MDgyMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MzAwMDAwMDE6IDB4ODAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDQwMDAwMDAxOiAweDgwODAwMiwKICAgICAgICAJICAgICAgICAgICAgMHg1MDAwMDAwMTogMHg4MjAwLAogICAgICAgIAkgICAgICAgICAgICAweDYwMDAwMDAxOiAweDIwMCwKICAgICAgICAJICAgICAgICAgICAgMHg3MDAwMDAwMTogMHg4MDAyMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwMDE6IDB4ODA4MjAyLAogICAgICAgIAkgICAgICAgICAgICAweDkwMDAwMDAxOiAweDgwODAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhhMDAwMDAwMTogMHg4MDAwMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4YjAwMDAwMDE6IDB4ODIwMiwKICAgICAgICAJICAgICAgICAgICAgMHhjMDAwMDAwMTogMHgyMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZDAwMDAwMDE6IDB4ODAwMjAwLAogICAgICAgIAkgICAgICAgICAgICAweGUwMDAwMDAxOiAweDgwMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZjAwMDAwMDE6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxOiAweDgwODIwMiwKICAgICAgICAJICAgICAgICAgICAgMHgxODAwMDAwMTogMHg4MDgwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MjgwMDAwMDE6IDB4ODAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDM4MDAwMDAxOiAweDIwMCwKICAgICAgICAJICAgICAgICAgICAgMHg0ODAwMDAwMTogMHg4MDAwLAogICAgICAgIAkgICAgICAgICAgICAweDU4MDAwMDAxOiAweDgwMDAwMiwKICAgICAgICAJICAgICAgICAgICAgMHg2ODAwMDAwMTogMHgyLAogICAgICAgIAkgICAgICAgICAgICAweDc4MDAwMDAxOiAweDgyMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODgwMDAwMDE6IDB4ODAwMiwKICAgICAgICAJICAgICAgICAgICAgMHg5ODAwMDAwMTogMHg4MDAyMDIsCiAgICAgICAgCSAgICAgICAgICAgIDB4YTgwMDAwMDE6IDB4MjAyLAogICAgICAgIAkgICAgICAgICAgICAweGI4MDAwMDAxOiAweDgwODIwMCwKICAgICAgICAJICAgICAgICAgICAgMHhjODAwMDAwMTogMHg4MDAyMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZDgwMDAwMDE6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHhlODAwMDAwMTogMHg4MjAwLAogICAgICAgIAkgICAgICAgICAgICAweGY4MDAwMDAxOiAweDgwODAwMgogICAgICAgIAkgICAgICAgIH0sCiAgICAgICAgCSAgICAgICAgewogICAgICAgIAkgICAgICAgICAgICAweDA6IDB4NDAwODQwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTAwMDAwMDogMHg0MDAwLAogICAgICAgIAkgICAgICAgICAgICAweDIwMDAwMDA6IDB4ODAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MzAwMDAwMDogMHg0MDA4MDAxMCwKICAgICAgICAJICAgICAgICAgICAgMHg0MDAwMDAwOiAweDQwMDAwMDEwLAogICAgICAgIAkgICAgICAgICAgICAweDUwMDAwMDA6IDB4NDAwODQwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NjAwMDAwMDogMHg0MDAwNDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg3MDAwMDAwOiAweDEwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDA6IDB4ODQwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4OTAwMDAwMDogMHg0MDAwNDAxMCwKICAgICAgICAJICAgICAgICAgICAgMHhhMDAwMDAwOiAweDQwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweGIwMDAwMDA6IDB4ODQwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YzAwMDAwMDogMHg4MDAxMCwKICAgICAgICAJICAgICAgICAgICAgMHhkMDAwMDAwOiAweDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZTAwMDAwMDogMHg0MDEwLAogICAgICAgIAkgICAgICAgICAgICAweGYwMDAwMDA6IDB4NDAwODAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwOiAweDQwMDA0MDAwLAogICAgICAgIAkgICAgICAgICAgICAweDE4MDAwMDA6IDB4ODQwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MjgwMDAwMDogMHgxMCwKICAgICAgICAJICAgICAgICAgICAgMHgzODAwMDAwOiAweDQwMDA0MDEwLAogICAgICAgIAkgICAgICAgICAgICAweDQ4MDAwMDA6IDB4NDAwODQwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NTgwMDAwMDogMHg0MDAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg2ODAwMDAwOiAweDgwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDc4MDAwMDA6IDB4NDAwODAwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODgwMDAwMDogMHg4MDAxMCwKICAgICAgICAJICAgICAgICAgICAgMHg5ODAwMDAwOiAweDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YTgwMDAwMDogMHg0MDAwLAogICAgICAgIAkgICAgICAgICAgICAweGI4MDAwMDA6IDB4NDAwODAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YzgwMDAwMDogMHg0MDAwMDAxMCwKICAgICAgICAJICAgICAgICAgICAgMHhkODAwMDAwOiAweDg0MDAwLAogICAgICAgIAkgICAgICAgICAgICAweGU4MDAwMDA6IDB4NDAwODQwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZjgwMDAwMDogMHg0MDEwLAogICAgICAgIAkgICAgICAgICAgICAweDEwMDAwMDAwOiAweDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTEwMDAwMDA6IDB4NDAwODAwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTIwMDAwMDA6IDB4NDAwMDQwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTMwMDAwMDA6IDB4NDAwODQwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTQwMDAwMDA6IDB4NDAwODAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTUwMDAwMDA6IDB4MTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTYwMDAwMDA6IDB4ODQwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTcwMDAwMDA6IDB4NDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxODAwMDAwMDogMHg0MDEwLAogICAgICAgIAkgICAgICAgICAgICAweDE5MDAwMDAwOiAweDgwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFhMDAwMDAwOiAweDgwMDEwLAogICAgICAgIAkgICAgICAgICAgICAweDFiMDAwMDAwOiAweDQwMDAwMDEwLAogICAgICAgIAkgICAgICAgICAgICAweDFjMDAwMDAwOiAweDg0MDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFkMDAwMDAwOiAweDQwMDA0MDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFlMDAwMDAwOiAweDQwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFmMDAwMDAwOiAweDQwMDg0MDEwLAogICAgICAgIAkgICAgICAgICAgICAweDEwODAwMDAwOiAweDg0MDEwLAogICAgICAgIAkgICAgICAgICAgICAweDExODAwMDAwOiAweDgwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDEyODAwMDAwOiAweDQwMDgwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDEzODAwMDAwOiAweDQwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTQ4MDAwMDA6IDB4NDAwMDQwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTU4MDAwMDA6IDB4NDAwODQwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTY4MDAwMDA6IDB4MTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTc4MDAwMDA6IDB4NDAwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTg4MDAwMDA6IDB4NDAwODQwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTk4MDAwMDA6IDB4NDAwMDAwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWE4MDAwMDA6IDB4NDAwMDQwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWI4MDAwMDA6IDB4ODAwMTAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWM4MDAwMDA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxZDgwMDAwMDogMHg0MDEwLAogICAgICAgIAkgICAgICAgICAgICAweDFlODAwMDAwOiAweDQwMDgwMDEwLAogICAgICAgIAkgICAgICAgICAgICAweDFmODAwMDAwOiAweDg0MDAwCiAgICAgICAgCSAgICAgICAgfSwKICAgICAgICAJICAgICAgICB7CiAgICAgICAgCSAgICAgICAgICAgIDB4MDogMHgxMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTAwMDAwOiAweDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MjAwMDAwOiAweDQwMDAxMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MzAwMDAwOiAweDEwMTA0LAogICAgICAgIAkgICAgICAgICAgICAweDQwMDAwMDogMHgxMDAwNCwKICAgICAgICAJICAgICAgICAgICAgMHg1MDAwMDA6IDB4NDAwMDAwNCwKICAgICAgICAJICAgICAgICAgICAgMHg2MDAwMDA6IDB4NDAxMDEwNCwKICAgICAgICAJICAgICAgICAgICAgMHg3MDAwMDA6IDB4NDAxMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDA6IDB4NDAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg5MDAwMDA6IDB4NDAxMDEwMCwKICAgICAgICAJICAgICAgICAgICAgMHhhMDAwMDA6IDB4MTAxMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YjAwMDAwOiAweDQwMTAwMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4YzAwMDAwOiAweDQwMDAxMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZDAwMDAwOiAweDEwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweGUwMDAwMDogMHg0LAogICAgICAgIAkgICAgICAgICAgICAweGYwMDAwMDogMHgxMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDA6IDB4NDAxMDEwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxODAwMDA6IDB4NDAxMDAwNCwKICAgICAgICAJICAgICAgICAgICAgMHgyODAwMDA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHgzODAwMDA6IDB4NDAwMDEwMCwKICAgICAgICAJICAgICAgICAgICAgMHg0ODAwMDA6IDB4NDAwMDAwNCwKICAgICAgICAJICAgICAgICAgICAgMHg1ODAwMDA6IDB4MTAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NjgwMDAwOiAweDEwMDA0LAogICAgICAgIAkgICAgICAgICAgICAweDc4MDAwMDogMHgxMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODgwMDAwOiAweDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4OTgwMDAwOiAweDEwMCwKICAgICAgICAJICAgICAgICAgICAgMHhhODAwMDA6IDB4NDAxMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhiODAwMDA6IDB4MTAxMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4YzgwMDAwOiAweDEwMTAwLAogICAgICAgIAkgICAgICAgICAgICAweGQ4MDAwMDogMHg0MDAwMTA0LAogICAgICAgIAkgICAgICAgICAgICAweGU4MDAwMDogMHg0MDEwMTA0LAogICAgICAgIAkgICAgICAgICAgICAweGY4MDAwMDogMHg0MDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDEwMDAwMDA6IDB4NDAxMDEwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMTAwMDAwOiAweDEwMDA0LAogICAgICAgIAkgICAgICAgICAgICAweDEyMDAwMDA6IDB4MTAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTMwMDAwMDogMHg0MDAwMTAwLAogICAgICAgIAkgICAgICAgICAgICAweDE0MDAwMDA6IDB4MTAwLAogICAgICAgIAkgICAgICAgICAgICAweDE1MDAwMDA6IDB4NDAxMDEwNCwKICAgICAgICAJICAgICAgICAgICAgMHgxNjAwMDAwOiAweDQwMDAwMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTcwMDAwMDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweDE4MDAwMDA6IDB4NDAwMDEwNCwKICAgICAgICAJICAgICAgICAgICAgMHgxOTAwMDAwOiAweDQwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWEwMDAwMDogMHg0LAogICAgICAgIAkgICAgICAgICAgICAweDFiMDAwMDA6IDB4MTAxMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWMwMDAwMDogMHg0MDEwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFkMDAwMDA6IDB4MTA0LAogICAgICAgIAkgICAgICAgICAgICAweDFlMDAwMDA6IDB4MTAxMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWYwMDAwMDogMHg0MDEwMDA0LAogICAgICAgIAkgICAgICAgICAgICAweDEwODAwMDA6IDB4NDAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMTgwMDAwOiAweDEwNCwKICAgICAgICAJICAgICAgICAgICAgMHgxMjgwMDAwOiAweDQwMTAxMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTM4MDAwMDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweDE0ODAwMDA6IDB4MTAwMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTU4MDAwMDogMHg0MDAwMTAwLAogICAgICAgIAkgICAgICAgICAgICAweDE2ODAwMDA6IDB4MTAwLAogICAgICAgIAkgICAgICAgICAgICAweDE3ODAwMDA6IDB4NDAxMDAwNCwKICAgICAgICAJICAgICAgICAgICAgMHgxODgwMDAwOiAweDEwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDE5ODAwMDA6IDB4NDAxMDEwNCwKICAgICAgICAJICAgICAgICAgICAgMHgxYTgwMDAwOiAweDEwMTA0LAogICAgICAgIAkgICAgICAgICAgICAweDFiODAwMDA6IDB4NDAwMDAwNCwKICAgICAgICAJICAgICAgICAgICAgMHgxYzgwMDAwOiAweDQwMDAxMDQsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWQ4MDAwMDogMHg0MDEwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFlODAwMDA6IDB4NCwKICAgICAgICAJICAgICAgICAgICAgMHgxZjgwMDAwOiAweDEwMTAwCiAgICAgICAgCSAgICAgICAgfSwKICAgICAgICAJICAgICAgICB7CiAgICAgICAgCSAgICAgICAgICAgIDB4MDogMHg4MDQwMTAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMDAwMDogMHg4MDAwMTA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgyMDAwMDogMHg0MDEwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MzAwMDA6IDB4ODA0MDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NDAwMDA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHg1MDAwMDogMHg0MDEwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NjAwMDA6IDB4ODAwMDAwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NzAwMDA6IDB4NDAwMDQwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwOiAweDgwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDkwMDAwOiAweDQwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhhMDAwMDogMHg0MCwKICAgICAgICAJICAgICAgICAgICAgMHhiMDAwMDogMHg4MDAwMTAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhjMDAwMDogMHg4MDQwMDA0MCwKICAgICAgICAJICAgICAgICAgICAgMHhkMDAwMDogMHgxMDQwLAogICAgICAgIAkgICAgICAgICAgICAweGUwMDAwOiAweDEwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZjAwMDA6IDB4ODA0MDEwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDogMHg4MDAwMTA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxODAwMDogMHg0MCwKICAgICAgICAJICAgICAgICAgICAgMHgyODAwMDogMHg4MDQwMDA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgzODAwMDogMHg4MDAwMTAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg0ODAwMDogMHg0MDEwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NTgwMDA6IDB4ODA0MDEwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NjgwMDA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHg3ODAwMDogMHg4MDQwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4ODAwMDogMHgxMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDk4MDAwOiAweDgwNDAxMDAwLAogICAgICAgIAkgICAgICAgICAgICAweGE4MDAwOiAweDQwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhiODAwMDogMHgxMDQwLAogICAgICAgIAkgICAgICAgICAgICAweGM4MDAwOiAweDgwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweGQ4MDAwOiAweDQwMDA0MCwKICAgICAgICAJICAgICAgICAgICAgMHhlODAwMDogMHg0MDEwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZjgwMDA6IDB4ODAwMDAwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTAwMDAwOiAweDQwMDA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxMTAwMDA6IDB4NDAxMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDEyMDAwMDogMHg4MDAwMDA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxMzAwMDA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxNDAwMDA6IDB4MTA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxNTAwMDA6IDB4ODA0MDAwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTYwMDAwOiAweDgwNDAxMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDE3MDAwMDogMHg4MDAwMTA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxODAwMDA6IDB4ODA0MDEwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTkwMDAwOiAweDgwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFhMDAwMDogMHg4MDQwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxYjAwMDA6IDB4NDAxMDQwLAogICAgICAgIAkgICAgICAgICAgICAweDFjMDAwMDogMHg4MDAwMTAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxZDAwMDA6IDB4NDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFlMDAwMDogMHg0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxZjAwMDA6IDB4MTAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMDgwMDA6IDB4ODA0MDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTE4MDAwOiAweDgwNDAxMDQwLAogICAgICAgIAkgICAgICAgICAgICAweDEyODAwMDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweDEzODAwMDogMHg0MDEwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTQ4MDAwOiAweDQwMDA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxNTgwMDA6IDB4ODAwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTY4MDAwOiAweDgwMDAxMDQwLAogICAgICAgIAkgICAgICAgICAgICAweDE3ODAwMDogMHg0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxODgwMDA6IDB4ODAwMDAwNDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTk4MDAwOiAweDEwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWE4MDAwOiAweDgwMDAxMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFiODAwMDogMHg4MDQwMDA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxYzgwMDA6IDB4MTA0MCwKICAgICAgICAJICAgICAgICAgICAgMHgxZDgwMDA6IDB4ODA0MDEwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWU4MDAwOiAweDQwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxZjgwMDA6IDB4NDAxMDQwCiAgICAgICAgCSAgICAgICAgfSwKICAgICAgICAJICAgICAgICB7CiAgICAgICAgCSAgICAgICAgICAgIDB4MDogMHg4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxMDAwOiAweDEwNDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MjAwMDogMHg0MDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgzMDAwOiAweDIwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDQwMDA6IDB4MjAwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NTAwMDogMHgxMDAwMDgwLAogICAgICAgIAkgICAgICAgICAgICAweDYwMDA6IDB4MjEwMDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NzAwMDogMHg0MDA4MCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwOiAweDEwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4OTAwMDogMHgyMDA0MDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhhMDAwOiAweDIwMDAwMDgwLAogICAgICAgIAkgICAgICAgICAgICAweGIwMDA6IDB4MjEwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YzAwMDogMHgyMTA0MDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhkMDAwOiAweDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZTAwMDogMHgxMDQwMDgwLAogICAgICAgIAkgICAgICAgICAgICAweGYwMDA6IDB4MjEwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwOiAweDEwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTgwMDogMHgyMTAwMDA4MCwKICAgICAgICAJICAgICAgICAgICAgMHgyODAwOiAweDgwLAogICAgICAgIAkgICAgICAgICAgICAweDM4MDA6IDB4MTA0MDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg0ODAwOiAweDQwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDU4MDA6IDB4MjAwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NjgwMDogMHgyMTA0MDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg3ODAwOiAweDIwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDg4MDA6IDB4MjAwNDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4OTgwMDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweGE4MDA6IDB4MjEwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YjgwMDogMHgxMDAwMDgwLAogICAgICAgIAkgICAgICAgICAgICAweGM4MDA6IDB4MjAwMDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZDgwMDogMHgyMTAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhlODAwOiAweDEwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZjgwMDogMHg0MDA4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxMDAwMDogMHg0MDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMTAwMDogMHg4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxMjAwMDogMHgyMDAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMzAwMDogMHgyMTAwMDA4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxNDAwMDogMHgxMDAwMDgwLAogICAgICAgIAkgICAgICAgICAgICAweDE1MDAwOiAweDIxMDQwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDE2MDAwOiAweDIwMDQwMDgwLAogICAgICAgIAkgICAgICAgICAgICAweDE3MDAwOiAweDEwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTgwMDA6IDB4MjEwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTkwMDA6IDB4MjEwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWEwMDA6IDB4MTA0MDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxYjAwMDogMHgyMDA0MDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxYzAwMDogMHg0MDA4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxZDAwMDogMHgyMDAwMDA4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxZTAwMDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweDFmMDAwOiAweDEwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTA4MDA6IDB4MjEwMDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTE4MDA6IDB4MTAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMjgwMDogMHgxMDQwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDEzODAwOiAweDIwMDQwMDgwLAogICAgICAgIAkgICAgICAgICAgICAweDE0ODAwOiAweDIwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDE1ODAwOiAweDEwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTY4MDA6IDB4ODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTc4MDA6IDB4MjEwNDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTg4MDA6IDB4NDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTk4MDA6IDB4MjEwNDAwODAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWE4MDA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxYjgwMDogMHgyMTAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxYzgwMDogMHgxMDAwMDgwLAogICAgICAgIAkgICAgICAgICAgICAweDFkODAwOiAweDQwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFlODAwOiAweDIwMDQwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFmODAwOiAweDIwMDAwMDgwCiAgICAgICAgCSAgICAgICAgfSwKICAgICAgICAJICAgICAgICB7CiAgICAgICAgCSAgICAgICAgICAgIDB4MDogMHgxMDAwMDAwOCwKICAgICAgICAJICAgICAgICAgICAgMHgxMDA6IDB4MjAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgyMDA6IDB4MTAyMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MzAwOiAweDEwMjAyMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDQwMDogMHgxMDAwMjAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg1MDA6IDB4MjAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDYwMDogMHgyMDAwMDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4NzAwOiAweDEwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweDkwMDogMHgxMDAwMjAwOCwKICAgICAgICAJICAgICAgICAgICAgMHhhMDA6IDB4MjAyMDAwLAogICAgICAgIAkgICAgICAgICAgICAweGIwMDogMHg4LAogICAgICAgIAkgICAgICAgICAgICAweGMwMDogMHgxMDIwMDAwOCwKICAgICAgICAJICAgICAgICAgICAgMHhkMDA6IDB4MjAyMDA4LAogICAgICAgIAkgICAgICAgICAgICAweGUwMDogMHgyMDA4LAogICAgICAgIAkgICAgICAgICAgICAweGYwMDogMHgxMDIwMjAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDogMHgxMDIwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxODA6IDB4MTAyMDIwMDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4MjgwOiAweDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4MzgwOiAweDIwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg0ODA6IDB4MjAyMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDU4MDogMHgxMDAwMDAwOCwKICAgICAgICAJICAgICAgICAgICAgMHg2ODA6IDB4MTAwMDIwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NzgwOiAweDIwMDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODgwOiAweDIwMDAwOCwKICAgICAgICAJICAgICAgICAgICAgMHg5ODA6IDB4MjAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhhODA6IDB4MTAwMDIwMDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4YjgwOiAweDEwMjAwMDA4LAogICAgICAgIAkgICAgICAgICAgICAweGM4MDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweGQ4MDogMHgxMDIwMjAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhlODA6IDB4MjAyMDAwLAogICAgICAgIAkgICAgICAgICAgICAweGY4MDogMHgxMDAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMDAwOiAweDEwMDAyMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDExMDA6IDB4MTAyMDAwMDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTIwMDogMHgxMDIwMjAwOCwKICAgICAgICAJICAgICAgICAgICAgMHgxMzAwOiAweDIwMDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTQwMDogMHgyMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTUwMDogMHgxMDAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxNjAwOiAweDEwMDAwMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDE3MDA6IDB4MjAyMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDE4MDA6IDB4MjAyMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDE5MDA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxYTAwOiAweDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWIwMDogMHgxMDIwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxYzAwOiAweDIwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWQwMDogMHgxMDAwMjAwOCwKICAgICAgICAJICAgICAgICAgICAgMHgxZTAwOiAweDEwMjAyMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFmMDA6IDB4MjAwMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDEwODA6IDB4OCwKICAgICAgICAJICAgICAgICAgICAgMHgxMTgwOiAweDIwMjAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMjgwOiAweDIwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMzgwOiAweDEwMDAwMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDE0ODA6IDB4MTAwMDIwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTU4MDogMHgyMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDE2ODA6IDB4MTAyMDIwMDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTc4MDogMHgxMDIwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxODgwOiAweDEwMjAyMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDE5ODA6IDB4MTAyMDAwMDgsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWE4MDogMHgyMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFiODA6IDB4MjAyMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDFjODA6IDB4MjAwMDA4LAogICAgICAgIAkgICAgICAgICAgICAweDFkODA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxZTgwOiAweDEwMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFmODA6IDB4MTAwMDIwMDgKICAgICAgICAJICAgICAgICB9LAogICAgICAgIAkgICAgICAgIHsKICAgICAgICAJICAgICAgICAgICAgMHgwOiAweDEwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMDogMHgyMDAwNDAxLAogICAgICAgIAkgICAgICAgICAgICAweDIwOiAweDQwMCwKICAgICAgICAJICAgICAgICAgICAgMHgzMDogMHgxMDA0MDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4NDA6IDB4MjEwMDQwMSwKICAgICAgICAJICAgICAgICAgICAgMHg1MDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweDYwOiAweDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4NzA6IDB4MjEwMDAwMSwKICAgICAgICAJICAgICAgICAgICAgMHg4MDogMHgyMDAwNDAwLAogICAgICAgIAkgICAgICAgICAgICAweDkwOiAweDEwMDAwMSwKICAgICAgICAJICAgICAgICAgICAgMHhhMDogMHgyMDAwMDAxLAogICAgICAgIAkgICAgICAgICAgICAweGIwOiAweDIxMDA0MDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YzA6IDB4MjEwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHhkMDogMHg0MDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZTA6IDB4MTAwNDAwLAogICAgICAgIAkgICAgICAgICAgICAweGYwOiAweDIwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODogMHgyMTAwMDAxLAogICAgICAgIAkgICAgICAgICAgICAweDE4OiAweDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4Mjg6IDB4MjAwMDQwMSwKICAgICAgICAJICAgICAgICAgICAgMHgzODogMHgyMTAwNDAwLAogICAgICAgIAkgICAgICAgICAgICAweDQ4OiAweDEwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg1ODogMHgyMDAwMDAxLAogICAgICAgIAkgICAgICAgICAgICAweDY4OiAweDIwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4Nzg6IDB4NDAxLAogICAgICAgIAkgICAgICAgICAgICAweDg4OiAweDEwMDQwMSwKICAgICAgICAJICAgICAgICAgICAgMHg5ODogMHgyMDAwNDAwLAogICAgICAgIAkgICAgICAgICAgICAweGE4OiAweDIxMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4Yjg6IDB4MTAwMDAxLAogICAgICAgIAkgICAgICAgICAgICAweGM4OiAweDQwMCwKICAgICAgICAJICAgICAgICAgICAgMHhkODogMHgyMTAwNDAxLAogICAgICAgIAkgICAgICAgICAgICAweGU4OiAweDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4Zjg6IDB4MTAwNDAwLAogICAgICAgIAkgICAgICAgICAgICAweDEwMDogMHgyMDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDExMDogMHgxMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTIwOiAweDIwMDA0MDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTMwOiAweDIxMDAwMDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTQwOiAweDEwMDAwMSwKICAgICAgICAJICAgICAgICAgICAgMHgxNTA6IDB4MjAwMDQwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxNjA6IDB4MjEwMDQwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxNzA6IDB4MTAwNDAxLAogICAgICAgIAkgICAgICAgICAgICAweDE4MDogMHg0MDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTkwOiAweDIxMDA0MDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWEwOiAweDEwMDQwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxYjA6IDB4MSwKICAgICAgICAJICAgICAgICAgICAgMHgxYzA6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxZDA6IDB4MjEwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxZTA6IDB4MjAwMDAwMSwKICAgICAgICAJICAgICAgICAgICAgMHgxZjA6IDB4NDAwLAogICAgICAgIAkgICAgICAgICAgICAweDEwODogMHgxMDA0MDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTE4OiAweDIwMDA0MDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTI4OiAweDIxMDAwMDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTM4OiAweDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTQ4OiAweDIwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTU4OiAweDEwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxNjg6IDB4NDAxLAogICAgICAgIAkgICAgICAgICAgICAweDE3ODogMHgyMTAwNDAwLAogICAgICAgIAkgICAgICAgICAgICAweDE4ODogMHgyMDAwMDAxLAogICAgICAgIAkgICAgICAgICAgICAweDE5ODogMHgyMTAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFhODogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweDFiODogMHgyMTAwNDAxLAogICAgICAgIAkgICAgICAgICAgICAweDFjODogMHgxMDA0MDEsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWQ4OiAweDQwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxZTg6IDB4MjAwMDQwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxZjg6IDB4MTAwMDAxCiAgICAgICAgCSAgICAgICAgfSwKICAgICAgICAJICAgICAgICB7CiAgICAgICAgCSAgICAgICAgICAgIDB4MDogMHg4MDAwODIwLAogICAgICAgIAkgICAgICAgICAgICAweDE6IDB4MjAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MjogMHg4MDAwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDM6IDB4MjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NDogMHgyMDAyMCwKICAgICAgICAJICAgICAgICAgICAgMHg1OiAweDgwMjA4MjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4NjogMHg4MDIwODAwLAogICAgICAgIAkgICAgICAgICAgICAweDc6IDB4ODAwLAogICAgICAgIAkgICAgICAgICAgICAweDg6IDB4ODAyMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg5OiAweDgwMDA4MDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YTogMHgyMDgwMCwKICAgICAgICAJICAgICAgICAgICAgMHhiOiAweDgwMjAwMjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4YzogMHg4MjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ZDogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweGU6IDB4ODAwMDAyMCwKICAgICAgICAJICAgICAgICAgICAgMHhmOiAweDIwODIwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDAwOiAweDgwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAwMTogMHg4MDIwODIwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDAyOiAweDgwMDA4MjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwMDM6IDB4ODAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAwNDogMHg4MDIwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDA1OiAweDIwODAwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDA2OiAweDIwODIwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDA3OiAweDIwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDA4OiAweDgwMDAwMjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwMDk6IDB4ODIwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDBhOiAweDIwMDIwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDBiOiAweDgwMjA4MDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwMGM6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAwZDogMHg4MDIwMDIwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDBlOiAweDgwMDA4MDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwMGY6IDB4MjAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTA6IDB4MjA4MjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTE6IDB4ODAyMDgwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMjogMHgyMCwKICAgICAgICAJICAgICAgICAgICAgMHgxMzogMHg4MDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTQ6IDB4ODAwMDgwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxNTogMHg4MDAwMDIwLAogICAgICAgIAkgICAgICAgICAgICAweDE2OiAweDgwMjAwMjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTc6IDB4MjAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MTg6IDB4MCwKICAgICAgICAJICAgICAgICAgICAgMHgxOTogMHgyMDAyMCwKICAgICAgICAJICAgICAgICAgICAgMHgxYTogMHg4MDIwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDFiOiAweDgwMDA4MjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWM6IDB4ODAyMDgyMCwKICAgICAgICAJICAgICAgICAgICAgMHgxZDogMHgyMDgwMCwKICAgICAgICAJICAgICAgICAgICAgMHgxZTogMHg4MjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4MWY6IDB4ODAwMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxMDogMHgyMDAwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxMTogMHg4MDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwMTI6IDB4ODAyMDAyMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxMzogMHgyMDgyMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxNDogMHgyMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxNTogMHg4MDIwMDAwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDE2OiAweDgwMDAwMDAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwMTc6IDB4ODAwMDgyMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxODogMHg4MDIwODIwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDE5OiAweDgwMDAwMjAsCiAgICAgICAgCSAgICAgICAgICAgIDB4ODAwMDAwMWE6IDB4ODAwMDgwMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxYjogMHgwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDFjOiAweDIwODAwLAogICAgICAgIAkgICAgICAgICAgICAweDgwMDAwMDFkOiAweDgyMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxZTogMHgyMDAyMCwKICAgICAgICAJICAgICAgICAgICAgMHg4MDAwMDAxZjogMHg4MDIwODAwCiAgICAgICAgCSAgICAgICAgfQogICAgICAgIAkgICAgXTsKCiAgICAgICAgCSAgICAvLyBNYXNrcyB0aGF0IHNlbGVjdCB0aGUgU0JPWCBpbnB1dAogICAgICAgIAkgICAgdmFyIFNCT1hfTUFTSyA9IFsKICAgICAgICAJICAgICAgICAweGY4MDAwMDAxLCAweDFmODAwMDAwLCAweDAxZjgwMDAwLCAweDAwMWY4MDAwLAogICAgICAgIAkgICAgICAgIDB4MDAwMWY4MDAsIDB4MDAwMDFmODAsIDB4MDAwMDAxZjgsIDB4ODAwMDAwMWYKICAgICAgICAJICAgIF07CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBERVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIERFUyA9IENfYWxnby5ERVMgPSBCbG9ja0NpcGhlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5OwogICAgICAgIAkgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTZWxlY3QgNTYgYml0cyBhY2NvcmRpbmcgdG8gUEMxCiAgICAgICAgCSAgICAgICAgICAgIHZhciBrZXlCaXRzID0gW107CiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTY7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGtleUJpdFBvcyA9IFBDMVtpXSAtIDE7CiAgICAgICAgCSAgICAgICAgICAgICAgICBrZXlCaXRzW2ldID0gKGtleVdvcmRzW2tleUJpdFBvcyA+Pj4gNV0gPj4+ICgzMSAtIGtleUJpdFBvcyAlIDMyKSkgJiAxOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBBc3NlbWJsZSAxNiBzdWJrZXlzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBzdWJLZXlzID0gdGhpcy5fc3ViS2V5cyA9IFtdOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBuU3ViS2V5ID0gMDsgblN1YktleSA8IDE2OyBuU3ViS2V5KyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBzdWJrZXkKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBzdWJLZXkgPSBzdWJLZXlzW25TdWJLZXldID0gW107CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXQKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBiaXRTaGlmdCA9IEJJVF9TSElGVFNbblN1YktleV07CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gU2VsZWN0IDQ4IGJpdHMgYWNjb3JkaW5nIHRvIFBDMgogICAgICAgIAkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGZyb20gdGhlIGxlZnQgMjgga2V5IGJpdHMKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBzdWJLZXlbKGkgLyA2KSB8IDBdIHw9IGtleUJpdHNbKChQQzJbaV0gLSAxKSArIGJpdFNoaWZ0KSAlIDI4XSA8PCAoMzEgLSBpICUgNik7CgogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIC8vIFNlbGVjdCBmcm9tIHRoZSByaWdodCAyOCBrZXkgYml0cwogICAgICAgIAkgICAgICAgICAgICAgICAgICAgIHN1YktleVs0ICsgKChpIC8gNikgfCAwKV0gfD0ga2V5Qml0c1syOCArICgoKFBDMltpICsgMjRdIC0gMSkgKyBiaXRTaGlmdCkgJSAyOCldIDw8ICgzMSAtIGkgJSA2KTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBTaW5jZSBlYWNoIHN1YmtleSBpcyBhcHBsaWVkIHRvIGFuIGV4cGFuZGVkIDMyLWJpdCBpbnB1dCwKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIHRoZSBzdWJrZXkgY2FuIGJlIGJyb2tlbiBpbnRvIDggdmFsdWVzIHNjYWxlZCB0byAzMi1iaXRzLAogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gd2hpY2ggYWxsb3dzIHRoZSBrZXkgdG8gYmUgdXNlZCB3aXRob3V0IGV4cGFuc2lvbgogICAgICAgIAkgICAgICAgICAgICAgICAgc3ViS2V5WzBdID0gKHN1YktleVswXSA8PCAxKSB8IChzdWJLZXlbMF0gPj4+IDMxKTsKICAgICAgICAJICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNzsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgc3ViS2V5W2ldID0gc3ViS2V5W2ldID4+PiAoKGkgLSAxKSAqIDQgKyAzKTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgICAgIHN1YktleVs3XSA9IChzdWJLZXlbN10gPDwgNSkgfCAoc3ViS2V5WzddID4+PiAyNyk7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvbXB1dGUgaW52ZXJzZSBzdWJrZXlzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBpbnZTdWJLZXlzID0gdGhpcy5faW52U3ViS2V5cyA9IFtdOwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIGludlN1YktleXNbaV0gPSBzdWJLZXlzWzE1IC0gaV07CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5fc3ViS2V5cyk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX2ludlN1YktleXMpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIF9kb0NyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQsIHN1YktleXMpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gR2V0IGlucHV0CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IE1bb2Zmc2V0XTsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fckJsb2NrID0gTVtvZmZzZXQgKyAxXTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEluaXRpYWwgcGVybXV0YXRpb24KICAgICAgICAJICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDQsICAweDBmMGYwZjBmKTsKICAgICAgICAJICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDE2LCAweDAwMDBmZmZmKTsKICAgICAgICAJICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDIsICAweDMzMzMzMzMzKTsKICAgICAgICAJICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDgsICAweDAwZmYwMGZmKTsKICAgICAgICAJICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDEsICAweDU1NTU1NTU1KTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFJvdW5kcwogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDA7IHJvdW5kIDwgMTY7IHJvdW5kKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIHN1YktleSA9IHN1YktleXNbcm91bmRdOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGxCbG9jayA9IHRoaXMuX2xCbG9jazsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciByQmxvY2sgPSB0aGlzLl9yQmxvY2s7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gRmVpc3RlbCBmdW5jdGlvbgogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGYgPSAwOwogICAgICAgIAkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBmIHw9IFNCT1hfUFtpXVsoKHJCbG9jayBeIHN1YktleVtpXSkgJiBTQk9YX01BU0tbaV0pID4+PiAwXTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHJCbG9jazsKICAgICAgICAJICAgICAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IGxCbG9jayBeIGY7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIFVuZG8gc3dhcCBmcm9tIGxhc3Qgcm91bmQKICAgICAgICAJICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9sQmxvY2s7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHRoaXMuX3JCbG9jazsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fckJsb2NrID0gdDsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEZpbmFsIHBlcm11dGF0aW9uCiAgICAgICAgCSAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxLCAgMHg1NTU1NTU1NSk7CiAgICAgICAgCSAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCA4LCAgMHgwMGZmMDBmZik7CiAgICAgICAgCSAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCAyLCAgMHgzMzMzMzMzMyk7CiAgICAgICAgCSAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZik7CiAgICAgICAgCSAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCA0LCAgMHgwZjBmMGYwZik7CgogICAgICAgIAkgICAgICAgICAgICAvLyBTZXQgb3V0cHV0CiAgICAgICAgCSAgICAgICAgICAgIE1bb2Zmc2V0XSA9IHRoaXMuX2xCbG9jazsKICAgICAgICAJICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IHRoaXMuX3JCbG9jazsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBrZXlTaXplOiA2NC8zMiwKCiAgICAgICAgCSAgICAgICAgaXZTaXplOiA2NC8zMiwKCiAgICAgICAgCSAgICAgICAgYmxvY2tTaXplOiA2NC8zMgogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgLy8gU3dhcCBiaXRzIGFjcm9zcyB0aGUgbGVmdCBhbmQgcmlnaHQgd29yZHMKICAgICAgICAJICAgIGZ1bmN0aW9uIGV4Y2hhbmdlTFIob2Zmc2V0LCBtYXNrKSB7CiAgICAgICAgCSAgICAgICAgdmFyIHQgPSAoKHRoaXMuX2xCbG9jayA+Pj4gb2Zmc2V0KSBeIHRoaXMuX3JCbG9jaykgJiBtYXNrOwogICAgICAgIAkgICAgICAgIHRoaXMuX3JCbG9jayBePSB0OwogICAgICAgIAkgICAgICAgIHRoaXMuX2xCbG9jayBePSB0IDw8IG9mZnNldDsKICAgICAgICAJICAgIH0KCiAgICAgICAgCSAgICBmdW5jdGlvbiBleGNoYW5nZVJMKG9mZnNldCwgbWFzaykgewogICAgICAgIAkgICAgICAgIHZhciB0ID0gKCh0aGlzLl9yQmxvY2sgPj4+IG9mZnNldCkgXiB0aGlzLl9sQmxvY2spICYgbWFzazsKICAgICAgICAJICAgICAgICB0aGlzLl9sQmxvY2sgXj0gdDsKICAgICAgICAJICAgICAgICB0aGlzLl9yQmxvY2sgXj0gdCA8PCBvZmZzZXQ7CiAgICAgICAgCSAgICB9CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogQGV4YW1wbGUKICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5ERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7CiAgICAgICAgCSAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5ERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihERVMpOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogVHJpcGxlLURFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgVHJpcGxlREVTID0gQ19hbGdvLlRyaXBsZURFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7CiAgICAgICAgCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3JkczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENyZWF0ZSBERVMgaW5zdGFuY2VzCiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RlczEgPSBERVMuY3JlYXRlRW5jcnlwdG9yKFdvcmRBcnJheS5jcmVhdGUoa2V5V29yZHMuc2xpY2UoMCwgMikpKTsKICAgICAgICAJICAgICAgICAgICAgdGhpcy5fZGVzMiA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXlXb3Jkcy5zbGljZSgyLCA0KSkpOwogICAgICAgIAkgICAgICAgICAgICB0aGlzLl9kZXMzID0gREVTLmNyZWF0ZUVuY3J5cHRvcihXb3JkQXJyYXkuY3JlYXRlKGtleVdvcmRzLnNsaWNlKDQsIDYpKSk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RlczEuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RlczIuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RlczMuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RlczMuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RlczIuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2RlczEuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7CiAgICAgICAgCSAgICAgICAgfSwKCiAgICAgICAgCSAgICAgICAga2V5U2l6ZTogMTkyLzMyLAoKICAgICAgICAJICAgICAgICBpdlNpemU6IDY0LzMyLAoKICAgICAgICAJICAgICAgICBibG9ja1NpemU6IDY0LzMyCiAgICAgICAgCSAgICB9KTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBAZXhhbXBsZQogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlRyaXBsZURFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTsKICAgICAgICAJICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlRyaXBsZURFUy5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTsKICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgQy5UcmlwbGVERVMgPSBCbG9ja0NpcGhlci5fY3JlYXRlSGVscGVyKFRyaXBsZURFUyk7CiAgICAgICAgCX0oKSk7CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLlRyaXBsZURFUzsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgcmM0ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSwgZW5jQmFzZTY0LCBtZDUsIGV2cGtkZiwgY2lwaGVyQ29yZSk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7CiAgICAgICAgCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogUkM0IHN0cmVhbSBjaXBoZXIgYWxnb3JpdGhtLgogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICB2YXIgUkM0ID0gQ19hbGdvLlJDNCA9IFN0cmVhbUNpcGhlci5leHRlbmQoewogICAgICAgIAkgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5OwogICAgICAgIAkgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBrZXlTaWdCeXRlcyA9IGtleS5zaWdCeXRlczsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEluaXQgc2JveAogICAgICAgIAkgICAgICAgICAgICB2YXIgUyA9IHRoaXMuX1MgPSBbXTsKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgU1tpXSA9IGk7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIEtleSBzZXR1cAogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCAyNTY7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGtleUJ5dGVJbmRleCA9IGkgJSBrZXlTaWdCeXRlczsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlID0gKGtleVdvcmRzW2tleUJ5dGVJbmRleCA+Pj4gMl0gPj4+ICgyNCAtIChrZXlCeXRlSW5kZXggJSA0KSAqIDgpKSAmIDB4ZmY7CgogICAgICAgIAkgICAgICAgICAgICAgICAgaiA9IChqICsgU1tpXSArIGtleUJ5dGUpICUgMjU2OwoKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFN3YXAKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciB0ID0gU1tpXTsKICAgICAgICAJICAgICAgICAgICAgICAgIFNbaV0gPSBTW2pdOwogICAgICAgIAkgICAgICAgICAgICAgICAgU1tqXSA9IHQ7CiAgICAgICAgCSAgICAgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgICAgIC8vIENvdW50ZXJzCiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2kgPSB0aGlzLl9qID0gMDsKICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKICAgICAgICAJICAgICAgICAgICAgTVtvZmZzZXRdIF49IGdlbmVyYXRlS2V5c3RyZWFtV29yZC5jYWxsKHRoaXMpOwogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIGtleVNpemU6IDI1Ni8zMiwKCiAgICAgICAgCSAgICAgICAgaXZTaXplOiAwCiAgICAgICAgCSAgICB9KTsKCiAgICAgICAgCSAgICBmdW5jdGlvbiBnZW5lcmF0ZUtleXN0cmVhbVdvcmQoKSB7CiAgICAgICAgCSAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICAgICAgdmFyIFMgPSB0aGlzLl9TOwogICAgICAgIAkgICAgICAgIHZhciBpID0gdGhpcy5faTsKICAgICAgICAJICAgICAgICB2YXIgaiA9IHRoaXMuX2o7CgogICAgICAgIAkgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbSB3b3JkCiAgICAgICAgCSAgICAgICAgdmFyIGtleXN0cmVhbVdvcmQgPSAwOwogICAgICAgIAkgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgNDsgbisrKSB7CiAgICAgICAgCSAgICAgICAgICAgIGkgPSAoaSArIDEpICUgMjU2OwogICAgICAgIAkgICAgICAgICAgICBqID0gKGogKyBTW2ldKSAlIDI1NjsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIFN3YXAKICAgICAgICAJICAgICAgICAgICAgdmFyIHQgPSBTW2ldOwogICAgICAgIAkgICAgICAgICAgICBTW2ldID0gU1tqXTsKICAgICAgICAJICAgICAgICAgICAgU1tqXSA9IHQ7CgogICAgICAgIAkgICAgICAgICAgICBrZXlzdHJlYW1Xb3JkIHw9IFNbKFNbaV0gKyBTW2pdKSAlIDI1Nl0gPDwgKDI0IC0gbiAqIDgpOwogICAgICAgIAkgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgLy8gVXBkYXRlIGNvdW50ZXJzCiAgICAgICAgCSAgICAgICAgdGhpcy5faSA9IGk7CiAgICAgICAgCSAgICAgICAgdGhpcy5faiA9IGo7CgogICAgICAgIAkgICAgICAgIHJldHVybiBrZXlzdHJlYW1Xb3JkOwogICAgICAgIAkgICAgfQoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUkM0LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUkM0LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLlJDNCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJDNCk7CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBNb2RpZmllZCBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uCiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIHZhciBSQzREcm9wID0gQ19hbGdvLlJDNERyb3AgPSBSQzQuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICAvKioKICAgICAgICAJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgICAgICAgCSAgICAgICAgICoKICAgICAgICAJICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZHJvcCBUaGUgbnVtYmVyIG9mIGtleXN0cmVhbSB3b3JkcyB0byBkcm9wLiBEZWZhdWx0IDE5MgogICAgICAgIAkgICAgICAgICAqLwogICAgICAgIAkgICAgICAgIGNmZzogUkM0LmNmZy5leHRlbmQoewogICAgICAgIAkgICAgICAgICAgICBkcm9wOiAxOTIKICAgICAgICAJICAgICAgICB9KSwKCiAgICAgICAgCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAJICAgICAgICAgICAgUkM0Ll9kb1Jlc2V0LmNhbGwodGhpcyk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBEcm9wCiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmNmZy5kcm9wOyBpID4gMDsgaS0tKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBnZW5lcmF0ZUtleXN0cmVhbVdvcmQuY2FsbCh0aGlzKTsKICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0KICAgICAgICAJICAgIH0pOwoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUkM0RHJvcC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTsKICAgICAgICAJICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNERyb3AuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7CiAgICAgICAgCSAgICAgKi8KICAgICAgICAJICAgIEMuUkM0RHJvcCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJDNERyb3ApOwogICAgICAgIAl9KCkpOwoKCiAgICAgICAgCXJldHVybiBDcnlwdG9KUy5SQzQ7CgogICAgICAgIH0pKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIHJhYmJpdCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CiAgICAgICAgCXsKICAgICAgICAJCS8vIENvbW1vbkpTCiAgICAgICAgCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KGNvcmUsIGVuY0Jhc2U2NCwgbWQ1LCBldnBrZGYsIGNpcGhlckNvcmUpOwogICAgICAgIAl9CiAgICAgICAgfShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgogICAgICAgIAkoZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgCSAgICB2YXIgQyA9IENyeXB0b0pTOwogICAgICAgIAkgICAgdmFyIENfbGliID0gQy5saWI7CiAgICAgICAgCSAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyOwogICAgICAgIAkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKCiAgICAgICAgCSAgICAvLyBSZXVzYWJsZSBvYmplY3RzCiAgICAgICAgCSAgICB2YXIgUyAgPSBbXTsKICAgICAgICAJICAgIHZhciBDXyA9IFtdOwogICAgICAgIAkgICAgdmFyIEcgID0gW107CgogICAgICAgIAkgICAgLyoqCiAgICAgICAgCSAgICAgKiBSYWJiaXQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFJhYmJpdCA9IENfYWxnby5SYWJiaXQgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgdmFyIEsgPSB0aGlzLl9rZXkud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuY2ZnLml2OwoKICAgICAgICAJICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIEtbaV0gPSAoKChLW2ldIDw8IDgpICB8IChLW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfAogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICgoKEtbaV0gPDwgMjQpIHwgKEtbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTsKICAgICAgICAJICAgICAgICAgICAgfQoKICAgICAgICAJICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXMKICAgICAgICAJICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gWwogICAgICAgIAkgICAgICAgICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwKICAgICAgICAJICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksCiAgICAgICAgCSAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLAogICAgICAgIAkgICAgICAgICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KQogICAgICAgIAkgICAgICAgICAgICBdOwoKICAgICAgICAJICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBjb3VudGVyIHZhbHVlcwogICAgICAgIAkgICAgICAgICAgICB2YXIgQyA9IHRoaXMuX0MgPSBbCiAgICAgICAgCSAgICAgICAgICAgICAgICAoS1syXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLCAoS1swXSAmIDB4ZmZmZjAwMDApIHwgKEtbMV0gJiAweDAwMDBmZmZmKSwKICAgICAgICAJICAgICAgICAgICAgICAgIChLWzNdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksIChLWzFdICYgMHhmZmZmMDAwMCkgfCAoS1syXSAmIDB4MDAwMGZmZmYpLAogICAgICAgIAkgICAgICAgICAgICAgICAgKEtbMF0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSwgKEtbMl0gJiAweGZmZmYwMDAwKSB8IChLWzNdICYgMHgwMDAwZmZmZiksCiAgICAgICAgCSAgICAgICAgICAgICAgICAoS1sxXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpLCAoS1szXSAmIDB4ZmZmZjAwMDApIHwgKEtbMF0gJiAweDAwMDBmZmZmKQogICAgICAgIAkgICAgICAgICAgICBdOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ2FycnkgYml0CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2IgPSAwOwoKICAgICAgICAJICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXMKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBNb2RpZnkgdGhlIGNvdW50ZXJzCiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBDW2ldIF49IFhbKGkgKyA0KSAmIDddOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBJViBzZXR1cAogICAgICAgIAkgICAgICAgICAgICBpZiAoaXYpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIElWID0gaXYud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgSVZfMCA9IElWWzBdOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIElWXzEgPSBJVlsxXTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgaTIgPSAoKChJVl8xIDw8IDgpIHwgKElWXzEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzEgPDwgMjQpIHwgKElWXzEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gTW9kaWZ5IGNvdW50ZXIgdmFsdWVzCiAgICAgICAgCSAgICAgICAgICAgICAgICBDWzBdIF49IGkwOwogICAgICAgIAkgICAgICAgICAgICAgICAgQ1sxXSBePSBpMTsKICAgICAgICAJICAgICAgICAgICAgICAgIENbMl0gXj0gaTI7CiAgICAgICAgCSAgICAgICAgICAgICAgICBDWzNdIF49IGkzOwogICAgICAgIAkgICAgICAgICAgICAgICAgQ1s0XSBePSBpMDsKICAgICAgICAJICAgICAgICAgICAgICAgIENbNV0gXj0gaTE7CiAgICAgICAgCSAgICAgICAgICAgICAgICBDWzZdIF49IGkyOwogICAgICAgIAkgICAgICAgICAgICAgICAgQ1s3XSBePSBpMzsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lcwogICAgICAgIAkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7CgogICAgICAgIAkgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0KICAgICAgICAJICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIGtleXN0cmVhbSB3b3JkcwogICAgICAgIAkgICAgICAgICAgICBTWzBdID0gWFswXSBeIChYWzVdID4+PiAxNikgXiAoWFszXSA8PCAxNik7CiAgICAgICAgCSAgICAgICAgICAgIFNbMV0gPSBYWzJdIF4gKFhbN10gPj4+IDE2KSBeIChYWzVdIDw8IDE2KTsKICAgICAgICAJICAgICAgICAgICAgU1syXSA9IFhbNF0gXiAoWFsxXSA+Pj4gMTYpIF4gKFhbN10gPDwgMTYpOwogICAgICAgIAkgICAgICAgICAgICBTWzNdID0gWFs2XSBeIChYWzNdID4+PiAxNikgXiAoWFsxXSA8PCAxNik7CgogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KICAgICAgICAJICAgICAgICAgICAgICAgIFNbaV0gPSAoKChTW2ldIDw8IDgpICB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfAogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBFbmNyeXB0CiAgICAgICAgCSAgICAgICAgICAgICAgICBNW29mZnNldCArIGldIF49IFNbaV07CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBibG9ja1NpemU6IDEyOC8zMiwKCiAgICAgICAgCSAgICAgICAgaXZTaXplOiA2NC8zMgogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgZnVuY3Rpb24gbmV4dFN0YXRlKCkgewogICAgICAgIAkgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgIHZhciBYID0gdGhpcy5fWDsKICAgICAgICAJICAgICAgICB2YXIgQyA9IHRoaXMuX0M7CgogICAgICAgIAkgICAgICAgIC8vIFNhdmUgb2xkIGNvdW50ZXIgdmFsdWVzCiAgICAgICAgCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgQ19baV0gPSBDW2ldOwogICAgICAgIAkgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlcwogICAgICAgIAkgICAgICAgIENbMF0gPSAoQ1swXSArIDB4NGQzNGQzNGQgKyB0aGlzLl9iKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1szXSA9IChDWzNdICsgMHg0ZDM0ZDM0ZCArICgoQ1syXSA+Pj4gMCkgPCAoQ19bMl0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1s2XSA9IChDWzZdICsgMHg0ZDM0ZDM0ZCArICgoQ1s1XSA+Pj4gMCkgPCAoQ19bNV0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDsKCiAgICAgICAgCSAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBnLXZhbHVlcwogICAgICAgIAkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBneCA9IFhbaV0gKyBDW2ldOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29uc3RydWN0IGhpZ2ggYW5kIGxvdyBhcmd1bWVudCBmb3Igc3F1YXJpbmcKICAgICAgICAJICAgICAgICAgICAgdmFyIGdhID0gZ3ggJiAweGZmZmY7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBnYiA9IGd4ID4+PiAxNjsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nCiAgICAgICAgCSAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEhpZ2ggWE9SIGxvdwogICAgICAgIAkgICAgICAgICAgICBHW2ldID0gZ2ggXiBnbDsKICAgICAgICAJICAgICAgICB9CgogICAgICAgIAkgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgc3RhdGUgdmFsdWVzCiAgICAgICAgCSAgICAgICAgWFswXSA9IChHWzBdICsgKChHWzddIDw8IDE2KSB8IChHWzddID4+PiAxNikpICsgKChHWzZdIDw8IDE2KSB8IChHWzZdID4+PiAxNikpKSB8IDA7CiAgICAgICAgCSAgICAgICAgWFsxXSA9IChHWzFdICsgKChHWzBdIDw8IDgpICB8IChHWzBdID4+PiAyNCkpICsgR1s3XSkgfCAwOwogICAgICAgIAkgICAgICAgIFhbMl0gPSAoR1syXSArICgoR1sxXSA8PCAxNikgfCAoR1sxXSA+Pj4gMTYpKSArICgoR1swXSA8PCAxNikgfCAoR1swXSA+Pj4gMTYpKSkgfCAwOwogICAgICAgIAkgICAgICAgIFhbM10gPSAoR1szXSArICgoR1syXSA8PCA4KSAgfCAoR1syXSA+Pj4gMjQpKSArIEdbMV0pIHwgMDsKICAgICAgICAJICAgICAgICBYWzRdID0gKEdbNF0gKyAoKEdbM10gPDwgMTYpIHwgKEdbM10gPj4+IDE2KSkgKyAoKEdbMl0gPDwgMTYpIHwgKEdbMl0gPj4+IDE2KSkpIHwgMDsKICAgICAgICAJICAgICAgICBYWzVdID0gKEdbNV0gKyAoKEdbNF0gPDwgOCkgIHwgKEdbNF0gPj4+IDI0KSkgKyBHWzNdKSB8IDA7CiAgICAgICAgCSAgICAgICAgWFs2XSA9IChHWzZdICsgKChHWzVdIDw8IDE2KSB8IChHWzVdID4+PiAxNikpICsgKChHWzRdIDw8IDE2KSB8IChHWzRdID4+PiAxNikpKSB8IDA7CiAgICAgICAgCSAgICAgICAgWFs3XSA9IChHWzddICsgKChHWzZdIDw8IDgpICB8IChHWzZdID4+PiAyNCkpICsgR1s1XSkgfCAwOwogICAgICAgIAkgICAgfQoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLlJhYmJpdCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdCk7CiAgICAgICAgCX0oKSk7CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLlJhYmJpdDsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgcmFiYml0TGVnYWN5ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKICAgICAgICAJewogICAgICAgIAkJLy8gQ29tbW9uSlMKICAgICAgICAJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoY29yZSwgZW5jQmFzZTY0LCBtZDUsIGV2cGtkZiwgY2lwaGVyQ29yZSk7CiAgICAgICAgCX0KICAgICAgICB9KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCiAgICAgICAgCShmdW5jdGlvbiAoKSB7CiAgICAgICAgCSAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgIHZhciBDID0gQ3J5cHRvSlM7CiAgICAgICAgCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKICAgICAgICAJICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7CiAgICAgICAgCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKICAgICAgICAJICAgIC8vIFJldXNhYmxlIG9iamVjdHMKICAgICAgICAJICAgIHZhciBTICA9IFtdOwogICAgICAgIAkgICAgdmFyIENfID0gW107CiAgICAgICAgCSAgICB2YXIgRyAgPSBbXTsKCiAgICAgICAgCSAgICAvKioKICAgICAgICAJICAgICAqIFJhYmJpdCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS4KICAgICAgICAJICAgICAqCiAgICAgICAgCSAgICAgKiBUaGlzIGlzIGEgbGVnYWN5IHZlcnNpb24gdGhhdCBuZWdsZWN0ZWQgdG8gY29udmVydCB0aGUga2V5IHRvIGxpdHRsZS1lbmRpYW4uCiAgICAgICAgCSAgICAgKiBUaGlzIGVycm9yIGRvZXNuJ3QgYWZmZWN0IHRoZSBjaXBoZXIncyBzZWN1cml0eSwKICAgICAgICAJICAgICAqIGJ1dCBpdCBkb2VzIGFmZmVjdCBpdHMgY29tcGF0aWJpbGl0eSB3aXRoIG90aGVyIGltcGxlbWVudGF0aW9ucy4KICAgICAgICAJICAgICAqLwogICAgICAgIAkgICAgdmFyIFJhYmJpdExlZ2FjeSA9IENfYWxnby5SYWJiaXRMZWdhY3kgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHsKICAgICAgICAJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAJICAgICAgICAgICAgdmFyIEsgPSB0aGlzLl9rZXkud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuY2ZnLml2OwoKICAgICAgICAJICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXMKICAgICAgICAJICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gWwogICAgICAgIAkgICAgICAgICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwKICAgICAgICAJICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksCiAgICAgICAgCSAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLAogICAgICAgIAkgICAgICAgICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KQogICAgICAgIAkgICAgICAgICAgICBdOwoKICAgICAgICAJICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBjb3VudGVyIHZhbHVlcwogICAgICAgIAkgICAgICAgICAgICB2YXIgQyA9IHRoaXMuX0MgPSBbCiAgICAgICAgCSAgICAgICAgICAgICAgICAoS1syXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLCAoS1swXSAmIDB4ZmZmZjAwMDApIHwgKEtbMV0gJiAweDAwMDBmZmZmKSwKICAgICAgICAJICAgICAgICAgICAgICAgIChLWzNdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksIChLWzFdICYgMHhmZmZmMDAwMCkgfCAoS1syXSAmIDB4MDAwMGZmZmYpLAogICAgICAgIAkgICAgICAgICAgICAgICAgKEtbMF0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSwgKEtbMl0gJiAweGZmZmYwMDAwKSB8IChLWzNdICYgMHgwMDAwZmZmZiksCiAgICAgICAgCSAgICAgICAgICAgICAgICAoS1sxXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpLCAoS1szXSAmIDB4ZmZmZjAwMDApIHwgKEtbMF0gJiAweDAwMDBmZmZmKQogICAgICAgIAkgICAgICAgICAgICBdOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ2FycnkgYml0CiAgICAgICAgCSAgICAgICAgICAgIHRoaXMuX2IgPSAwOwoKICAgICAgICAJICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXMKICAgICAgICAJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBNb2RpZnkgdGhlIGNvdW50ZXJzCiAgICAgICAgCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgICAgICBDW2ldIF49IFhbKGkgKyA0KSAmIDddOwogICAgICAgIAkgICAgICAgICAgICB9CgogICAgICAgIAkgICAgICAgICAgICAvLyBJViBzZXR1cAogICAgICAgIAkgICAgICAgICAgICBpZiAoaXYpIHsKICAgICAgICAJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIElWID0gaXYud29yZHM7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgSVZfMCA9IElWWzBdOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIElWXzEgPSBJVlsxXTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnMKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7CiAgICAgICAgCSAgICAgICAgICAgICAgICB2YXIgaTIgPSAoKChJVl8xIDw8IDgpIHwgKElWXzEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzEgPDwgMjQpIHwgKElWXzEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApOwogICAgICAgIAkgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTsKICAgICAgICAJICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7CgogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gTW9kaWZ5IGNvdW50ZXIgdmFsdWVzCiAgICAgICAgCSAgICAgICAgICAgICAgICBDWzBdIF49IGkwOwogICAgICAgIAkgICAgICAgICAgICAgICAgQ1sxXSBePSBpMTsKICAgICAgICAJICAgICAgICAgICAgICAgIENbMl0gXj0gaTI7CiAgICAgICAgCSAgICAgICAgICAgICAgICBDWzNdIF49IGkzOwogICAgICAgIAkgICAgICAgICAgICAgICAgQ1s0XSBePSBpMDsKICAgICAgICAJICAgICAgICAgICAgICAgIENbNV0gXj0gaTE7CiAgICAgICAgCSAgICAgICAgICAgICAgICBDWzZdIF49IGkyOwogICAgICAgIAkgICAgICAgICAgICAgICAgQ1s3XSBePSBpMzsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lcwogICAgICAgIAkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTsKICAgICAgICAJICAgICAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICAgICAgfQogICAgICAgIAkgICAgICAgIH0sCgogICAgICAgIAkgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewogICAgICAgIAkgICAgICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIAkgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7CgogICAgICAgIAkgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0KICAgICAgICAJICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7CgogICAgICAgIAkgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIGtleXN0cmVhbSB3b3JkcwogICAgICAgIAkgICAgICAgICAgICBTWzBdID0gWFswXSBeIChYWzVdID4+PiAxNikgXiAoWFszXSA8PCAxNik7CiAgICAgICAgCSAgICAgICAgICAgIFNbMV0gPSBYWzJdIF4gKFhbN10gPj4+IDE2KSBeIChYWzVdIDw8IDE2KTsKICAgICAgICAJICAgICAgICAgICAgU1syXSA9IFhbNF0gXiAoWFsxXSA+Pj4gMTYpIF4gKFhbN10gPDwgMTYpOwogICAgICAgIAkgICAgICAgICAgICBTWzNdID0gWFs2XSBeIChYWzNdID4+PiAxNikgXiAoWFsxXSA8PCAxNik7CgogICAgICAgIAkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgIAkgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KICAgICAgICAJICAgICAgICAgICAgICAgIFNbaV0gPSAoKChTW2ldIDw8IDgpICB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfAogICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTsKCiAgICAgICAgCSAgICAgICAgICAgICAgICAvLyBFbmNyeXB0CiAgICAgICAgCSAgICAgICAgICAgICAgICBNW29mZnNldCArIGldIF49IFNbaV07CiAgICAgICAgCSAgICAgICAgICAgIH0KICAgICAgICAJICAgICAgICB9LAoKICAgICAgICAJICAgICAgICBibG9ja1NpemU6IDEyOC8zMiwKCiAgICAgICAgCSAgICAgICAgaXZTaXplOiA2NC8zMgogICAgICAgIAkgICAgfSk7CgogICAgICAgIAkgICAgZnVuY3Rpb24gbmV4dFN0YXRlKCkgewogICAgICAgIAkgICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIAkgICAgICAgIHZhciBYID0gdGhpcy5fWDsKICAgICAgICAJICAgICAgICB2YXIgQyA9IHRoaXMuX0M7CgogICAgICAgIAkgICAgICAgIC8vIFNhdmUgb2xkIGNvdW50ZXIgdmFsdWVzCiAgICAgICAgCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHsKICAgICAgICAJICAgICAgICAgICAgQ19baV0gPSBDW2ldOwogICAgICAgIAkgICAgICAgIH0KCiAgICAgICAgCSAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlcwogICAgICAgIAkgICAgICAgIENbMF0gPSAoQ1swXSArIDB4NGQzNGQzNGQgKyB0aGlzLl9iKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1szXSA9IChDWzNdICsgMHg0ZDM0ZDM0ZCArICgoQ1syXSA+Pj4gMCkgPCAoQ19bMl0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1s2XSA9IChDWzZdICsgMHg0ZDM0ZDM0ZCArICgoQ1s1XSA+Pj4gMCkgPCAoQ19bNV0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgCSAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDsKCiAgICAgICAgCSAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBnLXZhbHVlcwogICAgICAgIAkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBneCA9IFhbaV0gKyBDW2ldOwoKICAgICAgICAJICAgICAgICAgICAgLy8gQ29uc3RydWN0IGhpZ2ggYW5kIGxvdyBhcmd1bWVudCBmb3Igc3F1YXJpbmcKICAgICAgICAJICAgICAgICAgICAgdmFyIGdhID0gZ3ggJiAweGZmZmY7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBnYiA9IGd4ID4+PiAxNjsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nCiAgICAgICAgCSAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7CiAgICAgICAgCSAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTsKCiAgICAgICAgCSAgICAgICAgICAgIC8vIEhpZ2ggWE9SIGxvdwogICAgICAgIAkgICAgICAgICAgICBHW2ldID0gZ2ggXiBnbDsKICAgICAgICAJICAgICAgICB9CgogICAgICAgIAkgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgc3RhdGUgdmFsdWVzCiAgICAgICAgCSAgICAgICAgWFswXSA9IChHWzBdICsgKChHWzddIDw8IDE2KSB8IChHWzddID4+PiAxNikpICsgKChHWzZdIDw8IDE2KSB8IChHWzZdID4+PiAxNikpKSB8IDA7CiAgICAgICAgCSAgICAgICAgWFsxXSA9IChHWzFdICsgKChHWzBdIDw8IDgpICB8IChHWzBdID4+PiAyNCkpICsgR1s3XSkgfCAwOwogICAgICAgIAkgICAgICAgIFhbMl0gPSAoR1syXSArICgoR1sxXSA8PCAxNikgfCAoR1sxXSA+Pj4gMTYpKSArICgoR1swXSA8PCAxNikgfCAoR1swXSA+Pj4gMTYpKSkgfCAwOwogICAgICAgIAkgICAgICAgIFhbM10gPSAoR1szXSArICgoR1syXSA8PCA4KSAgfCAoR1syXSA+Pj4gMjQpKSArIEdbMV0pIHwgMDsKICAgICAgICAJICAgICAgICBYWzRdID0gKEdbNF0gKyAoKEdbM10gPDwgMTYpIHwgKEdbM10gPj4+IDE2KSkgKyAoKEdbMl0gPDwgMTYpIHwgKEdbMl0gPj4+IDE2KSkpIHwgMDsKICAgICAgICAJICAgICAgICBYWzVdID0gKEdbNV0gKyAoKEdbNF0gPDwgOCkgIHwgKEdbNF0gPj4+IDI0KSkgKyBHWzNdKSB8IDA7CiAgICAgICAgCSAgICAgICAgWFs2XSA9IChHWzZdICsgKChHWzVdIDw8IDE2KSB8IChHWzVdID4+PiAxNikpICsgKChHWzRdIDw8IDE2KSB8IChHWzRdID4+PiAxNikpKSB8IDA7CiAgICAgICAgCSAgICAgICAgWFs3XSA9IChHWzddICsgKChHWzZdIDw8IDgpICB8IChHWzZdID4+PiAyNCkpICsgR1s1XSkgfCAwOwogICAgICAgIAkgICAgfQoKICAgICAgICAJICAgIC8qKgogICAgICAgIAkgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICAgIAkgICAgICoKICAgICAgICAJICAgICAqIEBleGFtcGxlCiAgICAgICAgCSAgICAgKgogICAgICAgIAkgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpOwogICAgICAgIAkgICAgICovCiAgICAgICAgCSAgICBDLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdExlZ2FjeSk7CiAgICAgICAgCX0oKSk7CgoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTLlJhYmJpdExlZ2FjeTsKCiAgICAgICAgfSkpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgY3J5cHRvSnMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewogICAgICAgIAl7CiAgICAgICAgCQkvLyBDb21tb25KUwogICAgICAgIAkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShjb3JlLCB4NjRDb3JlLCBsaWJUeXBlZGFycmF5cywgZW5jVXRmMTYsIGVuY0Jhc2U2NCwgbWQ1LCBzaGExLCBzaGEyNTYsIHNoYTIyNCwgc2hhNTEyLCBzaGEzODQsIHNoYTMsIHJpcGVtZDE2MCwgaG1hYywgcGJrZGYyLCBldnBrZGYsIGNpcGhlckNvcmUsIG1vZGVDZmIsIG1vZGVDdHIsIG1vZGVDdHJHbGFkbWFuLCBtb2RlT2ZiLCBtb2RlRWNiLCBwYWRBbnNpeDkyMywgcGFkSXNvMTAxMjYsIHBhZElzbzk3OTcxLCBwYWRaZXJvcGFkZGluZywgcGFkTm9wYWRkaW5nLCBmb3JtYXRIZXgsIGFlcywgdHJpcGxlZGVzLCByYzQsIHJhYmJpdCwgcmFiYml0TGVnYWN5KTsKICAgICAgICAJfQogICAgICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKICAgICAgICAJcmV0dXJuIENyeXB0b0pTOwoKICAgICAgICB9KSk7CiAgICAgICAgfSk7CgogICAgICAgIC8qKgogICAgICAgICAqIENoZWNrIGlmIHZhbHVlIGlzIGluIGEgcmFuZ2UgZ3JvdXAuCiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAgICAgICAgICogQHBhcmFtIHtudW1iZXJbXX0gcmFuZ2VHcm91cAogICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGluUmFuZ2UodmFsdWUsIHJhbmdlR3JvdXApIHsKICAgICAgICAgIGlmICh2YWx1ZSA8IHJhbmdlR3JvdXBbMF0pIHJldHVybiBmYWxzZTsKICAgICAgICAgIGxldCBzdGFydFJhbmdlID0gMDsKICAgICAgICAgIGxldCBlbmRSYW5nZSA9IHJhbmdlR3JvdXAubGVuZ3RoIC8gMjsKICAgICAgICAgIHdoaWxlIChzdGFydFJhbmdlIDw9IGVuZFJhbmdlKSB7CiAgICAgICAgICAgIGNvbnN0IG1pZGRsZVJhbmdlID0gTWF0aC5mbG9vcigoc3RhcnRSYW5nZSArIGVuZFJhbmdlKSAvIDIpOwoKICAgICAgICAgICAgLy8gYWN0dWFsIGFycmF5IGluZGV4CiAgICAgICAgICAgIGNvbnN0IGFycmF5SW5kZXggPSBtaWRkbGVSYW5nZSAqIDI7CgogICAgICAgICAgICAvLyBDaGVjayBpZiB2YWx1ZSBpcyBpbiByYW5nZSBwb2ludGVkIGJ5IGFjdHVhbCBpbmRleAogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgdmFsdWUgPj0gcmFuZ2VHcm91cFthcnJheUluZGV4XSAmJgogICAgICAgICAgICAgIHZhbHVlIDw9IHJhbmdlR3JvdXBbYXJyYXlJbmRleCArIDFdCiAgICAgICAgICAgICkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodmFsdWUgPiByYW5nZUdyb3VwW2FycmF5SW5kZXggKyAxXSkgewogICAgICAgICAgICAgIC8vIFNlYXJjaCBSaWdodCBTaWRlIE9mIEFycmF5CiAgICAgICAgICAgICAgc3RhcnRSYW5nZSA9IG1pZGRsZVJhbmdlICsgMTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBTZWFyY2ggTGVmdCBTaWRlIE9mIEFycmF5CiAgICAgICAgICAgICAgZW5kUmFuZ2UgPSBtaWRkbGVSYW5nZSAtIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHByZXR0aWVyL3ByZXR0aWVyICovCiAgICAgICAgLyoqCiAgICAgICAgICogQS4xIFVuYXNzaWduZWQgY29kZSBwb2ludHMgaW4gVW5pY29kZSAzLjIKICAgICAgICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ1NCNhcHBlbmRpeC1BLjEKICAgICAgICAgKi8KICAgICAgICBjb25zdCB1bmFzc2lnbmVkX2NvZGVfcG9pbnRzID0gWwogICAgICAgICAgMHgwMjIxLAogICAgICAgICAgMHgwMjIxLAogICAgICAgICAgMHgwMjM0LAogICAgICAgICAgMHgwMjRmLAogICAgICAgICAgMHgwMmFlLAogICAgICAgICAgMHgwMmFmLAogICAgICAgICAgMHgwMmVmLAogICAgICAgICAgMHgwMmZmLAogICAgICAgICAgMHgwMzUwLAogICAgICAgICAgMHgwMzVmLAogICAgICAgICAgMHgwMzcwLAogICAgICAgICAgMHgwMzczLAogICAgICAgICAgMHgwMzc2LAogICAgICAgICAgMHgwMzc5LAogICAgICAgICAgMHgwMzdiLAogICAgICAgICAgMHgwMzdkLAogICAgICAgICAgMHgwMzdmLAogICAgICAgICAgMHgwMzgzLAogICAgICAgICAgMHgwMzhiLAogICAgICAgICAgMHgwMzhiLAogICAgICAgICAgMHgwMzhkLAogICAgICAgICAgMHgwMzhkLAogICAgICAgICAgMHgwM2EyLAogICAgICAgICAgMHgwM2EyLAogICAgICAgICAgMHgwM2NmLAogICAgICAgICAgMHgwM2NmLAogICAgICAgICAgMHgwM2Y3LAogICAgICAgICAgMHgwM2ZmLAogICAgICAgICAgMHgwNDg3LAogICAgICAgICAgMHgwNDg3LAogICAgICAgICAgMHgwNGNmLAogICAgICAgICAgMHgwNGNmLAogICAgICAgICAgMHgwNGY2LAogICAgICAgICAgMHgwNGY3LAogICAgICAgICAgMHgwNGZhLAogICAgICAgICAgMHgwNGZmLAogICAgICAgICAgMHgwNTEwLAogICAgICAgICAgMHgwNTMwLAogICAgICAgICAgMHgwNTU3LAogICAgICAgICAgMHgwNTU4LAogICAgICAgICAgMHgwNTYwLAogICAgICAgICAgMHgwNTYwLAogICAgICAgICAgMHgwNTg4LAogICAgICAgICAgMHgwNTg4LAogICAgICAgICAgMHgwNThiLAogICAgICAgICAgMHgwNTkwLAogICAgICAgICAgMHgwNWEyLAogICAgICAgICAgMHgwNWEyLAogICAgICAgICAgMHgwNWJhLAogICAgICAgICAgMHgwNWJhLAogICAgICAgICAgMHgwNWM1LAogICAgICAgICAgMHgwNWNmLAogICAgICAgICAgMHgwNWViLAogICAgICAgICAgMHgwNWVmLAogICAgICAgICAgMHgwNWY1LAogICAgICAgICAgMHgwNjBiLAogICAgICAgICAgMHgwNjBkLAogICAgICAgICAgMHgwNjFhLAogICAgICAgICAgMHgwNjFjLAogICAgICAgICAgMHgwNjFlLAogICAgICAgICAgMHgwNjIwLAogICAgICAgICAgMHgwNjIwLAogICAgICAgICAgMHgwNjNiLAogICAgICAgICAgMHgwNjNmLAogICAgICAgICAgMHgwNjU2LAogICAgICAgICAgMHgwNjVmLAogICAgICAgICAgMHgwNmVlLAogICAgICAgICAgMHgwNmVmLAogICAgICAgICAgMHgwNmZmLAogICAgICAgICAgMHgwNmZmLAogICAgICAgICAgMHgwNzBlLAogICAgICAgICAgMHgwNzBlLAogICAgICAgICAgMHgwNzJkLAogICAgICAgICAgMHgwNzJmLAogICAgICAgICAgMHgwNzRiLAogICAgICAgICAgMHgwNzdmLAogICAgICAgICAgMHgwN2IyLAogICAgICAgICAgMHgwOTAwLAogICAgICAgICAgMHgwOTA0LAogICAgICAgICAgMHgwOTA0LAogICAgICAgICAgMHgwOTNhLAogICAgICAgICAgMHgwOTNiLAogICAgICAgICAgMHgwOTRlLAogICAgICAgICAgMHgwOTRmLAogICAgICAgICAgMHgwOTU1LAogICAgICAgICAgMHgwOTU3LAogICAgICAgICAgMHgwOTcxLAogICAgICAgICAgMHgwOTgwLAogICAgICAgICAgMHgwOTg0LAogICAgICAgICAgMHgwOTg0LAogICAgICAgICAgMHgwOThkLAogICAgICAgICAgMHgwOThlLAogICAgICAgICAgMHgwOTkxLAogICAgICAgICAgMHgwOTkyLAogICAgICAgICAgMHgwOWE5LAogICAgICAgICAgMHgwOWE5LAogICAgICAgICAgMHgwOWIxLAogICAgICAgICAgMHgwOWIxLAogICAgICAgICAgMHgwOWIzLAogICAgICAgICAgMHgwOWI1LAogICAgICAgICAgMHgwOWJhLAogICAgICAgICAgMHgwOWJiLAogICAgICAgICAgMHgwOWJkLAogICAgICAgICAgMHgwOWJkLAogICAgICAgICAgMHgwOWM1LAogICAgICAgICAgMHgwOWM2LAogICAgICAgICAgMHgwOWM5LAogICAgICAgICAgMHgwOWNhLAogICAgICAgICAgMHgwOWNlLAogICAgICAgICAgMHgwOWQ2LAogICAgICAgICAgMHgwOWQ4LAogICAgICAgICAgMHgwOWRiLAogICAgICAgICAgMHgwOWRlLAogICAgICAgICAgMHgwOWRlLAogICAgICAgICAgMHgwOWU0LAogICAgICAgICAgMHgwOWU1LAogICAgICAgICAgMHgwOWZiLAogICAgICAgICAgMHgwYTAxLAogICAgICAgICAgMHgwYTAzLAogICAgICAgICAgMHgwYTA0LAogICAgICAgICAgMHgwYTBiLAogICAgICAgICAgMHgwYTBlLAogICAgICAgICAgMHgwYTExLAogICAgICAgICAgMHgwYTEyLAogICAgICAgICAgMHgwYTI5LAogICAgICAgICAgMHgwYTI5LAogICAgICAgICAgMHgwYTMxLAogICAgICAgICAgMHgwYTMxLAogICAgICAgICAgMHgwYTM0LAogICAgICAgICAgMHgwYTM0LAogICAgICAgICAgMHgwYTM3LAogICAgICAgICAgMHgwYTM3LAogICAgICAgICAgMHgwYTNhLAogICAgICAgICAgMHgwYTNiLAogICAgICAgICAgMHgwYTNkLAogICAgICAgICAgMHgwYTNkLAogICAgICAgICAgMHgwYTQzLAogICAgICAgICAgMHgwYTQ2LAogICAgICAgICAgMHgwYTQ5LAogICAgICAgICAgMHgwYTRhLAogICAgICAgICAgMHgwYTRlLAogICAgICAgICAgMHgwYTU4LAogICAgICAgICAgMHgwYTVkLAogICAgICAgICAgMHgwYTVkLAogICAgICAgICAgMHgwYTVmLAogICAgICAgICAgMHgwYTY1LAogICAgICAgICAgMHgwYTc1LAogICAgICAgICAgMHgwYTgwLAogICAgICAgICAgMHgwYTg0LAogICAgICAgICAgMHgwYTg0LAogICAgICAgICAgMHgwYThjLAogICAgICAgICAgMHgwYThjLAogICAgICAgICAgMHgwYThlLAogICAgICAgICAgMHgwYThlLAogICAgICAgICAgMHgwYTkyLAogICAgICAgICAgMHgwYTkyLAogICAgICAgICAgMHgwYWE5LAogICAgICAgICAgMHgwYWE5LAogICAgICAgICAgMHgwYWIxLAogICAgICAgICAgMHgwYWIxLAogICAgICAgICAgMHgwYWI0LAogICAgICAgICAgMHgwYWI0LAogICAgICAgICAgMHgwYWJhLAogICAgICAgICAgMHgwYWJiLAogICAgICAgICAgMHgwYWM2LAogICAgICAgICAgMHgwYWM2LAogICAgICAgICAgMHgwYWNhLAogICAgICAgICAgMHgwYWNhLAogICAgICAgICAgMHgwYWNlLAogICAgICAgICAgMHgwYWNmLAogICAgICAgICAgMHgwYWQxLAogICAgICAgICAgMHgwYWRmLAogICAgICAgICAgMHgwYWUxLAogICAgICAgICAgMHgwYWU1LAogICAgICAgICAgMHgwYWYwLAogICAgICAgICAgMHgwYjAwLAogICAgICAgICAgMHgwYjA0LAogICAgICAgICAgMHgwYjA0LAogICAgICAgICAgMHgwYjBkLAogICAgICAgICAgMHgwYjBlLAogICAgICAgICAgMHgwYjExLAogICAgICAgICAgMHgwYjEyLAogICAgICAgICAgMHgwYjI5LAogICAgICAgICAgMHgwYjI5LAogICAgICAgICAgMHgwYjMxLAogICAgICAgICAgMHgwYjMxLAogICAgICAgICAgMHgwYjM0LAogICAgICAgICAgMHgwYjM1LAogICAgICAgICAgMHgwYjNhLAogICAgICAgICAgMHgwYjNiLAogICAgICAgICAgMHgwYjQ0LAogICAgICAgICAgMHgwYjQ2LAogICAgICAgICAgMHgwYjQ5LAogICAgICAgICAgMHgwYjRhLAogICAgICAgICAgMHgwYjRlLAogICAgICAgICAgMHgwYjU1LAogICAgICAgICAgMHgwYjU4LAogICAgICAgICAgMHgwYjViLAogICAgICAgICAgMHgwYjVlLAogICAgICAgICAgMHgwYjVlLAogICAgICAgICAgMHgwYjYyLAogICAgICAgICAgMHgwYjY1LAogICAgICAgICAgMHgwYjcxLAogICAgICAgICAgMHgwYjgxLAogICAgICAgICAgMHgwYjg0LAogICAgICAgICAgMHgwYjg0LAogICAgICAgICAgMHgwYjhiLAogICAgICAgICAgMHgwYjhkLAogICAgICAgICAgMHgwYjkxLAogICAgICAgICAgMHgwYjkxLAogICAgICAgICAgMHgwYjk2LAogICAgICAgICAgMHgwYjk4LAogICAgICAgICAgMHgwYjliLAogICAgICAgICAgMHgwYjliLAogICAgICAgICAgMHgwYjlkLAogICAgICAgICAgMHgwYjlkLAogICAgICAgICAgMHgwYmEwLAogICAgICAgICAgMHgwYmEyLAogICAgICAgICAgMHgwYmE1LAogICAgICAgICAgMHgwYmE3LAogICAgICAgICAgMHgwYmFiLAogICAgICAgICAgMHgwYmFkLAogICAgICAgICAgMHgwYmI2LAogICAgICAgICAgMHgwYmI2LAogICAgICAgICAgMHgwYmJhLAogICAgICAgICAgMHgwYmJkLAogICAgICAgICAgMHgwYmMzLAogICAgICAgICAgMHgwYmM1LAogICAgICAgICAgMHgwYmM5LAogICAgICAgICAgMHgwYmM5LAogICAgICAgICAgMHgwYmNlLAogICAgICAgICAgMHgwYmQ2LAogICAgICAgICAgMHgwYmQ4LAogICAgICAgICAgMHgwYmU2LAogICAgICAgICAgMHgwYmYzLAogICAgICAgICAgMHgwYzAwLAogICAgICAgICAgMHgwYzA0LAogICAgICAgICAgMHgwYzA0LAogICAgICAgICAgMHgwYzBkLAogICAgICAgICAgMHgwYzBkLAogICAgICAgICAgMHgwYzExLAogICAgICAgICAgMHgwYzExLAogICAgICAgICAgMHgwYzI5LAogICAgICAgICAgMHgwYzI5LAogICAgICAgICAgMHgwYzM0LAogICAgICAgICAgMHgwYzM0LAogICAgICAgICAgMHgwYzNhLAogICAgICAgICAgMHgwYzNkLAogICAgICAgICAgMHgwYzQ1LAogICAgICAgICAgMHgwYzQ1LAogICAgICAgICAgMHgwYzQ5LAogICAgICAgICAgMHgwYzQ5LAogICAgICAgICAgMHgwYzRlLAogICAgICAgICAgMHgwYzU0LAogICAgICAgICAgMHgwYzU3LAogICAgICAgICAgMHgwYzVmLAogICAgICAgICAgMHgwYzYyLAogICAgICAgICAgMHgwYzY1LAogICAgICAgICAgMHgwYzcwLAogICAgICAgICAgMHgwYzgxLAogICAgICAgICAgMHgwYzg0LAogICAgICAgICAgMHgwYzg0LAogICAgICAgICAgMHgwYzhkLAogICAgICAgICAgMHgwYzhkLAogICAgICAgICAgMHgwYzkxLAogICAgICAgICAgMHgwYzkxLAogICAgICAgICAgMHgwY2E5LAogICAgICAgICAgMHgwY2E5LAogICAgICAgICAgMHgwY2I0LAogICAgICAgICAgMHgwY2I0LAogICAgICAgICAgMHgwY2JhLAogICAgICAgICAgMHgwY2JkLAogICAgICAgICAgMHgwY2M1LAogICAgICAgICAgMHgwY2M1LAogICAgICAgICAgMHgwY2M5LAogICAgICAgICAgMHgwY2M5LAogICAgICAgICAgMHgwY2NlLAogICAgICAgICAgMHgwY2Q0LAogICAgICAgICAgMHgwY2Q3LAogICAgICAgICAgMHgwY2RkLAogICAgICAgICAgMHgwY2RmLAogICAgICAgICAgMHgwY2RmLAogICAgICAgICAgMHgwY2UyLAogICAgICAgICAgMHgwY2U1LAogICAgICAgICAgMHgwY2YwLAogICAgICAgICAgMHgwZDAxLAogICAgICAgICAgMHgwZDA0LAogICAgICAgICAgMHgwZDA0LAogICAgICAgICAgMHgwZDBkLAogICAgICAgICAgMHgwZDBkLAogICAgICAgICAgMHgwZDExLAogICAgICAgICAgMHgwZDExLAogICAgICAgICAgMHgwZDI5LAogICAgICAgICAgMHgwZDI5LAogICAgICAgICAgMHgwZDNhLAogICAgICAgICAgMHgwZDNkLAogICAgICAgICAgMHgwZDQ0LAogICAgICAgICAgMHgwZDQ1LAogICAgICAgICAgMHgwZDQ5LAogICAgICAgICAgMHgwZDQ5LAogICAgICAgICAgMHgwZDRlLAogICAgICAgICAgMHgwZDU2LAogICAgICAgICAgMHgwZDU4LAogICAgICAgICAgMHgwZDVmLAogICAgICAgICAgMHgwZDYyLAogICAgICAgICAgMHgwZDY1LAogICAgICAgICAgMHgwZDcwLAogICAgICAgICAgMHgwZDgxLAogICAgICAgICAgMHgwZDg0LAogICAgICAgICAgMHgwZDg0LAogICAgICAgICAgMHgwZDk3LAogICAgICAgICAgMHgwZDk5LAogICAgICAgICAgMHgwZGIyLAogICAgICAgICAgMHgwZGIyLAogICAgICAgICAgMHgwZGJjLAogICAgICAgICAgMHgwZGJjLAogICAgICAgICAgMHgwZGJlLAogICAgICAgICAgMHgwZGJmLAogICAgICAgICAgMHgwZGM3LAogICAgICAgICAgMHgwZGM5LAogICAgICAgICAgMHgwZGNiLAogICAgICAgICAgMHgwZGNlLAogICAgICAgICAgMHgwZGQ1LAogICAgICAgICAgMHgwZGQ1LAogICAgICAgICAgMHgwZGQ3LAogICAgICAgICAgMHgwZGQ3LAogICAgICAgICAgMHgwZGUwLAogICAgICAgICAgMHgwZGYxLAogICAgICAgICAgMHgwZGY1LAogICAgICAgICAgMHgwZTAwLAogICAgICAgICAgMHgwZTNiLAogICAgICAgICAgMHgwZTNlLAogICAgICAgICAgMHgwZTVjLAogICAgICAgICAgMHgwZTgwLAogICAgICAgICAgMHgwZTgzLAogICAgICAgICAgMHgwZTgzLAogICAgICAgICAgMHgwZTg1LAogICAgICAgICAgMHgwZTg2LAogICAgICAgICAgMHgwZTg5LAogICAgICAgICAgMHgwZTg5LAogICAgICAgICAgMHgwZThiLAogICAgICAgICAgMHgwZThjLAogICAgICAgICAgMHgwZThlLAogICAgICAgICAgMHgwZTkzLAogICAgICAgICAgMHgwZTk4LAogICAgICAgICAgMHgwZTk4LAogICAgICAgICAgMHgwZWEwLAogICAgICAgICAgMHgwZWEwLAogICAgICAgICAgMHgwZWE0LAogICAgICAgICAgMHgwZWE0LAogICAgICAgICAgMHgwZWE2LAogICAgICAgICAgMHgwZWE2LAogICAgICAgICAgMHgwZWE4LAogICAgICAgICAgMHgwZWE5LAogICAgICAgICAgMHgwZWFjLAogICAgICAgICAgMHgwZWFjLAogICAgICAgICAgMHgwZWJhLAogICAgICAgICAgMHgwZWJhLAogICAgICAgICAgMHgwZWJlLAogICAgICAgICAgMHgwZWJmLAogICAgICAgICAgMHgwZWM1LAogICAgICAgICAgMHgwZWM1LAogICAgICAgICAgMHgwZWM3LAogICAgICAgICAgMHgwZWM3LAogICAgICAgICAgMHgwZWNlLAogICAgICAgICAgMHgwZWNmLAogICAgICAgICAgMHgwZWRhLAogICAgICAgICAgMHgwZWRiLAogICAgICAgICAgMHgwZWRlLAogICAgICAgICAgMHgwZWZmLAogICAgICAgICAgMHgwZjQ4LAogICAgICAgICAgMHgwZjQ4LAogICAgICAgICAgMHgwZjZiLAogICAgICAgICAgMHgwZjcwLAogICAgICAgICAgMHgwZjhjLAogICAgICAgICAgMHgwZjhmLAogICAgICAgICAgMHgwZjk4LAogICAgICAgICAgMHgwZjk4LAogICAgICAgICAgMHgwZmJkLAogICAgICAgICAgMHgwZmJkLAogICAgICAgICAgMHgwZmNkLAogICAgICAgICAgMHgwZmNlLAogICAgICAgICAgMHgwZmQwLAogICAgICAgICAgMHgwZmZmLAogICAgICAgICAgMHgxMDIyLAogICAgICAgICAgMHgxMDIyLAogICAgICAgICAgMHgxMDI4LAogICAgICAgICAgMHgxMDI4LAogICAgICAgICAgMHgxMDJiLAogICAgICAgICAgMHgxMDJiLAogICAgICAgICAgMHgxMDMzLAogICAgICAgICAgMHgxMDM1LAogICAgICAgICAgMHgxMDNhLAogICAgICAgICAgMHgxMDNmLAogICAgICAgICAgMHgxMDVhLAogICAgICAgICAgMHgxMDlmLAogICAgICAgICAgMHgxMGM2LAogICAgICAgICAgMHgxMGNmLAogICAgICAgICAgMHgxMGY5LAogICAgICAgICAgMHgxMGZhLAogICAgICAgICAgMHgxMGZjLAogICAgICAgICAgMHgxMGZmLAogICAgICAgICAgMHgxMTVhLAogICAgICAgICAgMHgxMTVlLAogICAgICAgICAgMHgxMWEzLAogICAgICAgICAgMHgxMWE3LAogICAgICAgICAgMHgxMWZhLAogICAgICAgICAgMHgxMWZmLAogICAgICAgICAgMHgxMjA3LAogICAgICAgICAgMHgxMjA3LAogICAgICAgICAgMHgxMjQ3LAogICAgICAgICAgMHgxMjQ3LAogICAgICAgICAgMHgxMjQ5LAogICAgICAgICAgMHgxMjQ5LAogICAgICAgICAgMHgxMjRlLAogICAgICAgICAgMHgxMjRmLAogICAgICAgICAgMHgxMjU3LAogICAgICAgICAgMHgxMjU3LAogICAgICAgICAgMHgxMjU5LAogICAgICAgICAgMHgxMjU5LAogICAgICAgICAgMHgxMjVlLAogICAgICAgICAgMHgxMjVmLAogICAgICAgICAgMHgxMjg3LAogICAgICAgICAgMHgxMjg3LAogICAgICAgICAgMHgxMjg5LAogICAgICAgICAgMHgxMjg5LAogICAgICAgICAgMHgxMjhlLAogICAgICAgICAgMHgxMjhmLAogICAgICAgICAgMHgxMmFmLAogICAgICAgICAgMHgxMmFmLAogICAgICAgICAgMHgxMmIxLAogICAgICAgICAgMHgxMmIxLAogICAgICAgICAgMHgxMmI2LAogICAgICAgICAgMHgxMmI3LAogICAgICAgICAgMHgxMmJmLAogICAgICAgICAgMHgxMmJmLAogICAgICAgICAgMHgxMmMxLAogICAgICAgICAgMHgxMmMxLAogICAgICAgICAgMHgxMmM2LAogICAgICAgICAgMHgxMmM3LAogICAgICAgICAgMHgxMmNmLAogICAgICAgICAgMHgxMmNmLAogICAgICAgICAgMHgxMmQ3LAogICAgICAgICAgMHgxMmQ3LAogICAgICAgICAgMHgxMmVmLAogICAgICAgICAgMHgxMmVmLAogICAgICAgICAgMHgxMzBmLAogICAgICAgICAgMHgxMzBmLAogICAgICAgICAgMHgxMzExLAogICAgICAgICAgMHgxMzExLAogICAgICAgICAgMHgxMzE2LAogICAgICAgICAgMHgxMzE3LAogICAgICAgICAgMHgxMzFmLAogICAgICAgICAgMHgxMzFmLAogICAgICAgICAgMHgxMzQ3LAogICAgICAgICAgMHgxMzQ3LAogICAgICAgICAgMHgxMzViLAogICAgICAgICAgMHgxMzYwLAogICAgICAgICAgMHgxMzdkLAogICAgICAgICAgMHgxMzlmLAogICAgICAgICAgMHgxM2Y1LAogICAgICAgICAgMHgxNDAwLAogICAgICAgICAgMHgxNjc3LAogICAgICAgICAgMHgxNjdmLAogICAgICAgICAgMHgxNjlkLAogICAgICAgICAgMHgxNjlmLAogICAgICAgICAgMHgxNmYxLAogICAgICAgICAgMHgxNmZmLAogICAgICAgICAgMHgxNzBkLAogICAgICAgICAgMHgxNzBkLAogICAgICAgICAgMHgxNzE1LAogICAgICAgICAgMHgxNzFmLAogICAgICAgICAgMHgxNzM3LAogICAgICAgICAgMHgxNzNmLAogICAgICAgICAgMHgxNzU0LAogICAgICAgICAgMHgxNzVmLAogICAgICAgICAgMHgxNzZkLAogICAgICAgICAgMHgxNzZkLAogICAgICAgICAgMHgxNzcxLAogICAgICAgICAgMHgxNzcxLAogICAgICAgICAgMHgxNzc0LAogICAgICAgICAgMHgxNzdmLAogICAgICAgICAgMHgxN2RkLAogICAgICAgICAgMHgxN2RmLAogICAgICAgICAgMHgxN2VhLAogICAgICAgICAgMHgxN2ZmLAogICAgICAgICAgMHgxODBmLAogICAgICAgICAgMHgxODBmLAogICAgICAgICAgMHgxODFhLAogICAgICAgICAgMHgxODFmLAogICAgICAgICAgMHgxODc4LAogICAgICAgICAgMHgxODdmLAogICAgICAgICAgMHgxOGFhLAogICAgICAgICAgMHgxZGZmLAogICAgICAgICAgMHgxZTljLAogICAgICAgICAgMHgxZTlmLAogICAgICAgICAgMHgxZWZhLAogICAgICAgICAgMHgxZWZmLAogICAgICAgICAgMHgxZjE2LAogICAgICAgICAgMHgxZjE3LAogICAgICAgICAgMHgxZjFlLAogICAgICAgICAgMHgxZjFmLAogICAgICAgICAgMHgxZjQ2LAogICAgICAgICAgMHgxZjQ3LAogICAgICAgICAgMHgxZjRlLAogICAgICAgICAgMHgxZjRmLAogICAgICAgICAgMHgxZjU4LAogICAgICAgICAgMHgxZjU4LAogICAgICAgICAgMHgxZjVhLAogICAgICAgICAgMHgxZjVhLAogICAgICAgICAgMHgxZjVjLAogICAgICAgICAgMHgxZjVjLAogICAgICAgICAgMHgxZjVlLAogICAgICAgICAgMHgxZjVlLAogICAgICAgICAgMHgxZjdlLAogICAgICAgICAgMHgxZjdmLAogICAgICAgICAgMHgxZmI1LAogICAgICAgICAgMHgxZmI1LAogICAgICAgICAgMHgxZmM1LAogICAgICAgICAgMHgxZmM1LAogICAgICAgICAgMHgxZmQ0LAogICAgICAgICAgMHgxZmQ1LAogICAgICAgICAgMHgxZmRjLAogICAgICAgICAgMHgxZmRjLAogICAgICAgICAgMHgxZmYwLAogICAgICAgICAgMHgxZmYxLAogICAgICAgICAgMHgxZmY1LAogICAgICAgICAgMHgxZmY1LAogICAgICAgICAgMHgxZmZmLAogICAgICAgICAgMHgxZmZmLAogICAgICAgICAgMHgyMDUzLAogICAgICAgICAgMHgyMDU2LAogICAgICAgICAgMHgyMDU4LAogICAgICAgICAgMHgyMDVlLAogICAgICAgICAgMHgyMDY0LAogICAgICAgICAgMHgyMDY5LAogICAgICAgICAgMHgyMDcyLAogICAgICAgICAgMHgyMDczLAogICAgICAgICAgMHgyMDhmLAogICAgICAgICAgMHgyMDlmLAogICAgICAgICAgMHgyMGIyLAogICAgICAgICAgMHgyMGNmLAogICAgICAgICAgMHgyMGViLAogICAgICAgICAgMHgyMGZmLAogICAgICAgICAgMHgyMTNiLAogICAgICAgICAgMHgyMTNjLAogICAgICAgICAgMHgyMTRjLAogICAgICAgICAgMHgyMTUyLAogICAgICAgICAgMHgyMTg0LAogICAgICAgICAgMHgyMThmLAogICAgICAgICAgMHgyM2NmLAogICAgICAgICAgMHgyM2ZmLAogICAgICAgICAgMHgyNDI3LAogICAgICAgICAgMHgyNDNmLAogICAgICAgICAgMHgyNDRiLAogICAgICAgICAgMHgyNDVmLAogICAgICAgICAgMHgyNGZmLAogICAgICAgICAgMHgyNGZmLAogICAgICAgICAgMHgyNjE0LAogICAgICAgICAgMHgyNjE1LAogICAgICAgICAgMHgyNjE4LAogICAgICAgICAgMHgyNjE4LAogICAgICAgICAgMHgyNjdlLAogICAgICAgICAgMHgyNjdmLAogICAgICAgICAgMHgyNjhhLAogICAgICAgICAgMHgyNzAwLAogICAgICAgICAgMHgyNzA1LAogICAgICAgICAgMHgyNzA1LAogICAgICAgICAgMHgyNzBhLAogICAgICAgICAgMHgyNzBiLAogICAgICAgICAgMHgyNzI4LAogICAgICAgICAgMHgyNzI4LAogICAgICAgICAgMHgyNzRjLAogICAgICAgICAgMHgyNzRjLAogICAgICAgICAgMHgyNzRlLAogICAgICAgICAgMHgyNzRlLAogICAgICAgICAgMHgyNzUzLAogICAgICAgICAgMHgyNzU1LAogICAgICAgICAgMHgyNzU3LAogICAgICAgICAgMHgyNzU3LAogICAgICAgICAgMHgyNzVmLAogICAgICAgICAgMHgyNzYwLAogICAgICAgICAgMHgyNzk1LAogICAgICAgICAgMHgyNzk3LAogICAgICAgICAgMHgyN2IwLAogICAgICAgICAgMHgyN2IwLAogICAgICAgICAgMHgyN2JmLAogICAgICAgICAgMHgyN2NmLAogICAgICAgICAgMHgyN2VjLAogICAgICAgICAgMHgyN2VmLAogICAgICAgICAgMHgyYjAwLAogICAgICAgICAgMHgyZTdmLAogICAgICAgICAgMHgyZTlhLAogICAgICAgICAgMHgyZTlhLAogICAgICAgICAgMHgyZWY0LAogICAgICAgICAgMHgyZWZmLAogICAgICAgICAgMHgyZmQ2LAogICAgICAgICAgMHgyZmVmLAogICAgICAgICAgMHgyZmZjLAogICAgICAgICAgMHgyZmZmLAogICAgICAgICAgMHgzMDQwLAogICAgICAgICAgMHgzMDQwLAogICAgICAgICAgMHgzMDk3LAogICAgICAgICAgMHgzMDk4LAogICAgICAgICAgMHgzMTAwLAogICAgICAgICAgMHgzMTA0LAogICAgICAgICAgMHgzMTJkLAogICAgICAgICAgMHgzMTMwLAogICAgICAgICAgMHgzMThmLAogICAgICAgICAgMHgzMThmLAogICAgICAgICAgMHgzMWI4LAogICAgICAgICAgMHgzMWVmLAogICAgICAgICAgMHgzMjFkLAogICAgICAgICAgMHgzMjFmLAogICAgICAgICAgMHgzMjQ0LAogICAgICAgICAgMHgzMjUwLAogICAgICAgICAgMHgzMjdjLAogICAgICAgICAgMHgzMjdlLAogICAgICAgICAgMHgzMmNjLAogICAgICAgICAgMHgzMmNmLAogICAgICAgICAgMHgzMmZmLAogICAgICAgICAgMHgzMmZmLAogICAgICAgICAgMHgzMzc3LAogICAgICAgICAgMHgzMzdhLAogICAgICAgICAgMHgzM2RlLAogICAgICAgICAgMHgzM2RmLAogICAgICAgICAgMHgzM2ZmLAogICAgICAgICAgMHgzM2ZmLAogICAgICAgICAgMHg0ZGI2LAogICAgICAgICAgMHg0ZGZmLAogICAgICAgICAgMHg5ZmE2LAogICAgICAgICAgMHg5ZmZmLAogICAgICAgICAgMHhhNDhkLAogICAgICAgICAgMHhhNDhmLAogICAgICAgICAgMHhhNGM3LAogICAgICAgICAgMHhhYmZmLAogICAgICAgICAgMHhkN2E0LAogICAgICAgICAgMHhkN2ZmLAogICAgICAgICAgMHhmYTJlLAogICAgICAgICAgMHhmYTJmLAogICAgICAgICAgMHhmYTZiLAogICAgICAgICAgMHhmYWZmLAogICAgICAgICAgMHhmYjA3LAogICAgICAgICAgMHhmYjEyLAogICAgICAgICAgMHhmYjE4LAogICAgICAgICAgMHhmYjFjLAogICAgICAgICAgMHhmYjM3LAogICAgICAgICAgMHhmYjM3LAogICAgICAgICAgMHhmYjNkLAogICAgICAgICAgMHhmYjNkLAogICAgICAgICAgMHhmYjNmLAogICAgICAgICAgMHhmYjNmLAogICAgICAgICAgMHhmYjQyLAogICAgICAgICAgMHhmYjQyLAogICAgICAgICAgMHhmYjQ1LAogICAgICAgICAgMHhmYjQ1LAogICAgICAgICAgMHhmYmIyLAogICAgICAgICAgMHhmYmQyLAogICAgICAgICAgMHhmZDQwLAogICAgICAgICAgMHhmZDRmLAogICAgICAgICAgMHhmZDkwLAogICAgICAgICAgMHhmZDkxLAogICAgICAgICAgMHhmZGM4LAogICAgICAgICAgMHhmZGNmLAogICAgICAgICAgMHhmZGZkLAogICAgICAgICAgMHhmZGZmLAogICAgICAgICAgMHhmZTEwLAogICAgICAgICAgMHhmZTFmLAogICAgICAgICAgMHhmZTI0LAogICAgICAgICAgMHhmZTJmLAogICAgICAgICAgMHhmZTQ3LAogICAgICAgICAgMHhmZTQ4LAogICAgICAgICAgMHhmZTUzLAogICAgICAgICAgMHhmZTUzLAogICAgICAgICAgMHhmZTY3LAogICAgICAgICAgMHhmZTY3LAogICAgICAgICAgMHhmZTZjLAogICAgICAgICAgMHhmZTZmLAogICAgICAgICAgMHhmZTc1LAogICAgICAgICAgMHhmZTc1LAogICAgICAgICAgMHhmZWZkLAogICAgICAgICAgMHhmZWZlLAogICAgICAgICAgMHhmZjAwLAogICAgICAgICAgMHhmZjAwLAogICAgICAgICAgMHhmZmJmLAogICAgICAgICAgMHhmZmMxLAogICAgICAgICAgMHhmZmM4LAogICAgICAgICAgMHhmZmM5LAogICAgICAgICAgMHhmZmQwLAogICAgICAgICAgMHhmZmQxLAogICAgICAgICAgMHhmZmQ4LAogICAgICAgICAgMHhmZmQ5LAogICAgICAgICAgMHhmZmRkLAogICAgICAgICAgMHhmZmRmLAogICAgICAgICAgMHhmZmU3LAogICAgICAgICAgMHhmZmU3LAogICAgICAgICAgMHhmZmVmLAogICAgICAgICAgMHhmZmY4LAogICAgICAgICAgMHgxMDAwMCwKICAgICAgICAgIDB4MTAyZmYsCiAgICAgICAgICAweDEwMzFmLAogICAgICAgICAgMHgxMDMxZiwKICAgICAgICAgIDB4MTAzMjQsCiAgICAgICAgICAweDEwMzJmLAogICAgICAgICAgMHgxMDM0YiwKICAgICAgICAgIDB4MTAzZmYsCiAgICAgICAgICAweDEwNDI2LAogICAgICAgICAgMHgxMDQyNywKICAgICAgICAgIDB4MTA0NGUsCiAgICAgICAgICAweDFjZmZmLAogICAgICAgICAgMHgxZDBmNiwKICAgICAgICAgIDB4MWQwZmYsCiAgICAgICAgICAweDFkMTI3LAogICAgICAgICAgMHgxZDEyOSwKICAgICAgICAgIDB4MWQxZGUsCiAgICAgICAgICAweDFkM2ZmLAogICAgICAgICAgMHgxZDQ1NSwKICAgICAgICAgIDB4MWQ0NTUsCiAgICAgICAgICAweDFkNDlkLAogICAgICAgICAgMHgxZDQ5ZCwKICAgICAgICAgIDB4MWQ0YTAsCiAgICAgICAgICAweDFkNGExLAogICAgICAgICAgMHgxZDRhMywKICAgICAgICAgIDB4MWQ0YTQsCiAgICAgICAgICAweDFkNGE3LAogICAgICAgICAgMHgxZDRhOCwKICAgICAgICAgIDB4MWQ0YWQsCiAgICAgICAgICAweDFkNGFkLAogICAgICAgICAgMHgxZDRiYSwKICAgICAgICAgIDB4MWQ0YmEsCiAgICAgICAgICAweDFkNGJjLAogICAgICAgICAgMHgxZDRiYywKICAgICAgICAgIDB4MWQ0YzEsCiAgICAgICAgICAweDFkNGMxLAogICAgICAgICAgMHgxZDRjNCwKICAgICAgICAgIDB4MWQ0YzQsCiAgICAgICAgICAweDFkNTA2LAogICAgICAgICAgMHgxZDUwNiwKICAgICAgICAgIDB4MWQ1MGIsCiAgICAgICAgICAweDFkNTBjLAogICAgICAgICAgMHgxZDUxNSwKICAgICAgICAgIDB4MWQ1MTUsCiAgICAgICAgICAweDFkNTFkLAogICAgICAgICAgMHgxZDUxZCwKICAgICAgICAgIDB4MWQ1M2EsCiAgICAgICAgICAweDFkNTNhLAogICAgICAgICAgMHgxZDUzZiwKICAgICAgICAgIDB4MWQ1M2YsCiAgICAgICAgICAweDFkNTQ1LAogICAgICAgICAgMHgxZDU0NSwKICAgICAgICAgIDB4MWQ1NDcsCiAgICAgICAgICAweDFkNTQ5LAogICAgICAgICAgMHgxZDU1MSwKICAgICAgICAgIDB4MWQ1NTEsCiAgICAgICAgICAweDFkNmE0LAogICAgICAgICAgMHgxZDZhNywKICAgICAgICAgIDB4MWQ3Y2EsCiAgICAgICAgICAweDFkN2NkLAogICAgICAgICAgMHgxZDgwMCwKICAgICAgICAgIDB4MWZmZmQsCiAgICAgICAgICAweDJhNmQ3LAogICAgICAgICAgMHgyZjdmZiwKICAgICAgICAgIDB4MmZhMWUsCiAgICAgICAgICAweDJmZmZkLAogICAgICAgICAgMHgzMDAwMCwKICAgICAgICAgIDB4M2ZmZmQsCiAgICAgICAgICAweDQwMDAwLAogICAgICAgICAgMHg0ZmZmZCwKICAgICAgICAgIDB4NTAwMDAsCiAgICAgICAgICAweDVmZmZkLAogICAgICAgICAgMHg2MDAwMCwKICAgICAgICAgIDB4NmZmZmQsCiAgICAgICAgICAweDcwMDAwLAogICAgICAgICAgMHg3ZmZmZCwKICAgICAgICAgIDB4ODAwMDAsCiAgICAgICAgICAweDhmZmZkLAogICAgICAgICAgMHg5MDAwMCwKICAgICAgICAgIDB4OWZmZmQsCiAgICAgICAgICAweGEwMDAwLAogICAgICAgICAgMHhhZmZmZCwKICAgICAgICAgIDB4YjAwMDAsCiAgICAgICAgICAweGJmZmZkLAogICAgICAgICAgMHhjMDAwMCwKICAgICAgICAgIDB4Y2ZmZmQsCiAgICAgICAgICAweGQwMDAwLAogICAgICAgICAgMHhkZmZmZCwKICAgICAgICAgIDB4ZTAwMDAsCiAgICAgICAgICAweGUwMDAwLAogICAgICAgICAgMHhlMDAwMiwKICAgICAgICAgIDB4ZTAwMWYsCiAgICAgICAgICAweGUwMDgwLAogICAgICAgICAgMHhlZmZmZAogICAgICAgIF07CiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqLwoKICAgICAgICBjb25zdCBpc1VuYXNzaWduZWRDb2RlUG9pbnQgPSBjaGFyYWN0ZXIgPT4KICAgICAgICAgIGluUmFuZ2UoY2hhcmFjdGVyLCB1bmFzc2lnbmVkX2NvZGVfcG9pbnRzKTsKCiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcHJldHRpZXIvcHJldHRpZXIgKi8KICAgICAgICAvKioKICAgICAgICAgKiBCLjEgQ29tbW9ubHkgbWFwcGVkIHRvIG5vdGhpbmcKICAgICAgICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ1NCNhcHBlbmRpeC1CLjEKICAgICAgICAgKi8KICAgICAgICBjb25zdCBjb21tb25seV9tYXBwZWRfdG9fbm90aGluZyA9IFsKICAgICAgICAgIDB4MDBhZCwKICAgICAgICAgIDB4MDBhZCwKICAgICAgICAgIDB4MDM0ZiwKICAgICAgICAgIDB4MDM0ZiwKICAgICAgICAgIDB4MTgwNiwKICAgICAgICAgIDB4MTgwNiwKICAgICAgICAgIDB4MTgwYiwKICAgICAgICAgIDB4MTgwYiwKICAgICAgICAgIDB4MTgwYywKICAgICAgICAgIDB4MTgwYywKICAgICAgICAgIDB4MTgwZCwKICAgICAgICAgIDB4MTgwZCwKICAgICAgICAgIDB4MjAwYiwKICAgICAgICAgIDB4MjAwYiwKICAgICAgICAgIDB4MjAwYywKICAgICAgICAgIDB4MjAwYywKICAgICAgICAgIDB4MjAwZCwKICAgICAgICAgIDB4MjAwZCwKICAgICAgICAgIDB4MjA2MCwKICAgICAgICAgIDB4MjA2MCwKICAgICAgICAgIDB4ZmUwMCwKICAgICAgICAgIDB4ZmUwMCwKICAgICAgICAgIDB4ZmUwMSwKICAgICAgICAgIDB4ZmUwMSwKICAgICAgICAgIDB4ZmUwMiwKICAgICAgICAgIDB4ZmUwMiwKICAgICAgICAgIDB4ZmUwMywKICAgICAgICAgIDB4ZmUwMywKICAgICAgICAgIDB4ZmUwNCwKICAgICAgICAgIDB4ZmUwNCwKICAgICAgICAgIDB4ZmUwNSwKICAgICAgICAgIDB4ZmUwNSwKICAgICAgICAgIDB4ZmUwNiwKICAgICAgICAgIDB4ZmUwNiwKICAgICAgICAgIDB4ZmUwNywKICAgICAgICAgIDB4ZmUwNywKICAgICAgICAgIDB4ZmUwOCwKICAgICAgICAgIDB4ZmUwOCwKICAgICAgICAgIDB4ZmUwOSwKICAgICAgICAgIDB4ZmUwOSwKICAgICAgICAgIDB4ZmUwYSwKICAgICAgICAgIDB4ZmUwYSwKICAgICAgICAgIDB4ZmUwYiwKICAgICAgICAgIDB4ZmUwYiwKICAgICAgICAgIDB4ZmUwYywKICAgICAgICAgIDB4ZmUwYywKICAgICAgICAgIDB4ZmUwZCwKICAgICAgICAgIDB4ZmUwZCwKICAgICAgICAgIDB4ZmUwZSwKICAgICAgICAgIDB4ZmUwZSwKICAgICAgICAgIDB4ZmUwZiwKICAgICAgICAgIDB4ZmUwZiwKICAgICAgICAgIDB4ZmVmZiwKICAgICAgICAgIDB4ZmVmZgogICAgICAgIF07CiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqLwoKICAgICAgICBjb25zdCBpc0NvbW1vbmx5TWFwcGVkVG9Ob3RoaW5nID0gY2hhcmFjdGVyID0+CiAgICAgICAgICBpblJhbmdlKGNoYXJhY3RlciwgY29tbW9ubHlfbWFwcGVkX3RvX25vdGhpbmcpOwoKICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmV0dGllci9wcmV0dGllciAqLwogICAgICAgIC8qKgogICAgICAgICAqIEMuMS4yIE5vbi1BU0NJSSBzcGFjZSBjaGFyYWN0ZXJzCiAgICAgICAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0NTQjYXBwZW5kaXgtQy4xLjIKICAgICAgICAgKi8KICAgICAgICBjb25zdCBub25fQVNDSUlfc3BhY2VfY2hhcmFjdGVycyA9IFsKICAgICAgICAgIDB4MDBhMCwKICAgICAgICAgIDB4MDBhMCAvKiBOTy1CUkVBSyBTUEFDRSAqLywKICAgICAgICAgIDB4MTY4MCwKICAgICAgICAgIDB4MTY4MCAvKiBPR0hBTSBTUEFDRSBNQVJLICovLAogICAgICAgICAgMHgyMDAwLAogICAgICAgICAgMHgyMDAwIC8qIEVOIFFVQUQgKi8sCiAgICAgICAgICAweDIwMDEsCiAgICAgICAgICAweDIwMDEgLyogRU0gUVVBRCAqLywKICAgICAgICAgIDB4MjAwMiwKICAgICAgICAgIDB4MjAwMiAvKiBFTiBTUEFDRSAqLywKICAgICAgICAgIDB4MjAwMywKICAgICAgICAgIDB4MjAwMyAvKiBFTSBTUEFDRSAqLywKICAgICAgICAgIDB4MjAwNCwKICAgICAgICAgIDB4MjAwNCAvKiBUSFJFRS1QRVItRU0gU1BBQ0UgKi8sCiAgICAgICAgICAweDIwMDUsCiAgICAgICAgICAweDIwMDUgLyogRk9VUi1QRVItRU0gU1BBQ0UgKi8sCiAgICAgICAgICAweDIwMDYsCiAgICAgICAgICAweDIwMDYgLyogU0lYLVBFUi1FTSBTUEFDRSAqLywKICAgICAgICAgIDB4MjAwNywKICAgICAgICAgIDB4MjAwNyAvKiBGSUdVUkUgU1BBQ0UgKi8sCiAgICAgICAgICAweDIwMDgsCiAgICAgICAgICAweDIwMDggLyogUFVOQ1RVQVRJT04gU1BBQ0UgKi8sCiAgICAgICAgICAweDIwMDksCiAgICAgICAgICAweDIwMDkgLyogVEhJTiBTUEFDRSAqLywKICAgICAgICAgIDB4MjAwYSwKICAgICAgICAgIDB4MjAwYSAvKiBIQUlSIFNQQUNFICovLAogICAgICAgICAgMHgyMDBiLAogICAgICAgICAgMHgyMDBiIC8qIFpFUk8gV0lEVEggU1BBQ0UgKi8sCiAgICAgICAgICAweDIwMmYsCiAgICAgICAgICAweDIwMmYgLyogTkFSUk9XIE5PLUJSRUFLIFNQQUNFICovLAogICAgICAgICAgMHgyMDVmLAogICAgICAgICAgMHgyMDVmIC8qIE1FRElVTSBNQVRIRU1BVElDQUwgU1BBQ0UgKi8sCiAgICAgICAgICAweDMwMDAsCiAgICAgICAgICAweDMwMDAgLyogSURFT0dSQVBISUMgU1BBQ0UgKi8KICAgICAgICBdOwogICAgICAgIC8qIGVzbGludC1lbmFibGUgKi8KCiAgICAgICAgY29uc3QgaXNOb25BU0NJSVNwYWNlQ2hhcmFjdGVyID0gY2hhcmFjdGVyID0+CiAgICAgICAgICBpblJhbmdlKGNoYXJhY3Rlciwgbm9uX0FTQ0lJX3NwYWNlX2NoYXJhY3RlcnMpOwoKICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmV0dGllci9wcmV0dGllciAqLwogICAgICAgIGNvbnN0IG5vbl9BU0NJSV9jb250cm9sc19jaGFyYWN0ZXJzID0gWwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBDLjIuMiBOb24tQVNDSUkgY29udHJvbCBjaGFyYWN0ZXJzCiAgICAgICAgICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ1NCNhcHBlbmRpeC1DLjIuMgogICAgICAgICAgICovCiAgICAgICAgICAweDAwODAsCiAgICAgICAgICAweDAwOWYgLyogW0NPTlRST0wgQ0hBUkFDVEVSU10gKi8sCiAgICAgICAgICAweDA2ZGQsCiAgICAgICAgICAweDA2ZGQgLyogQVJBQklDIEVORCBPRiBBWUFIICovLAogICAgICAgICAgMHgwNzBmLAogICAgICAgICAgMHgwNzBmIC8qIFNZUklBQyBBQkJSRVZJQVRJT04gTUFSSyAqLywKICAgICAgICAgIDB4MTgwZSwKICAgICAgICAgIDB4MTgwZSAvKiBNT05HT0xJQU4gVk9XRUwgU0VQQVJBVE9SICovLAogICAgICAgICAgMHgyMDBjLAogICAgICAgICAgMHgyMDBjIC8qIFpFUk8gV0lEVEggTk9OLUpPSU5FUiAqLywKICAgICAgICAgIDB4MjAwZCwKICAgICAgICAgIDB4MjAwZCAvKiBaRVJPIFdJRFRIIEpPSU5FUiAqLywKICAgICAgICAgIDB4MjAyOCwKICAgICAgICAgIDB4MjAyOCAvKiBMSU5FIFNFUEFSQVRPUiAqLywKICAgICAgICAgIDB4MjAyOSwKICAgICAgICAgIDB4MjAyOSAvKiBQQVJBR1JBUEggU0VQQVJBVE9SICovLAogICAgICAgICAgMHgyMDYwLAogICAgICAgICAgMHgyMDYwIC8qIFdPUkQgSk9JTkVSICovLAogICAgICAgICAgMHgyMDYxLAogICAgICAgICAgMHgyMDYxIC8qIEZVTkNUSU9OIEFQUExJQ0FUSU9OICovLAogICAgICAgICAgMHgyMDYyLAogICAgICAgICAgMHgyMDYyIC8qIElOVklTSUJMRSBUSU1FUyAqLywKICAgICAgICAgIDB4MjA2MywKICAgICAgICAgIDB4MjA2MyAvKiBJTlZJU0lCTEUgU0VQQVJBVE9SICovLAogICAgICAgICAgMHgyMDZhLAogICAgICAgICAgMHgyMDZmIC8qIFtDT05UUk9MIENIQVJBQ1RFUlNdICovLAogICAgICAgICAgMHhmZWZmLAogICAgICAgICAgMHhmZWZmIC8qIFpFUk8gV0lEVEggTk8tQlJFQUsgU1BBQ0UgKi8sCiAgICAgICAgICAweGZmZjksCiAgICAgICAgICAweGZmZmMgLyogW0NPTlRST0wgQ0hBUkFDVEVSU10gKi8sCiAgICAgICAgICAweDFkMTczLAogICAgICAgICAgMHgxZDE3YSAvKiBbTVVTSUNBTCBDT05UUk9MIENIQVJBQ1RFUlNdICovCiAgICAgICAgXTsKCiAgICAgICAgY29uc3Qgbm9uX2NoYXJhY3Rlcl9jb2RlcG9pbnRzID0gWwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBDLjQgTm9uLWNoYXJhY3RlciBjb2RlIHBvaW50cwogICAgICAgICAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0NTQjYXBwZW5kaXgtQy40CiAgICAgICAgICAgKi8KICAgICAgICAgIDB4ZmRkMCwKICAgICAgICAgIDB4ZmRlZiAvKiBbTk9OQ0hBUkFDVEVSIENPREUgUE9JTlRTXSAqLywKICAgICAgICAgIDB4ZmZmZSwKICAgICAgICAgIDB4ZmZmZiAvKiBbTk9OQ0hBUkFDVEVSIENPREUgUE9JTlRTXSAqLywKICAgICAgICAgIDB4MWZmZmUsCiAgICAgICAgICAweDFmZmZmIC8qIFtOT05DSEFSQUNURVIgQ09ERSBQT0lOVFNdICovLAogICAgICAgICAgMHgyZmZmZSwKICAgICAgICAgIDB4MmZmZmYgLyogW05PTkNIQVJBQ1RFUiBDT0RFIFBPSU5UU10gKi8sCiAgICAgICAgICAweDNmZmZlLAogICAgICAgICAgMHgzZmZmZiAvKiBbTk9OQ0hBUkFDVEVSIENPREUgUE9JTlRTXSAqLywKICAgICAgICAgIDB4NGZmZmUsCiAgICAgICAgICAweDRmZmZmIC8qIFtOT05DSEFSQUNURVIgQ09ERSBQT0lOVFNdICovLAogICAgICAgICAgMHg1ZmZmZSwKICAgICAgICAgIDB4NWZmZmYgLyogW05PTkNIQVJBQ1RFUiBDT0RFIFBPSU5UU10gKi8sCiAgICAgICAgICAweDZmZmZlLAogICAgICAgICAgMHg2ZmZmZiAvKiBbTk9OQ0hBUkFDVEVSIENPREUgUE9JTlRTXSAqLywKICAgICAgICAgIDB4N2ZmZmUsCiAgICAgICAgICAweDdmZmZmIC8qIFtOT05DSEFSQUNURVIgQ09ERSBQT0lOVFNdICovLAogICAgICAgICAgMHg4ZmZmZSwKICAgICAgICAgIDB4OGZmZmYgLyogW05PTkNIQVJBQ1RFUiBDT0RFIFBPSU5UU10gKi8sCiAgICAgICAgICAweDlmZmZlLAogICAgICAgICAgMHg5ZmZmZiAvKiBbTk9OQ0hBUkFDVEVSIENPREUgUE9JTlRTXSAqLywKICAgICAgICAgIDB4YWZmZmUsCiAgICAgICAgICAweGFmZmZmIC8qIFtOT05DSEFSQUNURVIgQ09ERSBQT0lOVFNdICovLAogICAgICAgICAgMHhiZmZmZSwKICAgICAgICAgIDB4YmZmZmYgLyogW05PTkNIQVJBQ1RFUiBDT0RFIFBPSU5UU10gKi8sCiAgICAgICAgICAweGNmZmZlLAogICAgICAgICAgMHhjZmZmZiAvKiBbTk9OQ0hBUkFDVEVSIENPREUgUE9JTlRTXSAqLywKICAgICAgICAgIDB4ZGZmZmUsCiAgICAgICAgICAweGRmZmZmIC8qIFtOT05DSEFSQUNURVIgQ09ERSBQT0lOVFNdICovLAogICAgICAgICAgMHhlZmZmZSwKICAgICAgICAgIDB4ZWZmZmYgLyogW05PTkNIQVJBQ1RFUiBDT0RFIFBPSU5UU10gKi8sCiAgICAgICAgICAweDEwZmZmZSwKICAgICAgICAgIDB4MTBmZmZmIC8qIFtOT05DSEFSQUNURVIgQ09ERSBQT0lOVFNdICovCiAgICAgICAgXTsKCiAgICAgICAgLyoqCiAgICAgICAgICogMi4zLiAgUHJvaGliaXRlZCBPdXRwdXQKICAgICAgICAgKi8KICAgICAgICBjb25zdCBwcm9oaWJpdGVkX2NoYXJhY3RlcnMgPSBbCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEMuMi4xIEFTQ0lJIGNvbnRyb2wgY2hhcmFjdGVycwogICAgICAgICAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0NTQjYXBwZW5kaXgtQy4yLjEKICAgICAgICAgICAqLwogICAgICAgICAgMCwKICAgICAgICAgIDB4MDAxZiAvKiBbQ09OVFJPTCBDSEFSQUNURVJTXSAqLywKICAgICAgICAgIDB4MDA3ZiwKICAgICAgICAgIDB4MDA3ZiAvKiBERUxFVEUgKi8sCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBDLjggQ2hhbmdlIGRpc3BsYXkgcHJvcGVydGllcyBvciBhcmUgZGVwcmVjYXRlZAogICAgICAgICAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0NTQjYXBwZW5kaXgtQy44CiAgICAgICAgICAgKi8KICAgICAgICAgIDB4MDM0MCwKICAgICAgICAgIDB4MDM0MCAvKiBDT01CSU5JTkcgR1JBVkUgVE9ORSBNQVJLICovLAogICAgICAgICAgMHgwMzQxLAogICAgICAgICAgMHgwMzQxIC8qIENPTUJJTklORyBBQ1VURSBUT05FIE1BUksgKi8sCiAgICAgICAgICAweDIwMGUsCiAgICAgICAgICAweDIwMGUgLyogTEVGVC1UTy1SSUdIVCBNQVJLICovLAogICAgICAgICAgMHgyMDBmLAogICAgICAgICAgMHgyMDBmIC8qIFJJR0hULVRPLUxFRlQgTUFSSyAqLywKICAgICAgICAgIDB4MjAyYSwKICAgICAgICAgIDB4MjAyYSAvKiBMRUZULVRPLVJJR0hUIEVNQkVERElORyAqLywKICAgICAgICAgIDB4MjAyYiwKICAgICAgICAgIDB4MjAyYiAvKiBSSUdIVC1UTy1MRUZUIEVNQkVERElORyAqLywKICAgICAgICAgIDB4MjAyYywKICAgICAgICAgIDB4MjAyYyAvKiBQT1AgRElSRUNUSU9OQUwgRk9STUFUVElORyAqLywKICAgICAgICAgIDB4MjAyZCwKICAgICAgICAgIDB4MjAyZCAvKiBMRUZULVRPLVJJR0hUIE9WRVJSSURFICovLAogICAgICAgICAgMHgyMDJlLAogICAgICAgICAgMHgyMDJlIC8qIFJJR0hULVRPLUxFRlQgT1ZFUlJJREUgKi8sCiAgICAgICAgICAweDIwNmEsCiAgICAgICAgICAweDIwNmEgLyogSU5ISUJJVCBTWU1NRVRSSUMgU1dBUFBJTkcgKi8sCiAgICAgICAgICAweDIwNmIsCiAgICAgICAgICAweDIwNmIgLyogQUNUSVZBVEUgU1lNTUVUUklDIFNXQVBQSU5HICovLAogICAgICAgICAgMHgyMDZjLAogICAgICAgICAgMHgyMDZjIC8qIElOSElCSVQgQVJBQklDIEZPUk0gU0hBUElORyAqLywKICAgICAgICAgIDB4MjA2ZCwKICAgICAgICAgIDB4MjA2ZCAvKiBBQ1RJVkFURSBBUkFCSUMgRk9STSBTSEFQSU5HICovLAogICAgICAgICAgMHgyMDZlLAogICAgICAgICAgMHgyMDZlIC8qIE5BVElPTkFMIERJR0lUIFNIQVBFUyAqLywKICAgICAgICAgIDB4MjA2ZiwKICAgICAgICAgIDB4MjA2ZiAvKiBOT01JTkFMIERJR0lUIFNIQVBFUyAqLywKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEMuNyBJbmFwcHJvcHJpYXRlIGZvciBjYW5vbmljYWwgcmVwcmVzZW50YXRpb24KICAgICAgICAgICAqIEBsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDU0I2FwcGVuZGl4LUMuNwogICAgICAgICAgICovCiAgICAgICAgICAweDJmZjAsCiAgICAgICAgICAweDJmZmIgLyogW0lERU9HUkFQSElDIERFU0NSSVBUSU9OIENIQVJBQ1RFUlNdICovLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQy41IFN1cnJvZ2F0ZSBjb2RlcwogICAgICAgICAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0NTQjYXBwZW5kaXgtQy41CiAgICAgICAgICAgKi8KICAgICAgICAgIDB4ZDgwMCwKICAgICAgICAgIDB4ZGZmZiwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEMuMyBQcml2YXRlIHVzZQogICAgICAgICAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0NTQjYXBwZW5kaXgtQy4zCiAgICAgICAgICAgKi8KICAgICAgICAgIDB4ZTAwMCwKICAgICAgICAgIDB4ZjhmZiAvKiBbUFJJVkFURSBVU0UsIFBMQU5FIDBdICovLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQy42IEluYXBwcm9wcmlhdGUgZm9yIHBsYWluIHRleHQKICAgICAgICAgICAqIEBsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDU0I2FwcGVuZGl4LUMuNgogICAgICAgICAgICovCiAgICAgICAgICAweGZmZjksCiAgICAgICAgICAweGZmZjkgLyogSU5URVJMSU5FQVIgQU5OT1RBVElPTiBBTkNIT1IgKi8sCiAgICAgICAgICAweGZmZmEsCiAgICAgICAgICAweGZmZmEgLyogSU5URVJMSU5FQVIgQU5OT1RBVElPTiBTRVBBUkFUT1IgKi8sCiAgICAgICAgICAweGZmZmIsCiAgICAgICAgICAweGZmZmIgLyogSU5URVJMSU5FQVIgQU5OT1RBVElPTiBURVJNSU5BVE9SICovLAogICAgICAgICAgMHhmZmZjLAogICAgICAgICAgMHhmZmZjIC8qIE9CSkVDVCBSRVBMQUNFTUVOVCBDSEFSQUNURVIgKi8sCiAgICAgICAgICAweGZmZmQsCiAgICAgICAgICAweGZmZmQgLyogUkVQTEFDRU1FTlQgQ0hBUkFDVEVSICovLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQy45IFRhZ2dpbmcgY2hhcmFjdGVycwogICAgICAgICAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0NTQjYXBwZW5kaXgtQy45CiAgICAgICAgICAgKi8KICAgICAgICAgIDB4ZTAwMDEsCiAgICAgICAgICAweGUwMDAxIC8qIExBTkdVQUdFIFRBRyAqLywKICAgICAgICAgIDB4ZTAwMjAsCiAgICAgICAgICAweGUwMDdmIC8qIFtUQUdHSU5HIENIQVJBQ1RFUlNdICovLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQy4zIFByaXZhdGUgdXNlCiAgICAgICAgICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ1NCNhcHBlbmRpeC1DLjMKICAgICAgICAgICAqLwoKICAgICAgICAgIDB4ZjAwMDAsCiAgICAgICAgICAweGZmZmZkIC8qIFtQUklWQVRFIFVTRSwgUExBTkUgMTVdICovLAogICAgICAgICAgMHgxMDAwMDAsCiAgICAgICAgICAweDEwZmZmZCAvKiBbUFJJVkFURSBVU0UsIFBMQU5FIDE2XSAqLwogICAgICAgIF07CiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqLwoKICAgICAgICBjb25zdCBpc1Byb2hpYml0ZWRDaGFyYWN0ZXIgPSBjaGFyYWN0ZXIgPT4KICAgICAgICAgIGluUmFuZ2UoY2hhcmFjdGVyLCBub25fQVNDSUlfc3BhY2VfY2hhcmFjdGVycykgfHwKICAgICAgICAgIGluUmFuZ2UoY2hhcmFjdGVyLCBwcm9oaWJpdGVkX2NoYXJhY3RlcnMpIHx8CiAgICAgICAgICBpblJhbmdlKGNoYXJhY3Rlciwgbm9uX0FTQ0lJX2NvbnRyb2xzX2NoYXJhY3RlcnMpIHx8CiAgICAgICAgICBpblJhbmdlKGNoYXJhY3Rlciwgbm9uX2NoYXJhY3Rlcl9jb2RlcG9pbnRzKTsKCiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcHJldHRpZXIvcHJldHRpZXIgKi8KICAgICAgICAvKioKICAgICAgICAgKiBELjEgQ2hhcmFjdGVycyB3aXRoIGJpZGlyZWN0aW9uYWwgcHJvcGVydHkgIlIiIG9yICJBTCIKICAgICAgICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ1NCNhcHBlbmRpeC1ELjEKICAgICAgICAgKi8KICAgICAgICBjb25zdCBiaWRpcmVjdGlvbmFsX3JfYWwgPSBbCiAgICAgICAgICAweDA1YmUsCiAgICAgICAgICAweDA1YmUsCiAgICAgICAgICAweDA1YzAsCiAgICAgICAgICAweDA1YzAsCiAgICAgICAgICAweDA1YzMsCiAgICAgICAgICAweDA1YzMsCiAgICAgICAgICAweDA1ZDAsCiAgICAgICAgICAweDA1ZWEsCiAgICAgICAgICAweDA1ZjAsCiAgICAgICAgICAweDA1ZjQsCiAgICAgICAgICAweDA2MWIsCiAgICAgICAgICAweDA2MWIsCiAgICAgICAgICAweDA2MWYsCiAgICAgICAgICAweDA2MWYsCiAgICAgICAgICAweDA2MjEsCiAgICAgICAgICAweDA2M2EsCiAgICAgICAgICAweDA2NDAsCiAgICAgICAgICAweDA2NGEsCiAgICAgICAgICAweDA2NmQsCiAgICAgICAgICAweDA2NmYsCiAgICAgICAgICAweDA2NzEsCiAgICAgICAgICAweDA2ZDUsCiAgICAgICAgICAweDA2ZGQsCiAgICAgICAgICAweDA2ZGQsCiAgICAgICAgICAweDA2ZTUsCiAgICAgICAgICAweDA2ZTYsCiAgICAgICAgICAweDA2ZmEsCiAgICAgICAgICAweDA2ZmUsCiAgICAgICAgICAweDA3MDAsCiAgICAgICAgICAweDA3MGQsCiAgICAgICAgICAweDA3MTAsCiAgICAgICAgICAweDA3MTAsCiAgICAgICAgICAweDA3MTIsCiAgICAgICAgICAweDA3MmMsCiAgICAgICAgICAweDA3ODAsCiAgICAgICAgICAweDA3YTUsCiAgICAgICAgICAweDA3YjEsCiAgICAgICAgICAweDA3YjEsCiAgICAgICAgICAweDIwMGYsCiAgICAgICAgICAweDIwMGYsCiAgICAgICAgICAweGZiMWQsCiAgICAgICAgICAweGZiMWQsCiAgICAgICAgICAweGZiMWYsCiAgICAgICAgICAweGZiMjgsCiAgICAgICAgICAweGZiMmEsCiAgICAgICAgICAweGZiMzYsCiAgICAgICAgICAweGZiMzgsCiAgICAgICAgICAweGZiM2MsCiAgICAgICAgICAweGZiM2UsCiAgICAgICAgICAweGZiM2UsCiAgICAgICAgICAweGZiNDAsCiAgICAgICAgICAweGZiNDEsCiAgICAgICAgICAweGZiNDMsCiAgICAgICAgICAweGZiNDQsCiAgICAgICAgICAweGZiNDYsCiAgICAgICAgICAweGZiYjEsCiAgICAgICAgICAweGZiZDMsCiAgICAgICAgICAweGZkM2QsCiAgICAgICAgICAweGZkNTAsCiAgICAgICAgICAweGZkOGYsCiAgICAgICAgICAweGZkOTIsCiAgICAgICAgICAweGZkYzcsCiAgICAgICAgICAweGZkZjAsCiAgICAgICAgICAweGZkZmMsCiAgICAgICAgICAweGZlNzAsCiAgICAgICAgICAweGZlNzQsCiAgICAgICAgICAweGZlNzYsCiAgICAgICAgICAweGZlZmMKICAgICAgICBdOwogICAgICAgIC8qIGVzbGludC1lbmFibGUgKi8KCiAgICAgICAgY29uc3QgaXNCaWRpcmVjdGlvbmFsUkFMID0gY2hhcmFjdGVyID0+IGluUmFuZ2UoY2hhcmFjdGVyLCBiaWRpcmVjdGlvbmFsX3JfYWwpOwoKICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmV0dGllci9wcmV0dGllciAqLwogICAgICAgIC8qKgogICAgICAgICAqIEQuMiBDaGFyYWN0ZXJzIHdpdGggYmlkaXJlY3Rpb25hbCBwcm9wZXJ0eSAiTCIKICAgICAgICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ1NCNhcHBlbmRpeC1ELjIKICAgICAgICAgKi8KICAgICAgICBjb25zdCBiaWRpcmVjdGlvbmFsX2wgPSBbCiAgICAgICAgICAweDAwNDEsCiAgICAgICAgICAweDAwNWEsCiAgICAgICAgICAweDAwNjEsCiAgICAgICAgICAweDAwN2EsCiAgICAgICAgICAweDAwYWEsCiAgICAgICAgICAweDAwYWEsCiAgICAgICAgICAweDAwYjUsCiAgICAgICAgICAweDAwYjUsCiAgICAgICAgICAweDAwYmEsCiAgICAgICAgICAweDAwYmEsCiAgICAgICAgICAweDAwYzAsCiAgICAgICAgICAweDAwZDYsCiAgICAgICAgICAweDAwZDgsCiAgICAgICAgICAweDAwZjYsCiAgICAgICAgICAweDAwZjgsCiAgICAgICAgICAweDAyMjAsCiAgICAgICAgICAweDAyMjIsCiAgICAgICAgICAweDAyMzMsCiAgICAgICAgICAweDAyNTAsCiAgICAgICAgICAweDAyYWQsCiAgICAgICAgICAweDAyYjAsCiAgICAgICAgICAweDAyYjgsCiAgICAgICAgICAweDAyYmIsCiAgICAgICAgICAweDAyYzEsCiAgICAgICAgICAweDAyZDAsCiAgICAgICAgICAweDAyZDEsCiAgICAgICAgICAweDAyZTAsCiAgICAgICAgICAweDAyZTQsCiAgICAgICAgICAweDAyZWUsCiAgICAgICAgICAweDAyZWUsCiAgICAgICAgICAweDAzN2EsCiAgICAgICAgICAweDAzN2EsCiAgICAgICAgICAweDAzODYsCiAgICAgICAgICAweDAzODYsCiAgICAgICAgICAweDAzODgsCiAgICAgICAgICAweDAzOGEsCiAgICAgICAgICAweDAzOGMsCiAgICAgICAgICAweDAzOGMsCiAgICAgICAgICAweDAzOGUsCiAgICAgICAgICAweDAzYTEsCiAgICAgICAgICAweDAzYTMsCiAgICAgICAgICAweDAzY2UsCiAgICAgICAgICAweDAzZDAsCiAgICAgICAgICAweDAzZjUsCiAgICAgICAgICAweDA0MDAsCiAgICAgICAgICAweDA0ODIsCiAgICAgICAgICAweDA0OGEsCiAgICAgICAgICAweDA0Y2UsCiAgICAgICAgICAweDA0ZDAsCiAgICAgICAgICAweDA0ZjUsCiAgICAgICAgICAweDA0ZjgsCiAgICAgICAgICAweDA0ZjksCiAgICAgICAgICAweDA1MDAsCiAgICAgICAgICAweDA1MGYsCiAgICAgICAgICAweDA1MzEsCiAgICAgICAgICAweDA1NTYsCiAgICAgICAgICAweDA1NTksCiAgICAgICAgICAweDA1NWYsCiAgICAgICAgICAweDA1NjEsCiAgICAgICAgICAweDA1ODcsCiAgICAgICAgICAweDA1ODksCiAgICAgICAgICAweDA1ODksCiAgICAgICAgICAweDA5MDMsCiAgICAgICAgICAweDA5MDMsCiAgICAgICAgICAweDA5MDUsCiAgICAgICAgICAweDA5MzksCiAgICAgICAgICAweDA5M2QsCiAgICAgICAgICAweDA5NDAsCiAgICAgICAgICAweDA5NDksCiAgICAgICAgICAweDA5NGMsCiAgICAgICAgICAweDA5NTAsCiAgICAgICAgICAweDA5NTAsCiAgICAgICAgICAweDA5NTgsCiAgICAgICAgICAweDA5NjEsCiAgICAgICAgICAweDA5NjQsCiAgICAgICAgICAweDA5NzAsCiAgICAgICAgICAweDA5ODIsCiAgICAgICAgICAweDA5ODMsCiAgICAgICAgICAweDA5ODUsCiAgICAgICAgICAweDA5OGMsCiAgICAgICAgICAweDA5OGYsCiAgICAgICAgICAweDA5OTAsCiAgICAgICAgICAweDA5OTMsCiAgICAgICAgICAweDA5YTgsCiAgICAgICAgICAweDA5YWEsCiAgICAgICAgICAweDA5YjAsCiAgICAgICAgICAweDA5YjIsCiAgICAgICAgICAweDA5YjIsCiAgICAgICAgICAweDA5YjYsCiAgICAgICAgICAweDA5YjksCiAgICAgICAgICAweDA5YmUsCiAgICAgICAgICAweDA5YzAsCiAgICAgICAgICAweDA5YzcsCiAgICAgICAgICAweDA5YzgsCiAgICAgICAgICAweDA5Y2IsCiAgICAgICAgICAweDA5Y2MsCiAgICAgICAgICAweDA5ZDcsCiAgICAgICAgICAweDA5ZDcsCiAgICAgICAgICAweDA5ZGMsCiAgICAgICAgICAweDA5ZGQsCiAgICAgICAgICAweDA5ZGYsCiAgICAgICAgICAweDA5ZTEsCiAgICAgICAgICAweDA5ZTYsCiAgICAgICAgICAweDA5ZjEsCiAgICAgICAgICAweDA5ZjQsCiAgICAgICAgICAweDA5ZmEsCiAgICAgICAgICAweDBhMDUsCiAgICAgICAgICAweDBhMGEsCiAgICAgICAgICAweDBhMGYsCiAgICAgICAgICAweDBhMTAsCiAgICAgICAgICAweDBhMTMsCiAgICAgICAgICAweDBhMjgsCiAgICAgICAgICAweDBhMmEsCiAgICAgICAgICAweDBhMzAsCiAgICAgICAgICAweDBhMzIsCiAgICAgICAgICAweDBhMzMsCiAgICAgICAgICAweDBhMzUsCiAgICAgICAgICAweDBhMzYsCiAgICAgICAgICAweDBhMzgsCiAgICAgICAgICAweDBhMzksCiAgICAgICAgICAweDBhM2UsCiAgICAgICAgICAweDBhNDAsCiAgICAgICAgICAweDBhNTksCiAgICAgICAgICAweDBhNWMsCiAgICAgICAgICAweDBhNWUsCiAgICAgICAgICAweDBhNWUsCiAgICAgICAgICAweDBhNjYsCiAgICAgICAgICAweDBhNmYsCiAgICAgICAgICAweDBhNzIsCiAgICAgICAgICAweDBhNzQsCiAgICAgICAgICAweDBhODMsCiAgICAgICAgICAweDBhODMsCiAgICAgICAgICAweDBhODUsCiAgICAgICAgICAweDBhOGIsCiAgICAgICAgICAweDBhOGQsCiAgICAgICAgICAweDBhOGQsCiAgICAgICAgICAweDBhOGYsCiAgICAgICAgICAweDBhOTEsCiAgICAgICAgICAweDBhOTMsCiAgICAgICAgICAweDBhYTgsCiAgICAgICAgICAweDBhYWEsCiAgICAgICAgICAweDBhYjAsCiAgICAgICAgICAweDBhYjIsCiAgICAgICAgICAweDBhYjMsCiAgICAgICAgICAweDBhYjUsCiAgICAgICAgICAweDBhYjksCiAgICAgICAgICAweDBhYmQsCiAgICAgICAgICAweDBhYzAsCiAgICAgICAgICAweDBhYzksCiAgICAgICAgICAweDBhYzksCiAgICAgICAgICAweDBhY2IsCiAgICAgICAgICAweDBhY2MsCiAgICAgICAgICAweDBhZDAsCiAgICAgICAgICAweDBhZDAsCiAgICAgICAgICAweDBhZTAsCiAgICAgICAgICAweDBhZTAsCiAgICAgICAgICAweDBhZTYsCiAgICAgICAgICAweDBhZWYsCiAgICAgICAgICAweDBiMDIsCiAgICAgICAgICAweDBiMDMsCiAgICAgICAgICAweDBiMDUsCiAgICAgICAgICAweDBiMGMsCiAgICAgICAgICAweDBiMGYsCiAgICAgICAgICAweDBiMTAsCiAgICAgICAgICAweDBiMTMsCiAgICAgICAgICAweDBiMjgsCiAgICAgICAgICAweDBiMmEsCiAgICAgICAgICAweDBiMzAsCiAgICAgICAgICAweDBiMzIsCiAgICAgICAgICAweDBiMzMsCiAgICAgICAgICAweDBiMzYsCiAgICAgICAgICAweDBiMzksCiAgICAgICAgICAweDBiM2QsCiAgICAgICAgICAweDBiM2UsCiAgICAgICAgICAweDBiNDAsCiAgICAgICAgICAweDBiNDAsCiAgICAgICAgICAweDBiNDcsCiAgICAgICAgICAweDBiNDgsCiAgICAgICAgICAweDBiNGIsCiAgICAgICAgICAweDBiNGMsCiAgICAgICAgICAweDBiNTcsCiAgICAgICAgICAweDBiNTcsCiAgICAgICAgICAweDBiNWMsCiAgICAgICAgICAweDBiNWQsCiAgICAgICAgICAweDBiNWYsCiAgICAgICAgICAweDBiNjEsCiAgICAgICAgICAweDBiNjYsCiAgICAgICAgICAweDBiNzAsCiAgICAgICAgICAweDBiODMsCiAgICAgICAgICAweDBiODMsCiAgICAgICAgICAweDBiODUsCiAgICAgICAgICAweDBiOGEsCiAgICAgICAgICAweDBiOGUsCiAgICAgICAgICAweDBiOTAsCiAgICAgICAgICAweDBiOTIsCiAgICAgICAgICAweDBiOTUsCiAgICAgICAgICAweDBiOTksCiAgICAgICAgICAweDBiOWEsCiAgICAgICAgICAweDBiOWMsCiAgICAgICAgICAweDBiOWMsCiAgICAgICAgICAweDBiOWUsCiAgICAgICAgICAweDBiOWYsCiAgICAgICAgICAweDBiYTMsCiAgICAgICAgICAweDBiYTQsCiAgICAgICAgICAweDBiYTgsCiAgICAgICAgICAweDBiYWEsCiAgICAgICAgICAweDBiYWUsCiAgICAgICAgICAweDBiYjUsCiAgICAgICAgICAweDBiYjcsCiAgICAgICAgICAweDBiYjksCiAgICAgICAgICAweDBiYmUsCiAgICAgICAgICAweDBiYmYsCiAgICAgICAgICAweDBiYzEsCiAgICAgICAgICAweDBiYzIsCiAgICAgICAgICAweDBiYzYsCiAgICAgICAgICAweDBiYzgsCiAgICAgICAgICAweDBiY2EsCiAgICAgICAgICAweDBiY2MsCiAgICAgICAgICAweDBiZDcsCiAgICAgICAgICAweDBiZDcsCiAgICAgICAgICAweDBiZTcsCiAgICAgICAgICAweDBiZjIsCiAgICAgICAgICAweDBjMDEsCiAgICAgICAgICAweDBjMDMsCiAgICAgICAgICAweDBjMDUsCiAgICAgICAgICAweDBjMGMsCiAgICAgICAgICAweDBjMGUsCiAgICAgICAgICAweDBjMTAsCiAgICAgICAgICAweDBjMTIsCiAgICAgICAgICAweDBjMjgsCiAgICAgICAgICAweDBjMmEsCiAgICAgICAgICAweDBjMzMsCiAgICAgICAgICAweDBjMzUsCiAgICAgICAgICAweDBjMzksCiAgICAgICAgICAweDBjNDEsCiAgICAgICAgICAweDBjNDQsCiAgICAgICAgICAweDBjNjAsCiAgICAgICAgICAweDBjNjEsCiAgICAgICAgICAweDBjNjYsCiAgICAgICAgICAweDBjNmYsCiAgICAgICAgICAweDBjODIsCiAgICAgICAgICAweDBjODMsCiAgICAgICAgICAweDBjODUsCiAgICAgICAgICAweDBjOGMsCiAgICAgICAgICAweDBjOGUsCiAgICAgICAgICAweDBjOTAsCiAgICAgICAgICAweDBjOTIsCiAgICAgICAgICAweDBjYTgsCiAgICAgICAgICAweDBjYWEsCiAgICAgICAgICAweDBjYjMsCiAgICAgICAgICAweDBjYjUsCiAgICAgICAgICAweDBjYjksCiAgICAgICAgICAweDBjYmUsCiAgICAgICAgICAweDBjYmUsCiAgICAgICAgICAweDBjYzAsCiAgICAgICAgICAweDBjYzQsCiAgICAgICAgICAweDBjYzcsCiAgICAgICAgICAweDBjYzgsCiAgICAgICAgICAweDBjY2EsCiAgICAgICAgICAweDBjY2IsCiAgICAgICAgICAweDBjZDUsCiAgICAgICAgICAweDBjZDYsCiAgICAgICAgICAweDBjZGUsCiAgICAgICAgICAweDBjZGUsCiAgICAgICAgICAweDBjZTAsCiAgICAgICAgICAweDBjZTEsCiAgICAgICAgICAweDBjZTYsCiAgICAgICAgICAweDBjZWYsCiAgICAgICAgICAweDBkMDIsCiAgICAgICAgICAweDBkMDMsCiAgICAgICAgICAweDBkMDUsCiAgICAgICAgICAweDBkMGMsCiAgICAgICAgICAweDBkMGUsCiAgICAgICAgICAweDBkMTAsCiAgICAgICAgICAweDBkMTIsCiAgICAgICAgICAweDBkMjgsCiAgICAgICAgICAweDBkMmEsCiAgICAgICAgICAweDBkMzksCiAgICAgICAgICAweDBkM2UsCiAgICAgICAgICAweDBkNDAsCiAgICAgICAgICAweDBkNDYsCiAgICAgICAgICAweDBkNDgsCiAgICAgICAgICAweDBkNGEsCiAgICAgICAgICAweDBkNGMsCiAgICAgICAgICAweDBkNTcsCiAgICAgICAgICAweDBkNTcsCiAgICAgICAgICAweDBkNjAsCiAgICAgICAgICAweDBkNjEsCiAgICAgICAgICAweDBkNjYsCiAgICAgICAgICAweDBkNmYsCiAgICAgICAgICAweDBkODIsCiAgICAgICAgICAweDBkODMsCiAgICAgICAgICAweDBkODUsCiAgICAgICAgICAweDBkOTYsCiAgICAgICAgICAweDBkOWEsCiAgICAgICAgICAweDBkYjEsCiAgICAgICAgICAweDBkYjMsCiAgICAgICAgICAweDBkYmIsCiAgICAgICAgICAweDBkYmQsCiAgICAgICAgICAweDBkYmQsCiAgICAgICAgICAweDBkYzAsCiAgICAgICAgICAweDBkYzYsCiAgICAgICAgICAweDBkY2YsCiAgICAgICAgICAweDBkZDEsCiAgICAgICAgICAweDBkZDgsCiAgICAgICAgICAweDBkZGYsCiAgICAgICAgICAweDBkZjIsCiAgICAgICAgICAweDBkZjQsCiAgICAgICAgICAweDBlMDEsCiAgICAgICAgICAweDBlMzAsCiAgICAgICAgICAweDBlMzIsCiAgICAgICAgICAweDBlMzMsCiAgICAgICAgICAweDBlNDAsCiAgICAgICAgICAweDBlNDYsCiAgICAgICAgICAweDBlNGYsCiAgICAgICAgICAweDBlNWIsCiAgICAgICAgICAweDBlODEsCiAgICAgICAgICAweDBlODIsCiAgICAgICAgICAweDBlODQsCiAgICAgICAgICAweDBlODQsCiAgICAgICAgICAweDBlODcsCiAgICAgICAgICAweDBlODgsCiAgICAgICAgICAweDBlOGEsCiAgICAgICAgICAweDBlOGEsCiAgICAgICAgICAweDBlOGQsCiAgICAgICAgICAweDBlOGQsCiAgICAgICAgICAweDBlOTQsCiAgICAgICAgICAweDBlOTcsCiAgICAgICAgICAweDBlOTksCiAgICAgICAgICAweDBlOWYsCiAgICAgICAgICAweDBlYTEsCiAgICAgICAgICAweDBlYTMsCiAgICAgICAgICAweDBlYTUsCiAgICAgICAgICAweDBlYTUsCiAgICAgICAgICAweDBlYTcsCiAgICAgICAgICAweDBlYTcsCiAgICAgICAgICAweDBlYWEsCiAgICAgICAgICAweDBlYWIsCiAgICAgICAgICAweDBlYWQsCiAgICAgICAgICAweDBlYjAsCiAgICAgICAgICAweDBlYjIsCiAgICAgICAgICAweDBlYjMsCiAgICAgICAgICAweDBlYmQsCiAgICAgICAgICAweDBlYmQsCiAgICAgICAgICAweDBlYzAsCiAgICAgICAgICAweDBlYzQsCiAgICAgICAgICAweDBlYzYsCiAgICAgICAgICAweDBlYzYsCiAgICAgICAgICAweDBlZDAsCiAgICAgICAgICAweDBlZDksCiAgICAgICAgICAweDBlZGMsCiAgICAgICAgICAweDBlZGQsCiAgICAgICAgICAweDBmMDAsCiAgICAgICAgICAweDBmMTcsCiAgICAgICAgICAweDBmMWEsCiAgICAgICAgICAweDBmMzQsCiAgICAgICAgICAweDBmMzYsCiAgICAgICAgICAweDBmMzYsCiAgICAgICAgICAweDBmMzgsCiAgICAgICAgICAweDBmMzgsCiAgICAgICAgICAweDBmM2UsCiAgICAgICAgICAweDBmNDcsCiAgICAgICAgICAweDBmNDksCiAgICAgICAgICAweDBmNmEsCiAgICAgICAgICAweDBmN2YsCiAgICAgICAgICAweDBmN2YsCiAgICAgICAgICAweDBmODUsCiAgICAgICAgICAweDBmODUsCiAgICAgICAgICAweDBmODgsCiAgICAgICAgICAweDBmOGIsCiAgICAgICAgICAweDBmYmUsCiAgICAgICAgICAweDBmYzUsCiAgICAgICAgICAweDBmYzcsCiAgICAgICAgICAweDBmY2MsCiAgICAgICAgICAweDBmY2YsCiAgICAgICAgICAweDBmY2YsCiAgICAgICAgICAweDEwMDAsCiAgICAgICAgICAweDEwMjEsCiAgICAgICAgICAweDEwMjMsCiAgICAgICAgICAweDEwMjcsCiAgICAgICAgICAweDEwMjksCiAgICAgICAgICAweDEwMmEsCiAgICAgICAgICAweDEwMmMsCiAgICAgICAgICAweDEwMmMsCiAgICAgICAgICAweDEwMzEsCiAgICAgICAgICAweDEwMzEsCiAgICAgICAgICAweDEwMzgsCiAgICAgICAgICAweDEwMzgsCiAgICAgICAgICAweDEwNDAsCiAgICAgICAgICAweDEwNTcsCiAgICAgICAgICAweDEwYTAsCiAgICAgICAgICAweDEwYzUsCiAgICAgICAgICAweDEwZDAsCiAgICAgICAgICAweDEwZjgsCiAgICAgICAgICAweDEwZmIsCiAgICAgICAgICAweDEwZmIsCiAgICAgICAgICAweDExMDAsCiAgICAgICAgICAweDExNTksCiAgICAgICAgICAweDExNWYsCiAgICAgICAgICAweDExYTIsCiAgICAgICAgICAweDExYTgsCiAgICAgICAgICAweDExZjksCiAgICAgICAgICAweDEyMDAsCiAgICAgICAgICAweDEyMDYsCiAgICAgICAgICAweDEyMDgsCiAgICAgICAgICAweDEyNDYsCiAgICAgICAgICAweDEyNDgsCiAgICAgICAgICAweDEyNDgsCiAgICAgICAgICAweDEyNGEsCiAgICAgICAgICAweDEyNGQsCiAgICAgICAgICAweDEyNTAsCiAgICAgICAgICAweDEyNTYsCiAgICAgICAgICAweDEyNTgsCiAgICAgICAgICAweDEyNTgsCiAgICAgICAgICAweDEyNWEsCiAgICAgICAgICAweDEyNWQsCiAgICAgICAgICAweDEyNjAsCiAgICAgICAgICAweDEyODYsCiAgICAgICAgICAweDEyODgsCiAgICAgICAgICAweDEyODgsCiAgICAgICAgICAweDEyOGEsCiAgICAgICAgICAweDEyOGQsCiAgICAgICAgICAweDEyOTAsCiAgICAgICAgICAweDEyYWUsCiAgICAgICAgICAweDEyYjAsCiAgICAgICAgICAweDEyYjAsCiAgICAgICAgICAweDEyYjIsCiAgICAgICAgICAweDEyYjUsCiAgICAgICAgICAweDEyYjgsCiAgICAgICAgICAweDEyYmUsCiAgICAgICAgICAweDEyYzAsCiAgICAgICAgICAweDEyYzAsCiAgICAgICAgICAweDEyYzIsCiAgICAgICAgICAweDEyYzUsCiAgICAgICAgICAweDEyYzgsCiAgICAgICAgICAweDEyY2UsCiAgICAgICAgICAweDEyZDAsCiAgICAgICAgICAweDEyZDYsCiAgICAgICAgICAweDEyZDgsCiAgICAgICAgICAweDEyZWUsCiAgICAgICAgICAweDEyZjAsCiAgICAgICAgICAweDEzMGUsCiAgICAgICAgICAweDEzMTAsCiAgICAgICAgICAweDEzMTAsCiAgICAgICAgICAweDEzMTIsCiAgICAgICAgICAweDEzMTUsCiAgICAgICAgICAweDEzMTgsCiAgICAgICAgICAweDEzMWUsCiAgICAgICAgICAweDEzMjAsCiAgICAgICAgICAweDEzNDYsCiAgICAgICAgICAweDEzNDgsCiAgICAgICAgICAweDEzNWEsCiAgICAgICAgICAweDEzNjEsCiAgICAgICAgICAweDEzN2MsCiAgICAgICAgICAweDEzYTAsCiAgICAgICAgICAweDEzZjQsCiAgICAgICAgICAweDE0MDEsCiAgICAgICAgICAweDE2NzYsCiAgICAgICAgICAweDE2ODEsCiAgICAgICAgICAweDE2OWEsCiAgICAgICAgICAweDE2YTAsCiAgICAgICAgICAweDE2ZjAsCiAgICAgICAgICAweDE3MDAsCiAgICAgICAgICAweDE3MGMsCiAgICAgICAgICAweDE3MGUsCiAgICAgICAgICAweDE3MTEsCiAgICAgICAgICAweDE3MjAsCiAgICAgICAgICAweDE3MzEsCiAgICAgICAgICAweDE3MzUsCiAgICAgICAgICAweDE3MzYsCiAgICAgICAgICAweDE3NDAsCiAgICAgICAgICAweDE3NTEsCiAgICAgICAgICAweDE3NjAsCiAgICAgICAgICAweDE3NmMsCiAgICAgICAgICAweDE3NmUsCiAgICAgICAgICAweDE3NzAsCiAgICAgICAgICAweDE3ODAsCiAgICAgICAgICAweDE3YjYsCiAgICAgICAgICAweDE3YmUsCiAgICAgICAgICAweDE3YzUsCiAgICAgICAgICAweDE3YzcsCiAgICAgICAgICAweDE3YzgsCiAgICAgICAgICAweDE3ZDQsCiAgICAgICAgICAweDE3ZGEsCiAgICAgICAgICAweDE3ZGMsCiAgICAgICAgICAweDE3ZGMsCiAgICAgICAgICAweDE3ZTAsCiAgICAgICAgICAweDE3ZTksCiAgICAgICAgICAweDE4MTAsCiAgICAgICAgICAweDE4MTksCiAgICAgICAgICAweDE4MjAsCiAgICAgICAgICAweDE4NzcsCiAgICAgICAgICAweDE4ODAsCiAgICAgICAgICAweDE4YTgsCiAgICAgICAgICAweDFlMDAsCiAgICAgICAgICAweDFlOWIsCiAgICAgICAgICAweDFlYTAsCiAgICAgICAgICAweDFlZjksCiAgICAgICAgICAweDFmMDAsCiAgICAgICAgICAweDFmMTUsCiAgICAgICAgICAweDFmMTgsCiAgICAgICAgICAweDFmMWQsCiAgICAgICAgICAweDFmMjAsCiAgICAgICAgICAweDFmNDUsCiAgICAgICAgICAweDFmNDgsCiAgICAgICAgICAweDFmNGQsCiAgICAgICAgICAweDFmNTAsCiAgICAgICAgICAweDFmNTcsCiAgICAgICAgICAweDFmNTksCiAgICAgICAgICAweDFmNTksCiAgICAgICAgICAweDFmNWIsCiAgICAgICAgICAweDFmNWIsCiAgICAgICAgICAweDFmNWQsCiAgICAgICAgICAweDFmNWQsCiAgICAgICAgICAweDFmNWYsCiAgICAgICAgICAweDFmN2QsCiAgICAgICAgICAweDFmODAsCiAgICAgICAgICAweDFmYjQsCiAgICAgICAgICAweDFmYjYsCiAgICAgICAgICAweDFmYmMsCiAgICAgICAgICAweDFmYmUsCiAgICAgICAgICAweDFmYmUsCiAgICAgICAgICAweDFmYzIsCiAgICAgICAgICAweDFmYzQsCiAgICAgICAgICAweDFmYzYsCiAgICAgICAgICAweDFmY2MsCiAgICAgICAgICAweDFmZDAsCiAgICAgICAgICAweDFmZDMsCiAgICAgICAgICAweDFmZDYsCiAgICAgICAgICAweDFmZGIsCiAgICAgICAgICAweDFmZTAsCiAgICAgICAgICAweDFmZWMsCiAgICAgICAgICAweDFmZjIsCiAgICAgICAgICAweDFmZjQsCiAgICAgICAgICAweDFmZjYsCiAgICAgICAgICAweDFmZmMsCiAgICAgICAgICAweDIwMGUsCiAgICAgICAgICAweDIwMGUsCiAgICAgICAgICAweDIwNzEsCiAgICAgICAgICAweDIwNzEsCiAgICAgICAgICAweDIwN2YsCiAgICAgICAgICAweDIwN2YsCiAgICAgICAgICAweDIxMDIsCiAgICAgICAgICAweDIxMDIsCiAgICAgICAgICAweDIxMDcsCiAgICAgICAgICAweDIxMDcsCiAgICAgICAgICAweDIxMGEsCiAgICAgICAgICAweDIxMTMsCiAgICAgICAgICAweDIxMTUsCiAgICAgICAgICAweDIxMTUsCiAgICAgICAgICAweDIxMTksCiAgICAgICAgICAweDIxMWQsCiAgICAgICAgICAweDIxMjQsCiAgICAgICAgICAweDIxMjQsCiAgICAgICAgICAweDIxMjYsCiAgICAgICAgICAweDIxMjYsCiAgICAgICAgICAweDIxMjgsCiAgICAgICAgICAweDIxMjgsCiAgICAgICAgICAweDIxMmEsCiAgICAgICAgICAweDIxMmQsCiAgICAgICAgICAweDIxMmYsCiAgICAgICAgICAweDIxMzEsCiAgICAgICAgICAweDIxMzMsCiAgICAgICAgICAweDIxMzksCiAgICAgICAgICAweDIxM2QsCiAgICAgICAgICAweDIxM2YsCiAgICAgICAgICAweDIxNDUsCiAgICAgICAgICAweDIxNDksCiAgICAgICAgICAweDIxNjAsCiAgICAgICAgICAweDIxODMsCiAgICAgICAgICAweDIzMzYsCiAgICAgICAgICAweDIzN2EsCiAgICAgICAgICAweDIzOTUsCiAgICAgICAgICAweDIzOTUsCiAgICAgICAgICAweDI0OWMsCiAgICAgICAgICAweDI0ZTksCiAgICAgICAgICAweDMwMDUsCiAgICAgICAgICAweDMwMDcsCiAgICAgICAgICAweDMwMjEsCiAgICAgICAgICAweDMwMjksCiAgICAgICAgICAweDMwMzEsCiAgICAgICAgICAweDMwMzUsCiAgICAgICAgICAweDMwMzgsCiAgICAgICAgICAweDMwM2MsCiAgICAgICAgICAweDMwNDEsCiAgICAgICAgICAweDMwOTYsCiAgICAgICAgICAweDMwOWQsCiAgICAgICAgICAweDMwOWYsCiAgICAgICAgICAweDMwYTEsCiAgICAgICAgICAweDMwZmEsCiAgICAgICAgICAweDMwZmMsCiAgICAgICAgICAweDMwZmYsCiAgICAgICAgICAweDMxMDUsCiAgICAgICAgICAweDMxMmMsCiAgICAgICAgICAweDMxMzEsCiAgICAgICAgICAweDMxOGUsCiAgICAgICAgICAweDMxOTAsCiAgICAgICAgICAweDMxYjcsCiAgICAgICAgICAweDMxZjAsCiAgICAgICAgICAweDMyMWMsCiAgICAgICAgICAweDMyMjAsCiAgICAgICAgICAweDMyNDMsCiAgICAgICAgICAweDMyNjAsCiAgICAgICAgICAweDMyN2IsCiAgICAgICAgICAweDMyN2YsCiAgICAgICAgICAweDMyYjAsCiAgICAgICAgICAweDMyYzAsCiAgICAgICAgICAweDMyY2IsCiAgICAgICAgICAweDMyZDAsCiAgICAgICAgICAweDMyZmUsCiAgICAgICAgICAweDMzMDAsCiAgICAgICAgICAweDMzNzYsCiAgICAgICAgICAweDMzN2IsCiAgICAgICAgICAweDMzZGQsCiAgICAgICAgICAweDMzZTAsCiAgICAgICAgICAweDMzZmUsCiAgICAgICAgICAweDM0MDAsCiAgICAgICAgICAweDRkYjUsCiAgICAgICAgICAweDRlMDAsCiAgICAgICAgICAweDlmYTUsCiAgICAgICAgICAweGEwMDAsCiAgICAgICAgICAweGE0OGMsCiAgICAgICAgICAweGFjMDAsCiAgICAgICAgICAweGQ3YTMsCiAgICAgICAgICAweGQ4MDAsCiAgICAgICAgICAweGZhMmQsCiAgICAgICAgICAweGZhMzAsCiAgICAgICAgICAweGZhNmEsCiAgICAgICAgICAweGZiMDAsCiAgICAgICAgICAweGZiMDYsCiAgICAgICAgICAweGZiMTMsCiAgICAgICAgICAweGZiMTcsCiAgICAgICAgICAweGZmMjEsCiAgICAgICAgICAweGZmM2EsCiAgICAgICAgICAweGZmNDEsCiAgICAgICAgICAweGZmNWEsCiAgICAgICAgICAweGZmNjYsCiAgICAgICAgICAweGZmYmUsCiAgICAgICAgICAweGZmYzIsCiAgICAgICAgICAweGZmYzcsCiAgICAgICAgICAweGZmY2EsCiAgICAgICAgICAweGZmY2YsCiAgICAgICAgICAweGZmZDIsCiAgICAgICAgICAweGZmZDcsCiAgICAgICAgICAweGZmZGEsCiAgICAgICAgICAweGZmZGMsCiAgICAgICAgICAweDEwMzAwLAogICAgICAgICAgMHgxMDMxZSwKICAgICAgICAgIDB4MTAzMjAsCiAgICAgICAgICAweDEwMzIzLAogICAgICAgICAgMHgxMDMzMCwKICAgICAgICAgIDB4MTAzNGEsCiAgICAgICAgICAweDEwNDAwLAogICAgICAgICAgMHgxMDQyNSwKICAgICAgICAgIDB4MTA0MjgsCiAgICAgICAgICAweDEwNDRkLAogICAgICAgICAgMHgxZDAwMCwKICAgICAgICAgIDB4MWQwZjUsCiAgICAgICAgICAweDFkMTAwLAogICAgICAgICAgMHgxZDEyNiwKICAgICAgICAgIDB4MWQxMmEsCiAgICAgICAgICAweDFkMTY2LAogICAgICAgICAgMHgxZDE2YSwKICAgICAgICAgIDB4MWQxNzIsCiAgICAgICAgICAweDFkMTgzLAogICAgICAgICAgMHgxZDE4NCwKICAgICAgICAgIDB4MWQxOGMsCiAgICAgICAgICAweDFkMWE5LAogICAgICAgICAgMHgxZDFhZSwKICAgICAgICAgIDB4MWQxZGQsCiAgICAgICAgICAweDFkNDAwLAogICAgICAgICAgMHgxZDQ1NCwKICAgICAgICAgIDB4MWQ0NTYsCiAgICAgICAgICAweDFkNDljLAogICAgICAgICAgMHgxZDQ5ZSwKICAgICAgICAgIDB4MWQ0OWYsCiAgICAgICAgICAweDFkNGEyLAogICAgICAgICAgMHgxZDRhMiwKICAgICAgICAgIDB4MWQ0YTUsCiAgICAgICAgICAweDFkNGE2LAogICAgICAgICAgMHgxZDRhOSwKICAgICAgICAgIDB4MWQ0YWMsCiAgICAgICAgICAweDFkNGFlLAogICAgICAgICAgMHgxZDRiOSwKICAgICAgICAgIDB4MWQ0YmIsCiAgICAgICAgICAweDFkNGJiLAogICAgICAgICAgMHgxZDRiZCwKICAgICAgICAgIDB4MWQ0YzAsCiAgICAgICAgICAweDFkNGMyLAogICAgICAgICAgMHgxZDRjMywKICAgICAgICAgIDB4MWQ0YzUsCiAgICAgICAgICAweDFkNTA1LAogICAgICAgICAgMHgxZDUwNywKICAgICAgICAgIDB4MWQ1MGEsCiAgICAgICAgICAweDFkNTBkLAogICAgICAgICAgMHgxZDUxNCwKICAgICAgICAgIDB4MWQ1MTYsCiAgICAgICAgICAweDFkNTFjLAogICAgICAgICAgMHgxZDUxZSwKICAgICAgICAgIDB4MWQ1MzksCiAgICAgICAgICAweDFkNTNiLAogICAgICAgICAgMHgxZDUzZSwKICAgICAgICAgIDB4MWQ1NDAsCiAgICAgICAgICAweDFkNTQ0LAogICAgICAgICAgMHgxZDU0NiwKICAgICAgICAgIDB4MWQ1NDYsCiAgICAgICAgICAweDFkNTRhLAogICAgICAgICAgMHgxZDU1MCwKICAgICAgICAgIDB4MWQ1NTIsCiAgICAgICAgICAweDFkNmEzLAogICAgICAgICAgMHgxZDZhOCwKICAgICAgICAgIDB4MWQ3YzksCiAgICAgICAgICAweDIwMDAwLAogICAgICAgICAgMHgyYTZkNiwKICAgICAgICAgIDB4MmY4MDAsCiAgICAgICAgICAweDJmYTFkLAogICAgICAgICAgMHhmMDAwMCwKICAgICAgICAgIDB4ZmZmZmQsCiAgICAgICAgICAweDEwMDAwMCwKICAgICAgICAgIDB4MTBmZmZkCiAgICAgICAgXTsKICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovCgogICAgICAgIGNvbnN0IGlzQmlkaXJlY3Rpb25hbEwgPSBjaGFyYWN0ZXIgPT4gaW5SYW5nZShjaGFyYWN0ZXIsIGJpZGlyZWN0aW9uYWxfbCk7CgogICAgICAgIC8vIDIuMS4gIE1hcHBpbmcKCiAgICAgICAgLyoqCiAgICAgICAgICogbm9uLUFTQ0lJIHNwYWNlIGNoYXJhY3RlcnMgW1N0cmluZ1ByZXAsIEMuMS4yXSB0aGF0IGNhbiBiZQogICAgICAgICAqIG1hcHBlZCB0byBTUEFDRSAoVSswMDIwKQogICAgICAgICAqLwogICAgICAgIGNvbnN0IG1hcHBpbmcyc3BhY2UgPSBpc05vbkFTQ0lJU3BhY2VDaGFyYWN0ZXI7CgogICAgICAgIC8qKgogICAgICAgICAqIHRoZSAiY29tbW9ubHkgbWFwcGVkIHRvIG5vdGhpbmciIGNoYXJhY3RlcnMgW1N0cmluZ1ByZXAsIEIuMV0KICAgICAgICAgKiB0aGF0IGNhbiBiZSBtYXBwZWQgdG8gbm90aGluZy4KICAgICAgICAgKi8KICAgICAgICBjb25zdCBtYXBwaW5nMm5vdGhpbmcgPSBpc0NvbW1vbmx5TWFwcGVkVG9Ob3RoaW5nOwoKICAgICAgICAvLyB1dGlscwogICAgICAgIGNvbnN0IGdldENvZGVQb2ludCA9IGNoYXJhY3RlciA9PiBjaGFyYWN0ZXIuY29kZVBvaW50QXQoMCk7CiAgICAgICAgY29uc3QgZmlyc3QgPSB4ID0+IHhbMF07CiAgICAgICAgY29uc3QgbGFzdCA9IHggPT4geFt4Lmxlbmd0aCAtIDFdOwoKICAgICAgICAvKioKICAgICAgICAgKiBDb252ZXJ0IHByb3ZpZGVkIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIFVuaWNvZGUgQ29kZSBQb2ludHMuCiAgICAgICAgICogQmFzZWQgb24gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxNDA5MTY1LzE1NTYyNDkKICAgICAgICAgKiBhbmQgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29kZS1wb2ludC1hdC4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQKICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyW119CiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gdG9Db2RlUG9pbnRzKGlucHV0KSB7CiAgICAgICAgICBjb25zdCBjb2RlcG9pbnRzID0gW107CiAgICAgICAgICBjb25zdCBzaXplID0gaW5wdXQubGVuZ3RoOwoKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSArPSAxKSB7CiAgICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IGlucHV0LmNoYXJDb2RlQXQoaSk7CgogICAgICAgICAgICBpZiAoYmVmb3JlID49IDB4ZDgwMCAmJiBiZWZvcmUgPD0gMHhkYmZmICYmIHNpemUgPiBpICsgMSkgewogICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KGkgKyAxKTsKCiAgICAgICAgICAgICAgaWYgKG5leHQgPj0gMHhkYzAwICYmIG5leHQgPD0gMHhkZmZmKSB7CiAgICAgICAgICAgICAgICBjb2RlcG9pbnRzLnB1c2goKGJlZm9yZSAtIDB4ZDgwMCkgKiAweDQwMCArIG5leHQgLSAweGRjMDAgKyAweDEwMDAwKTsKICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29kZXBvaW50cy5wdXNoKGJlZm9yZSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGNvZGVwb2ludHM7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBTQVNMcHJlcC4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQKICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cwogICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0cy5hbGxvd1VuYXNzaWduZWQKICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHNhc2xwcmVwKGlucHV0LCBvcHRzID0ge30pIHsKICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHN0cmluZy4nKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyAxLiBNYXAKICAgICAgICAgIGNvbnN0IG1hcHBlZF9pbnB1dCA9IHRvQ29kZVBvaW50cyhpbnB1dCkKICAgICAgICAgICAgLy8gMS4xIG1hcHBpbmcgdG8gc3BhY2UKICAgICAgICAgICAgLm1hcChjaGFyYWN0ZXIgPT4gKG1hcHBpbmcyc3BhY2UoY2hhcmFjdGVyKSA/IDB4MjAgOiBjaGFyYWN0ZXIpKQogICAgICAgICAgICAvLyAxLjIgbWFwcGluZyB0byBub3RoaW5nCiAgICAgICAgICAgIC5maWx0ZXIoY2hhcmFjdGVyID0+ICFtYXBwaW5nMm5vdGhpbmcoY2hhcmFjdGVyKSk7CgogICAgICAgICAgLy8gMi4gTm9ybWFsaXplCiAgICAgICAgICBjb25zdCBub3JtYWxpemVkX2lucHV0ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQKICAgICAgICAgICAgLmFwcGx5KG51bGwsIG1hcHBlZF9pbnB1dCkKICAgICAgICAgICAgLm5vcm1hbGl6ZSgnTkZLQycpOwoKICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRfbWFwID0gdG9Db2RlUG9pbnRzKG5vcm1hbGl6ZWRfaW5wdXQpOwoKICAgICAgICAgIC8vIDMuIFByb2hpYml0CiAgICAgICAgICBjb25zdCBoYXNQcm9oaWJpdGVkID0gbm9ybWFsaXplZF9tYXAuc29tZShpc1Byb2hpYml0ZWRDaGFyYWN0ZXIpOwoKICAgICAgICAgIGlmIChoYXNQcm9oaWJpdGVkKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAnUHJvaGliaXRlZCBjaGFyYWN0ZXIsIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDAxMyNzZWN0aW9uLTIuMycKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBVbmFzc2lnbmVkIENvZGUgUG9pbnRzCiAgICAgICAgICBpZiAob3B0cy5hbGxvd1VuYXNzaWduZWQgIT09IHRydWUpIHsKICAgICAgICAgICAgY29uc3QgaGFzVW5hc3NpZ25lZCA9IG5vcm1hbGl6ZWRfbWFwLnNvbWUoaXNVbmFzc2lnbmVkQ29kZVBvaW50KTsKCiAgICAgICAgICAgIGlmIChoYXNVbmFzc2lnbmVkKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAgICAgJ1VuYXNzaWduZWQgY29kZSBwb2ludCwgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MDEzI3NlY3Rpb24tMi41JwogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyA0LiBjaGVjayBiaWRpCgogICAgICAgICAgY29uc3QgaGFzQmlkaVJBTCA9IG5vcm1hbGl6ZWRfbWFwLnNvbWUoaXNCaWRpcmVjdGlvbmFsUkFMKTsKCiAgICAgICAgICBjb25zdCBoYXNCaWRpTCA9IG5vcm1hbGl6ZWRfbWFwLnNvbWUoaXNCaWRpcmVjdGlvbmFsTCk7CgogICAgICAgICAgLy8gNC4xIElmIGEgc3RyaW5nIGNvbnRhaW5zIGFueSBSYW5kQUxDYXQgY2hhcmFjdGVyLCB0aGUgc3RyaW5nIE1VU1QgTk9UCiAgICAgICAgICAvLyBjb250YWluIGFueSBMQ2F0IGNoYXJhY3Rlci4KICAgICAgICAgIGlmIChoYXNCaWRpUkFMICYmIGhhc0JpZGlMKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAnU3RyaW5nIG11c3Qgbm90IGNvbnRhaW4gUmFuZEFMQ2F0IGFuZCBMQ2F0IGF0IHRoZSBzYW1lIHRpbWUsJyArCiAgICAgICAgICAgICAgICAnIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ1NCNzZWN0aW9uLTYnCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiA0LjIgSWYgYSBzdHJpbmcgY29udGFpbnMgYW55IFJhbmRBTENhdCBjaGFyYWN0ZXIsIGEgUmFuZEFMQ2F0CiAgICAgICAgICAgKiBjaGFyYWN0ZXIgTVVTVCBiZSB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZSBzdHJpbmcsIGFuZCBhCiAgICAgICAgICAgKiBSYW5kQUxDYXQgY2hhcmFjdGVyIE1VU1QgYmUgdGhlIGxhc3QgY2hhcmFjdGVyIG9mIHRoZSBzdHJpbmcuCiAgICAgICAgICAgKi8KCiAgICAgICAgICBjb25zdCBpc0ZpcnN0QmlkaVJBTCA9IGlzQmlkaXJlY3Rpb25hbFJBTCgKICAgICAgICAgICAgZ2V0Q29kZVBvaW50KGZpcnN0KG5vcm1hbGl6ZWRfaW5wdXQpKQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGlzTGFzdEJpZGlSQUwgPSBpc0JpZGlyZWN0aW9uYWxSQUwoCiAgICAgICAgICAgIGdldENvZGVQb2ludChsYXN0KG5vcm1hbGl6ZWRfaW5wdXQpKQogICAgICAgICAgKTsKCiAgICAgICAgICBpZiAoaGFzQmlkaVJBTCAmJiAhKGlzRmlyc3RCaWRpUkFMICYmIGlzTGFzdEJpZGlSQUwpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAnQmlkaXJlY3Rpb25hbCBSYW5kQUxDYXQgY2hhcmFjdGVyIG11c3QgYmUgdGhlIGZpcnN0IGFuZCB0aGUgbGFzdCcgKwogICAgICAgICAgICAgICAgJyBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZywgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDU0I3NlY3Rpb24tNicKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gbm9ybWFsaXplZF9pbnB1dDsKICAgICAgICB9CgogICAgICAgIGNsYXNzIFBERlNlY3VyaXR5IHsKICAgICAgICAgIHN0YXRpYyBnZW5lcmF0ZUZpbGVJRChpbmZvID0ge30pIHsKICAgICAgICAgICAgbGV0IGluZm9TdHIgPSBgJHtpbmZvLkNyZWF0aW9uRGF0ZS5nZXRUaW1lKCl9XG5gOwoKICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGluZm8pIHsKICAgICAgICAgICAgICBpZiAoIWluZm8uaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGluZm9TdHIgKz0gYCR7a2V5fTogJHtpbmZvW2tleV19XG5gOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gd29yZEFycmF5VG9CdWZmZXIoY3J5cHRvSnMuTUQ1KGluZm9TdHIpKTsKICAgICAgICAgIH0KCiAgICAgICAgICBzdGF0aWMgZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkoYnl0ZXMpIHsKICAgICAgICAgICAgcmV0dXJuIGNyeXB0b0pzLmxpYi5Xb3JkQXJyYXkucmFuZG9tKGJ5dGVzKTsKICAgICAgICAgIH0KCiAgICAgICAgICBzdGF0aWMgY3JlYXRlKGRvY3VtZW50LCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCFvcHRpb25zLm93bmVyUGFzc3dvcmQgJiYgIW9wdGlvbnMudXNlclBhc3N3b3JkKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG5ldyBQREZTZWN1cml0eShkb2N1bWVudCwgb3B0aW9ucyk7CiAgICAgICAgICB9CgogICAgICAgICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG9wdGlvbnMgPSB7fSkgewogICAgICAgICAgICBpZiAoIW9wdGlvbnMub3duZXJQYXNzd29yZCAmJiAhb3B0aW9ucy51c2VyUGFzc3dvcmQpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbmUgb2Ygb3duZXIgcGFzc3dvcmQgYW5kIHVzZXIgcGFzc3dvcmQgaXMgZGVmaW5lZC4nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50OwogICAgICAgICAgICB0aGlzLl9zZXR1cEVuY3J5cHRpb24ob3B0aW9ucyk7CiAgICAgICAgICB9CgogICAgICAgICAgX3NldHVwRW5jcnlwdGlvbihvcHRpb25zKSB7CiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5wZGZWZXJzaW9uKSB7CiAgICAgICAgICAgICAgY2FzZSAnMS40JzoKICAgICAgICAgICAgICBjYXNlICcxLjUnOgogICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uID0gMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgJzEuNic6CiAgICAgICAgICAgICAgY2FzZSAnMS43JzoKICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IDQ7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlICcxLjdleHQzJzoKICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IDU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uID0gMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBlbmNEaWN0ID0gewogICAgICAgICAgICAgIEZpbHRlcjogJ1N0YW5kYXJkJwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZlcnNpb24pIHsKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwRW5jcnlwdGlvblYxVjJWNCh0aGlzLnZlcnNpb24sIGVuY0RpY3QsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBFbmNyeXB0aW9uVjUoZW5jRGljdCwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5ID0gdGhpcy5kb2N1bWVudC5yZWYoZW5jRGljdCk7CiAgICAgICAgICB9CgogICAgICAgICAgX3NldHVwRW5jcnlwdGlvblYxVjJWNCh2LCBlbmNEaWN0LCBvcHRpb25zKSB7CiAgICAgICAgICAgIGxldCByLCBwZXJtaXNzaW9uczsKICAgICAgICAgICAgc3dpdGNoICh2KSB7CiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgciA9IDI7CiAgICAgICAgICAgICAgICB0aGlzLmtleUJpdHMgPSA0MDsKICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zID0gZ2V0UGVybWlzc2lvbnNSMihvcHRpb25zLnBlcm1pc3Npb25zKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHIgPSAzOwogICAgICAgICAgICAgICAgdGhpcy5rZXlCaXRzID0gMTI4OwogICAgICAgICAgICAgICAgcGVybWlzc2lvbnMgPSBnZXRQZXJtaXNzaW9uc1IzKG9wdGlvbnMucGVybWlzc2lvbnMpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgciA9IDQ7CiAgICAgICAgICAgICAgICB0aGlzLmtleUJpdHMgPSAxMjg7CiAgICAgICAgICAgICAgICBwZXJtaXNzaW9ucyA9IGdldFBlcm1pc3Npb25zUjMob3B0aW9ucy5wZXJtaXNzaW9ucyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgcGFkZGVkVXNlclBhc3N3b3JkID0gcHJvY2Vzc1Bhc3N3b3JkUjJSM1I0KG9wdGlvbnMudXNlclBhc3N3b3JkKTsKICAgICAgICAgICAgY29uc3QgcGFkZGVkT3duZXJQYXNzd29yZCA9IG9wdGlvbnMub3duZXJQYXNzd29yZAogICAgICAgICAgICAgID8gcHJvY2Vzc1Bhc3N3b3JkUjJSM1I0KG9wdGlvbnMub3duZXJQYXNzd29yZCkKICAgICAgICAgICAgICA6IHBhZGRlZFVzZXJQYXNzd29yZDsKCiAgICAgICAgICAgIGNvbnN0IG93bmVyUGFzc3dvcmRFbnRyeSA9IGdldE93bmVyUGFzc3dvcmRSMlIzUjQoCiAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICB0aGlzLmtleUJpdHMsCiAgICAgICAgICAgICAgcGFkZGVkVXNlclBhc3N3b3JkLAogICAgICAgICAgICAgIHBhZGRlZE93bmVyUGFzc3dvcmQKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdGhpcy5lbmNyeXB0aW9uS2V5ID0gZ2V0RW5jcnlwdGlvbktleVIyUjNSNCgKICAgICAgICAgICAgICByLAogICAgICAgICAgICAgIHRoaXMua2V5Qml0cywKICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50Ll9pZCwKICAgICAgICAgICAgICBwYWRkZWRVc2VyUGFzc3dvcmQsCiAgICAgICAgICAgICAgb3duZXJQYXNzd29yZEVudHJ5LAogICAgICAgICAgICAgIHBlcm1pc3Npb25zCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGxldCB1c2VyUGFzc3dvcmRFbnRyeTsKICAgICAgICAgICAgaWYgKHIgPT09IDIpIHsKICAgICAgICAgICAgICB1c2VyUGFzc3dvcmRFbnRyeSA9IGdldFVzZXJQYXNzd29yZFIyKHRoaXMuZW5jcnlwdGlvbktleSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdXNlclBhc3N3b3JkRW50cnkgPSBnZXRVc2VyUGFzc3dvcmRSM1I0KAogICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5faWQsCiAgICAgICAgICAgICAgICB0aGlzLmVuY3J5cHRpb25LZXkKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBlbmNEaWN0LlYgPSB2OwogICAgICAgICAgICBpZiAodiA+PSAyKSB7CiAgICAgICAgICAgICAgZW5jRGljdC5MZW5ndGggPSB0aGlzLmtleUJpdHM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHYgPT09IDQpIHsKICAgICAgICAgICAgICBlbmNEaWN0LkNGID0gewogICAgICAgICAgICAgICAgU3RkQ0Y6IHsKICAgICAgICAgICAgICAgICAgQXV0aEV2ZW50OiAnRG9jT3BlbicsCiAgICAgICAgICAgICAgICAgIENGTTogJ0FFU1YyJywKICAgICAgICAgICAgICAgICAgTGVuZ3RoOiB0aGlzLmtleUJpdHMgLyA4CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBlbmNEaWN0LlN0bUYgPSAnU3RkQ0YnOwogICAgICAgICAgICAgIGVuY0RpY3QuU3RyRiA9ICdTdGRDRic7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZW5jRGljdC5SID0gcjsKICAgICAgICAgICAgZW5jRGljdC5PID0gd29yZEFycmF5VG9CdWZmZXIob3duZXJQYXNzd29yZEVudHJ5KTsKICAgICAgICAgICAgZW5jRGljdC5VID0gd29yZEFycmF5VG9CdWZmZXIodXNlclBhc3N3b3JkRW50cnkpOwogICAgICAgICAgICBlbmNEaWN0LlAgPSBwZXJtaXNzaW9uczsKICAgICAgICAgIH0KCiAgICAgICAgICBfc2V0dXBFbmNyeXB0aW9uVjUoZW5jRGljdCwgb3B0aW9ucykgewogICAgICAgICAgICB0aGlzLmtleUJpdHMgPSAyNTY7CiAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25zID0gZ2V0UGVybWlzc2lvbnNSMyhvcHRpb25zKTsKCiAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZFVzZXJQYXNzd29yZCA9IHByb2Nlc3NQYXNzd29yZFI1KG9wdGlvbnMudXNlclBhc3N3b3JkKTsKICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkT3duZXJQYXNzd29yZCA9IG9wdGlvbnMub3duZXJQYXNzd29yZAogICAgICAgICAgICAgID8gcHJvY2Vzc1Bhc3N3b3JkUjUob3B0aW9ucy5vd25lclBhc3N3b3JkKQogICAgICAgICAgICAgIDogcHJvY2Vzc2VkVXNlclBhc3N3b3JkOwoKICAgICAgICAgICAgdGhpcy5lbmNyeXB0aW9uS2V5ID0gZ2V0RW5jcnlwdGlvbktleVI1KAogICAgICAgICAgICAgIFBERlNlY3VyaXR5LmdlbmVyYXRlUmFuZG9tV29yZEFycmF5CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvbnN0IHVzZXJQYXNzd29yZEVudHJ5ID0gZ2V0VXNlclBhc3N3b3JkUjUoCiAgICAgICAgICAgICAgcHJvY2Vzc2VkVXNlclBhc3N3b3JkLAogICAgICAgICAgICAgIFBERlNlY3VyaXR5LmdlbmVyYXRlUmFuZG9tV29yZEFycmF5CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvbnN0IHVzZXJLZXlTYWx0ID0gY3J5cHRvSnMubGliLldvcmRBcnJheS5jcmVhdGUoCiAgICAgICAgICAgICAgdXNlclBhc3N3b3JkRW50cnkud29yZHMuc2xpY2UoMTAsIDEyKSwKICAgICAgICAgICAgICA4CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvbnN0IHVzZXJFbmNyeXB0aW9uS2V5RW50cnkgPSBnZXRVc2VyRW5jcnlwdGlvbktleVI1KAogICAgICAgICAgICAgIHByb2Nlc3NlZFVzZXJQYXNzd29yZCwKICAgICAgICAgICAgICB1c2VyS2V5U2FsdCwKICAgICAgICAgICAgICB0aGlzLmVuY3J5cHRpb25LZXkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3Qgb3duZXJQYXNzd29yZEVudHJ5ID0gZ2V0T3duZXJQYXNzd29yZFI1KAogICAgICAgICAgICAgIHByb2Nlc3NlZE93bmVyUGFzc3dvcmQsCiAgICAgICAgICAgICAgdXNlclBhc3N3b3JkRW50cnksCiAgICAgICAgICAgICAgUERGU2VjdXJpdHkuZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3Qgb3duZXJLZXlTYWx0ID0gY3J5cHRvSnMubGliLldvcmRBcnJheS5jcmVhdGUoCiAgICAgICAgICAgICAgb3duZXJQYXNzd29yZEVudHJ5LndvcmRzLnNsaWNlKDEwLCAxMiksCiAgICAgICAgICAgICAgOAogICAgICAgICAgICApOwogICAgICAgICAgICBjb25zdCBvd25lckVuY3J5cHRpb25LZXlFbnRyeSA9IGdldE93bmVyRW5jcnlwdGlvbktleVI1KAogICAgICAgICAgICAgIHByb2Nlc3NlZE93bmVyUGFzc3dvcmQsCiAgICAgICAgICAgICAgb3duZXJLZXlTYWx0LAogICAgICAgICAgICAgIHVzZXJQYXNzd29yZEVudHJ5LAogICAgICAgICAgICAgIHRoaXMuZW5jcnlwdGlvbktleQogICAgICAgICAgICApOwogICAgICAgICAgICBjb25zdCBwZXJtc0VudHJ5ID0gZ2V0RW5jcnlwdGVkUGVybWlzc2lvbnNSNSgKICAgICAgICAgICAgICBwZXJtaXNzaW9ucywKICAgICAgICAgICAgICB0aGlzLmVuY3J5cHRpb25LZXksCiAgICAgICAgICAgICAgUERGU2VjdXJpdHkuZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIGVuY0RpY3QuViA9IDU7CiAgICAgICAgICAgIGVuY0RpY3QuTGVuZ3RoID0gdGhpcy5rZXlCaXRzOwogICAgICAgICAgICBlbmNEaWN0LkNGID0gewogICAgICAgICAgICAgIFN0ZENGOiB7CiAgICAgICAgICAgICAgICBBdXRoRXZlbnQ6ICdEb2NPcGVuJywKICAgICAgICAgICAgICAgIENGTTogJ0FFU1YzJywKICAgICAgICAgICAgICAgIExlbmd0aDogdGhpcy5rZXlCaXRzIC8gOAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgZW5jRGljdC5TdG1GID0gJ1N0ZENGJzsKICAgICAgICAgICAgZW5jRGljdC5TdHJGID0gJ1N0ZENGJzsKICAgICAgICAgICAgZW5jRGljdC5SID0gNTsKICAgICAgICAgICAgZW5jRGljdC5PID0gd29yZEFycmF5VG9CdWZmZXIob3duZXJQYXNzd29yZEVudHJ5KTsKICAgICAgICAgICAgZW5jRGljdC5PRSA9IHdvcmRBcnJheVRvQnVmZmVyKG93bmVyRW5jcnlwdGlvbktleUVudHJ5KTsKICAgICAgICAgICAgZW5jRGljdC5VID0gd29yZEFycmF5VG9CdWZmZXIodXNlclBhc3N3b3JkRW50cnkpOwogICAgICAgICAgICBlbmNEaWN0LlVFID0gd29yZEFycmF5VG9CdWZmZXIodXNlckVuY3J5cHRpb25LZXlFbnRyeSk7CiAgICAgICAgICAgIGVuY0RpY3QuUCA9IHBlcm1pc3Npb25zOwogICAgICAgICAgICBlbmNEaWN0LlBlcm1zID0gd29yZEFycmF5VG9CdWZmZXIocGVybXNFbnRyeSk7CiAgICAgICAgICB9CgogICAgICAgICAgZ2V0RW5jcnlwdEZuKG9iaiwgZ2VuKSB7CiAgICAgICAgICAgIGxldCBkaWdlc3Q7CiAgICAgICAgICAgIGlmICh0aGlzLnZlcnNpb24gPCA1KSB7CiAgICAgICAgICAgICAgZGlnZXN0ID0gdGhpcy5lbmNyeXB0aW9uS2V5CiAgICAgICAgICAgICAgICAuY2xvbmUoKQogICAgICAgICAgICAgICAgLmNvbmNhdCgKICAgICAgICAgICAgICAgICAgY3J5cHRvSnMubGliLldvcmRBcnJheS5jcmVhdGUoCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgKChvYmogJiAweGZmKSA8PCAyNCkgfAogICAgICAgICAgICAgICAgICAgICAgICAoKG9iaiAmIDB4ZmYwMCkgPDwgOCkgfAogICAgICAgICAgICAgICAgICAgICAgICAoKG9iaiA+PiA4KSAmIDB4ZmYwMCkgfAogICAgICAgICAgICAgICAgICAgICAgICAoZ2VuICYgMHhmZiksCiAgICAgICAgICAgICAgICAgICAgICAoZ2VuICYgMHhmZjAwKSA8PCAxNgogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgNQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodGhpcy52ZXJzaW9uID09PSAxIHx8IHRoaXMudmVyc2lvbiA9PT0gMikgewogICAgICAgICAgICAgIGxldCBrZXkgPSBjcnlwdG9Kcy5NRDUoZGlnZXN0KTsKICAgICAgICAgICAgICBrZXkuc2lnQnl0ZXMgPSBNYXRoLm1pbigxNiwgdGhpcy5rZXlCaXRzIC8gOCArIDUpOwogICAgICAgICAgICAgIHJldHVybiBidWZmZXIgPT4KICAgICAgICAgICAgICAgIHdvcmRBcnJheVRvQnVmZmVyKAogICAgICAgICAgICAgICAgICBjcnlwdG9Kcy5SQzQuZW5jcnlwdChjcnlwdG9Kcy5saWIuV29yZEFycmF5LmNyZWF0ZShidWZmZXIpLCBrZXkpCiAgICAgICAgICAgICAgICAgICAgLmNpcGhlcnRleHQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxldCBrZXk7CiAgICAgICAgICAgIGlmICh0aGlzLnZlcnNpb24gPT09IDQpIHsKICAgICAgICAgICAgICBrZXkgPSBjcnlwdG9Kcy5NRDUoCiAgICAgICAgICAgICAgICBkaWdlc3QuY29uY2F0KGNyeXB0b0pzLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDczNDE2YzU0XSwgNCkpCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBrZXkgPSB0aGlzLmVuY3J5cHRpb25LZXk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IGl2ID0gUERGU2VjdXJpdHkuZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkoMTYpOwogICAgICAgICAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICAgICAgIG1vZGU6IGNyeXB0b0pzLm1vZGUuQ0JDLAogICAgICAgICAgICAgIHBhZGRpbmc6IGNyeXB0b0pzLnBhZC5Qa2NzNywKICAgICAgICAgICAgICBpdgogICAgICAgICAgICB9OwoKICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlciA9PgogICAgICAgICAgICAgIHdvcmRBcnJheVRvQnVmZmVyKAogICAgICAgICAgICAgICAgaXYKICAgICAgICAgICAgICAgICAgLmNsb25lKCkKICAgICAgICAgICAgICAgICAgLmNvbmNhdCgKICAgICAgICAgICAgICAgICAgICBjcnlwdG9Kcy5BRVMuZW5jcnlwdCgKICAgICAgICAgICAgICAgICAgICAgIGNyeXB0b0pzLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKGJ1ZmZlciksCiAgICAgICAgICAgICAgICAgICAgICBrZXksCiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zCiAgICAgICAgICAgICAgICAgICAgKS5jaXBoZXJ0ZXh0CiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICApOwogICAgICAgICAgfQoKICAgICAgICAgIGVuZCgpIHsKICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5LmVuZCgpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0UGVybWlzc2lvbnNSMihwZXJtaXNzaW9uT2JqZWN0ID0ge30pIHsKICAgICAgICAgIGxldCBwZXJtaXNzaW9ucyA9IDB4ZmZmZmZmYzAgPj4gMDsKICAgICAgICAgIGlmIChwZXJtaXNzaW9uT2JqZWN0LnByaW50aW5nKSB7CiAgICAgICAgICAgIHBlcm1pc3Npb25zIHw9IDBiMDAwMDAwMDAwMTAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBlcm1pc3Npb25PYmplY3QubW9kaWZ5aW5nKSB7CiAgICAgICAgICAgIHBlcm1pc3Npb25zIHw9IDBiMDAwMDAwMDAxMDAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBlcm1pc3Npb25PYmplY3QuY29weWluZykgewogICAgICAgICAgICBwZXJtaXNzaW9ucyB8PSAwYjAwMDAwMDAxMDAwMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwZXJtaXNzaW9uT2JqZWN0LmFubm90YXRpbmcpIHsKICAgICAgICAgICAgcGVybWlzc2lvbnMgfD0gMGIwMDAwMDAxMDAwMDA7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcGVybWlzc2lvbnM7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRQZXJtaXNzaW9uc1IzKHBlcm1pc3Npb25PYmplY3QgPSB7fSkgewogICAgICAgICAgbGV0IHBlcm1pc3Npb25zID0gMHhmZmZmZjBjMCA+PiAwOwogICAgICAgICAgaWYgKHBlcm1pc3Npb25PYmplY3QucHJpbnRpbmcgPT09ICdsb3dSZXNvbHV0aW9uJykgewogICAgICAgICAgICBwZXJtaXNzaW9ucyB8PSAwYjAwMDAwMDAwMDEwMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwZXJtaXNzaW9uT2JqZWN0LnByaW50aW5nID09PSAnaGlnaFJlc29sdXRpb24nKSB7CiAgICAgICAgICAgIHBlcm1pc3Npb25zIHw9IDBiMTAwMDAwMDAwMTAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBlcm1pc3Npb25PYmplY3QubW9kaWZ5aW5nKSB7CiAgICAgICAgICAgIHBlcm1pc3Npb25zIHw9IDBiMDAwMDAwMDAxMDAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBlcm1pc3Npb25PYmplY3QuY29weWluZykgewogICAgICAgICAgICBwZXJtaXNzaW9ucyB8PSAwYjAwMDAwMDAxMDAwMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwZXJtaXNzaW9uT2JqZWN0LmFubm90YXRpbmcpIHsKICAgICAgICAgICAgcGVybWlzc2lvbnMgfD0gMGIwMDAwMDAxMDAwMDA7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocGVybWlzc2lvbk9iamVjdC5maWxsaW5nRm9ybXMpIHsKICAgICAgICAgICAgcGVybWlzc2lvbnMgfD0gMGIwMDAxMDAwMDAwMDA7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocGVybWlzc2lvbk9iamVjdC5jb250ZW50QWNjZXNzaWJpbGl0eSkgewogICAgICAgICAgICBwZXJtaXNzaW9ucyB8PSAwYjAwMTAwMDAwMDAwMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwZXJtaXNzaW9uT2JqZWN0LmRvY3VtZW50QXNzZW1ibHkpIHsKICAgICAgICAgICAgcGVybWlzc2lvbnMgfD0gMGIwMTAwMDAwMDAwMDA7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcGVybWlzc2lvbnM7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRVc2VyUGFzc3dvcmRSMihlbmNyeXB0aW9uS2V5KSB7CiAgICAgICAgICByZXR1cm4gY3J5cHRvSnMuUkM0LmVuY3J5cHQocHJvY2Vzc1Bhc3N3b3JkUjJSM1I0KCksIGVuY3J5cHRpb25LZXkpCiAgICAgICAgICAgIC5jaXBoZXJ0ZXh0OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlclBhc3N3b3JkUjNSNChkb2N1bWVudElkLCBlbmNyeXB0aW9uS2V5KSB7CiAgICAgICAgICBjb25zdCBrZXkgPSBlbmNyeXB0aW9uS2V5LmNsb25lKCk7CiAgICAgICAgICBsZXQgY2lwaGVyID0gY3J5cHRvSnMuTUQ1KAogICAgICAgICAgICBwcm9jZXNzUGFzc3dvcmRSMlIzUjQoKS5jb25jYXQoY3J5cHRvSnMubGliLldvcmRBcnJheS5jcmVhdGUoZG9jdW1lbnRJZCkpCiAgICAgICAgICApOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IHhvclJvdW5kID0gTWF0aC5jZWlsKGtleS5zaWdCeXRlcyAvIDQpOwogICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHhvclJvdW5kOyBqKyspIHsKICAgICAgICAgICAgICBrZXkud29yZHNbal0gPQogICAgICAgICAgICAgICAgZW5jcnlwdGlvbktleS53b3Jkc1tqXSBeIChpIHwgKGkgPDwgOCkgfCAoaSA8PCAxNikgfCAoaSA8PCAyNCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNpcGhlciA9IGNyeXB0b0pzLlJDNC5lbmNyeXB0KGNpcGhlciwga2V5KS5jaXBoZXJ0ZXh0OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGNpcGhlci5jb25jYXQoY3J5cHRvSnMubGliLldvcmRBcnJheS5jcmVhdGUobnVsbCwgMTYpKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldE93bmVyUGFzc3dvcmRSMlIzUjQoCiAgICAgICAgICByLAogICAgICAgICAga2V5Qml0cywKICAgICAgICAgIHBhZGRlZFVzZXJQYXNzd29yZCwKICAgICAgICAgIHBhZGRlZE93bmVyUGFzc3dvcmQKICAgICAgICApIHsKICAgICAgICAgIGxldCBkaWdlc3QgPSBwYWRkZWRPd25lclBhc3N3b3JkOwogICAgICAgICAgbGV0IHJvdW5kID0gciA+PSAzID8gNTEgOiAxOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3VuZDsgaSsrKSB7CiAgICAgICAgICAgIGRpZ2VzdCA9IGNyeXB0b0pzLk1ENShkaWdlc3QpOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnN0IGtleSA9IGRpZ2VzdC5jbG9uZSgpOwogICAgICAgICAga2V5LnNpZ0J5dGVzID0ga2V5Qml0cyAvIDg7CiAgICAgICAgICBsZXQgY2lwaGVyID0gcGFkZGVkVXNlclBhc3N3b3JkOwogICAgICAgICAgcm91bmQgPSByID49IDMgPyAyMCA6IDE7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdW5kOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgeG9yUm91bmQgPSBNYXRoLmNlaWwoa2V5LnNpZ0J5dGVzIC8gNCk7CiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgeG9yUm91bmQ7IGorKykgewogICAgICAgICAgICAgIGtleS53b3Jkc1tqXSA9IGRpZ2VzdC53b3Jkc1tqXSBeIChpIHwgKGkgPDwgOCkgfCAoaSA8PCAxNikgfCAoaSA8PCAyNCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNpcGhlciA9IGNyeXB0b0pzLlJDNC5lbmNyeXB0KGNpcGhlciwga2V5KS5jaXBoZXJ0ZXh0OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGNpcGhlcjsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldEVuY3J5cHRpb25LZXlSMlIzUjQoCiAgICAgICAgICByLAogICAgICAgICAga2V5Qml0cywKICAgICAgICAgIGRvY3VtZW50SWQsCiAgICAgICAgICBwYWRkZWRVc2VyUGFzc3dvcmQsCiAgICAgICAgICBvd25lclBhc3N3b3JkRW50cnksCiAgICAgICAgICBwZXJtaXNzaW9ucwogICAgICAgICkgewogICAgICAgICAgbGV0IGtleSA9IHBhZGRlZFVzZXJQYXNzd29yZAogICAgICAgICAgICAuY2xvbmUoKQogICAgICAgICAgICAuY29uY2F0KG93bmVyUGFzc3dvcmRFbnRyeSkKICAgICAgICAgICAgLmNvbmNhdChjcnlwdG9Kcy5saWIuV29yZEFycmF5LmNyZWF0ZShbbHNiRmlyc3RXb3JkKHBlcm1pc3Npb25zKV0sIDQpKQogICAgICAgICAgICAuY29uY2F0KGNyeXB0b0pzLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKGRvY3VtZW50SWQpKTsKICAgICAgICAgIGNvbnN0IHJvdW5kID0gciA+PSAzID8gNTEgOiAxOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3VuZDsgaSsrKSB7CiAgICAgICAgICAgIGtleSA9IGNyeXB0b0pzLk1ENShrZXkpOwogICAgICAgICAgICBrZXkuc2lnQnl0ZXMgPSBrZXlCaXRzIC8gODsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBrZXk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRVc2VyUGFzc3dvcmRSNShwcm9jZXNzZWRVc2VyUGFzc3dvcmQsIGdlbmVyYXRlUmFuZG9tV29yZEFycmF5KSB7CiAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uU2FsdCA9IGdlbmVyYXRlUmFuZG9tV29yZEFycmF5KDgpOwogICAgICAgICAgY29uc3Qga2V5U2FsdCA9IGdlbmVyYXRlUmFuZG9tV29yZEFycmF5KDgpOwogICAgICAgICAgcmV0dXJuIGNyeXB0b0pzLlNIQTI1Nihwcm9jZXNzZWRVc2VyUGFzc3dvcmQuY2xvbmUoKS5jb25jYXQodmFsaWRhdGlvblNhbHQpKQogICAgICAgICAgICAuY29uY2F0KHZhbGlkYXRpb25TYWx0KQogICAgICAgICAgICAuY29uY2F0KGtleVNhbHQpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlckVuY3J5cHRpb25LZXlSNSgKICAgICAgICAgIHByb2Nlc3NlZFVzZXJQYXNzd29yZCwKICAgICAgICAgIHVzZXJLZXlTYWx0LAogICAgICAgICAgZW5jcnlwdGlvbktleQogICAgICAgICkgewogICAgICAgICAgY29uc3Qga2V5ID0gY3J5cHRvSnMuU0hBMjU2KAogICAgICAgICAgICBwcm9jZXNzZWRVc2VyUGFzc3dvcmQuY2xvbmUoKS5jb25jYXQodXNlcktleVNhbHQpCiAgICAgICAgICApOwogICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsKICAgICAgICAgICAgbW9kZTogY3J5cHRvSnMubW9kZS5DQkMsCiAgICAgICAgICAgIHBhZGRpbmc6IGNyeXB0b0pzLnBhZC5Ob1BhZGRpbmcsCiAgICAgICAgICAgIGl2OiBjcnlwdG9Kcy5saWIuV29yZEFycmF5LmNyZWF0ZShudWxsLCAxNikKICAgICAgICAgIH07CiAgICAgICAgICByZXR1cm4gY3J5cHRvSnMuQUVTLmVuY3J5cHQoZW5jcnlwdGlvbktleSwga2V5LCBvcHRpb25zKS5jaXBoZXJ0ZXh0OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0T3duZXJQYXNzd29yZFI1KAogICAgICAgICAgcHJvY2Vzc2VkT3duZXJQYXNzd29yZCwKICAgICAgICAgIHVzZXJQYXNzd29yZEVudHJ5LAogICAgICAgICAgZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkKICAgICAgICApIHsKICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25TYWx0ID0gZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkoOCk7CiAgICAgICAgICBjb25zdCBrZXlTYWx0ID0gZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkoOCk7CiAgICAgICAgICByZXR1cm4gY3J5cHRvSnMuU0hBMjU2KAogICAgICAgICAgICBwcm9jZXNzZWRPd25lclBhc3N3b3JkCiAgICAgICAgICAgICAgLmNsb25lKCkKICAgICAgICAgICAgICAuY29uY2F0KHZhbGlkYXRpb25TYWx0KQogICAgICAgICAgICAgIC5jb25jYXQodXNlclBhc3N3b3JkRW50cnkpCiAgICAgICAgICApCiAgICAgICAgICAgIC5jb25jYXQodmFsaWRhdGlvblNhbHQpCiAgICAgICAgICAgIC5jb25jYXQoa2V5U2FsdCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRPd25lckVuY3J5cHRpb25LZXlSNSgKICAgICAgICAgIHByb2Nlc3NlZE93bmVyUGFzc3dvcmQsCiAgICAgICAgICBvd25lcktleVNhbHQsCiAgICAgICAgICB1c2VyUGFzc3dvcmRFbnRyeSwKICAgICAgICAgIGVuY3J5cHRpb25LZXkKICAgICAgICApIHsKICAgICAgICAgIGNvbnN0IGtleSA9IGNyeXB0b0pzLlNIQTI1NigKICAgICAgICAgICAgcHJvY2Vzc2VkT3duZXJQYXNzd29yZAogICAgICAgICAgICAgIC5jbG9uZSgpCiAgICAgICAgICAgICAgLmNvbmNhdChvd25lcktleVNhbHQpCiAgICAgICAgICAgICAgLmNvbmNhdCh1c2VyUGFzc3dvcmRFbnRyeSkKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICAgICBtb2RlOiBjcnlwdG9Kcy5tb2RlLkNCQywKICAgICAgICAgICAgcGFkZGluZzogY3J5cHRvSnMucGFkLk5vUGFkZGluZywKICAgICAgICAgICAgaXY6IGNyeXB0b0pzLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKG51bGwsIDE2KQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiBjcnlwdG9Kcy5BRVMuZW5jcnlwdChlbmNyeXB0aW9uS2V5LCBrZXksIG9wdGlvbnMpLmNpcGhlcnRleHQ7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRFbmNyeXB0aW9uS2V5UjUoZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkpIHsKICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVJhbmRvbVdvcmRBcnJheSgzMik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRFbmNyeXB0ZWRQZXJtaXNzaW9uc1I1KAogICAgICAgICAgcGVybWlzc2lvbnMsCiAgICAgICAgICBlbmNyeXB0aW9uS2V5LAogICAgICAgICAgZ2VuZXJhdGVSYW5kb21Xb3JkQXJyYXkKICAgICAgICApIHsKICAgICAgICAgIGNvbnN0IGNpcGhlciA9IGNyeXB0b0pzLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKAogICAgICAgICAgICBbbHNiRmlyc3RXb3JkKHBlcm1pc3Npb25zKSwgMHhmZmZmZmZmZiwgMHg1NDYxNjQ2Ml0sCiAgICAgICAgICAgIDEyCiAgICAgICAgICApLmNvbmNhdChnZW5lcmF0ZVJhbmRvbVdvcmRBcnJheSg0KSk7CiAgICAgICAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICAgICBtb2RlOiBjcnlwdG9Kcy5tb2RlLkVDQiwKICAgICAgICAgICAgcGFkZGluZzogY3J5cHRvSnMucGFkLk5vUGFkZGluZwogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiBjcnlwdG9Kcy5BRVMuZW5jcnlwdChjaXBoZXIsIGVuY3J5cHRpb25LZXksIG9wdGlvbnMpLmNpcGhlcnRleHQ7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBwcm9jZXNzUGFzc3dvcmRSMlIzUjQocGFzc3dvcmQgPSAnJykgewogICAgICAgICAgY29uc3Qgb3V0ID0gbmV3IEJ1ZmZlcigzMik7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXNzd29yZC5sZW5ndGg7CiAgICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoICYmIGluZGV4IDwgMzIpIHsKICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhc3N3b3JkLmNoYXJDb2RlQXQoaW5kZXgpOwogICAgICAgICAgICBpZiAoY29kZSA+IDB4ZmYpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bhc3N3b3JkIGNvbnRhaW5zIG9uZSBvciBtb3JlIGludmFsaWQgY2hhcmFjdGVycy4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBvdXRbaW5kZXhdID0gY29kZTsKICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChpbmRleCA8IDMyKSB7CiAgICAgICAgICAgIG91dFtpbmRleF0gPSBQQVNTV09SRF9QQURESU5HW2luZGV4IC0gbGVuZ3RoXTsKICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjcnlwdG9Kcy5saWIuV29yZEFycmF5LmNyZWF0ZShvdXQpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc1Bhc3N3b3JkUjUocGFzc3dvcmQgPSAnJykgewogICAgICAgICAgcGFzc3dvcmQgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc2FzbHByZXAocGFzc3dvcmQpKSk7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbigxMjcsIHBhc3N3b3JkLmxlbmd0aCk7CiAgICAgICAgICBjb25zdCBvdXQgPSBuZXcgQnVmZmVyKGxlbmd0aCk7CgogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICBvdXRbaV0gPSBwYXNzd29yZC5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjcnlwdG9Kcy5saWIuV29yZEFycmF5LmNyZWF0ZShvdXQpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gbHNiRmlyc3RXb3JkKGRhdGEpIHsKICAgICAgICAgIHJldHVybiAoCiAgICAgICAgICAgICgoZGF0YSAmIDB4ZmYpIDw8IDI0KSB8CiAgICAgICAgICAgICgoZGF0YSAmIDB4ZmYwMCkgPDwgOCkgfAogICAgICAgICAgICAoKGRhdGEgPj4gOCkgJiAweGZmMDApIHwKICAgICAgICAgICAgKChkYXRhID4+IDI0KSAmIDB4ZmYpCiAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gd29yZEFycmF5VG9CdWZmZXIod29yZEFycmF5KSB7CiAgICAgICAgICBjb25zdCBieXRlQXJyYXkgPSBbXTsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZEFycmF5LnNpZ0J5dGVzOyBpKyspIHsKICAgICAgICAgICAgYnl0ZUFycmF5LnB1c2goCiAgICAgICAgICAgICAgKHdvcmRBcnJheS53b3Jkc1tNYXRoLmZsb29yKGkgLyA0KV0gPj4gKDggKiAoMyAtIChpICUgNCkpKSkgJiAweGZmCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oYnl0ZUFycmF5KTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IFBBU1NXT1JEX1BBRERJTkcgPSBbCiAgICAgICAgICAweDI4LAogICAgICAgICAgMHhiZiwKICAgICAgICAgIDB4NGUsCiAgICAgICAgICAweDVlLAogICAgICAgICAgMHg0ZSwKICAgICAgICAgIDB4NzUsCiAgICAgICAgICAweDhhLAogICAgICAgICAgMHg0MSwKICAgICAgICAgIDB4NjQsCiAgICAgICAgICAweDAwLAogICAgICAgICAgMHg0ZSwKICAgICAgICAgIDB4NTYsCiAgICAgICAgICAweGZmLAogICAgICAgICAgMHhmYSwKICAgICAgICAgIDB4MDEsCiAgICAgICAgICAweDA4LAogICAgICAgICAgMHgyZSwKICAgICAgICAgIDB4MmUsCiAgICAgICAgICAweDAwLAogICAgICAgICAgMHhiNiwKICAgICAgICAgIDB4ZDAsCiAgICAgICAgICAweDY4LAogICAgICAgICAgMHgzZSwKICAgICAgICAgIDB4ODAsCiAgICAgICAgICAweDJmLAogICAgICAgICAgMHgwYywKICAgICAgICAgIDB4YTksCiAgICAgICAgICAweGZlLAogICAgICAgICAgMHg2NCwKICAgICAgICAgIDB4NTMsCiAgICAgICAgICAweDY5LAogICAgICAgICAgMHg3YQogICAgICAgIF07CgogICAgICAgIGNvbnN0IHsgbnVtYmVyIH0gPSBQREZPYmplY3Q7CgogICAgICAgIGNsYXNzIFBERkdyYWRpZW50IHsKICAgICAgICAgIGNvbnN0cnVjdG9yKGRvYykgewogICAgICAgICAgICB0aGlzLmRvYyA9IGRvYzsKICAgICAgICAgICAgdGhpcy5zdG9wcyA9IFtdOwogICAgICAgICAgICB0aGlzLmVtYmVkZGVkID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtID0gWzEsIDAsIDAsIDEsIDAsIDBdOwogICAgICAgICAgfQoKICAgICAgICAgIHN0b3AocG9zLCBjb2xvciwgb3BhY2l0eSkgewogICAgICAgICAgICBpZiAob3BhY2l0eSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgb3BhY2l0eSA9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29sb3IgPSB0aGlzLmRvYy5fbm9ybWFsaXplQ29sb3IoY29sb3IpOwoKICAgICAgICAgICAgaWYgKHRoaXMuc3RvcHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgaWYgKGNvbG9yLmxlbmd0aCA9PT0gMykgewogICAgICAgICAgICAgICAgdGhpcy5fY29sb3JTcGFjZSA9ICdEZXZpY2VSR0InOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sb3IubGVuZ3RoID09PSA0KSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jb2xvclNwYWNlID0gJ0RldmljZUNNWUsnOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sb3IubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jb2xvclNwYWNlID0gJ0RldmljZUdyYXknOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29sb3Igc3BhY2UnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoCiAgICAgICAgICAgICAgKHRoaXMuX2NvbG9yU3BhY2UgPT09ICdEZXZpY2VSR0InICYmIGNvbG9yLmxlbmd0aCAhPT0gMykgfHwKICAgICAgICAgICAgICAodGhpcy5fY29sb3JTcGFjZSA9PT0gJ0RldmljZUNNWUsnICYmIGNvbG9yLmxlbmd0aCAhPT0gNCkgfHwKICAgICAgICAgICAgICAodGhpcy5fY29sb3JTcGFjZSA9PT0gJ0RldmljZUdyYXknICYmIGNvbG9yLmxlbmd0aCAhPT0gMSkKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbGwgZ3JhZGllbnQgc3RvcHMgbXVzdCB1c2UgdGhlIHNhbWUgY29sb3Igc3BhY2UnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgb3BhY2l0eSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG9wYWNpdHkpKTsKICAgICAgICAgICAgdGhpcy5zdG9wcy5wdXNoKFtwb3MsIGNvbG9yLCBvcGFjaXR5XSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQoKICAgICAgICAgIHNldFRyYW5zZm9ybShtMTEsIG0xMiwgbTIxLCBtMjIsIGR4LCBkeSkgewogICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IFttMTEsIG0xMiwgbTIxLCBtMjIsIGR4LCBkeV07CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQoKICAgICAgICAgIGVtYmVkKG0pIHsKICAgICAgICAgICAgbGV0IGZuOwogICAgICAgICAgICBjb25zdCBzdG9wc0xlbmd0aCA9IHRoaXMuc3RvcHMubGVuZ3RoOwogICAgICAgICAgICBpZiAoc3RvcHNMZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5lbWJlZGRlZCA9IHRydWU7CiAgICAgICAgICAgIHRoaXMubWF0cml4ID0gbTsKCiAgICAgICAgICAgIC8vIGlmIHRoZSBsYXN0IHN0b3AgY29tZXMgYmVmb3JlIDEwMCUsIGFkZCBhIGNvcHkgYXQgMTAwJQogICAgICAgICAgICBjb25zdCBsYXN0ID0gdGhpcy5zdG9wc1tzdG9wc0xlbmd0aCAtIDFdOwogICAgICAgICAgICBpZiAobGFzdFswXSA8IDEpIHsKICAgICAgICAgICAgICB0aGlzLnN0b3BzLnB1c2goWzEsIGxhc3RbMV0sIGxhc3RbMl1dKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgYm91bmRzID0gW107CiAgICAgICAgICAgIGNvbnN0IGVuY29kZSA9IFtdOwogICAgICAgICAgICBjb25zdCBzdG9wcyA9IFtdOwoKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdG9wc0xlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICAgIGVuY29kZS5wdXNoKDAsIDEpOwogICAgICAgICAgICAgIGlmIChpICsgMiAhPT0gc3RvcHNMZW5ndGgpIHsKICAgICAgICAgICAgICAgIGJvdW5kcy5wdXNoKHRoaXMuc3RvcHNbaSArIDFdWzBdKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGZuID0gdGhpcy5kb2MucmVmKHsKICAgICAgICAgICAgICAgIEZ1bmN0aW9uVHlwZTogMiwKICAgICAgICAgICAgICAgIERvbWFpbjogWzAsIDFdLAogICAgICAgICAgICAgICAgQzA6IHRoaXMuc3RvcHNbaSArIDBdWzFdLAogICAgICAgICAgICAgICAgQzE6IHRoaXMuc3RvcHNbaSArIDFdWzFdLAogICAgICAgICAgICAgICAgTjogMQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBzdG9wcy5wdXNoKGZuKTsKICAgICAgICAgICAgICBmbi5lbmQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gaWYgdGhlcmUgYXJlIG9ubHkgdHdvIHN0b3BzLCB3ZSBkb24ndCBuZWVkIGEgc3RpdGNoaW5nIGZ1bmN0aW9uCiAgICAgICAgICAgIGlmIChzdG9wc0xlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgIGZuID0gc3RvcHNbMF07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZm4gPSB0aGlzLmRvYy5yZWYoewogICAgICAgICAgICAgICAgRnVuY3Rpb25UeXBlOiAzLCAvLyBzdGl0Y2hpbmcgZnVuY3Rpb24KICAgICAgICAgICAgICAgIERvbWFpbjogWzAsIDFdLAogICAgICAgICAgICAgICAgRnVuY3Rpb25zOiBzdG9wcywKICAgICAgICAgICAgICAgIEJvdW5kczogYm91bmRzLAogICAgICAgICAgICAgICAgRW5jb2RlOiBlbmNvZGUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgZm4uZW5kKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMuaWQgPSBgU2gkeysrdGhpcy5kb2MuX2dyYWRDb3VudH1gOwoKICAgICAgICAgICAgY29uc3Qgc2hhZGVyID0gdGhpcy5zaGFkZXIoZm4pOwogICAgICAgICAgICBzaGFkZXIuZW5kKCk7CgogICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5kb2MucmVmKHsKICAgICAgICAgICAgICBUeXBlOiAnUGF0dGVybicsCiAgICAgICAgICAgICAgUGF0dGVyblR5cGU6IDIsCiAgICAgICAgICAgICAgU2hhZGluZzogc2hhZGVyLAogICAgICAgICAgICAgIE1hdHJpeDogdGhpcy5tYXRyaXgubWFwKG51bWJlcikKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBwYXR0ZXJuLmVuZCgpOwoKICAgICAgICAgICAgaWYgKHRoaXMuc3RvcHMuc29tZShzdG9wID0+IHN0b3BbMl0gPCAxKSkgewogICAgICAgICAgICAgIGxldCBncmFkID0gdGhpcy5vcGFjaXR5R3JhZGllbnQoKTsKICAgICAgICAgICAgICBncmFkLl9jb2xvclNwYWNlID0gJ0RldmljZUdyYXknOwoKICAgICAgICAgICAgICBmb3IgKGxldCBzdG9wIG9mIHRoaXMuc3RvcHMpIHsKICAgICAgICAgICAgICAgIGdyYWQuc3RvcChzdG9wWzBdLCBbc3RvcFsyXV0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZ3JhZCA9IGdyYWQuZW1iZWQodGhpcy5tYXRyaXgpOwoKICAgICAgICAgICAgICBjb25zdCBwYWdlQkJveCA9IFswLCAwLCB0aGlzLmRvYy5wYWdlLndpZHRoLCB0aGlzLmRvYy5wYWdlLmhlaWdodF07CgogICAgICAgICAgICAgIGNvbnN0IGZvcm0gPSB0aGlzLmRvYy5yZWYoewogICAgICAgICAgICAgICAgVHlwZTogJ1hPYmplY3QnLAogICAgICAgICAgICAgICAgU3VidHlwZTogJ0Zvcm0nLAogICAgICAgICAgICAgICAgRm9ybVR5cGU6IDEsCiAgICAgICAgICAgICAgICBCQm94OiBwYWdlQkJveCwKICAgICAgICAgICAgICAgIEdyb3VwOiB7CiAgICAgICAgICAgICAgICAgIFR5cGU6ICdHcm91cCcsCiAgICAgICAgICAgICAgICAgIFM6ICdUcmFuc3BhcmVuY3knLAogICAgICAgICAgICAgICAgICBDUzogJ0RldmljZUdyYXknCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgUmVzb3VyY2VzOiB7CiAgICAgICAgICAgICAgICAgIFByb2NTZXQ6IFsnUERGJywgJ1RleHQnLCAnSW1hZ2VCJywgJ0ltYWdlQycsICdJbWFnZUknXSwKICAgICAgICAgICAgICAgICAgUGF0dGVybjogewogICAgICAgICAgICAgICAgICAgIFNoMTogZ3JhZAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGZvcm0ud3JpdGUoJy9QYXR0ZXJuIGNzIC9TaDEgc2NuJyk7CiAgICAgICAgICAgICAgZm9ybS5lbmQoYCR7cGFnZUJCb3guam9pbignICcpfSByZSBmYCk7CgogICAgICAgICAgICAgIGNvbnN0IGdzdGF0ZSA9IHRoaXMuZG9jLnJlZih7CiAgICAgICAgICAgICAgICBUeXBlOiAnRXh0R1N0YXRlJywKICAgICAgICAgICAgICAgIFNNYXNrOiB7CiAgICAgICAgICAgICAgICAgIFR5cGU6ICdNYXNrJywKICAgICAgICAgICAgICAgICAgUzogJ0x1bWlub3NpdHknLAogICAgICAgICAgICAgICAgICBHOiBmb3JtCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGdzdGF0ZS5lbmQoKTsKCiAgICAgICAgICAgICAgY29uc3Qgb3BhY2l0eVBhdHRlcm4gPSB0aGlzLmRvYy5yZWYoewogICAgICAgICAgICAgICAgVHlwZTogJ1BhdHRlcm4nLAogICAgICAgICAgICAgICAgUGF0dGVyblR5cGU6IDEsCiAgICAgICAgICAgICAgICBQYWludFR5cGU6IDEsCiAgICAgICAgICAgICAgICBUaWxpbmdUeXBlOiAyLAogICAgICAgICAgICAgICAgQkJveDogcGFnZUJCb3gsCiAgICAgICAgICAgICAgICBYU3RlcDogcGFnZUJCb3hbMl0sCiAgICAgICAgICAgICAgICBZU3RlcDogcGFnZUJCb3hbM10sCiAgICAgICAgICAgICAgICBSZXNvdXJjZXM6IHsKICAgICAgICAgICAgICAgICAgUHJvY1NldDogWydQREYnLCAnVGV4dCcsICdJbWFnZUInLCAnSW1hZ2VDJywgJ0ltYWdlSSddLAogICAgICAgICAgICAgICAgICBQYXR0ZXJuOiB7CiAgICAgICAgICAgICAgICAgICAgU2gxOiBwYXR0ZXJuCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIEV4dEdTdGF0ZTogewogICAgICAgICAgICAgICAgICAgIEdzMTogZ3N0YXRlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgb3BhY2l0eVBhdHRlcm4ud3JpdGUoJy9HczEgZ3MgL1BhdHRlcm4gY3MgL1NoMSBzY24nKTsKICAgICAgICAgICAgICBvcGFjaXR5UGF0dGVybi5lbmQoYCR7cGFnZUJCb3guam9pbignICcpfSByZSBmYCk7CgogICAgICAgICAgICAgIHRoaXMuZG9jLnBhZ2UucGF0dGVybnNbdGhpcy5pZF0gPSBvcGFjaXR5UGF0dGVybjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLmRvYy5wYWdlLnBhdHRlcm5zW3RoaXMuaWRdID0gcGF0dGVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm47CiAgICAgICAgICB9CgogICAgICAgICAgYXBwbHkob3ApIHsKICAgICAgICAgICAgLy8gYXBwbHkgZ3JhZGllbnQgdHJhbnNmb3JtIHRvIGV4aXN0aW5nIGRvY3VtZW50IGN0bQogICAgICAgICAgICBjb25zdCBbbTAsIG0xLCBtMiwgbTMsIG00LCBtNV0gPSB0aGlzLmRvYy5fY3RtOwogICAgICAgICAgICBjb25zdCBbbTExLCBtMTIsIG0yMSwgbTIyLCBkeCwgZHldID0gdGhpcy50cmFuc2Zvcm07CiAgICAgICAgICAgIGNvbnN0IG0gPSBbCiAgICAgICAgICAgICAgbTAgKiBtMTEgKyBtMiAqIG0xMiwKICAgICAgICAgICAgICBtMSAqIG0xMSArIG0zICogbTEyLAogICAgICAgICAgICAgIG0wICogbTIxICsgbTIgKiBtMjIsCiAgICAgICAgICAgICAgbTEgKiBtMjEgKyBtMyAqIG0yMiwKICAgICAgICAgICAgICBtMCAqIGR4ICsgbTIgKiBkeSArIG00LAogICAgICAgICAgICAgIG0xICogZHggKyBtMyAqIGR5ICsgbTUKICAgICAgICAgICAgXTsKCiAgICAgICAgICAgIGlmICghdGhpcy5lbWJlZGRlZCB8fCBtLmpvaW4oJyAnKSAhPT0gdGhpcy5tYXRyaXguam9pbignICcpKSB7CiAgICAgICAgICAgICAgdGhpcy5lbWJlZChtKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5kb2MuYWRkQ29udGVudChgLyR7dGhpcy5pZH0gJHtvcH1gKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGNsYXNzIFBERkxpbmVhckdyYWRpZW50IGV4dGVuZHMgUERGR3JhZGllbnQgewogICAgICAgICAgY29uc3RydWN0b3IoZG9jLCB4MSwgeTEsIHgyLCB5MikgewogICAgICAgICAgICBzdXBlcihkb2MpOwogICAgICAgICAgICB0aGlzLngxID0geDE7CiAgICAgICAgICAgIHRoaXMueTEgPSB5MTsKICAgICAgICAgICAgdGhpcy54MiA9IHgyOwogICAgICAgICAgICB0aGlzLnkyID0geTI7CiAgICAgICAgICB9CgogICAgICAgICAgc2hhZGVyKGZuKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvYy5yZWYoewogICAgICAgICAgICAgIFNoYWRpbmdUeXBlOiAyLAogICAgICAgICAgICAgIENvbG9yU3BhY2U6IHRoaXMuX2NvbG9yU3BhY2UsCiAgICAgICAgICAgICAgQ29vcmRzOiBbdGhpcy54MSwgdGhpcy55MSwgdGhpcy54MiwgdGhpcy55Ml0sCiAgICAgICAgICAgICAgRnVuY3Rpb246IGZuLAogICAgICAgICAgICAgIEV4dGVuZDogW3RydWUsIHRydWVdCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIG9wYWNpdHlHcmFkaWVudCgpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBQREZMaW5lYXJHcmFkaWVudCh0aGlzLmRvYywgdGhpcy54MSwgdGhpcy55MSwgdGhpcy54MiwgdGhpcy55Mik7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjbGFzcyBQREZSYWRpYWxHcmFkaWVudCBleHRlbmRzIFBERkdyYWRpZW50IHsKICAgICAgICAgIGNvbnN0cnVjdG9yKGRvYywgeDEsIHkxLCByMSwgeDIsIHkyLCByMikgewogICAgICAgICAgICBzdXBlcihkb2MpOwogICAgICAgICAgICB0aGlzLmRvYyA9IGRvYzsKICAgICAgICAgICAgdGhpcy54MSA9IHgxOwogICAgICAgICAgICB0aGlzLnkxID0geTE7CiAgICAgICAgICAgIHRoaXMucjEgPSByMTsKICAgICAgICAgICAgdGhpcy54MiA9IHgyOwogICAgICAgICAgICB0aGlzLnkyID0geTI7CiAgICAgICAgICAgIHRoaXMucjIgPSByMjsKICAgICAgICAgIH0KCiAgICAgICAgICBzaGFkZXIoZm4pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jLnJlZih7CiAgICAgICAgICAgICAgU2hhZGluZ1R5cGU6IDMsCiAgICAgICAgICAgICAgQ29sb3JTcGFjZTogdGhpcy5fY29sb3JTcGFjZSwKICAgICAgICAgICAgICBDb29yZHM6IFt0aGlzLngxLCB0aGlzLnkxLCB0aGlzLnIxLCB0aGlzLngyLCB0aGlzLnkyLCB0aGlzLnIyXSwKICAgICAgICAgICAgICBGdW5jdGlvbjogZm4sCiAgICAgICAgICAgICAgRXh0ZW5kOiBbdHJ1ZSwgdHJ1ZV0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgb3BhY2l0eUdyYWRpZW50KCkgewogICAgICAgICAgICByZXR1cm4gbmV3IFBERlJhZGlhbEdyYWRpZW50KAogICAgICAgICAgICAgIHRoaXMuZG9jLAogICAgICAgICAgICAgIHRoaXMueDEsCiAgICAgICAgICAgICAgdGhpcy55MSwKICAgICAgICAgICAgICB0aGlzLnIxLAogICAgICAgICAgICAgIHRoaXMueDIsCiAgICAgICAgICAgICAgdGhpcy55MiwKICAgICAgICAgICAgICB0aGlzLnIyCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgR3JhZGllbnQgPSB7IFBERkdyYWRpZW50LCBQREZMaW5lYXJHcmFkaWVudCwgUERGUmFkaWFsR3JhZGllbnQgfTsKCiAgICAgICAgY29uc3QgeyBQREZHcmFkaWVudDogUERGR3JhZGllbnQkMSwgUERGTGluZWFyR3JhZGllbnQ6IFBERkxpbmVhckdyYWRpZW50JDEsIFBERlJhZGlhbEdyYWRpZW50OiBQREZSYWRpYWxHcmFkaWVudCQxIH0gPSBHcmFkaWVudDsKCiAgICAgICAgdmFyIENvbG9yTWl4aW4gPSB7CiAgICAgICAgICBpbml0Q29sb3IoKSB7CiAgICAgICAgICAgIC8vIFRoZSBvcGFjaXR5IGRpY3Rpb25hcmllcwogICAgICAgICAgICB0aGlzLl9vcGFjaXR5UmVnaXN0cnkgPSB7fTsKICAgICAgICAgICAgdGhpcy5fb3BhY2l0eUNvdW50ID0gMDsKICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9ncmFkQ291bnQgPSAwKTsKICAgICAgICAgIH0sCgogICAgICAgICAgX25vcm1hbGl6ZUNvbG9yKGNvbG9yKSB7CiAgICAgICAgICAgIGlmIChjb2xvciBpbnN0YW5jZW9mIFBERkdyYWRpZW50JDEpIHsKICAgICAgICAgICAgICByZXR1cm4gY29sb3I7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7CiAgICAgICAgICAgICAgICBpZiAoY29sb3IubGVuZ3RoID09PSA0KSB7CiAgICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3IucmVwbGFjZSgKICAgICAgICAgICAgICAgICAgICAvIyhbMC05QS1GXSkoWzAtOUEtRl0pKFswLTlBLUZdKS9pLAogICAgICAgICAgICAgICAgICAgICcjJDEkMSQyJDIkMyQzJwogICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29uc3QgaGV4ID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoMSksIDE2KTsKICAgICAgICAgICAgICAgIGNvbG9yID0gW2hleCA+PiAxNiwgKGhleCA+PiA4KSAmIDB4ZmYsIGhleCAmIDB4ZmZdOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZWRDb2xvcnNbY29sb3JdKSB7CiAgICAgICAgICAgICAgICBjb2xvciA9IG5hbWVkQ29sb3JzW2NvbG9yXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbG9yKSkgewogICAgICAgICAgICAgIC8vIFJHQgogICAgICAgICAgICAgIGlmIChjb2xvci5sZW5ndGggPT09IDMpIHsKICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3IubWFwKHBhcnQgPT4gcGFydCAvIDI1NSk7CiAgICAgICAgICAgICAgICAvLyBDTVlLCiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xvci5sZW5ndGggPT09IDQpIHsKICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3IubWFwKHBhcnQgPT4gcGFydCAvIDEwMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBjb2xvcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9LAoKICAgICAgICAgIF9zZXRDb2xvcihjb2xvciwgc3Ryb2tlKSB7CiAgICAgICAgICAgIGNvbG9yID0gdGhpcy5fbm9ybWFsaXplQ29sb3IoY29sb3IpOwogICAgICAgICAgICBpZiAoIWNvbG9yKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBvcCA9IHN0cm9rZSA/ICdTQ04nIDogJ3Njbic7CgogICAgICAgICAgICBpZiAoY29sb3IgaW5zdGFuY2VvZiBQREZHcmFkaWVudCQxKSB7CiAgICAgICAgICAgICAgdGhpcy5fc2V0Q29sb3JTcGFjZSgnUGF0dGVybicsIHN0cm9rZSk7CiAgICAgICAgICAgICAgY29sb3IuYXBwbHkob3ApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNvbnN0IHNwYWNlID0gY29sb3IubGVuZ3RoID09PSA0ID8gJ0RldmljZUNNWUsnIDogJ0RldmljZVJHQic7CiAgICAgICAgICAgICAgdGhpcy5fc2V0Q29sb3JTcGFjZShzcGFjZSwgc3Ryb2tlKTsKCiAgICAgICAgICAgICAgY29sb3IgPSBjb2xvci5qb2luKCcgJyk7CiAgICAgICAgICAgICAgdGhpcy5hZGRDb250ZW50KGAke2NvbG9yfSAke29wfWApOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0sCgogICAgICAgICAgX3NldENvbG9yU3BhY2Uoc3BhY2UsIHN0cm9rZSkgewogICAgICAgICAgICBjb25zdCBvcCA9IHN0cm9rZSA/ICdDUycgOiAnY3MnOwogICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRDb250ZW50KGAvJHtzcGFjZX0gJHtvcH1gKTsKICAgICAgICAgIH0sCgogICAgICAgICAgZmlsbENvbG9yKGNvbG9yLCBvcGFjaXR5KSB7CiAgICAgICAgICAgIGNvbnN0IHNldCA9IHRoaXMuX3NldENvbG9yKGNvbG9yLCBmYWxzZSk7CiAgICAgICAgICAgIGlmIChzZXQpIHsKICAgICAgICAgICAgICB0aGlzLmZpbGxPcGFjaXR5KG9wYWNpdHkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBzYXZlIHRoaXMgZm9yIHRleHQgd3JhcHBlciwgd2hpY2ggbmVlZHMgdG8gcmVzZXQKICAgICAgICAgICAgLy8gdGhlIGZpbGwgY29sb3Igb24gbmV3IHBhZ2VzCiAgICAgICAgICAgIHRoaXMuX2ZpbGxDb2xvciA9IFtjb2xvciwgb3BhY2l0eV07CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfSwKCiAgICAgICAgICBzdHJva2VDb2xvcihjb2xvciwgb3BhY2l0eSkgewogICAgICAgICAgICBjb25zdCBzZXQgPSB0aGlzLl9zZXRDb2xvcihjb2xvciwgdHJ1ZSk7CiAgICAgICAgICAgIGlmIChzZXQpIHsKICAgICAgICAgICAgICB0aGlzLnN0cm9rZU9wYWNpdHkob3BhY2l0eSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9LAoKICAgICAgICAgIG9wYWNpdHkob3BhY2l0eSkgewogICAgICAgICAgICB0aGlzLl9kb09wYWNpdHkob3BhY2l0eSwgb3BhY2l0eSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfSwKCiAgICAgICAgICBmaWxsT3BhY2l0eShvcGFjaXR5KSB7CiAgICAgICAgICAgIHRoaXMuX2RvT3BhY2l0eShvcGFjaXR5LCBudWxsKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9LAoKICAgICAgICAgIHN0cm9rZU9wYWNpdHkob3BhY2l0eSkgewogICAgICAgICAgICB0aGlzLl9kb09wYWNpdHkobnVsbCwgb3BhY2l0eSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfSwKCiAgICAgICAgICBfZG9PcGFjaXR5KGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5KSB7CiAgICAgICAgICAgIGxldCBkaWN0aW9uYXJ5LCBuYW1lOwogICAgICAgICAgICBpZiAoZmlsbE9wYWNpdHkgPT0gbnVsbCAmJiBzdHJva2VPcGFjaXR5ID09IG51bGwpIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChmaWxsT3BhY2l0eSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgZmlsbE9wYWNpdHkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBmaWxsT3BhY2l0eSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzdHJva2VPcGFjaXR5ICE9IG51bGwpIHsKICAgICAgICAgICAgICBzdHJva2VPcGFjaXR5ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgc3Ryb2tlT3BhY2l0eSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke2ZpbGxPcGFjaXR5fV8ke3N0cm9rZU9wYWNpdHl9YDsKCiAgICAgICAgICAgIGlmICh0aGlzLl9vcGFjaXR5UmVnaXN0cnlba2V5XSkgewogICAgICAgICAgICAgIFtkaWN0aW9uYXJ5LCBuYW1lXSA9IHRoaXMuX29wYWNpdHlSZWdpc3RyeVtrZXldOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGRpY3Rpb25hcnkgPSB7IFR5cGU6ICdFeHRHU3RhdGUnIH07CgogICAgICAgICAgICAgIGlmIChmaWxsT3BhY2l0eSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5LmNhID0gZmlsbE9wYWNpdHk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzdHJva2VPcGFjaXR5ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGRpY3Rpb25hcnkuQ0EgPSBzdHJva2VPcGFjaXR5OwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZGljdGlvbmFyeSA9IHRoaXMucmVmKGRpY3Rpb25hcnkpOwogICAgICAgICAgICAgIGRpY3Rpb25hcnkuZW5kKCk7CiAgICAgICAgICAgICAgY29uc3QgaWQgPSArK3RoaXMuX29wYWNpdHlDb3VudDsKICAgICAgICAgICAgICBuYW1lID0gYEdzJHtpZH1gOwogICAgICAgICAgICAgIHRoaXMuX29wYWNpdHlSZWdpc3RyeVtrZXldID0gW2RpY3Rpb25hcnksIG5hbWVdOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnBhZ2UuZXh0X2dzdGF0ZXNbbmFtZV0gPSBkaWN0aW9uYXJ5OwogICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRDb250ZW50KGAvJHtuYW1lfSBnc2ApOwogICAgICAgICAgfSwKCiAgICAgICAgICBsaW5lYXJHcmFkaWVudCh4MSwgeTEsIHgyLCB5MikgewogICAgICAgICAgICByZXR1cm4gbmV3IFBERkxpbmVhckdyYWRpZW50JDEodGhpcywgeDEsIHkxLCB4MiwgeTIpOwogICAgICAgICAgfSwKCiAgICAgICAgICByYWRpYWxHcmFkaWVudCh4MSwgeTEsIHIxLCB4MiwgeTIsIHIyKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgUERGUmFkaWFsR3JhZGllbnQkMSh0aGlzLCB4MSwgeTEsIHIxLCB4MiwgeTIsIHIyKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgbmFtZWRDb2xvcnMgPSB7CiAgICAgICAgICBhbGljZWJsdWU6IFsyNDAsIDI0OCwgMjU1XSwKICAgICAgICAgIGFudGlxdWV3aGl0ZTogWzI1MCwgMjM1LCAyMTVdLAogICAgICAgICAgYXF1YTogWzAsIDI1NSwgMjU1XSwKICAgICAgICAgIGFxdWFtYXJpbmU6IFsxMjcsIDI1NSwgMjEyXSwKICAgICAgICAgIGF6dXJlOiBbMjQwLCAyNTUsIDI1NV0sCiAgICAgICAgICBiZWlnZTogWzI0NSwgMjQ1LCAyMjBdLAogICAgICAgICAgYmlzcXVlOiBbMjU1LCAyMjgsIDE5Nl0sCiAgICAgICAgICBibGFjazogWzAsIDAsIDBdLAogICAgICAgICAgYmxhbmNoZWRhbG1vbmQ6IFsyNTUsIDIzNSwgMjA1XSwKICAgICAgICAgIGJsdWU6IFswLCAwLCAyNTVdLAogICAgICAgICAgYmx1ZXZpb2xldDogWzEzOCwgNDMsIDIyNl0sCiAgICAgICAgICBicm93bjogWzE2NSwgNDIsIDQyXSwKICAgICAgICAgIGJ1cmx5d29vZDogWzIyMiwgMTg0LCAxMzVdLAogICAgICAgICAgY2FkZXRibHVlOiBbOTUsIDE1OCwgMTYwXSwKICAgICAgICAgIGNoYXJ0cmV1c2U6IFsxMjcsIDI1NSwgMF0sCiAgICAgICAgICBjaG9jb2xhdGU6IFsyMTAsIDEwNSwgMzBdLAogICAgICAgICAgY29yYWw6IFsyNTUsIDEyNywgODBdLAogICAgICAgICAgY29ybmZsb3dlcmJsdWU6IFsxMDAsIDE0OSwgMjM3XSwKICAgICAgICAgIGNvcm5zaWxrOiBbMjU1LCAyNDgsIDIyMF0sCiAgICAgICAgICBjcmltc29uOiBbMjIwLCAyMCwgNjBdLAogICAgICAgICAgY3lhbjogWzAsIDI1NSwgMjU1XSwKICAgICAgICAgIGRhcmtibHVlOiBbMCwgMCwgMTM5XSwKICAgICAgICAgIGRhcmtjeWFuOiBbMCwgMTM5LCAxMzldLAogICAgICAgICAgZGFya2dvbGRlbnJvZDogWzE4NCwgMTM0LCAxMV0sCiAgICAgICAgICBkYXJrZ3JheTogWzE2OSwgMTY5LCAxNjldLAogICAgICAgICAgZGFya2dyZWVuOiBbMCwgMTAwLCAwXSwKICAgICAgICAgIGRhcmtncmV5OiBbMTY5LCAxNjksIDE2OV0sCiAgICAgICAgICBkYXJra2hha2k6IFsxODksIDE4MywgMTA3XSwKICAgICAgICAgIGRhcmttYWdlbnRhOiBbMTM5LCAwLCAxMzldLAogICAgICAgICAgZGFya29saXZlZ3JlZW46IFs4NSwgMTA3LCA0N10sCiAgICAgICAgICBkYXJrb3JhbmdlOiBbMjU1LCAxNDAsIDBdLAogICAgICAgICAgZGFya29yY2hpZDogWzE1MywgNTAsIDIwNF0sCiAgICAgICAgICBkYXJrcmVkOiBbMTM5LCAwLCAwXSwKICAgICAgICAgIGRhcmtzYWxtb246IFsyMzMsIDE1MCwgMTIyXSwKICAgICAgICAgIGRhcmtzZWFncmVlbjogWzE0MywgMTg4LCAxNDNdLAogICAgICAgICAgZGFya3NsYXRlYmx1ZTogWzcyLCA2MSwgMTM5XSwKICAgICAgICAgIGRhcmtzbGF0ZWdyYXk6IFs0NywgNzksIDc5XSwKICAgICAgICAgIGRhcmtzbGF0ZWdyZXk6IFs0NywgNzksIDc5XSwKICAgICAgICAgIGRhcmt0dXJxdW9pc2U6IFswLCAyMDYsIDIwOV0sCiAgICAgICAgICBkYXJrdmlvbGV0OiBbMTQ4LCAwLCAyMTFdLAogICAgICAgICAgZGVlcHBpbms6IFsyNTUsIDIwLCAxNDddLAogICAgICAgICAgZGVlcHNreWJsdWU6IFswLCAxOTEsIDI1NV0sCiAgICAgICAgICBkaW1ncmF5OiBbMTA1LCAxMDUsIDEwNV0sCiAgICAgICAgICBkaW1ncmV5OiBbMTA1LCAxMDUsIDEwNV0sCiAgICAgICAgICBkb2RnZXJibHVlOiBbMzAsIDE0NCwgMjU1XSwKICAgICAgICAgIGZpcmVicmljazogWzE3OCwgMzQsIDM0XSwKICAgICAgICAgIGZsb3JhbHdoaXRlOiBbMjU1LCAyNTAsIDI0MF0sCiAgICAgICAgICBmb3Jlc3RncmVlbjogWzM0LCAxMzksIDM0XSwKICAgICAgICAgIGZ1Y2hzaWE6IFsyNTUsIDAsIDI1NV0sCiAgICAgICAgICBnYWluc2Jvcm86IFsyMjAsIDIyMCwgMjIwXSwKICAgICAgICAgIGdob3N0d2hpdGU6IFsyNDgsIDI0OCwgMjU1XSwKICAgICAgICAgIGdvbGQ6IFsyNTUsIDIxNSwgMF0sCiAgICAgICAgICBnb2xkZW5yb2Q6IFsyMTgsIDE2NSwgMzJdLAogICAgICAgICAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLAogICAgICAgICAgZ3JleTogWzEyOCwgMTI4LCAxMjhdLAogICAgICAgICAgZ3JlZW46IFswLCAxMjgsIDBdLAogICAgICAgICAgZ3JlZW55ZWxsb3c6IFsxNzMsIDI1NSwgNDddLAogICAgICAgICAgaG9uZXlkZXc6IFsyNDAsIDI1NSwgMjQwXSwKICAgICAgICAgIGhvdHBpbms6IFsyNTUsIDEwNSwgMTgwXSwKICAgICAgICAgIGluZGlhbnJlZDogWzIwNSwgOTIsIDkyXSwKICAgICAgICAgIGluZGlnbzogWzc1LCAwLCAxMzBdLAogICAgICAgICAgaXZvcnk6IFsyNTUsIDI1NSwgMjQwXSwKICAgICAgICAgIGtoYWtpOiBbMjQwLCAyMzAsIDE0MF0sCiAgICAgICAgICBsYXZlbmRlcjogWzIzMCwgMjMwLCAyNTBdLAogICAgICAgICAgbGF2ZW5kZXJibHVzaDogWzI1NSwgMjQwLCAyNDVdLAogICAgICAgICAgbGF3bmdyZWVuOiBbMTI0LCAyNTIsIDBdLAogICAgICAgICAgbGVtb25jaGlmZm9uOiBbMjU1LCAyNTAsIDIwNV0sCiAgICAgICAgICBsaWdodGJsdWU6IFsxNzMsIDIxNiwgMjMwXSwKICAgICAgICAgIGxpZ2h0Y29yYWw6IFsyNDAsIDEyOCwgMTI4XSwKICAgICAgICAgIGxpZ2h0Y3lhbjogWzIyNCwgMjU1LCAyNTVdLAogICAgICAgICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IFsyNTAsIDI1MCwgMjEwXSwKICAgICAgICAgIGxpZ2h0Z3JheTogWzIxMSwgMjExLCAyMTFdLAogICAgICAgICAgbGlnaHRncmVlbjogWzE0NCwgMjM4LCAxNDRdLAogICAgICAgICAgbGlnaHRncmV5OiBbMjExLCAyMTEsIDIxMV0sCiAgICAgICAgICBsaWdodHBpbms6IFsyNTUsIDE4MiwgMTkzXSwKICAgICAgICAgIGxpZ2h0c2FsbW9uOiBbMjU1LCAxNjAsIDEyMl0sCiAgICAgICAgICBsaWdodHNlYWdyZWVuOiBbMzIsIDE3OCwgMTcwXSwKICAgICAgICAgIGxpZ2h0c2t5Ymx1ZTogWzEzNSwgMjA2LCAyNTBdLAogICAgICAgICAgbGlnaHRzbGF0ZWdyYXk6IFsxMTksIDEzNiwgMTUzXSwKICAgICAgICAgIGxpZ2h0c2xhdGVncmV5OiBbMTE5LCAxMzYsIDE1M10sCiAgICAgICAgICBsaWdodHN0ZWVsYmx1ZTogWzE3NiwgMTk2LCAyMjJdLAogICAgICAgICAgbGlnaHR5ZWxsb3c6IFsyNTUsIDI1NSwgMjI0XSwKICAgICAgICAgIGxpbWU6IFswLCAyNTUsIDBdLAogICAgICAgICAgbGltZWdyZWVuOiBbNTAsIDIwNSwgNTBdLAogICAgICAgICAgbGluZW46IFsyNTAsIDI0MCwgMjMwXSwKICAgICAgICAgIG1hZ2VudGE6IFsyNTUsIDAsIDI1NV0sCiAgICAgICAgICBtYXJvb246IFsxMjgsIDAsIDBdLAogICAgICAgICAgbWVkaXVtYXF1YW1hcmluZTogWzEwMiwgMjA1LCAxNzBdLAogICAgICAgICAgbWVkaXVtYmx1ZTogWzAsIDAsIDIwNV0sCiAgICAgICAgICBtZWRpdW1vcmNoaWQ6IFsxODYsIDg1LCAyMTFdLAogICAgICAgICAgbWVkaXVtcHVycGxlOiBbMTQ3LCAxMTIsIDIxOV0sCiAgICAgICAgICBtZWRpdW1zZWFncmVlbjogWzYwLCAxNzksIDExM10sCiAgICAgICAgICBtZWRpdW1zbGF0ZWJsdWU6IFsxMjMsIDEwNCwgMjM4XSwKICAgICAgICAgIG1lZGl1bXNwcmluZ2dyZWVuOiBbMCwgMjUwLCAxNTRdLAogICAgICAgICAgbWVkaXVtdHVycXVvaXNlOiBbNzIsIDIwOSwgMjA0XSwKICAgICAgICAgIG1lZGl1bXZpb2xldHJlZDogWzE5OSwgMjEsIDEzM10sCiAgICAgICAgICBtaWRuaWdodGJsdWU6IFsyNSwgMjUsIDExMl0sCiAgICAgICAgICBtaW50Y3JlYW06IFsyNDUsIDI1NSwgMjUwXSwKICAgICAgICAgIG1pc3R5cm9zZTogWzI1NSwgMjI4LCAyMjVdLAogICAgICAgICAgbW9jY2FzaW46IFsyNTUsIDIyOCwgMTgxXSwKICAgICAgICAgIG5hdmFqb3doaXRlOiBbMjU1LCAyMjIsIDE3M10sCiAgICAgICAgICBuYXZ5OiBbMCwgMCwgMTI4XSwKICAgICAgICAgIG9sZGxhY2U6IFsyNTMsIDI0NSwgMjMwXSwKICAgICAgICAgIG9saXZlOiBbMTI4LCAxMjgsIDBdLAogICAgICAgICAgb2xpdmVkcmFiOiBbMTA3LCAxNDIsIDM1XSwKICAgICAgICAgIG9yYW5nZTogWzI1NSwgMTY1LCAwXSwKICAgICAgICAgIG9yYW5nZXJlZDogWzI1NSwgNjksIDBdLAogICAgICAgICAgb3JjaGlkOiBbMjE4LCAxMTIsIDIxNF0sCiAgICAgICAgICBwYWxlZ29sZGVucm9kOiBbMjM4LCAyMzIsIDE3MF0sCiAgICAgICAgICBwYWxlZ3JlZW46IFsxNTIsIDI1MSwgMTUyXSwKICAgICAgICAgIHBhbGV0dXJxdW9pc2U6IFsxNzUsIDIzOCwgMjM4XSwKICAgICAgICAgIHBhbGV2aW9sZXRyZWQ6IFsyMTksIDExMiwgMTQ3XSwKICAgICAgICAgIHBhcGF5YXdoaXA6IFsyNTUsIDIzOSwgMjEzXSwKICAgICAgICAgIHBlYWNocHVmZjogWzI1NSwgMjE4LCAxODVdLAogICAgICAgICAgcGVydTogWzIwNSwgMTMzLCA2M10sCiAgICAgICAgICBwaW5rOiBbMjU1LCAxOTIsIDIwM10sCiAgICAgICAgICBwbHVtOiBbMjIxLCAxNjAsIDIyMV0sCiAgICAgICAgICBwb3dkZXJibHVlOiBbMTc2LCAyMjQsIDIzMF0sCiAgICAgICAgICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sCiAgICAgICAgICByZWQ6IFsyNTUsIDAsIDBdLAogICAgICAgICAgcm9zeWJyb3duOiBbMTg4LCAxNDMsIDE0M10sCiAgICAgICAgICByb3lhbGJsdWU6IFs2NSwgMTA1LCAyMjVdLAogICAgICAgICAgc2FkZGxlYnJvd246IFsxMzksIDY5LCAxOV0sCiAgICAgICAgICBzYWxtb246IFsyNTAsIDEyOCwgMTE0XSwKICAgICAgICAgIHNhbmR5YnJvd246IFsyNDQsIDE2NCwgOTZdLAogICAgICAgICAgc2VhZ3JlZW46IFs0NiwgMTM5LCA4N10sCiAgICAgICAgICBzZWFzaGVsbDogWzI1NSwgMjQ1LCAyMzhdLAogICAgICAgICAgc2llbm5hOiBbMTYwLCA4MiwgNDVdLAogICAgICAgICAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sCiAgICAgICAgICBza3libHVlOiBbMTM1LCAyMDYsIDIzNV0sCiAgICAgICAgICBzbGF0ZWJsdWU6IFsxMDYsIDkwLCAyMDVdLAogICAgICAgICAgc2xhdGVncmF5OiBbMTEyLCAxMjgsIDE0NF0sCiAgICAgICAgICBzbGF0ZWdyZXk6IFsxMTIsIDEyOCwgMTQ0XSwKICAgICAgICAgIHNub3c6IFsyNTUsIDI1MCwgMjUwXSwKICAgICAgICAgIHNwcmluZ2dyZWVuOiBbMCwgMjU1LCAxMjddLAogICAgICAgICAgc3RlZWxibHVlOiBbNzAsIDEzMCwgMTgwXSwKICAgICAgICAgIHRhbjogWzIxMCwgMTgwLCAxNDBdLAogICAgICAgICAgdGVhbDogWzAsIDEyOCwgMTI4XSwKICAgICAgICAgIHRoaXN0bGU6IFsyMTYsIDE5MSwgMjE2XSwKICAgICAgICAgIHRvbWF0bzogWzI1NSwgOTksIDcxXSwKICAgICAgICAgIHR1cnF1b2lzZTogWzY0LCAyMjQsIDIwOF0sCiAgICAgICAgICB2aW9sZXQ6IFsyMzgsIDEzMCwgMjM4XSwKICAgICAgICAgIHdoZWF0OiBbMjQ1LCAyMjIsIDE3OV0sCiAgICAgICAgICB3aGl0ZTogWzI1NSwgMjU1LCAyNTVdLAogICAgICAgICAgd2hpdGVzbW9rZTogWzI0NSwgMjQ1LCAyNDVdLAogICAgICAgICAgeWVsbG93OiBbMjU1LCAyNTUsIDBdLAogICAgICAgICAgeWVsbG93Z3JlZW46IFsxNTQsIDIwNSwgNTBdCiAgICAgICAgfTsKCiAgICAgICAgbGV0IGN4LCBjeSwgcHgsIHB5LCBzeCwgc3k7CgogICAgICAgIGN4ID0gY3kgPSBweCA9IHB5ID0gc3ggPSBzeSA9IDA7CgogICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB7CiAgICAgICAgICBBOiA3LAogICAgICAgICAgYTogNywKICAgICAgICAgIEM6IDYsCiAgICAgICAgICBjOiA2LAogICAgICAgICAgSDogMSwKICAgICAgICAgIGg6IDEsCiAgICAgICAgICBMOiAyLAogICAgICAgICAgbDogMiwKICAgICAgICAgIE06IDIsCiAgICAgICAgICBtOiAyLAogICAgICAgICAgUTogNCwKICAgICAgICAgIHE6IDQsCiAgICAgICAgICBTOiA0LAogICAgICAgICAgczogNCwKICAgICAgICAgIFQ6IDIsCiAgICAgICAgICB0OiAyLAogICAgICAgICAgVjogMSwKICAgICAgICAgIHY6IDEsCiAgICAgICAgICBaOiAwLAogICAgICAgICAgejogMAogICAgICAgIH07CgogICAgICAgIGNvbnN0IHBhcnNlID0gZnVuY3Rpb24ocGF0aCkgewogICAgICAgICAgbGV0IGNtZDsKICAgICAgICAgIGNvbnN0IHJldCA9IFtdOwogICAgICAgICAgbGV0IGFyZ3MgPSBbXTsKICAgICAgICAgIGxldCBjdXJBcmcgPSAnJzsKICAgICAgICAgIGxldCBmb3VuZERlY2ltYWwgPSBmYWxzZTsKICAgICAgICAgIGxldCBwYXJhbXMgPSAwOwoKICAgICAgICAgIGZvciAobGV0IGMgb2YgcGF0aCkgewogICAgICAgICAgICBpZiAocGFyYW1ldGVyc1tjXSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1ldGVyc1tjXTsKICAgICAgICAgICAgICBpZiAoY21kKSB7CiAgICAgICAgICAgICAgICAvLyBzYXZlIGV4aXN0aW5nIGNvbW1hbmQKICAgICAgICAgICAgICAgIGlmIChjdXJBcmcubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICBhcmdzW2FyZ3MubGVuZ3RoXSA9ICtjdXJBcmc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXRbcmV0Lmxlbmd0aF0gPSB7IGNtZCwgYXJncyB9OwoKICAgICAgICAgICAgICAgIGFyZ3MgPSBbXTsKICAgICAgICAgICAgICAgIGN1ckFyZyA9ICcnOwogICAgICAgICAgICAgICAgZm91bmREZWNpbWFsID0gZmFsc2U7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjbWQgPSBjOwogICAgICAgICAgICB9IGVsc2UgaWYgKAogICAgICAgICAgICAgIFsnICcsICcsJ10uaW5jbHVkZXMoYykgfHwKICAgICAgICAgICAgICAoYyA9PT0gJy0nICYmIGN1ckFyZy5sZW5ndGggPiAwICYmIGN1ckFyZ1tjdXJBcmcubGVuZ3RoIC0gMV0gIT09ICdlJykgfHwKICAgICAgICAgICAgICAoYyA9PT0gJy4nICYmIGZvdW5kRGVjaW1hbCkKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgaWYgKGN1ckFyZy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSBwYXJhbXMpIHsKICAgICAgICAgICAgICAgIC8vIGhhbmRsZSByZXVzZWQgY29tbWFuZHMKICAgICAgICAgICAgICAgIHJldFtyZXQubGVuZ3RoXSA9IHsgY21kLCBhcmdzIH07CiAgICAgICAgICAgICAgICBhcmdzID0gWytjdXJBcmddOwoKICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBhc3N1bWVkIGNvbW1hbmRzCiAgICAgICAgICAgICAgICBpZiAoY21kID09PSAnTScpIHsKICAgICAgICAgICAgICAgICAgY21kID0gJ0wnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNtZCA9PT0gJ20nKSB7CiAgICAgICAgICAgICAgICAgIGNtZCA9ICdsJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYXJnc1thcmdzLmxlbmd0aF0gPSArY3VyQXJnOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZm91bmREZWNpbWFsID0gYyA9PT0gJy4nOwoKICAgICAgICAgICAgICAvLyBmaXggZm9yIG5lZ2F0aXZlIG51bWJlcnMgb3IgcmVwZWF0ZWQgZGVjaW1hbHMgd2l0aCBubyBkZWxpbWV0ZXIgYmV0d2VlbiBjb21tYW5kcwogICAgICAgICAgICAgIGN1ckFyZyA9IFsnLScsICcuJ10uaW5jbHVkZXMoYykgPyBjIDogJyc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY3VyQXJnICs9IGM7CiAgICAgICAgICAgICAgaWYgKGMgPT09ICcuJykgewogICAgICAgICAgICAgICAgZm91bmREZWNpbWFsID0gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBhZGQgdGhlIGxhc3QgY29tbWFuZAogICAgICAgICAgaWYgKGN1ckFyZy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gcGFyYW1zKSB7CiAgICAgICAgICAgICAgLy8gaGFuZGxlIHJldXNlZCBjb21tYW5kcwogICAgICAgICAgICAgIHJldFtyZXQubGVuZ3RoXSA9IHsgY21kLCBhcmdzIH07CiAgICAgICAgICAgICAgYXJncyA9IFsrY3VyQXJnXTsKCiAgICAgICAgICAgICAgLy8gaGFuZGxlIGFzc3VtZWQgY29tbWFuZHMKICAgICAgICAgICAgICBpZiAoY21kID09PSAnTScpIHsKICAgICAgICAgICAgICAgIGNtZCA9ICdMJzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGNtZCA9PT0gJ20nKSB7CiAgICAgICAgICAgICAgICBjbWQgPSAnbCc7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGFyZ3NbYXJncy5sZW5ndGhdID0gK2N1ckFyZzsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldFtyZXQubGVuZ3RoXSA9IHsgY21kLCBhcmdzIH07CgogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBhcHBseSA9IGZ1bmN0aW9uKGNvbW1hbmRzLCBkb2MpIHsKICAgICAgICAgIC8vIGN1cnJlbnQgcG9pbnQsIGNvbnRyb2wgcG9pbnQsIGFuZCBzdWJwYXRoIHN0YXJ0aW5nIHBvaW50CiAgICAgICAgICBjeCA9IGN5ID0gcHggPSBweSA9IHN4ID0gc3kgPSAwOwoKICAgICAgICAgIC8vIHJ1biB0aGUgY29tbWFuZHMKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgYyA9IGNvbW1hbmRzW2ldOwogICAgICAgICAgICBpZiAodHlwZW9mIHJ1bm5lcnNbYy5jbWRdID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgcnVubmVyc1tjLmNtZF0oZG9jLCBjLmFyZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgcnVubmVycyA9IHsKICAgICAgICAgIE0oZG9jLCBhKSB7CiAgICAgICAgICAgIGN4ID0gYVswXTsKICAgICAgICAgICAgY3kgPSBhWzFdOwogICAgICAgICAgICBweCA9IHB5ID0gbnVsbDsKICAgICAgICAgICAgc3ggPSBjeDsKICAgICAgICAgICAgc3kgPSBjeTsKICAgICAgICAgICAgcmV0dXJuIGRvYy5tb3ZlVG8oY3gsIGN5KTsKICAgICAgICAgIH0sCgogICAgICAgICAgbShkb2MsIGEpIHsKICAgICAgICAgICAgY3ggKz0gYVswXTsKICAgICAgICAgICAgY3kgKz0gYVsxXTsKICAgICAgICAgICAgcHggPSBweSA9IG51bGw7CiAgICAgICAgICAgIHN4ID0gY3g7CiAgICAgICAgICAgIHN5ID0gY3k7CiAgICAgICAgICAgIHJldHVybiBkb2MubW92ZVRvKGN4LCBjeSk7CiAgICAgICAgICB9LAoKICAgICAgICAgIEMoZG9jLCBhKSB7CiAgICAgICAgICAgIGN4ID0gYVs0XTsKICAgICAgICAgICAgY3kgPSBhWzVdOwogICAgICAgICAgICBweCA9IGFbMl07CiAgICAgICAgICAgIHB5ID0gYVszXTsKICAgICAgICAgICAgcmV0dXJuIGRvYy5iZXppZXJDdXJ2ZVRvKC4uLmEpOwogICAgICAgICAgfSwKCiAgICAgICAgICBjKGRvYywgYSkgewogICAgICAgICAgICBkb2MuYmV6aWVyQ3VydmVUbygKICAgICAgICAgICAgICBhWzBdICsgY3gsCiAgICAgICAgICAgICAgYVsxXSArIGN5LAogICAgICAgICAgICAgIGFbMl0gKyBjeCwKICAgICAgICAgICAgICBhWzNdICsgY3ksCiAgICAgICAgICAgICAgYVs0XSArIGN4LAogICAgICAgICAgICAgIGFbNV0gKyBjeQogICAgICAgICAgICApOwogICAgICAgICAgICBweCA9IGN4ICsgYVsyXTsKICAgICAgICAgICAgcHkgPSBjeSArIGFbM107CiAgICAgICAgICAgIGN4ICs9IGFbNF07CiAgICAgICAgICAgIHJldHVybiAoY3kgKz0gYVs1XSk7CiAgICAgICAgICB9LAoKICAgICAgICAgIFMoZG9jLCBhKSB7CiAgICAgICAgICAgIGlmIChweCA9PT0gbnVsbCkgewogICAgICAgICAgICAgIHB4ID0gY3g7CiAgICAgICAgICAgICAgcHkgPSBjeTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZG9jLmJlemllckN1cnZlVG8oY3ggLSAocHggLSBjeCksIGN5IC0gKHB5IC0gY3kpLCBhWzBdLCBhWzFdLCBhWzJdLCBhWzNdKTsKICAgICAgICAgICAgcHggPSBhWzBdOwogICAgICAgICAgICBweSA9IGFbMV07CiAgICAgICAgICAgIGN4ID0gYVsyXTsKICAgICAgICAgICAgcmV0dXJuIChjeSA9IGFbM10pOwogICAgICAgICAgfSwKCiAgICAgICAgICBzKGRvYywgYSkgewogICAgICAgICAgICBpZiAocHggPT09IG51bGwpIHsKICAgICAgICAgICAgICBweCA9IGN4OwogICAgICAgICAgICAgIHB5ID0gY3k7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGRvYy5iZXppZXJDdXJ2ZVRvKAogICAgICAgICAgICAgIGN4IC0gKHB4IC0gY3gpLAogICAgICAgICAgICAgIGN5IC0gKHB5IC0gY3kpLAogICAgICAgICAgICAgIGN4ICsgYVswXSwKICAgICAgICAgICAgICBjeSArIGFbMV0sCiAgICAgICAgICAgICAgY3ggKyBhWzJdLAogICAgICAgICAgICAgIGN5ICsgYVszXQogICAgICAgICAgICApOwogICAgICAgICAgICBweCA9IGN4ICsgYVswXTsKICAgICAgICAgICAgcHkgPSBjeSArIGFbMV07CiAgICAgICAgICAgIGN4ICs9IGFbMl07CiAgICAgICAgICAgIHJldHVybiAoY3kgKz0gYVszXSk7CiAgICAgICAgICB9LAoKICAgICAgICAgIFEoZG9jLCBhKSB7CiAgICAgICAgICAgIHB4ID0gYVswXTsKICAgICAgICAgICAgcHkgPSBhWzFdOwogICAgICAgICAgICBjeCA9IGFbMl07CiAgICAgICAgICAgIGN5ID0gYVszXTsKICAgICAgICAgICAgcmV0dXJuIGRvYy5xdWFkcmF0aWNDdXJ2ZVRvKGFbMF0sIGFbMV0sIGN4LCBjeSk7CiAgICAgICAgICB9LAoKICAgICAgICAgIHEoZG9jLCBhKSB7CiAgICAgICAgICAgIGRvYy5xdWFkcmF0aWNDdXJ2ZVRvKGFbMF0gKyBjeCwgYVsxXSArIGN5LCBhWzJdICsgY3gsIGFbM10gKyBjeSk7CiAgICAgICAgICAgIHB4ID0gY3ggKyBhWzBdOwogICAgICAgICAgICBweSA9IGN5ICsgYVsxXTsKICAgICAgICAgICAgY3ggKz0gYVsyXTsKICAgICAgICAgICAgcmV0dXJuIChjeSArPSBhWzNdKTsKICAgICAgICAgIH0sCgogICAgICAgICAgVChkb2MsIGEpIHsKICAgICAgICAgICAgaWYgKHB4ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgcHggPSBjeDsKICAgICAgICAgICAgICBweSA9IGN5OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHB4ID0gY3ggLSAocHggLSBjeCk7CiAgICAgICAgICAgICAgcHkgPSBjeSAtIChweSAtIGN5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZG9jLnF1YWRyYXRpY0N1cnZlVG8ocHgsIHB5LCBhWzBdLCBhWzFdKTsKICAgICAgICAgICAgcHggPSBjeCAtIChweCAtIGN4KTsKICAgICAgICAgICAgcHkgPSBjeSAtIChweSAtIGN5KTsKICAgICAgICAgICAgY3ggPSBhWzBdOwogICAgICAgICAgICByZXR1cm4gKGN5ID0gYVsxXSk7CiAgICAgICAgICB9LAoKICAgICAgICAgIHQoZG9jLCBhKSB7CiAgICAgICAgICAgIGlmIChweCA9PT0gbnVsbCkgewogICAgICAgICAgICAgIHB4ID0gY3g7CiAgICAgICAgICAgICAgcHkgPSBjeTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBweCA9IGN4IC0gKHB4IC0gY3gpOwogICAgICAgICAgICAgIHB5ID0gY3kgLSAocHkgLSBjeSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGRvYy5xdWFkcmF0aWNDdXJ2ZVRvKHB4LCBweSwgY3ggKyBhWzBdLCBjeSArIGFbMV0pOwogICAgICAgICAgICBjeCArPSBhWzBdOwogICAgICAgICAgICByZXR1cm4gKGN5ICs9IGFbMV0pOwogICAgICAgICAgfSwKCiAgICAgICAgICBBKGRvYywgYSkgewogICAgICAgICAgICBzb2x2ZUFyYyhkb2MsIGN4LCBjeSwgYSk7CiAgICAgICAgICAgIGN4ID0gYVs1XTsKICAgICAgICAgICAgcmV0dXJuIChjeSA9IGFbNl0pOwogICAgICAgICAgfSwKCiAgICAgICAgICBhKGRvYywgYSkgewogICAgICAgICAgICBhWzVdICs9IGN4OwogICAgICAgICAgICBhWzZdICs9IGN5OwogICAgICAgICAgICBzb2x2ZUFyYyhkb2MsIGN4LCBjeSwgYSk7CiAgICAgICAgICAgIGN4ID0gYVs1XTsKICAgICAgICAgICAgcmV0dXJuIChjeSA9IGFbNl0pOwogICAgICAgICAgfSwKCiAgICAgICAgICBMKGRvYywgYSkgewogICAgICAgICAgICBjeCA9IGFbMF07CiAgICAgICAgICAgIGN5ID0gYVsxXTsKICAgICAgICAgICAgcHggPSBweSA9IG51bGw7CiAgICAgICAgICAgIHJldHVybiBkb2MubGluZVRvKGN4LCBjeSk7CiAgICAgICAgICB9LAoKICAgICAgICAgIGwoZG9jLCBhKSB7CiAgICAgICAgICAgIGN4ICs9IGFbMF07CiAgICAgICAgICAgIGN5ICs9IGFbMV07CiAgICAgICAgICAgIHB4ID0gcHkgPSBudWxsOwogICAgICAgICAgICByZXR1cm4gZG9jLmxpbmVUbyhjeCwgY3kpOwogICAgICAgICAgfSwKCiAgICAgICAgICBIKGRvYywgYSkgewogICAgICAgICAgICBjeCA9IGFbMF07CiAgICAgICAgICAgIHB4ID0gcHkgPSBudWxsOwogICAgICAgICAgICByZXR1cm4gZG9jLmxpbmVUbyhjeCwgY3kpOwogICAgICAgICAgfSwKCiAgICAgICAgICBoKGRvYywgYSkgewogICAgICAgICAgICBjeCArPSBhWzBdOwogICAgICAgICAgICBweCA9IHB5ID0gbnVsbDsKICAgICAgICAgICAgcmV0dXJuIGRvYy5saW5lVG8oY3gsIGN5KTsKICAgICAgICAgIH0sCgogICAgICAgICAgVihkb2MsIGEpIHsKICAgICAgICAgICAgY3kgPSBhWzBdOwogICAgICAgICAgICBweCA9IHB5ID0gbnVsbDsKICAgICAgICAgICAgcmV0dXJuIGRvYy5saW5lVG8oY3gsIGN5KTsKICAgICAgICAgIH0sCgogICAgICAgICAgdihkb2MsIGEpIHsKICAgICAgICAgICAgY3kgKz0gYVswXTsKICAgICAgICAgICAgcHggPSBweSA9IG51bGw7CiAgICAgICAgICAgIHJldHVybiBkb2MubGluZVRvKGN4LCBjeSk7CiAgICAgICAgICB9LAoKICAgICAgICAgIFooZG9jKSB7CiAgICAgICAgICAgIGRvYy5jbG9zZVBhdGgoKTsKICAgICAgICAgICAgY3ggPSBzeDsKICAgICAgICAgICAgcmV0dXJuIChjeSA9IHN5KTsKICAgICAgICAgIH0sCgogICAgICAgICAgeihkb2MpIHsKICAgICAgICAgICAgZG9jLmNsb3NlUGF0aCgpOwogICAgICAgICAgICBjeCA9IHN4OwogICAgICAgICAgICByZXR1cm4gKGN5ID0gc3kpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNvbnN0IHNvbHZlQXJjID0gZnVuY3Rpb24oZG9jLCB4LCB5LCBjb29yZHMpIHsKICAgICAgICAgIGNvbnN0IFtyeCwgcnksIHJvdCwgbGFyZ2UsIHN3ZWVwLCBleCwgZXldID0gY29vcmRzOwogICAgICAgICAgY29uc3Qgc2VncyA9IGFyY1RvU2VnbWVudHMoZXgsIGV5LCByeCwgcnksIGxhcmdlLCBzd2VlcCwgcm90LCB4LCB5KTsKCiAgICAgICAgICBmb3IgKGxldCBzZWcgb2Ygc2VncykgewogICAgICAgICAgICBjb25zdCBiZXogPSBzZWdtZW50VG9CZXppZXIoLi4uc2VnKTsKICAgICAgICAgICAgZG9jLmJlemllckN1cnZlVG8oLi4uYmV6KTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAvLyBmcm9tIElua3NjYXBlIHN2Z3RvcGRmLCB0aGFua3MhCiAgICAgICAgY29uc3QgYXJjVG9TZWdtZW50cyA9IGZ1bmN0aW9uKHgsIHksIHJ4LCByeSwgbGFyZ2UsIHN3ZWVwLCByb3RhdGVYLCBveCwgb3kpIHsKICAgICAgICAgIGNvbnN0IHRoID0gcm90YXRlWCAqIChNYXRoLlBJIC8gMTgwKTsKICAgICAgICAgIGNvbnN0IHNpbl90aCA9IE1hdGguc2luKHRoKTsKICAgICAgICAgIGNvbnN0IGNvc190aCA9IE1hdGguY29zKHRoKTsKICAgICAgICAgIHJ4ID0gTWF0aC5hYnMocngpOwogICAgICAgICAgcnkgPSBNYXRoLmFicyhyeSk7CiAgICAgICAgICBweCA9IGNvc190aCAqIChveCAtIHgpICogMC41ICsgc2luX3RoICogKG95IC0geSkgKiAwLjU7CiAgICAgICAgICBweSA9IGNvc190aCAqIChveSAtIHkpICogMC41IC0gc2luX3RoICogKG94IC0geCkgKiAwLjU7CiAgICAgICAgICBsZXQgcGwgPSAocHggKiBweCkgLyAocnggKiByeCkgKyAocHkgKiBweSkgLyAocnkgKiByeSk7CiAgICAgICAgICBpZiAocGwgPiAxKSB7CiAgICAgICAgICAgIHBsID0gTWF0aC5zcXJ0KHBsKTsKICAgICAgICAgICAgcnggKj0gcGw7CiAgICAgICAgICAgIHJ5ICo9IHBsOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnN0IGEwMCA9IGNvc190aCAvIHJ4OwogICAgICAgICAgY29uc3QgYTAxID0gc2luX3RoIC8gcng7CiAgICAgICAgICBjb25zdCBhMTAgPSAtc2luX3RoIC8gcnk7CiAgICAgICAgICBjb25zdCBhMTEgPSBjb3NfdGggLyByeTsKICAgICAgICAgIGNvbnN0IHgwID0gYTAwICogb3ggKyBhMDEgKiBveTsKICAgICAgICAgIGNvbnN0IHkwID0gYTEwICogb3ggKyBhMTEgKiBveTsKICAgICAgICAgIGNvbnN0IHgxID0gYTAwICogeCArIGEwMSAqIHk7CiAgICAgICAgICBjb25zdCB5MSA9IGExMCAqIHggKyBhMTEgKiB5OwoKICAgICAgICAgIGNvbnN0IGQgPSAoeDEgLSB4MCkgKiAoeDEgLSB4MCkgKyAoeTEgLSB5MCkgKiAoeTEgLSB5MCk7CiAgICAgICAgICBsZXQgc2ZhY3Rvcl9zcSA9IDEgLyBkIC0gMC4yNTsKICAgICAgICAgIGlmIChzZmFjdG9yX3NxIDwgMCkgewogICAgICAgICAgICBzZmFjdG9yX3NxID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIGxldCBzZmFjdG9yID0gTWF0aC5zcXJ0KHNmYWN0b3Jfc3EpOwogICAgICAgICAgaWYgKHN3ZWVwID09PSBsYXJnZSkgewogICAgICAgICAgICBzZmFjdG9yID0gLXNmYWN0b3I7CiAgICAgICAgICB9CgogICAgICAgICAgY29uc3QgeGMgPSAwLjUgKiAoeDAgKyB4MSkgLSBzZmFjdG9yICogKHkxIC0geTApOwogICAgICAgICAgY29uc3QgeWMgPSAwLjUgKiAoeTAgKyB5MSkgKyBzZmFjdG9yICogKHgxIC0geDApOwoKICAgICAgICAgIGNvbnN0IHRoMCA9IE1hdGguYXRhbjIoeTAgLSB5YywgeDAgLSB4Yyk7CiAgICAgICAgICBjb25zdCB0aDEgPSBNYXRoLmF0YW4yKHkxIC0geWMsIHgxIC0geGMpOwoKICAgICAgICAgIGxldCB0aF9hcmMgPSB0aDEgLSB0aDA7CiAgICAgICAgICBpZiAodGhfYXJjIDwgMCAmJiBzd2VlcCA9PT0gMSkgewogICAgICAgICAgICB0aF9hcmMgKz0gMiAqIE1hdGguUEk7CiAgICAgICAgICB9IGVsc2UgaWYgKHRoX2FyYyA+IDAgJiYgc3dlZXAgPT09IDApIHsKICAgICAgICAgICAgdGhfYXJjIC09IDIgKiBNYXRoLlBJOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnN0IHNlZ21lbnRzID0gTWF0aC5jZWlsKE1hdGguYWJzKHRoX2FyYyAvIChNYXRoLlBJICogMC41ICsgMC4wMDEpKSk7CiAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTsKCiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgdGgyID0gdGgwICsgKGkgKiB0aF9hcmMpIC8gc2VnbWVudHM7CiAgICAgICAgICAgIGNvbnN0IHRoMyA9IHRoMCArICgoaSArIDEpICogdGhfYXJjKSAvIHNlZ21lbnRzOwogICAgICAgICAgICByZXN1bHRbaV0gPSBbeGMsIHljLCB0aDIsIHRoMywgcngsIHJ5LCBzaW5fdGgsIGNvc190aF07CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBzZWdtZW50VG9CZXppZXIgPSBmdW5jdGlvbihjeCwgY3ksIHRoMCwgdGgxLCByeCwgcnksIHNpbl90aCwgY29zX3RoKSB7CiAgICAgICAgICBjb25zdCBhMDAgPSBjb3NfdGggKiByeDsKICAgICAgICAgIGNvbnN0IGEwMSA9IC1zaW5fdGggKiByeTsKICAgICAgICAgIGNvbnN0IGExMCA9IHNpbl90aCAqIHJ4OwogICAgICAgICAgY29uc3QgYTExID0gY29zX3RoICogcnk7CgogICAgICAgICAgY29uc3QgdGhfaGFsZiA9IDAuNSAqICh0aDEgLSB0aDApOwogICAgICAgICAgY29uc3QgdCA9CiAgICAgICAgICAgICgoOCAvIDMpICogTWF0aC5zaW4odGhfaGFsZiAqIDAuNSkgKiBNYXRoLnNpbih0aF9oYWxmICogMC41KSkgLwogICAgICAgICAgICBNYXRoLnNpbih0aF9oYWxmKTsKICAgICAgICAgIGNvbnN0IHgxID0gY3ggKyBNYXRoLmNvcyh0aDApIC0gdCAqIE1hdGguc2luKHRoMCk7CiAgICAgICAgICBjb25zdCB5MSA9IGN5ICsgTWF0aC5zaW4odGgwKSArIHQgKiBNYXRoLmNvcyh0aDApOwogICAgICAgICAgY29uc3QgeDMgPSBjeCArIE1hdGguY29zKHRoMSk7CiAgICAgICAgICBjb25zdCB5MyA9IGN5ICsgTWF0aC5zaW4odGgxKTsKICAgICAgICAgIGNvbnN0IHgyID0geDMgKyB0ICogTWF0aC5zaW4odGgxKTsKICAgICAgICAgIGNvbnN0IHkyID0geTMgLSB0ICogTWF0aC5jb3ModGgxKTsKCiAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICBhMDAgKiB4MSArIGEwMSAqIHkxLAogICAgICAgICAgICBhMTAgKiB4MSArIGExMSAqIHkxLAogICAgICAgICAgICBhMDAgKiB4MiArIGEwMSAqIHkyLAogICAgICAgICAgICBhMTAgKiB4MiArIGExMSAqIHkyLAogICAgICAgICAgICBhMDAgKiB4MyArIGEwMSAqIHkzLAogICAgICAgICAgICBhMTAgKiB4MyArIGExMSAqIHkzCiAgICAgICAgICBdOwogICAgICAgIH07CgogICAgICAgIGNsYXNzIFNWR1BhdGggewogICAgICAgICAgc3RhdGljIGFwcGx5KGRvYywgcGF0aCkgewogICAgICAgICAgICBjb25zdCBjb21tYW5kcyA9IHBhcnNlKHBhdGgpOwogICAgICAgICAgICBhcHBseShjb21tYW5kcywgZG9jKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGNvbnN0IHsgbnVtYmVyOiBudW1iZXIkMSB9ID0gUERGT2JqZWN0OwoKICAgICAgICAvLyBUaGlzIGNvbnN0YW50IGlzIHVzZWQgdG8gYXBwcm94aW1hdGUgYSBzeW1tZXRyaWNhbCBhcmMgdXNpbmcgYSBjdWJpYwogICAgICAgIC8vIEJlemllciBjdXJ2ZS4KICAgICAgICBjb25zdCBLQVBQQSA9IDQuMCAqICgoTWF0aC5zcXJ0KDIpIC0gMS4wKSAvIDMuMCk7CiAgICAgICAgdmFyIFZlY3Rvck1peGluID0gewogICAgICAgICAgaW5pdFZlY3RvcigpIHsKICAgICAgICAgICAgdGhpcy5fY3RtID0gWzEsIDAsIDAsIDEsIDAsIDBdOyAvLyBjdXJyZW50IHRyYW5zZm9ybWF0aW9uIG1hdHJpeAogICAgICAgICAgICByZXR1cm4gKHRoaXMuX2N0bVN0YWNrID0gW10pOwogICAgICAgICAgfSwKCiAgICAgICAgICBzYXZlKCkgewogICAgICAgICAgICB0aGlzLl9jdG1TdGFjay5wdXNoKHRoaXMuX2N0bS5zbGljZSgpKTsKICAgICAgICAgICAgLy8gVE9ETzogc2F2ZS9yZXN0b3JlIGNvbG9yc3BhY2UgYW5kIHN0eWxlcyBzbyBub3Qgc2V0dGluZyBpdCB1bm5lc3Nlc2FyaWx5IGFsbCB0aGUgdGltZT8KICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ29udGVudCgncScpOwogICAgICAgICAgfSwKCiAgICAgICAgICByZXN0b3JlKCkgewogICAgICAgICAgICB0aGlzLl9jdG0gPSB0aGlzLl9jdG1TdGFjay5wb3AoKSB8fCBbMSwgMCwgMCwgMSwgMCwgMF07CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZENvbnRlbnQoJ1EnKTsKICAgICAgICAgIH0sCgogICAgICAgICAgY2xvc2VQYXRoKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRDb250ZW50KCdoJyk7CiAgICAgICAgICB9LAoKICAgICAgICAgIGxpbmVXaWR0aCh3KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZENvbnRlbnQoYCR7bnVtYmVyJDEodyl9IHdgKTsKICAgICAgICAgIH0sCgogICAgICAgICAgX0NBUF9TVFlMRVM6IHsKICAgICAgICAgICAgQlVUVDogMCwKICAgICAgICAgICAgUk9VTkQ6IDEsCiAgICAgICAgICAgIFNRVUFSRTogMgogICAgICAgICAgfSwKCiAgICAgICAgICBsaW5lQ2FwKGMpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBjID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgIGMgPSB0aGlzLl9DQVBfU1RZTEVTW2MudG9VcHBlckNhc2UoKV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ29udGVudChgJHtjfSBKYCk7CiAgICAgICAgICB9LAoKICAgICAgICAgIF9KT0lOX1NUWUxFUzogewogICAgICAgICAgICBNSVRFUjogMCwKICAgICAgICAgICAgUk9VTkQ6IDEsCiAgICAgICAgICAgIEJFVkVMOiAyCiAgICAgICAgICB9LAoKICAgICAgICAgIGxpbmVKb2luKGopIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBqID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgIGogPSB0aGlzLl9KT0lOX1NUWUxFU1tqLnRvVXBwZXJDYXNlKCldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZENvbnRlbnQoYCR7an0gamApOwogICAgICAgICAgfSwKCiAgICAgICAgICBtaXRlckxpbWl0KG0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ29udGVudChgJHtudW1iZXIkMShtKX0gTWApOwogICAgICAgICAgfSwKCiAgICAgICAgICBkYXNoKGxlbmd0aCwgb3B0aW9ucyA9IHt9KSB7CiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTGVuZ3RoID0gbGVuZ3RoOwogICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobGVuZ3RoKSkgewogICAgICAgICAgICAgIGxlbmd0aCA9IFtsZW5ndGgsIG9wdGlvbnMuc3BhY2UgfHwgbGVuZ3RoXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgdmFsaWQgPSBsZW5ndGguZXZlcnkoeCA9PiBOdW1iZXIuaXNGaW5pdGUoeCkgJiYgeCA+IDApOwogICAgICAgICAgICBpZighdmFsaWQpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRhc2goJHtKU09OLnN0cmluZ2lmeShvcmlnaW5hbExlbmd0aCl9LCAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfSkgaW52YWxpZCwgbGVuZ3RocyBtdXN0IGJlIG51bWVyaWMgYW5kIGdyZWF0ZXIgdGhhbiB6ZXJvYCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxlbmd0aCA9IGxlbmd0aC5tYXAobnVtYmVyJDEpLmpvaW4oJyAnKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ29udGVudChgWyR7bGVuZ3RofV0gJHtudW1iZXIkMShvcHRpb25zLnBoYXNlIHx8IDApfSBkYCk7CiAgICAgICAgICB9LAoKICAgICAgICAgIHVuZGFzaCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ29udGVudCgnW10gMCBkJyk7CiAgICAgICAgICB9LAoKICAgICAgICAgIG1vdmVUbyh4LCB5KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZENvbnRlbnQoYCR7bnVtYmVyJDEoeCl9ICR7bnVtYmVyJDEoeSl9IG1gKTsKICAgICAgICAgIH0sCgogICAgICAgICAgbGluZVRvKHgsIHkpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ29udGVudChgJHtudW1iZXIkMSh4KX0gJHtudW1iZXIkMSh5KX0gbGApOwogICAgICAgICAgfSwKCiAgICAgICAgICBiZXppZXJDdXJ2ZVRvKGNwMXgsIGNwMXksIGNwMngsIGNwMnksIHgsIHkpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ29udGVudCgKICAgICAgICAgICAgICBgJHtudW1iZXIkMShjcDF4KX0gJHtudW1iZXIkMShjcDF5KX0gJHtudW1iZXIkMShjcDJ4KX0gJHtudW1iZXIkMShjcDJ5KX0gJHtudW1iZXIkMSgKICAgICAgICB4CiAgICAgICl9ICR7bnVtYmVyJDEoeSl9IGNgCiAgICAgICAgICAgICk7CiAgICAgICAgICB9LAoKICAgICAgICAgIHF1YWRyYXRpY0N1cnZlVG8oY3B4LCBjcHksIHgsIHkpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ29udGVudCgKICAgICAgICAgICAgICBgJHtudW1iZXIkMShjcHgpfSAke251bWJlciQxKGNweSl9ICR7bnVtYmVyJDEoeCl9ICR7bnVtYmVyJDEoeSl9IHZgCiAgICAgICAgICAgICk7CiAgICAgICAgICB9LAoKICAgICAgICAgIHJlY3QoeCwgeSwgdywgaCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRDb250ZW50KAogICAgICAgICAgICAgIGAke251bWJlciQxKHgpfSAke251bWJlciQxKHkpfSAke251bWJlciQxKHcpfSAke251bWJlciQxKGgpfSByZWAKICAgICAgICAgICAgKTsKICAgICAgICAgIH0sCgogICAgICAgICAgcm91bmRlZFJlY3QoeCwgeSwgdywgaCwgcikgewogICAgICAgICAgICBpZiAociA9PSBudWxsKSB7CiAgICAgICAgICAgICAgciA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgciA9IE1hdGgubWluKHIsIDAuNSAqIHcsIDAuNSAqIGgpOwoKICAgICAgICAgICAgLy8gYW1vdW50IHRvIGluc2V0IGNvbnRyb2wgcG9pbnRzIGZyb20gY29ybmVycyAoc2VlIGBlbGxpcHNlYCkKICAgICAgICAgICAgY29uc3QgYyA9IHIgKiAoMS4wIC0gS0FQUEEpOwoKICAgICAgICAgICAgdGhpcy5tb3ZlVG8oeCArIHIsIHkpOwogICAgICAgICAgICB0aGlzLmxpbmVUbyh4ICsgdyAtIHIsIHkpOwogICAgICAgICAgICB0aGlzLmJlemllckN1cnZlVG8oeCArIHcgLSBjLCB5LCB4ICsgdywgeSArIGMsIHggKyB3LCB5ICsgcik7CiAgICAgICAgICAgIHRoaXMubGluZVRvKHggKyB3LCB5ICsgaCAtIHIpOwogICAgICAgICAgICB0aGlzLmJlemllckN1cnZlVG8oeCArIHcsIHkgKyBoIC0gYywgeCArIHcgLSBjLCB5ICsgaCwgeCArIHcgLSByLCB5ICsgaCk7CiAgICAgICAgICAgIHRoaXMubGluZVRvKHggKyByLCB5ICsgaCk7CiAgICAgICAgICAgIHRoaXMuYmV6aWVyQ3VydmVUbyh4ICsgYywgeSArIGgsIHgsIHkgKyBoIC0gYywgeCwgeSArIGggLSByKTsKICAgICAgICAgICAgdGhpcy5saW5lVG8oeCwgeSArIHIpOwogICAgICAgICAgICB0aGlzLmJlemllckN1cnZlVG8oeCwgeSArIGMsIHggKyBjLCB5LCB4ICsgciwgeSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlUGF0aCgpOwogICAgICAgICAgfSwKCiAgICAgICAgICBlbGxpcHNlKHgsIHksIHIxLCByMikgewogICAgICAgICAgICAvLyBiYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIxNzI3OTgvaG93LXRvLWRyYXctYW4tb3ZhbC1pbi1odG1sNS1jYW52YXMvMjE3MzA4NCMyMTczMDg0CiAgICAgICAgICAgIGlmIChyMiA9PSBudWxsKSB7CiAgICAgICAgICAgICAgcjIgPSByMTsKICAgICAgICAgICAgfQogICAgICAgICAgICB4IC09IHIxOwogICAgICAgICAgICB5IC09IHIyOwogICAgICAgICAgICBjb25zdCBveCA9IHIxICogS0FQUEE7CiAgICAgICAgICAgIGNvbnN0IG95ID0gcjIgKiBLQVBQQTsKICAgICAgICAgICAgY29uc3QgeGUgPSB4ICsgcjEgKiAyOwogICAgICAgICAgICBjb25zdCB5ZSA9IHkgKyByMiAqIDI7CiAgICAgICAgICAgIGNvbnN0IHhtID0geCArIHIxOwogICAgICAgICAgICBjb25zdCB5bSA9IHkgKyByMjsKCiAgICAgICAgICAgIHRoaXMubW92ZVRvKHgsIHltKTsKICAgICAgICAgICAgdGhpcy5iZXppZXJDdXJ2ZVRvKHgsIHltIC0gb3ksIHhtIC0gb3gsIHksIHhtLCB5KTsKICAgICAgICAgICAgdGhpcy5iZXppZXJDdXJ2ZVRvKHhtICsgb3gsIHksIHhlLCB5bSAtIG95LCB4ZSwgeW0pOwogICAgICAgICAgICB0aGlzLmJlemllckN1cnZlVG8oeGUsIHltICsgb3ksIHhtICsgb3gsIHllLCB4bSwgeWUpOwogICAgICAgICAgICB0aGlzLmJlemllckN1cnZlVG8oeG0gLSBveCwgeWUsIHgsIHltICsgb3ksIHgsIHltKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2VQYXRoKCk7CiAgICAgICAgICB9LAoKICAgICAgICAgIGNpcmNsZSh4LCB5LCByYWRpdXMpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxsaXBzZSh4LCB5LCByYWRpdXMpOwogICAgICAgICAgfSwKCiAgICAgICAgICBhcmMoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSkgewogICAgICAgICAgICBpZiAoYW50aWNsb2Nrd2lzZSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgYW50aWNsb2Nrd2lzZSA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IFRXT19QSSA9IDIuMCAqIE1hdGguUEk7CiAgICAgICAgICAgIGNvbnN0IEhBTEZfUEkgPSAwLjUgKiBNYXRoLlBJOwoKICAgICAgICAgICAgbGV0IGRlbHRhQW5nID0gZW5kQW5nbGUgLSBzdGFydEFuZ2xlOwoKICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRlbHRhQW5nKSA+IFRXT19QSSkgewogICAgICAgICAgICAgIC8vIGRyYXcgb25seSBmdWxsIGNpcmNsZSBpZiBtb3JlIHRoYW4gdGhhdCBpcyBzcGVjaWZpZWQKICAgICAgICAgICAgICBkZWx0YUFuZyA9IFRXT19QSTsKICAgICAgICAgICAgfSBlbHNlIGlmIChkZWx0YUFuZyAhPT0gMCAmJiBhbnRpY2xvY2t3aXNlICE9PSBkZWx0YUFuZyA8IDApIHsKICAgICAgICAgICAgICAvLyBuZWNlc3NhcnkgdG8gZmxpcCBkaXJlY3Rpb24gb2YgcmVuZGVyaW5nCiAgICAgICAgICAgICAgY29uc3QgZGlyID0gYW50aWNsb2Nrd2lzZSA/IC0xIDogMTsKICAgICAgICAgICAgICBkZWx0YUFuZyA9IGRpciAqIFRXT19QSSArIGRlbHRhQW5nOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBudW1TZWdzID0gTWF0aC5jZWlsKE1hdGguYWJzKGRlbHRhQW5nKSAvIEhBTEZfUEkpOwogICAgICAgICAgICBjb25zdCBzZWdBbmcgPSBkZWx0YUFuZyAvIG51bVNlZ3M7CiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUxlbiA9IChzZWdBbmcgLyBIQUxGX1BJKSAqIEtBUFBBICogcmFkaXVzOwogICAgICAgICAgICBsZXQgY3VyQW5nID0gc3RhcnRBbmdsZTsKCiAgICAgICAgICAgIC8vIGNvbXBvbmVudCBkaXN0YW5jZXMgYmV0d2VlbiBhbmNob3IgcG9pbnQgYW5kIGNvbnRyb2wgcG9pbnQKICAgICAgICAgICAgbGV0IGRlbHRhQ3ggPSAtTWF0aC5zaW4oY3VyQW5nKSAqIGhhbmRsZUxlbjsKICAgICAgICAgICAgbGV0IGRlbHRhQ3kgPSBNYXRoLmNvcyhjdXJBbmcpICogaGFuZGxlTGVuOwoKICAgICAgICAgICAgLy8gYW5jaG9yIHBvaW50CiAgICAgICAgICAgIGxldCBheCA9IHggKyBNYXRoLmNvcyhjdXJBbmcpICogcmFkaXVzOwogICAgICAgICAgICBsZXQgYXkgPSB5ICsgTWF0aC5zaW4oY3VyQW5nKSAqIHJhZGl1czsKCiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBhbmQgcmVuZGVyIHNlZ21lbnRzCiAgICAgICAgICAgIHRoaXMubW92ZVRvKGF4LCBheSk7CgogICAgICAgICAgICBmb3IgKGxldCBzZWdJZHggPSAwOyBzZWdJZHggPCBudW1TZWdzOyBzZWdJZHgrKykgewogICAgICAgICAgICAgIC8vIHN0YXJ0aW5nIGNvbnRyb2wgcG9pbnQKICAgICAgICAgICAgICBjb25zdCBjcDF4ID0gYXggKyBkZWx0YUN4OwogICAgICAgICAgICAgIGNvbnN0IGNwMXkgPSBheSArIGRlbHRhQ3k7CgogICAgICAgICAgICAgIC8vIHN0ZXAgYW5nbGUKICAgICAgICAgICAgICBjdXJBbmcgKz0gc2VnQW5nOwoKICAgICAgICAgICAgICAvLyBuZXh0IGFuY2hvciBwb2ludAogICAgICAgICAgICAgIGF4ID0geCArIE1hdGguY29zKGN1ckFuZykgKiByYWRpdXM7CiAgICAgICAgICAgICAgYXkgPSB5ICsgTWF0aC5zaW4oY3VyQW5nKSAqIHJhZGl1czsKCiAgICAgICAgICAgICAgLy8gbmV4dCBjb250cm9sIHBvaW50IGRlbHRhCiAgICAgICAgICAgICAgZGVsdGFDeCA9IC1NYXRoLnNpbihjdXJBbmcpICogaGFuZGxlTGVuOwogICAgICAgICAgICAgIGRlbHRhQ3kgPSBNYXRoLmNvcyhjdXJBbmcpICogaGFuZGxlTGVuOwoKICAgICAgICAgICAgICAvLyBlbmRpbmcgY29udHJvbCBwb2ludAogICAgICAgICAgICAgIGNvbnN0IGNwMnggPSBheCAtIGRlbHRhQ3g7CiAgICAgICAgICAgICAgY29uc3QgY3AyeSA9IGF5IC0gZGVsdGFDeTsKCiAgICAgICAgICAgICAgLy8gcmVuZGVyIHNlZ21lbnQKICAgICAgICAgICAgICB0aGlzLmJlemllckN1cnZlVG8oY3AxeCwgY3AxeSwgY3AyeCwgY3AyeSwgYXgsIGF5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9LAoKICAgICAgICAgIHBvbHlnb24oLi4ucG9pbnRzKSB7CiAgICAgICAgICAgIHRoaXMubW92ZVRvKC4uLihwb2ludHMuc2hpZnQoKSB8fCBbXSkpOwogICAgICAgICAgICBmb3IgKGxldCBwb2ludCBvZiBwb2ludHMpIHsKICAgICAgICAgICAgICB0aGlzLmxpbmVUbyguLi4ocG9pbnQgfHwgW10pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9zZVBhdGgoKTsKICAgICAgICAgIH0sCgogICAgICAgICAgcGF0aChwYXRoKSB7CiAgICAgICAgICAgIFNWR1BhdGguYXBwbHkodGhpcywgcGF0aCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfSwKCiAgICAgICAgICBfd2luZGluZ1J1bGUocnVsZSkgewogICAgICAgICAgICBpZiAoL2V2ZW4tP29kZC8udGVzdChydWxlKSkgewogICAgICAgICAgICAgIHJldHVybiAnKic7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgIH0sCgogICAgICAgICAgZmlsbChjb2xvciwgcnVsZSkgewogICAgICAgICAgICBpZiAoLyhldmVuLT9vZGQpfChub24tP3plcm8pLy50ZXN0KGNvbG9yKSkgewogICAgICAgICAgICAgIHJ1bGUgPSBjb2xvcjsKICAgICAgICAgICAgICBjb2xvciA9IG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChjb2xvcikgewogICAgICAgICAgICAgIHRoaXMuZmlsbENvbG9yKGNvbG9yKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRDb250ZW50KGBmJHt0aGlzLl93aW5kaW5nUnVsZShydWxlKX1gKTsKICAgICAgICAgIH0sCgogICAgICAgICAgc3Ryb2tlKGNvbG9yKSB7CiAgICAgICAgICAgIGlmIChjb2xvcikgewogICAgICAgICAgICAgIHRoaXMuc3Ryb2tlQ29sb3IoY29sb3IpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZENvbnRlbnQoJ1MnKTsKICAgICAgICAgIH0sCgogICAgICAgICAgZmlsbEFuZFN0cm9rZShmaWxsQ29sb3IsIHN0cm9rZUNvbG9yLCBydWxlKSB7CiAgICAgICAgICAgIGlmIChzdHJva2VDb2xvciA9PSBudWxsKSB7CiAgICAgICAgICAgICAgc3Ryb2tlQ29sb3IgPSBmaWxsQ29sb3I7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgaXNGaWxsUnVsZSA9IC8oZXZlbi0/b2RkKXwobm9uLT96ZXJvKS87CiAgICAgICAgICAgIGlmIChpc0ZpbGxSdWxlLnRlc3QoZmlsbENvbG9yKSkgewogICAgICAgICAgICAgIHJ1bGUgPSBmaWxsQ29sb3I7CiAgICAgICAgICAgICAgZmlsbENvbG9yID0gbnVsbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGlzRmlsbFJ1bGUudGVzdChzdHJva2VDb2xvcikpIHsKICAgICAgICAgICAgICBydWxlID0gc3Ryb2tlQ29sb3I7CiAgICAgICAgICAgICAgc3Ryb2tlQ29sb3IgPSBmaWxsQ29sb3I7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChmaWxsQ29sb3IpIHsKICAgICAgICAgICAgICB0aGlzLmZpbGxDb2xvcihmaWxsQ29sb3IpOwogICAgICAgICAgICAgIHRoaXMuc3Ryb2tlQ29sb3Ioc3Ryb2tlQ29sb3IpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRDb250ZW50KGBCJHt0aGlzLl93aW5kaW5nUnVsZShydWxlKX1gKTsKICAgICAgICAgIH0sCgogICAgICAgICAgY2xpcChydWxlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZENvbnRlbnQoYFcke3RoaXMuX3dpbmRpbmdSdWxlKHJ1bGUpfSBuYCk7CiAgICAgICAgICB9LAoKICAgICAgICAgIHRyYW5zZm9ybShtMTEsIG0xMiwgbTIxLCBtMjIsIGR4LCBkeSkgewogICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9uIG1hdHJpeAogICAgICAgICAgICBjb25zdCBtID0gdGhpcy5fY3RtOwogICAgICAgICAgICBjb25zdCBbbTAsIG0xLCBtMiwgbTMsIG00LCBtNV0gPSBtOwogICAgICAgICAgICBtWzBdID0gbTAgKiBtMTEgKyBtMiAqIG0xMjsKICAgICAgICAgICAgbVsxXSA9IG0xICogbTExICsgbTMgKiBtMTI7CiAgICAgICAgICAgIG1bMl0gPSBtMCAqIG0yMSArIG0yICogbTIyOwogICAgICAgICAgICBtWzNdID0gbTEgKiBtMjEgKyBtMyAqIG0yMjsKICAgICAgICAgICAgbVs0XSA9IG0wICogZHggKyBtMiAqIGR5ICsgbTQ7CiAgICAgICAgICAgIG1bNV0gPSBtMSAqIGR4ICsgbTMgKiBkeSArIG01OwoKICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gW20xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5XS5tYXAodiA9PiBudW1iZXIkMSh2KSkuam9pbignICcpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRDb250ZW50KGAke3ZhbHVlc30gY21gKTsKICAgICAgICAgIH0sCgogICAgICAgICAgdHJhbnNsYXRlKHgsIHkpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKDEsIDAsIDAsIDEsIHgsIHkpOwogICAgICAgICAgfSwKCiAgICAgICAgICByb3RhdGUoYW5nbGUsIG9wdGlvbnMgPSB7fSkgewogICAgICAgICAgICBsZXQgeTsKICAgICAgICAgICAgY29uc3QgcmFkID0gKGFuZ2xlICogTWF0aC5QSSkgLyAxODA7CiAgICAgICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKHJhZCk7CiAgICAgICAgICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKHJhZCk7CiAgICAgICAgICAgIGxldCB4ID0gKHkgPSAwKTsKCiAgICAgICAgICAgIGlmIChvcHRpb25zLm9yaWdpbiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgW3gsIHldID0gb3B0aW9ucy5vcmlnaW47CiAgICAgICAgICAgICAgY29uc3QgeDEgPSB4ICogY29zIC0geSAqIHNpbjsKICAgICAgICAgICAgICBjb25zdCB5MSA9IHggKiBzaW4gKyB5ICogY29zOwogICAgICAgICAgICAgIHggLT0geDE7CiAgICAgICAgICAgICAgeSAtPSB5MTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKGNvcywgc2luLCAtc2luLCBjb3MsIHgsIHkpOwogICAgICAgICAgfSwKCiAgICAgICAgICBzY2FsZSh4RmFjdG9yLCB5RmFjdG9yLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgbGV0IHk7CiAgICAgICAgICAgIGlmICh5RmFjdG9yID09IG51bGwpIHsKICAgICAgICAgICAgICB5RmFjdG9yID0geEZhY3RvcjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIHlGYWN0b3IgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgb3B0aW9ucyA9IHlGYWN0b3I7CiAgICAgICAgICAgICAgeUZhY3RvciA9IHhGYWN0b3I7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxldCB4ID0gKHkgPSAwKTsKICAgICAgICAgICAgaWYgKG9wdGlvbnMub3JpZ2luICE9IG51bGwpIHsKICAgICAgICAgICAgICBbeCwgeV0gPSBvcHRpb25zLm9yaWdpbjsKICAgICAgICAgICAgICB4IC09IHhGYWN0b3IgKiB4OwogICAgICAgICAgICAgIHkgLT0geUZhY3RvciAqIHk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSh4RmFjdG9yLCAwLCAwLCB5RmFjdG9yLCB4LCB5KTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBjb25zdCBNQVJLRVJTID0gWwogICAgICAgICAgMHhmZmMwLAogICAgICAgICAgMHhmZmMxLAogICAgICAgICAgMHhmZmMyLAogICAgICAgICAgMHhmZmMzLAogICAgICAgICAgMHhmZmM1LAogICAgICAgICAgMHhmZmM2LAogICAgICAgICAgMHhmZmM3LAogICAgICAgICAgMHhmZmM4LAogICAgICAgICAgMHhmZmM5LAogICAgICAgICAgMHhmZmNhLAogICAgICAgICAgMHhmZmNiLAogICAgICAgICAgMHhmZmNjLAogICAgICAgICAgMHhmZmNkLAogICAgICAgICAgMHhmZmNlLAogICAgICAgICAgMHhmZmNmCiAgICAgICAgXTsKCiAgICAgICAgY29uc3QgQ09MT1JfU1BBQ0VfTUFQID0gewogICAgICAgICAgMTogJ0RldmljZUdyYXknLAogICAgICAgICAgMzogJ0RldmljZVJHQicsCiAgICAgICAgICA0OiAnRGV2aWNlQ01ZSycKICAgICAgICB9OwoKICAgICAgICBjbGFzcyBKUEVHIHsKICAgICAgICAgIGNvbnN0cnVjdG9yKGRhdGEsIGxhYmVsKSB7CiAgICAgICAgICAgIGxldCBtYXJrZXI7CiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDsKICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5yZWFkVUludDE2QkUoMCkgIT09IDB4ZmZkOCkgewogICAgICAgICAgICAgIHRocm93ICdTT0kgbm90IGZvdW5kIGluIEpQRUcnOwogICAgICAgICAgICB9CgogICAgICAgICAgICBsZXQgcG9zID0gMjsKICAgICAgICAgICAgd2hpbGUgKHBvcyA8IHRoaXMuZGF0YS5sZW5ndGgpIHsKICAgICAgICAgICAgICBtYXJrZXIgPSB0aGlzLmRhdGEucmVhZFVJbnQxNkJFKHBvcyk7CiAgICAgICAgICAgICAgcG9zICs9IDI7CiAgICAgICAgICAgICAgaWYgKE1BUktFUlMuaW5jbHVkZXMobWFya2VyKSkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHBvcyArPSB0aGlzLmRhdGEucmVhZFVJbnQxNkJFKHBvcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghTUFSS0VSUy5pbmNsdWRlcyhtYXJrZXIpKSB7CiAgICAgICAgICAgICAgdGhyb3cgJ0ludmFsaWQgSlBFRy4nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBvcyArPSAyOwoKICAgICAgICAgICAgdGhpcy5iaXRzID0gdGhpcy5kYXRhW3BvcysrXTsKICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmRhdGEucmVhZFVJbnQxNkJFKHBvcyk7CiAgICAgICAgICAgIHBvcyArPSAyOwoKICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuZGF0YS5yZWFkVUludDE2QkUocG9zKTsKICAgICAgICAgICAgcG9zICs9IDI7CgogICAgICAgICAgICBjb25zdCBjaGFubmVscyA9IHRoaXMuZGF0YVtwb3MrK107CiAgICAgICAgICAgIHRoaXMuY29sb3JTcGFjZSA9IENPTE9SX1NQQUNFX01BUFtjaGFubmVsc107CgogICAgICAgICAgICB0aGlzLm9iaiA9IG51bGw7CiAgICAgICAgICB9CgogICAgICAgICAgZW1iZWQoZG9jdW1lbnQpIHsKICAgICAgICAgICAgaWYgKHRoaXMub2JqKSB7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLm9iaiA9IGRvY3VtZW50LnJlZih7CiAgICAgICAgICAgICAgVHlwZTogJ1hPYmplY3QnLAogICAgICAgICAgICAgIFN1YnR5cGU6ICdJbWFnZScsCiAgICAgICAgICAgICAgQml0c1BlckNvbXBvbmVudDogdGhpcy5iaXRzLAogICAgICAgICAgICAgIFdpZHRoOiB0aGlzLndpZHRoLAogICAgICAgICAgICAgIEhlaWdodDogdGhpcy5oZWlnaHQsCiAgICAgICAgICAgICAgQ29sb3JTcGFjZTogdGhpcy5jb2xvclNwYWNlLAogICAgICAgICAgICAgIEZpbHRlcjogJ0RDVERlY29kZScKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBhZGQgZXh0cmEgZGVjb2RlIHBhcmFtcyBmb3IgQ01ZSyBpbWFnZXMuIEJ5IHN3YXBwaW5nIHRoZQogICAgICAgICAgICAvLyBtaW4gYW5kIG1heCB2YWx1ZXMgZnJvbSB0aGUgZGVmYXVsdCwgd2UgaW52ZXJ0IHRoZSBjb2xvcnMuIFNlZQogICAgICAgICAgICAvLyBzZWN0aW9uIDQuOC40IG9mIHRoZSBzcGVjLgogICAgICAgICAgICBpZiAodGhpcy5jb2xvclNwYWNlID09PSAnRGV2aWNlQ01ZSycpIHsKICAgICAgICAgICAgICB0aGlzLm9iai5kYXRhWydEZWNvZGUnXSA9IFsxLjAsIDAuMCwgMS4wLCAwLjAsIDEuMCwgMC4wLCAxLjAsIDAuMF07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMub2JqLmVuZCh0aGlzLmRhdGEpOwoKICAgICAgICAgICAgLy8gZnJlZSBtZW1vcnkKICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRhdGEgPSBudWxsKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8qCiAgICAgICAgICogTUlUIExJQ0VOU0UKICAgICAgICAgKiBDb3B5cmlnaHQgKGMpIDIwMTEgRGV2b24gR292ZXR0CiAgICAgICAgICoKICAgICAgICAgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMKICAgICAgICAgKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlCiAgICAgICAgICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwKICAgICAgICAgKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMKICAgICAgICAgKiB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgogICAgICAgICAqCiAgICAgICAgICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvcgogICAgICAgICAqIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KICAgICAgICAgKgogICAgICAgICAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORwogICAgICAgICAqIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORAogICAgICAgICAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCiAgICAgICAgICogREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAogICAgICAgICAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgogICAgICAgICAqLwoKCgoKICAgICAgICB2YXIgcG5nTm9kZSA9IGNsYXNzIFBORyB7CiAgICAgICAgICBzdGF0aWMgZGVjb2RlKHBhdGgsIGZuKSB7CiAgICAgICAgICAgIHJldHVybiBmcy5yZWFkRmlsZShwYXRoLCBmdW5jdGlvbihlcnIsIGZpbGUpIHsKICAgICAgICAgICAgICBjb25zdCBwbmcgPSBuZXcgUE5HKGZpbGUpOwogICAgICAgICAgICAgIHJldHVybiBwbmcuZGVjb2RlKHBpeGVscyA9PiBmbihwaXhlbHMpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgc3RhdGljIGxvYWQocGF0aCkgewogICAgICAgICAgICBjb25zdCBmaWxlID0gZnMucmVhZEZpbGVTeW5jKHBhdGgpOwogICAgICAgICAgICByZXR1cm4gbmV3IFBORyhmaWxlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdHJ1Y3RvcihkYXRhKSB7CiAgICAgICAgICAgIGxldCBpOwogICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhOwogICAgICAgICAgICB0aGlzLnBvcyA9IDg7IC8vIFNraXAgdGhlIGRlZmF1bHQgaGVhZGVyCgogICAgICAgICAgICB0aGlzLnBhbGV0dGUgPSBbXTsKICAgICAgICAgICAgdGhpcy5pbWdEYXRhID0gW107CiAgICAgICAgICAgIHRoaXMudHJhbnNwYXJlbmN5ID0ge307CiAgICAgICAgICAgIHRoaXMudGV4dCA9IHt9OwoKICAgICAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAgICAgICBjb25zdCBjaHVua1NpemUgPSB0aGlzLnJlYWRVSW50MzIoKTsKICAgICAgICAgICAgICBsZXQgc2VjdGlvbiA9ICcnOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAgICAgICAgIHNlY3Rpb24gKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmRhdGFbdGhpcy5wb3MrK10pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgc3dpdGNoIChzZWN0aW9uKSB7CiAgICAgICAgICAgICAgICBjYXNlICdJSERSJzoKICAgICAgICAgICAgICAgICAgLy8gd2UgY2FuIGdyYWIgIGludGVyZXN0aW5nIHZhbHVlcyBmcm9tIGhlcmUgKGxpa2Ugd2lkdGgsIGhlaWdodCwgZXRjKQogICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5yZWFkVUludDMyKCk7CiAgICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5yZWFkVUludDMyKCk7CiAgICAgICAgICAgICAgICAgIHRoaXMuYml0cyA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXTsKICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvclR5cGUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK107CiAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3Npb25NZXRob2QgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK107CiAgICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyTWV0aG9kID0gdGhpcy5kYXRhW3RoaXMucG9zKytdOwogICAgICAgICAgICAgICAgICB0aGlzLmludGVybGFjZU1ldGhvZCA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAnUExURSc6CiAgICAgICAgICAgICAgICAgIHRoaXMucGFsZXR0ZSA9IHRoaXMucmVhZChjaHVua1NpemUpOwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlICdJREFUJzoKICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNodW5rU2l6ZTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWdEYXRhLnB1c2godGhpcy5kYXRhW3RoaXMucG9zKytdKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlICd0Uk5TJzoKICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjaHVuayBjYW4gb25seSBvY2N1ciBvbmNlIGFuZCBpdCBtdXN0IG9jY3VyIGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAvLyBQTFRFIGNodW5rIGFuZCBiZWZvcmUgdGhlIElEQVQgY2h1bmsuCiAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwYXJlbmN5ID0ge307CiAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5jb2xvclR5cGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAvLyBJbmRleGVkIGNvbG9yLCBSR0IuIEVhY2ggYnl0ZSBpbiB0aGlzIGNodW5rIGlzIGFuIGFscGhhIGZvcgogICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHBhbGV0dGUgaW5kZXggaW4gdGhlIFBMVEUgKCJwYWxldHRlIikgY2h1bmsgdXAgdW50aWwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAvLyBsYXN0IG5vbi1vcGFxdWUgZW50cnkuIFNldCB1cCBhbiBhcnJheSwgc3RyZXRjaGluZyBvdmVyIGFsbAogICAgICAgICAgICAgICAgICAgICAgLy8gcGFsZXR0ZSBlbnRyaWVzIHdoaWNoIHdpbGwgYmUgMCAob3BhcXVlKSBvciAxICh0cmFuc3BhcmVudCkuCiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcGFyZW5jeS5pbmRleGVkID0gdGhpcy5yZWFkKGNodW5rU2l6ZSk7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hvcnQgPSAyNTUgLSB0aGlzLnRyYW5zcGFyZW5jeS5pbmRleGVkLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG9ydCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNob3J0OyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcGFyZW5jeS5pbmRleGVkLnB1c2goMjU1KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgLy8gR3JleXNjYWxlLiBDb3JyZXNwb25kaW5nIHRvIGVudHJpZXMgaW4gdGhlIFBMVEUgY2h1bmsuCiAgICAgICAgICAgICAgICAgICAgICAvLyBHcmV5IGlzIHR3byBieXRlcywgcmFuZ2UgMCAuLiAoMiBeIGJpdC1kZXB0aCkgLSAxCiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcGFyZW5jeS5ncmF5c2NhbGUgPSB0aGlzLnJlYWQoY2h1bmtTaXplKVswXTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgIC8vIFRydWUgY29sb3Igd2l0aCBwcm9wZXIgYWxwaGEgY2hhbm5lbC4KICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwYXJlbmN5LnJnYiA9IHRoaXMucmVhZChjaHVua1NpemUpOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAndEVYdCc6CiAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gdGhpcy5yZWFkKGNodW5rU2l6ZSk7CiAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRleHQuaW5kZXhPZigwKTsKICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCB0ZXh0LnNsaWNlKDAsIGluZGV4KSk7CiAgICAgICAgICAgICAgICAgIHRoaXMudGV4dFtrZXldID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSgKICAgICAgICAgICAgICAgICAgICBTdHJpbmcsCiAgICAgICAgICAgICAgICAgICAgdGV4dC5zbGljZShpbmRleCArIDEpCiAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgJ0lFTkQnOgogICAgICAgICAgICAgICAgICAvLyB3ZSd2ZSBnb3QgZXZlcnl0aGluZyB3ZSBuZWVkIQogICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuY29sb3JUeXBlKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9ycyA9IDE7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvcnMgPSAzOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHRoaXMuaGFzQWxwaGFDaGFubmVsID0gWzQsIDZdLmluY2x1ZGVzKHRoaXMuY29sb3JUeXBlKTsKICAgICAgICAgICAgICAgICAgdmFyIGNvbG9ycyA9IHRoaXMuY29sb3JzICsgKHRoaXMuaGFzQWxwaGFDaGFubmVsID8gMSA6IDApOwogICAgICAgICAgICAgICAgICB0aGlzLnBpeGVsQml0bGVuZ3RoID0gdGhpcy5iaXRzICogY29sb3JzOwoKICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmNvbG9ycykgewogICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3JTcGFjZSA9ICdEZXZpY2VHcmF5JzsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3JTcGFjZSA9ICdEZXZpY2VSR0InOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHRoaXMuaW1nRGF0YSA9IG5ldyBCdWZmZXIodGhpcy5pbWdEYXRhKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIC8vIHVua25vd24gKG9yIHVuaW1wb3J0YW50KSBzZWN0aW9uLCBza2lwIGl0CiAgICAgICAgICAgICAgICAgIHRoaXMucG9zICs9IGNodW5rU2l6ZTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRoaXMucG9zICs9IDQ7IC8vIFNraXAgdGhlIENSQwoKICAgICAgICAgICAgICBpZiAodGhpcy5wb3MgPiB0aGlzLmRhdGEubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29tcGxldGUgb3IgY29ycnVwdCBQTkcgZmlsZScpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJlYWQoYnl0ZXMpIHsKICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KGJ5dGVzKTsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlczsgaSsrKSB7CiAgICAgICAgICAgICAgcmVzdWx0W2ldID0gdGhpcy5kYXRhW3RoaXMucG9zKytdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICB9CgogICAgICAgICAgcmVhZFVJbnQzMigpIHsKICAgICAgICAgICAgY29uc3QgYjEgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK10gPDwgMjQ7CiAgICAgICAgICAgIGNvbnN0IGIyID0gdGhpcy5kYXRhW3RoaXMucG9zKytdIDw8IDE2OwogICAgICAgICAgICBjb25zdCBiMyA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXSA8PCA4OwogICAgICAgICAgICBjb25zdCBiNCA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXTsKICAgICAgICAgICAgcmV0dXJuIGIxIHwgYjIgfCBiMyB8IGI0OwogICAgICAgICAgfQoKICAgICAgICAgIHJlYWRVSW50MTYoKSB7CiAgICAgICAgICAgIGNvbnN0IGIxID0gdGhpcy5kYXRhW3RoaXMucG9zKytdIDw8IDg7CiAgICAgICAgICAgIGNvbnN0IGIyID0gdGhpcy5kYXRhW3RoaXMucG9zKytdOwogICAgICAgICAgICByZXR1cm4gYjEgfCBiMjsKICAgICAgICAgIH0KCiAgICAgICAgICBkZWNvZGVQaXhlbHMoZm4pIHsKICAgICAgICAgICAgcmV0dXJuIHpsaWIuaW5mbGF0ZSh0aGlzLmltZ0RhdGEsIChlcnIsIGRhdGEpID0+IHsKICAgICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXM7CiAgICAgICAgICAgICAgY29uc3QgcGl4ZWxCeXRlcyA9IHRoaXMucGl4ZWxCaXRsZW5ndGggLyA4OwoKICAgICAgICAgICAgICBjb25zdCBwaXhlbHMgPSBuZXcgQnVmZmVyKHdpZHRoICogaGVpZ2h0ICogcGl4ZWxCeXRlcyk7CiAgICAgICAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IGRhdGE7CiAgICAgICAgICAgICAgbGV0IHBvcyA9IDA7CgogICAgICAgICAgICAgIGZ1bmN0aW9uIHBhc3MoeDAsIHkwLCBkeCwgZHksIHNpbmdsZVBhc3MgPSBmYWxzZSkgewogICAgICAgICAgICAgICAgY29uc3QgdyA9IE1hdGguY2VpbCgod2lkdGggLSB4MCkgLyBkeCk7CiAgICAgICAgICAgICAgICBjb25zdCBoID0gTWF0aC5jZWlsKChoZWlnaHQgLSB5MCkgLyBkeSk7CiAgICAgICAgICAgICAgICBjb25zdCBzY2FubGluZUxlbmd0aCA9IHBpeGVsQnl0ZXMgKiB3OwogICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gc2luZ2xlUGFzcyA/IHBpeGVscyA6IG5ldyBCdWZmZXIoc2NhbmxpbmVMZW5ndGggKiBoKTsKICAgICAgICAgICAgICAgIGxldCByb3cgPSAwOwogICAgICAgICAgICAgICAgbGV0IGMgPSAwOwogICAgICAgICAgICAgICAgd2hpbGUgKHJvdyA8IGggJiYgcG9zIDwgbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBieXRlLCBjb2wsIGksIGxlZnQsIHVwcGVyOwogICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGFbcG9zKytdKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiAvLyBOb25lCiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2NhbmxpbmVMZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbYysrXSA9IGRhdGFbcG9zKytdOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgIGNhc2UgMTogLy8gU3ViCiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2NhbmxpbmVMZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBieXRlID0gZGF0YVtwb3MrK107CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpIDwgcGl4ZWxCeXRlcyA/IDAgOiBidWZmZXJbYyAtIHBpeGVsQnl0ZXNdOwogICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbYysrXSA9IChieXRlICsgbGVmdCkgJSAyNTY7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiAvLyBVcAogICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNjYW5saW5lTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZSA9IGRhdGFbcG9zKytdOwogICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSAoaSAtIChpICUgcGl4ZWxCeXRlcykpIC8gcGl4ZWxCeXRlczsKICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXIgPQogICAgICAgICAgICAgICAgICAgICAgICAgIHJvdyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlclsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyb3cgLSAxKSAqIHNjYW5saW5lTGVuZ3RoICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sICogcGl4ZWxCeXRlcyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpICUgcGl4ZWxCeXRlcykKICAgICAgICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbYysrXSA9ICh1cHBlciArIGJ5dGUpICUgMjU2OwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgIGNhc2UgMzogLy8gQXZlcmFnZQogICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNjYW5saW5lTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZSA9IGRhdGFbcG9zKytdOwogICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSAoaSAtIChpICUgcGl4ZWxCeXRlcykpIC8gcGl4ZWxCeXRlczsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGkgPCBwaXhlbEJ5dGVzID8gMCA6IGJ1ZmZlcltjIC0gcGl4ZWxCeXRlc107CiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyID0KICAgICAgICAgICAgICAgICAgICAgICAgICByb3cgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocm93IC0gMSkgKiBzY2FubGluZUxlbmd0aCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCAqIHBpeGVsQnl0ZXMgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSAlIHBpeGVsQnl0ZXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyW2MrK10gPSAoYnl0ZSArIE1hdGguZmxvb3IoKGxlZnQgKyB1cHBlcikgLyAyKSkgJSAyNTY7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiAvLyBQYWV0aAogICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNjYW5saW5lTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhZXRoLCB1cHBlckxlZnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGUgPSBkYXRhW3BvcysrXTsKICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gKGkgLSAoaSAlIHBpeGVsQnl0ZXMpKSAvIHBpeGVsQnl0ZXM7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpIDwgcGl4ZWxCeXRlcyA/IDAgOiBidWZmZXJbYyAtIHBpeGVsQnl0ZXNdOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdyA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyID0gdXBwZXJMZWZ0ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB1cHBlciA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyb3cgLSAxKSAqIHNjYW5saW5lTGVuZ3RoICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgKiBwaXhlbEJ5dGVzICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSAlIHBpeGVsQnl0ZXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGVmdCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlclsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJvdyAtIDEpICogc2NhbmxpbmVMZW5ndGggKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb2wgLSAxKSAqIHBpeGVsQnl0ZXMgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpICUgcGl4ZWxCeXRlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBsZWZ0ICsgdXBwZXIgLSB1cHBlckxlZnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhID0gTWF0aC5hYnMocCAtIGxlZnQpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYiA9IE1hdGguYWJzKHAgLSB1cHBlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBjID0gTWF0aC5hYnMocCAtIHVwcGVyTGVmdCk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGEgPD0gcGIgJiYgcGEgPD0gcGMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBwYWV0aCA9IGxlZnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGIgPD0gcGMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBwYWV0aCA9IHVwcGVyOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgIHBhZXRoID0gdXBwZXJMZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJbYysrXSA9IChieXRlICsgcGFldGgpICUgMjU2OwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZmlsdGVyIGFsZ29yaXRobTogJHtkYXRhW3BvcyAtIDFdfWApOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZiAoIXNpbmdsZVBhc3MpIHsKICAgICAgICAgICAgICAgICAgICBsZXQgcGl4ZWxzUG9zID0gKCh5MCArIHJvdyAqIGR5KSAqIHdpZHRoICsgeDApICogcGl4ZWxCeXRlczsKICAgICAgICAgICAgICAgICAgICBsZXQgYnVmZmVyUG9zID0gcm93ICogc2NhbmxpbmVMZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHc7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwaXhlbEJ5dGVzOyBqKyspCiAgICAgICAgICAgICAgICAgICAgICAgIHBpeGVsc1twaXhlbHNQb3MrK10gPSBidWZmZXJbYnVmZmVyUG9zKytdOwogICAgICAgICAgICAgICAgICAgICAgcGl4ZWxzUG9zICs9IChkeCAtIDEpICogcGl4ZWxCeXRlczsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJvdysrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJsYWNlTWV0aG9kID09PSAxKSB7CiAgICAgICAgICAgICAgICAvKgogICAgICAgICAgICAgICAgICAxIDYgNCA2IDIgNiA0IDYKICAgICAgICAgICAgICAgICAgNyA3IDcgNyA3IDcgNyA3CiAgICAgICAgICAgICAgICAgIDUgNiA1IDYgNSA2IDUgNgogICAgICAgICAgICAgICAgICA3IDcgNyA3IDcgNyA3IDcKICAgICAgICAgICAgICAgICAgMyA2IDQgNiAzIDYgNCA2CiAgICAgICAgICAgICAgICAgIDcgNyA3IDcgNyA3IDcgNwogICAgICAgICAgICAgICAgICA1IDYgNSA2IDUgNiA1IDYKICAgICAgICAgICAgICAgICAgNyA3IDcgNyA3IDcgNyA3CiAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgcGFzcygwLCAwLCA4LCA4KTsgLy8gMQogICAgICAgICAgICAgICAgcGFzcyg0LCAwLCA4LCA4KTsgLy8gMgogICAgICAgICAgICAgICAgcGFzcygwLCA0LCA0LCA4KTsgLy8gMwogICAgICAgICAgICAgICAgcGFzcygyLCAwLCA0LCA0KTsgLy8gNAogICAgICAgICAgICAgICAgcGFzcygwLCAyLCAyLCA0KTsgLy8gNQogICAgICAgICAgICAgICAgcGFzcygxLCAwLCAyLCAyKTsgLy8gNgogICAgICAgICAgICAgICAgcGFzcygwLCAxLCAxLCAyKTsgLy8gNwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwYXNzKDAsIDAsIDEsIDEsIHRydWUpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIGZuKHBpeGVscyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGRlY29kZVBhbGV0dGUoKSB7CiAgICAgICAgICAgIGNvbnN0IHsgcGFsZXR0ZSB9ID0gdGhpczsKICAgICAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHBhbGV0dGU7CiAgICAgICAgICAgIGNvbnN0IHRyYW5zcGFyZW5jeSA9IHRoaXMudHJhbnNwYXJlbmN5LmluZGV4ZWQgfHwgW107CiAgICAgICAgICAgIGNvbnN0IHJldCA9IG5ldyBCdWZmZXIodHJhbnNwYXJlbmN5Lmxlbmd0aCArIGxlbmd0aCk7CiAgICAgICAgICAgIGxldCBwb3MgPSAwOwogICAgICAgICAgICBsZXQgYyA9IDA7CgogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgICAgICAgdmFyIGxlZnQ7CiAgICAgICAgICAgICAgcmV0W3BvcysrXSA9IHBhbGV0dGVbaV07CiAgICAgICAgICAgICAgcmV0W3BvcysrXSA9IHBhbGV0dGVbaSArIDFdOwogICAgICAgICAgICAgIHJldFtwb3MrK10gPSBwYWxldHRlW2kgKyAyXTsKICAgICAgICAgICAgICByZXRbcG9zKytdID0gKGxlZnQgPSB0cmFuc3BhcmVuY3lbYysrXSkgIT0gbnVsbCA/IGxlZnQgOiAyNTU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgICB9CgogICAgICAgICAgY29weVRvSW1hZ2VEYXRhKGltYWdlRGF0YSwgcGl4ZWxzKSB7CiAgICAgICAgICAgIGxldCBqLCBrOwogICAgICAgICAgICBsZXQgeyBjb2xvcnMgfSA9IHRoaXM7CiAgICAgICAgICAgIGxldCBwYWxldHRlID0gbnVsbDsKICAgICAgICAgICAgbGV0IGFscGhhID0gdGhpcy5oYXNBbHBoYUNoYW5uZWw7CgogICAgICAgICAgICBpZiAodGhpcy5wYWxldHRlLmxlbmd0aCkgewogICAgICAgICAgICAgIHBhbGV0dGUgPQogICAgICAgICAgICAgICAgdGhpcy5fZGVjb2RlZFBhbGV0dGUgfHwgKHRoaXMuX2RlY29kZWRQYWxldHRlID0gdGhpcy5kZWNvZGVQYWxldHRlKCkpOwogICAgICAgICAgICAgIGNvbG9ycyA9IDQ7CiAgICAgICAgICAgICAgYWxwaGEgPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBkYXRhID0gaW1hZ2VEYXRhLmRhdGEgfHwgaW1hZ2VEYXRhOwogICAgICAgICAgICBjb25zdCB7IGxlbmd0aCB9ID0gZGF0YTsKICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBwYWxldHRlIHx8IHBpeGVsczsKICAgICAgICAgICAgbGV0IGkgPSAoaiA9IDApOwoKICAgICAgICAgICAgaWYgKGNvbG9ycyA9PT0gMSkgewogICAgICAgICAgICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBrID0gcGFsZXR0ZSA/IHBpeGVsc1tpIC8gNF0gKiA0IDogajsKICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBpbnB1dFtrKytdOwogICAgICAgICAgICAgICAgZGF0YVtpKytdID0gdjsKICAgICAgICAgICAgICAgIGRhdGFbaSsrXSA9IHY7CiAgICAgICAgICAgICAgICBkYXRhW2krK10gPSB2OwogICAgICAgICAgICAgICAgZGF0YVtpKytdID0gYWxwaGEgPyBpbnB1dFtrKytdIDogMjU1OwogICAgICAgICAgICAgICAgaiA9IGs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBrID0gcGFsZXR0ZSA/IHBpeGVsc1tpIC8gNF0gKiA0IDogajsKICAgICAgICAgICAgICAgIGRhdGFbaSsrXSA9IGlucHV0W2srK107CiAgICAgICAgICAgICAgICBkYXRhW2krK10gPSBpbnB1dFtrKytdOwogICAgICAgICAgICAgICAgZGF0YVtpKytdID0gaW5wdXRbaysrXTsKICAgICAgICAgICAgICAgIGRhdGFbaSsrXSA9IGFscGhhID8gaW5wdXRbaysrXSA6IDI1NTsKICAgICAgICAgICAgICAgIGogPSBrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGRlY29kZShmbikgewogICAgICAgICAgICBjb25zdCByZXQgPSBuZXcgQnVmZmVyKHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCAqIDQpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGVQaXhlbHMocGl4ZWxzID0+IHsKICAgICAgICAgICAgICB0aGlzLmNvcHlUb0ltYWdlRGF0YShyZXQsIHBpeGVscyk7CiAgICAgICAgICAgICAgcmV0dXJuIGZuKHJldCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNsYXNzIFBOR0ltYWdlIHsKICAgICAgICAgIGNvbnN0cnVjdG9yKGRhdGEsIGxhYmVsKSB7CiAgICAgICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDsKICAgICAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBwbmdOb2RlKGRhdGEpOwogICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aDsKICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodDsKICAgICAgICAgICAgdGhpcy5pbWdEYXRhID0gdGhpcy5pbWFnZS5pbWdEYXRhOwogICAgICAgICAgICB0aGlzLm9iaiA9IG51bGw7CiAgICAgICAgICB9CgogICAgICAgICAgZW1iZWQoZG9jdW1lbnQpIHsKICAgICAgICAgICAgbGV0IGRhdGFEZWNvZGVkID0gZmFsc2U7CgogICAgICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7CiAgICAgICAgICAgIGlmICh0aGlzLm9iaikgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgaGFzQWxwaGFDaGFubmVsID0gdGhpcy5pbWFnZS5oYXNBbHBoYUNoYW5uZWw7CiAgICAgICAgICAgIGNvbnN0IGlzSW50ZXJsYWNlZCA9IHRoaXMuaW1hZ2UuaW50ZXJsYWNlTWV0aG9kID09PSAxOwoKICAgICAgICAgICAgdGhpcy5vYmogPSB0aGlzLmRvY3VtZW50LnJlZih7CiAgICAgICAgICAgICAgVHlwZTogJ1hPYmplY3QnLAogICAgICAgICAgICAgIFN1YnR5cGU6ICdJbWFnZScsCiAgICAgICAgICAgICAgQml0c1BlckNvbXBvbmVudDogaGFzQWxwaGFDaGFubmVsID8gOCA6IHRoaXMuaW1hZ2UuYml0cywKICAgICAgICAgICAgICBXaWR0aDogdGhpcy53aWR0aCwKICAgICAgICAgICAgICBIZWlnaHQ6IHRoaXMuaGVpZ2h0LAogICAgICAgICAgICAgIEZpbHRlcjogJ0ZsYXRlRGVjb2RlJwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmICghaGFzQWxwaGFDaGFubmVsKSB7CiAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5kb2N1bWVudC5yZWYoewogICAgICAgICAgICAgICAgUHJlZGljdG9yOiBpc0ludGVybGFjZWQgPyAxIDogMTUsCiAgICAgICAgICAgICAgICBDb2xvcnM6IHRoaXMuaW1hZ2UuY29sb3JzLAogICAgICAgICAgICAgICAgQml0c1BlckNvbXBvbmVudDogdGhpcy5pbWFnZS5iaXRzLAogICAgICAgICAgICAgICAgQ29sdW1uczogdGhpcy53aWR0aAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICB0aGlzLm9iai5kYXRhWydEZWNvZGVQYXJtcyddID0gcGFyYW1zOwogICAgICAgICAgICAgIHBhcmFtcy5lbmQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2UucGFsZXR0ZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICB0aGlzLm9iai5kYXRhWydDb2xvclNwYWNlJ10gPSB0aGlzLmltYWdlLmNvbG9yU3BhY2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gZW1iZWQgdGhlIGNvbG9yIHBhbGV0dGUgaW4gdGhlIFBERiBhcyBhbiBvYmplY3Qgc3RyZWFtCiAgICAgICAgICAgICAgY29uc3QgcGFsZXR0ZSA9IHRoaXMuZG9jdW1lbnQucmVmKCk7CiAgICAgICAgICAgICAgcGFsZXR0ZS5lbmQobmV3IEJ1ZmZlcih0aGlzLmltYWdlLnBhbGV0dGUpKTsKCiAgICAgICAgICAgICAgLy8gYnVpbGQgdGhlIGNvbG9yIHNwYWNlIGFycmF5IGZvciB0aGUgaW1hZ2UKICAgICAgICAgICAgICB0aGlzLm9iai5kYXRhWydDb2xvclNwYWNlJ10gPSBbCiAgICAgICAgICAgICAgICAnSW5kZXhlZCcsCiAgICAgICAgICAgICAgICAnRGV2aWNlUkdCJywKICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2UucGFsZXR0ZS5sZW5ndGggLyAzIC0gMSwKICAgICAgICAgICAgICAgIHBhbGV0dGUKICAgICAgICAgICAgICBdOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBGb3IgUE5HIGNvbG9yIHR5cGVzIDAsIDIgYW5kIDMsIHRoZSB0cmFuc3BhcmVuY3kgZGF0YSBpcyBzdG9yZWQgaW4KICAgICAgICAgICAgLy8gYSBkZWRpY2F0ZWQgUE5HIGNodW5rLgogICAgICAgICAgICBpZiAodGhpcy5pbWFnZS50cmFuc3BhcmVuY3kuZ3JheXNjYWxlICE9IG51bGwpIHsKICAgICAgICAgICAgICAvLyBVc2UgQ29sb3IgS2V5IE1hc2tpbmcgKHNwZWMgc2VjdGlvbiA0LjguNSkKICAgICAgICAgICAgICAvLyBBbiBhcnJheSB3aXRoIE4gZWxlbWVudHMsIHdoZXJlIE4gaXMgdHdvIHRpbWVzIHRoZSBudW1iZXIgb2YgY29sb3IgY29tcG9uZW50cy4KICAgICAgICAgICAgICBjb25zdCB2YWwgPSB0aGlzLmltYWdlLnRyYW5zcGFyZW5jeS5ncmF5c2NhbGU7CiAgICAgICAgICAgICAgdGhpcy5vYmouZGF0YVsnTWFzayddID0gW3ZhbCwgdmFsXTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmltYWdlLnRyYW5zcGFyZW5jeS5yZ2IpIHsKICAgICAgICAgICAgICAvLyBVc2UgQ29sb3IgS2V5IE1hc2tpbmcgKHNwZWMgc2VjdGlvbiA0LjguNSkKICAgICAgICAgICAgICAvLyBBbiBhcnJheSB3aXRoIE4gZWxlbWVudHMsIHdoZXJlIE4gaXMgdHdvIHRpbWVzIHRoZSBudW1iZXIgb2YgY29sb3IgY29tcG9uZW50cy4KICAgICAgICAgICAgICBjb25zdCB7IHJnYiB9ID0gdGhpcy5pbWFnZS50cmFuc3BhcmVuY3k7CiAgICAgICAgICAgICAgY29uc3QgbWFzayA9IFtdOwogICAgICAgICAgICAgIGZvciAobGV0IHggb2YgcmdiKSB7CiAgICAgICAgICAgICAgICBtYXNrLnB1c2goeCwgeCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aGlzLm9iai5kYXRhWydNYXNrJ10gPSBtYXNrOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW1hZ2UudHJhbnNwYXJlbmN5LmluZGV4ZWQpIHsKICAgICAgICAgICAgICAvLyBDcmVhdGUgYSB0cmFuc3BhcmVuY3kgU01hc2sgZm9yIHRoZSBpbWFnZSBiYXNlZCBvbiB0aGUgZGF0YQogICAgICAgICAgICAgIC8vIGluIHRoZSBQTFRFIGFuZCB0Uk5TIHNlY3Rpb25zLiBTZWUgYmVsb3cgZm9yIGRldGFpbHMgb24gU01hc2tzLgogICAgICAgICAgICAgIGRhdGFEZWNvZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkSW5kZXhlZEFscGhhQ2hhbm5lbCgpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGhhc0FscGhhQ2hhbm5lbCkgewogICAgICAgICAgICAgIC8vIEZvciBQTkcgY29sb3IgdHlwZXMgNCBhbmQgNiwgdGhlIHRyYW5zcGFyZW5jeSBkYXRhIGlzIHN0b3JlZCBhcyBhIGFscGhhCiAgICAgICAgICAgICAgLy8gY2hhbm5lbCBtaXhlZCBpbiB3aXRoIHRoZSBtYWluIGltYWdlIGRhdGEuIFNlcGFyYXRlIHRoaXMgZGF0YSBvdXQgaW50byBhbgogICAgICAgICAgICAgIC8vIFNNYXNrIG9iamVjdCBhbmQgc3RvcmUgaXQgc2VwYXJhdGVseSBpbiB0aGUgUERGLgogICAgICAgICAgICAgIGRhdGFEZWNvZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zcGxpdEFscGhhQ2hhbm5lbCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoaXNJbnRlcmxhY2VkICYmICFkYXRhRGVjb2RlZCkgewogICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZURhdGEoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5maW5hbGl6ZSgpOwogICAgICAgICAgfQoKICAgICAgICAgIGZpbmFsaXplKCkgewogICAgICAgICAgICBpZiAodGhpcy5hbHBoYUNoYW5uZWwpIHsKICAgICAgICAgICAgICBjb25zdCBzTWFzayA9IHRoaXMuZG9jdW1lbnQucmVmKHsKICAgICAgICAgICAgICAgIFR5cGU6ICdYT2JqZWN0JywKICAgICAgICAgICAgICAgIFN1YnR5cGU6ICdJbWFnZScsCiAgICAgICAgICAgICAgICBIZWlnaHQ6IHRoaXMuaGVpZ2h0LAogICAgICAgICAgICAgICAgV2lkdGg6IHRoaXMud2lkdGgsCiAgICAgICAgICAgICAgICBCaXRzUGVyQ29tcG9uZW50OiA4LAogICAgICAgICAgICAgICAgRmlsdGVyOiAnRmxhdGVEZWNvZGUnLAogICAgICAgICAgICAgICAgQ29sb3JTcGFjZTogJ0RldmljZUdyYXknLAogICAgICAgICAgICAgICAgRGVjb2RlOiBbMCwgMV0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgc01hc2suZW5kKHRoaXMuYWxwaGFDaGFubmVsKTsKICAgICAgICAgICAgICB0aGlzLm9iai5kYXRhWydTTWFzayddID0gc01hc2s7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGFkZCB0aGUgYWN0dWFsIGltYWdlIGRhdGEKICAgICAgICAgICAgdGhpcy5vYmouZW5kKHRoaXMuaW1nRGF0YSk7CgogICAgICAgICAgICAvLyBmcmVlIG1lbW9yeQogICAgICAgICAgICB0aGlzLmltYWdlID0gbnVsbDsKICAgICAgICAgICAgcmV0dXJuICh0aGlzLmltZ0RhdGEgPSBudWxsKTsKICAgICAgICAgIH0KCiAgICAgICAgICBzcGxpdEFscGhhQ2hhbm5lbCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2UuZGVjb2RlUGl4ZWxzKHBpeGVscyA9PiB7CiAgICAgICAgICAgICAgbGV0IGEsIHA7CiAgICAgICAgICAgICAgY29uc3QgY29sb3JDb3VudCA9IHRoaXMuaW1hZ2UuY29sb3JzOwogICAgICAgICAgICAgIGNvbnN0IHBpeGVsQ291bnQgPSB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7CiAgICAgICAgICAgICAgY29uc3QgaW1nRGF0YSA9IG5ldyBCdWZmZXIocGl4ZWxDb3VudCAqIGNvbG9yQ291bnQpOwogICAgICAgICAgICAgIGNvbnN0IGFscGhhQ2hhbm5lbCA9IG5ldyBCdWZmZXIocGl4ZWxDb3VudCk7CgogICAgICAgICAgICAgIGxldCBpID0gKHAgPSBhID0gMCk7CiAgICAgICAgICAgICAgY29uc3QgbGVuID0gcGl4ZWxzLmxlbmd0aDsKICAgICAgICAgICAgICAvLyBGb3IgMTZiaXQgaW1hZ2VzIGNvcHkgb25seSBtb3N0IHNpZ25pZmljYW50IGJ5dGUgKE1TQikgLSBQTkcgZGF0YSBpcyBhbHdheXMgc3RvcmVkIGluIG5ldHdvcmsgYnl0ZSBvcmRlciAoTVNCIGZpcnN0KQogICAgICAgICAgICAgIGNvbnN0IHNraXBCeXRlQ291bnQgPSB0aGlzLmltYWdlLmJpdHMgPT09IDE2ID8gMSA6IDA7CiAgICAgICAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHsKICAgICAgICAgICAgICAgIGZvciAobGV0IGNvbG9ySW5kZXggPSAwOyBjb2xvckluZGV4IDwgY29sb3JDb3VudDsgY29sb3JJbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgIGltZ0RhdGFbcCsrXSA9IHBpeGVsc1tpKytdOwogICAgICAgICAgICAgICAgICBpICs9IHNraXBCeXRlQ291bnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhbHBoYUNoYW5uZWxbYSsrXSA9IHBpeGVsc1tpKytdOwogICAgICAgICAgICAgICAgaSArPSBza2lwQnl0ZUNvdW50OwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5pbWdEYXRhID0gemxpYi5kZWZsYXRlU3luYyhpbWdEYXRhKTsKICAgICAgICAgICAgICB0aGlzLmFscGhhQ2hhbm5lbCA9IHpsaWIuZGVmbGF0ZVN5bmMoYWxwaGFDaGFubmVsKTsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICBsb2FkSW5kZXhlZEFscGhhQ2hhbm5lbCgpIHsKICAgICAgICAgICAgY29uc3QgdHJhbnNwYXJlbmN5ID0gdGhpcy5pbWFnZS50cmFuc3BhcmVuY3kuaW5kZXhlZDsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2UuZGVjb2RlUGl4ZWxzKHBpeGVscyA9PiB7CiAgICAgICAgICAgICAgY29uc3QgYWxwaGFDaGFubmVsID0gbmV3IEJ1ZmZlcih0aGlzLndpZHRoICogdGhpcy5oZWlnaHQpOwoKICAgICAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGVuZCA9IHBpeGVscy5sZW5ndGg7IGogPCBlbmQ7IGorKykgewogICAgICAgICAgICAgICAgYWxwaGFDaGFubmVsW2krK10gPSB0cmFuc3BhcmVuY3lbcGl4ZWxzW2pdXTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRoaXMuYWxwaGFDaGFubmVsID0gemxpYi5kZWZsYXRlU3luYyhhbHBoYUNoYW5uZWwpOwogICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGRlY29kZURhdGEoKSB7CiAgICAgICAgICAgIHRoaXMuaW1hZ2UuZGVjb2RlUGl4ZWxzKHBpeGVscyA9PiB7CiAgICAgICAgICAgICAgdGhpcy5pbWdEYXRhID0gemxpYi5kZWZsYXRlU3luYyhwaXhlbHMpOwogICAgICAgICAgICAgIHRoaXMuZmluYWxpemUoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjbGFzcyBQREZJbWFnZSB7CiAgICAgICAgICBzdGF0aWMgb3BlbihzcmMsIGxhYmVsKSB7CiAgICAgICAgICAgIGxldCBkYXRhOwogICAgICAgICAgICBpZiAoaXNCdWZmZXIoc3JjKSkgewogICAgICAgICAgICAgIGRhdGEgPSBzcmM7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3JjIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHsKICAgICAgICAgICAgICBkYXRhID0gbmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShzcmMpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBsZXQgbWF0Y2g7CiAgICAgICAgICAgICAgaWYgKChtYXRjaCA9IC9eZGF0YTouKztiYXNlNjQsKC4qKSQvLmV4ZWMoc3JjKSkpIHsKICAgICAgICAgICAgICAgIGRhdGEgPSBuZXcgQnVmZmVyKG1hdGNoWzFdLCAnYmFzZTY0Jyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoc3JjKTsKICAgICAgICAgICAgICAgIGlmICghZGF0YSkgewogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZGF0YVswXSA9PT0gMHhmZiAmJiBkYXRhWzFdID09PSAweGQ4KSB7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKUEVHKGRhdGEsIGxhYmVsKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhWzBdID09PSAweDg5ICYmIGRhdGEudG9TdHJpbmcoJ2FzY2lpJywgMSwgNCkgPT09ICdQTkcnKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQTkdJbWFnZShkYXRhLCBsYWJlbCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGltYWdlIGZvcm1hdC4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIEltYWdlc01peGluID0gewogICAgICAgICAgaW5pdEltYWdlcygpIHsKICAgICAgICAgICAgdGhpcy5faW1hZ2VSZWdpc3RyeSA9IHt9OwogICAgICAgICAgICByZXR1cm4gKHRoaXMuX2ltYWdlQ291bnQgPSAwKTsKICAgICAgICAgIH0sCgogICAgICAgICAgaW1hZ2Uoc3JjLCB4LCB5LCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgbGV0IGJoLCBicCwgYncsIGltYWdlLCBpcCwgbGVmdCwgbGVmdDE7CiAgICAgICAgICAgIGlmICh0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICBvcHRpb25zID0geDsKICAgICAgICAgICAgICB4ID0gbnVsbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgeCA9IChsZWZ0ID0geCAhPSBudWxsID8geCA6IG9wdGlvbnMueCkgIT0gbnVsbCA/IGxlZnQgOiB0aGlzLng7CiAgICAgICAgICAgIHkgPSAobGVmdDEgPSB5ICE9IG51bGwgPyB5IDogb3B0aW9ucy55KSAhPSBudWxsID8gbGVmdDEgOiB0aGlzLnk7CgogICAgICAgICAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICBpbWFnZSA9IHRoaXMuX2ltYWdlUmVnaXN0cnlbc3JjXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFpbWFnZSkgewogICAgICAgICAgICAgIGlmIChzcmMud2lkdGggJiYgc3JjLmhlaWdodCkgewogICAgICAgICAgICAgICAgaW1hZ2UgPSBzcmM7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGltYWdlID0gdGhpcy5vcGVuSW1hZ2Uoc3JjKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghaW1hZ2Uub2JqKSB7CiAgICAgICAgICAgICAgaW1hZ2UuZW1iZWQodGhpcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2UueG9iamVjdHNbaW1hZ2UubGFiZWxdID09IG51bGwpIHsKICAgICAgICAgICAgICB0aGlzLnBhZ2UueG9iamVjdHNbaW1hZ2UubGFiZWxdID0gaW1hZ2Uub2JqOwogICAgICAgICAgICB9CgogICAgICAgICAgICBsZXQgdyA9IG9wdGlvbnMud2lkdGggfHwgaW1hZ2Uud2lkdGg7CiAgICAgICAgICAgIGxldCBoID0gb3B0aW9ucy5oZWlnaHQgfHwgaW1hZ2UuaGVpZ2h0OwoKICAgICAgICAgICAgaWYgKG9wdGlvbnMud2lkdGggJiYgIW9wdGlvbnMuaGVpZ2h0KSB7CiAgICAgICAgICAgICAgY29uc3Qgd3AgPSB3IC8gaW1hZ2Uud2lkdGg7CiAgICAgICAgICAgICAgdyA9IGltYWdlLndpZHRoICogd3A7CiAgICAgICAgICAgICAgaCA9IGltYWdlLmhlaWdodCAqIHdwOwogICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaGVpZ2h0ICYmICFvcHRpb25zLndpZHRoKSB7CiAgICAgICAgICAgICAgY29uc3QgaHAgPSBoIC8gaW1hZ2UuaGVpZ2h0OwogICAgICAgICAgICAgIHcgPSBpbWFnZS53aWR0aCAqIGhwOwogICAgICAgICAgICAgIGggPSBpbWFnZS5oZWlnaHQgKiBocDsKICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnNjYWxlKSB7CiAgICAgICAgICAgICAgdyA9IGltYWdlLndpZHRoICogb3B0aW9ucy5zY2FsZTsKICAgICAgICAgICAgICBoID0gaW1hZ2UuaGVpZ2h0ICogb3B0aW9ucy5zY2FsZTsKICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmZpdCkgewogICAgICAgICAgICAgIFtidywgYmhdID0gb3B0aW9ucy5maXQ7CiAgICAgICAgICAgICAgYnAgPSBidyAvIGJoOwogICAgICAgICAgICAgIGlwID0gaW1hZ2Uud2lkdGggLyBpbWFnZS5oZWlnaHQ7CiAgICAgICAgICAgICAgaWYgKGlwID4gYnApIHsKICAgICAgICAgICAgICAgIHcgPSBidzsKICAgICAgICAgICAgICAgIGggPSBidyAvIGlwOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBoID0gYmg7CiAgICAgICAgICAgICAgICB3ID0gYmggKiBpcDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jb3ZlcikgewogICAgICAgICAgICAgIFtidywgYmhdID0gb3B0aW9ucy5jb3ZlcjsKICAgICAgICAgICAgICBicCA9IGJ3IC8gYmg7CiAgICAgICAgICAgICAgaXAgPSBpbWFnZS53aWR0aCAvIGltYWdlLmhlaWdodDsKICAgICAgICAgICAgICBpZiAoaXAgPiBicCkgewogICAgICAgICAgICAgICAgaCA9IGJoOwogICAgICAgICAgICAgICAgdyA9IGJoICogaXA7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHcgPSBidzsKICAgICAgICAgICAgICAgIGggPSBidyAvIGlwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG9wdGlvbnMuZml0IHx8IG9wdGlvbnMuY292ZXIpIHsKICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hbGlnbiA9PT0gJ2NlbnRlcicpIHsKICAgICAgICAgICAgICAgIHggPSB4ICsgYncgLyAyIC0gdyAvIDI7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmFsaWduID09PSAncmlnaHQnKSB7CiAgICAgICAgICAgICAgICB4ID0geCArIGJ3IC0gdzsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChvcHRpb25zLnZhbGlnbiA9PT0gJ2NlbnRlcicpIHsKICAgICAgICAgICAgICAgIHkgPSB5ICsgYmggLyAyIC0gaCAvIDI7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnZhbGlnbiA9PT0gJ2JvdHRvbScpIHsKICAgICAgICAgICAgICAgIHkgPSB5ICsgYmggLSBoOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gY3JlYXRlIGxpbmsgYW5ub3RhdGlvbnMgaWYgdGhlIGxpbmsgb3B0aW9uIGlzIGdpdmVuCiAgICAgICAgICAgIGlmIChvcHRpb25zLmxpbmsgIT0gbnVsbCkgewogICAgICAgICAgICAgIHRoaXMubGluayh4LCB5LCB3LCBoLCBvcHRpb25zLmxpbmspOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvcHRpb25zLmdvVG8gIT0gbnVsbCkgewogICAgICAgICAgICAgIHRoaXMuZ29Ubyh4LCB5LCB3LCBoLCBvcHRpb25zLmdvVG8pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvcHRpb25zLmRlc3RpbmF0aW9uICE9IG51bGwpIHsKICAgICAgICAgICAgICB0aGlzLmFkZE5hbWVkRGVzdGluYXRpb24ob3B0aW9ucy5kZXN0aW5hdGlvbiwgJ1hZWicsIHgsIHksIG51bGwpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBTZXQgdGhlIGN1cnJlbnQgeSBwb3NpdGlvbiB0byBiZWxvdyB0aGUgaW1hZ2UgaWYgaXQgaXMgaW4gdGhlIGRvY3VtZW50IGZsb3cKICAgICAgICAgICAgaWYgKHRoaXMueSA9PT0geSkgewogICAgICAgICAgICAgIHRoaXMueSArPSBoOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnNhdmUoKTsKICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0odywgMCwgMCwgLWgsIHgsIHkgKyBoKTsKICAgICAgICAgICAgdGhpcy5hZGRDb250ZW50KGAvJHtpbWFnZS5sYWJlbH0gRG9gKTsKICAgICAgICAgICAgdGhpcy5yZXN0b3JlKCk7CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0sCgogICAgICAgICAgb3BlbkltYWdlKHNyYykgewogICAgICAgICAgICBsZXQgaW1hZ2U7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgIGltYWdlID0gdGhpcy5faW1hZ2VSZWdpc3RyeVtzcmNdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIWltYWdlKSB7CiAgICAgICAgICAgICAgaW1hZ2UgPSBQREZJbWFnZS5vcGVuKHNyYywgYEkkeysrdGhpcy5faW1hZ2VDb3VudH1gKTsKICAgICAgICAgICAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2ltYWdlUmVnaXN0cnlbc3JjXSA9IGltYWdlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGltYWdlOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNvbnN0IGJ1ZmZlclNpemUgPSA5MDA3MTk5MjU0NzQwOTkxOwoKICAgICAgICB2YXIgT3V0cHV0RG9jdW1lbnQgPSB7CgogICAgICAgIAlnZXRTdHJlYW0oKSB7CiAgICAgICAgCQlyZXR1cm4gdGhpczsKICAgICAgICAJfSwKCiAgICAgICAgCS8qKgogICAgICAgIAkgKiBAcmV0dXJucyB7UHJvbWlzZX0KICAgICAgICAJICovCiAgICAgICAgCWdldEJ1ZmZlcigpIHsKICAgICAgICAJCXJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgCQkJdHJ5IHsKICAgICAgICAJCQkJbGV0IGNodW5rcyA9IFtdOwogICAgICAgIAkJCQlsZXQgcmVzdWx0OwogICAgICAgIAkJCQl0aGlzLmdldFN0cmVhbSgpLm9uKCdyZWFkYWJsZScsICgpID0+IHsKICAgICAgICAJCQkJCWxldCBjaHVuazsKICAgICAgICAJCQkJCXdoaWxlICgoY2h1bmsgPSB0aGlzLmdldFN0cmVhbSgpLnJlYWQoYnVmZmVyU2l6ZSkpICE9PSBudWxsKSB7CiAgICAgICAgCQkJCQkJY2h1bmtzLnB1c2goY2h1bmspOwogICAgICAgIAkJCQkJfQogICAgICAgIAkJCQl9KTsKICAgICAgICAJCQkJdGhpcy5nZXRTdHJlYW0oKS5vbignZW5kJywgKCkgPT4gewogICAgICAgIAkJCQkJcmVzdWx0ID0gQnVmZmVyLmNvbmNhdChjaHVua3MpOwogICAgICAgIAkJCQkJcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIAkJCQl9KTsKICAgICAgICAJCQkJdGhpcy5nZXRTdHJlYW0oKS5lbmQoKTsKICAgICAgICAJCQl9IGNhdGNoIChlKSB7CiAgICAgICAgCQkJCXJlamVjdChlKTsKICAgICAgICAJCQl9CiAgICAgICAgCQl9KTsKICAgICAgICAJfSwKCiAgICAgICAgCS8qKgogICAgICAgIAkgKiBAcmV0dXJucyB7UHJvbWlzZX0KICAgICAgICAJICovCiAgICAgICAgCWdldEJhc2U2NCgpIHsKICAgICAgICAJCXJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgCQkJdGhpcy5nZXRCdWZmZXIoKS50aGVuKGJ1ZmZlciA9PiB7CiAgICAgICAgCQkJCXJlc29sdmUoYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKSk7CiAgICAgICAgCQkJfSwgcmVzdWx0ID0+IHsKICAgICAgICAJCQkJcmVqZWN0KHJlc3VsdCk7CiAgICAgICAgCQkJfSk7CiAgICAgICAgCQl9KTsKICAgICAgICAJfSwKCiAgICAgICAgCS8qKgogICAgICAgIAkgKiBAcmV0dXJucyB7UHJvbWlzZX0KICAgICAgICAJICovCiAgICAgICAgCWdldERhdGFVcmwoKSB7CiAgICAgICAgCQlyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgIAkJCXRoaXMuZ2V0QmFzZTY0KCkudGhlbihkYXRhID0+IHsKICAgICAgICAJCQkJcmVzb2x2ZSgnZGF0YTphcHBsaWNhdGlvbi9wZGY7YmFzZTY0LCcgKyBkYXRhKTsKICAgICAgICAJCQl9LCByZXN1bHQgPT4gewogICAgICAgIAkJCQlyZWplY3QocmVzdWx0KTsKICAgICAgICAJCQl9KTsKICAgICAgICAJCX0pOwogICAgICAgIAl9LAoKICAgICAgICB9OwoKICAgICAgICB2YXIgRmlsZVNhdmVyID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgIChmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7CiAgICAgICAgICB7CiAgICAgICAgICAgIGZhY3RvcnkoKTsKICAgICAgICAgIH0KICAgICAgICB9KShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKCkgewoKICAgICAgICAgIC8qCiAgICAgICAgICAqIEZpbGVTYXZlci5qcwogICAgICAgICAgKiBBIHNhdmVBcygpIEZpbGVTYXZlciBpbXBsZW1lbnRhdGlvbi4KICAgICAgICAgICoKICAgICAgICAgICogQnkgRWxpIEdyZXksIGh0dHA6Ly9lbGlncmV5LmNvbQogICAgICAgICAgKgogICAgICAgICAgKiBMaWNlbnNlIDogaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvRmlsZVNhdmVyLmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQgKE1JVCkKICAgICAgICAgICogc291cmNlICA6IGh0dHA6Ly9wdXJsLmVsaWdyZXkuY29tL2dpdGh1Yi9GaWxlU2F2ZXIuanMKICAgICAgICAgICovCiAgICAgICAgICAvLyBUaGUgb25lIGFuZCBvbmx5IHdheSBvZiBnZXR0aW5nIGdsb2JhbCBzY29wZSBpbiBhbGwgZW52aXJvbm1lbnRzCiAgICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMzI3NzE4Mi8xMDA4OTk5CiAgICAgICAgICB2YXIgX2dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy53aW5kb3cgPT09IHdpbmRvdyA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGYgPyBzZWxmIDogdHlwZW9mIGNvbW1vbmpzR2xvYmFsID09PSAnb2JqZWN0JyAmJiBjb21tb25qc0dsb2JhbC5nbG9iYWwgPT09IGNvbW1vbmpzR2xvYmFsID8gY29tbW9uanNHbG9iYWwgOiB2b2lkIDA7CgogICAgICAgICAgZnVuY3Rpb24gYm9tKGJsb2IsIG9wdHMpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJykgb3B0cyA9IHsKICAgICAgICAgICAgICBhdXRvQm9tOiBmYWxzZQogICAgICAgICAgICB9O2Vsc2UgaWYgKHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0JykgewogICAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3QnKTsKICAgICAgICAgICAgICBvcHRzID0gewogICAgICAgICAgICAgICAgYXV0b0JvbTogIW9wdHMKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IC8vIHByZXBlbmQgQk9NIGZvciBVVEYtOCBYTUwgYW5kIHRleHQvKiB0eXBlcyAoaW5jbHVkaW5nIEhUTUwpCiAgICAgICAgICAgIC8vIG5vdGU6IHlvdXIgYnJvd3NlciB3aWxsIGF1dG9tYXRpY2FsbHkgY29udmVydCBVVEYtMTYgVStGRUZGIHRvIEVGIEJCIEJGCgogICAgICAgICAgICBpZiAob3B0cy5hdXRvQm9tICYmIC9eXHMqKD86dGV4dFwvXFMqfGFwcGxpY2F0aW9uXC94bWx8XFMqXC9cUypcK3htbClccyo7LipjaGFyc2V0XHMqPVxzKnV0Zi04L2kudGVzdChibG9iLnR5cGUpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkVGRiksIGJsb2JdLCB7CiAgICAgICAgICAgICAgICB0eXBlOiBibG9iLnR5cGUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGJsb2I7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gZG93bmxvYWQodXJsLCBuYW1lLCBvcHRzKSB7CiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7CiAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYic7CgogICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHNhdmVBcyh4aHIucmVzcG9uc2UsIG5hbWUsIG9wdHMpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignY291bGQgbm90IGRvd25sb2FkIGZpbGUnKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHhoci5zZW5kKCk7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gY29yc0VuYWJsZWQodXJsKSB7CiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsgLy8gdXNlIHN5bmMgdG8gYXZvaWQgcG9wdXAgYmxvY2tlcgoKICAgICAgICAgICAgeGhyLm9wZW4oJ0hFQUQnLCB1cmwsIGZhbHNlKTsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgeGhyLnNlbmQoKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KCiAgICAgICAgICAgIHJldHVybiB4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDw9IDI5OTsKICAgICAgICAgIH0gLy8gYGEuY2xpY2soKWAgZG9lc24ndCB3b3JrIGZvciBhbGwgYnJvd3NlcnMgKCM0NjUpCgoKICAgICAgICAgIGZ1bmN0aW9uIGNsaWNrKG5vZGUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBub2RlLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoJ2NsaWNrJykpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50cycpOwogICAgICAgICAgICAgIGV2dC5pbml0TW91c2VFdmVudCgnY2xpY2snLCB0cnVlLCB0cnVlLCB3aW5kb3csIDAsIDAsIDAsIDgwLCAyMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpOwogICAgICAgICAgICAgIG5vZGUuZGlzcGF0Y2hFdmVudChldnQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IC8vIERldGVjdCBXZWJWaWV3IGluc2lkZSBhIG5hdGl2ZSBtYWNPUyBhcHAgYnkgcnVsaW5nIG91dCBhbGwgYnJvd3NlcnMKICAgICAgICAgIC8vIFdlIGp1c3QgbmVlZCB0byBjaGVjayBmb3IgJ1NhZmFyaScgYmVjYXVzZSBhbGwgb3RoZXIgYnJvd3NlcnMgKGJlc2lkZXMgRmlyZWZveCkgaW5jbHVkZSB0aGF0IHRvbwogICAgICAgICAgLy8gaHR0cHM6Ly93d3cud2hhdGlzbXlicm93c2VyLmNvbS9ndWlkZXMvdGhlLWxhdGVzdC11c2VyLWFnZW50L21hY29zCgoKICAgICAgICAgIHZhciBpc01hY09TV2ViVmlldyA9IF9nbG9iYWwubmF2aWdhdG9yICYmIC9NYWNpbnRvc2gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgL0FwcGxlV2ViS2l0Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICEvU2FmYXJpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOwogICAgICAgICAgdmFyIHNhdmVBcyA9IF9nbG9iYWwuc2F2ZUFzIHx8ICggLy8gcHJvYmFibHkgaW4gc29tZSB3ZWIgd29ya2VyCiAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCB3aW5kb3cgIT09IF9nbG9iYWwgPyBmdW5jdGlvbiBzYXZlQXMoKSB7fQogICAgICAgICAgLyogbm9vcCAqLwogICAgICAgICAgLy8gVXNlIGRvd25sb2FkIGF0dHJpYnV0ZSBmaXJzdCBpZiBwb3NzaWJsZSAoIzE5MyBMdW1pYSBtb2JpbGUpIHVubGVzcyB0aGlzIGlzIGEgbWFjT1MgV2ViVmlldwogICAgICAgICAgOiAnZG93bmxvYWQnIGluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZSAmJiAhaXNNYWNPU1dlYlZpZXcgPyBmdW5jdGlvbiBzYXZlQXMoYmxvYiwgbmFtZSwgb3B0cykgewogICAgICAgICAgICB2YXIgVVJMID0gX2dsb2JhbC5VUkwgfHwgX2dsb2JhbC53ZWJraXRVUkw7CiAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgICAgICBuYW1lID0gbmFtZSB8fCBibG9iLm5hbWUgfHwgJ2Rvd25sb2FkJzsKICAgICAgICAgICAgYS5kb3dubG9hZCA9IG5hbWU7CiAgICAgICAgICAgIGEucmVsID0gJ25vb3BlbmVyJzsgLy8gdGFibmFiYmluZwogICAgICAgICAgICAvLyBUT0RPOiBkZXRlY3QgY2hyb21lIGV4dGVuc2lvbnMgJiBwYWNrYWdlZCBhcHBzCiAgICAgICAgICAgIC8vIGEudGFyZ2V0ID0gJ19ibGFuaycKCiAgICAgICAgICAgIGlmICh0eXBlb2YgYmxvYiA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAvLyBTdXBwb3J0IHJlZ3VsYXIgbGlua3MKICAgICAgICAgICAgICBhLmhyZWYgPSBibG9iOwoKICAgICAgICAgICAgICBpZiAoYS5vcmlnaW4gIT09IGxvY2F0aW9uLm9yaWdpbikgewogICAgICAgICAgICAgICAgY29yc0VuYWJsZWQoYS5ocmVmKSA/IGRvd25sb2FkKGJsb2IsIG5hbWUsIG9wdHMpIDogY2xpY2soYSwgYS50YXJnZXQgPSAnX2JsYW5rJyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNsaWNrKGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBTdXBwb3J0IGJsb2JzCiAgICAgICAgICAgICAgYS5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoYS5ocmVmKTsKICAgICAgICAgICAgICB9LCA0RTQpOyAvLyA0MHMKCiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjbGljayhhKTsKICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSAvLyBVc2UgbXNTYXZlT3JPcGVuQmxvYiBhcyBhIHNlY29uZCBhcHByb2FjaAogICAgICAgICAgOiAnbXNTYXZlT3JPcGVuQmxvYicgaW4gbmF2aWdhdG9yID8gZnVuY3Rpb24gc2F2ZUFzKGJsb2IsIG5hbWUsIG9wdHMpIHsKICAgICAgICAgICAgbmFtZSA9IG5hbWUgfHwgYmxvYi5uYW1lIHx8ICdkb3dubG9hZCc7CgogICAgICAgICAgICBpZiAodHlwZW9mIGJsb2IgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgaWYgKGNvcnNFbmFibGVkKGJsb2IpKSB7CiAgICAgICAgICAgICAgICBkb3dubG9hZChibG9iLCBuYW1lLCBvcHRzKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgICAgICAgICBhLmhyZWYgPSBibG9iOwogICAgICAgICAgICAgICAgYS50YXJnZXQgPSAnX2JsYW5rJzsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBjbGljayhhKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihib20oYmxvYiwgb3B0cyksIG5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IC8vIEZhbGxiYWNrIHRvIHVzaW5nIEZpbGVSZWFkZXIgYW5kIGEgcG9wdXAKICAgICAgICAgIDogZnVuY3Rpb24gc2F2ZUFzKGJsb2IsIG5hbWUsIG9wdHMsIHBvcHVwKSB7CiAgICAgICAgICAgIC8vIE9wZW4gYSBwb3B1cCBpbW1lZGlhdGVseSBkbyBnbyBhcm91bmQgcG9wdXAgYmxvY2tlcgogICAgICAgICAgICAvLyBNb3N0bHkgb25seSBhdmFpbGFibGUgb24gdXNlciBpbnRlcmFjdGlvbiBhbmQgdGhlIGZpbGVSZWFkZXIgaXMgYXN5bmMgc28uLi4KICAgICAgICAgICAgcG9wdXAgPSBwb3B1cCB8fCBvcGVuKCcnLCAnX2JsYW5rJyk7CgogICAgICAgICAgICBpZiAocG9wdXApIHsKICAgICAgICAgICAgICBwb3B1cC5kb2N1bWVudC50aXRsZSA9IHBvcHVwLmRvY3VtZW50LmJvZHkuaW5uZXJUZXh0ID0gJ2Rvd25sb2FkaW5nLi4uJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHR5cGVvZiBibG9iID09PSAnc3RyaW5nJykgcmV0dXJuIGRvd25sb2FkKGJsb2IsIG5hbWUsIG9wdHMpOwogICAgICAgICAgICB2YXIgZm9yY2UgPSBibG9iLnR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nOwoKICAgICAgICAgICAgdmFyIGlzU2FmYXJpID0gL2NvbnN0cnVjdG9yL2kudGVzdChfZ2xvYmFsLkhUTUxFbGVtZW50KSB8fCBfZ2xvYmFsLnNhZmFyaTsKCiAgICAgICAgICAgIHZhciBpc0Nocm9tZUlPUyA9IC9DcmlPU1wvW1xkXSsvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7CgogICAgICAgICAgICBpZiAoKGlzQ2hyb21lSU9TIHx8IGZvcmNlICYmIGlzU2FmYXJpIHx8IGlzTWFjT1NXZWJWaWV3KSAmJiB0eXBlb2YgRmlsZVJlYWRlciAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAvLyBTYWZhcmkgZG9lc24ndCBhbGxvdyBkb3dubG9hZGluZyBvZiBibG9iIFVSTHMKICAgICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKCiAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciB1cmwgPSByZWFkZXIucmVzdWx0OwogICAgICAgICAgICAgICAgdXJsID0gaXNDaHJvbWVJT1MgPyB1cmwgOiB1cmwucmVwbGFjZSgvXmRhdGE6W147XSo7LywgJ2RhdGE6YXR0YWNobWVudC9maWxlOycpOwogICAgICAgICAgICAgICAgaWYgKHBvcHVwKSBwb3B1cC5sb2NhdGlvbi5ocmVmID0gdXJsO2Vsc2UgbG9jYXRpb24gPSB1cmw7CiAgICAgICAgICAgICAgICBwb3B1cCA9IG51bGw7IC8vIHJldmVyc2UtdGFibmFiYmluZyAjNDYwCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIFVSTCA9IF9nbG9iYWwuVVJMIHx8IF9nbG9iYWwud2Via2l0VVJMOwogICAgICAgICAgICAgIHZhciB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgICAgICAgICAgIGlmIChwb3B1cCkgcG9wdXAubG9jYXRpb24gPSB1cmw7ZWxzZSBsb2NhdGlvbi5ocmVmID0gdXJsOwogICAgICAgICAgICAgIHBvcHVwID0gbnVsbDsgLy8gcmV2ZXJzZS10YWJuYWJiaW5nICM0NjAKCiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7CiAgICAgICAgICAgICAgfSwgNEU0KTsgLy8gNDBzCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgX2dsb2JhbC5zYXZlQXMgPSBzYXZlQXMuc2F2ZUFzID0gc2F2ZUFzOwoKICAgICAgICAgIHsKICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBzYXZlQXM7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIGNvbnN0IGJ1ZmZlclRvQmxvYiA9IGJ1ZmZlciA9PiB7CiAgICAgICAgCWxldCBibG9iOwogICAgICAgIAl0cnkgewogICAgICAgIAkJYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnIH0pOwogICAgICAgIAl9IGNhdGNoIChlKSB7CiAgICAgICAgCQkvLyBPbGQgYnJvd3NlciB3aGljaCBjYW4ndCBoYW5kbGUgaXQgd2l0aG91dCBtYWtpbmcgaXQgYW4gYnl0ZSBhcnJheSAoaWUxMCkKICAgICAgICAJCWlmIChlLm5hbWUgPT09ICdJbnZhbGlkU3RhdGVFcnJvcicpIHsKICAgICAgICAJCQlsZXQgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTsKICAgICAgICAJCQlibG9iID0gbmV3IEJsb2IoW2J5dGVBcnJheS5idWZmZXJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnIH0pOwogICAgICAgIAkJfQogICAgICAgIAl9CgogICAgICAgIAlpZiAoIWJsb2IpIHsKICAgICAgICAJCXRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGdlbmVyYXRlIGJsb2InKTsKICAgICAgICAJfQoKICAgICAgICAJcmV0dXJuIGJsb2I7CiAgICAgICAgfTsKCiAgICAgICAgY29uc3Qgb3BlbldpbmRvdyA9ICgpID0+IHsKICAgICAgICAJLy8gd2UgaGF2ZSB0byBvcGVuIHRoZSB3aW5kb3cgaW1tZWRpYXRlbHkgYW5kIHN0b3JlIHRoZSByZWZlcmVuY2UKICAgICAgICAJLy8gb3RoZXJ3aXNlIHBvcHVwIGJsb2NrZXJzIHdpbGwgc3RvcCB1cwogICAgICAgIAlsZXQgd2luID0gd2luZG93Lm9wZW4oJycsICdfYmxhbmsnKTsKICAgICAgICAJaWYgKHdpbiA9PT0gbnVsbCkgewogICAgICAgIAkJdGhyb3cgbmV3IEVycm9yKCdPcGVuIFBERiBpbiBuZXcgd2luZG93IGJsb2NrZWQgYnkgYnJvd3NlcicpOwogICAgICAgIAl9CgogICAgICAgIAlyZXR1cm4gd2luOwogICAgICAgIH07CgogICAgICAgIGNvbnN0IE91dHB1dERvY3VtZW50QnJvd3NlciA9IE9iamVjdC5hc3NpZ24oe30sIE91dHB1dERvY3VtZW50LCB7CgogICAgICAgIAkvKioKICAgICAgICAJICogQHJldHVybnMge1Byb21pc2V9CiAgICAgICAgCSAqLwogICAgICAgIAlnZXRCbG9iKCkgewogICAgICAgIAkJcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAJCQl0aGlzLmdldEJ1ZmZlcigpLnRoZW4oYnVmZmVyID0+IHsKICAgICAgICAJCQkJbGV0IGJsb2IgPSBidWZmZXJUb0Jsb2IoYnVmZmVyKTsKICAgICAgICAJCQkJcmVzb2x2ZShibG9iKTsKICAgICAgICAJCQl9LCByZXN1bHQgPT4gewogICAgICAgIAkJCQlyZWplY3QocmVzdWx0KTsKICAgICAgICAJCQl9KTsKICAgICAgICAJCX0pOwogICAgICAgIAl9LAoKICAgICAgICAJLyoqCiAgICAgICAgCSAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZQogICAgICAgIAkgKiBAcmV0dXJucyB7UHJvbWlzZX0KICAgICAgICAJICovCiAgICAgICAgCWRvd25sb2FkKGZpbGVuYW1lID0gJ2ZpbGUucGRmJykgewogICAgICAgIAkJcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAJCQl0aGlzLmdldEJsb2IoKS50aGVuKGJsb2IgPT4gewogICAgICAgIAkJCQlGaWxlU2F2ZXIoYmxvYiwgZmlsZW5hbWUpOwogICAgICAgIAkJCQlyZXNvbHZlKCk7CiAgICAgICAgCQkJfSwgcmVzdWx0ID0+IHsKICAgICAgICAJCQkJcmVqZWN0KHJlc3VsdCk7CiAgICAgICAgCQkJfSk7CiAgICAgICAgCQl9KTsKICAgICAgICAJfSwKCiAgICAgICAgCS8qKgogICAgICAgIAkgKiBAcGFyYW0ge1dpbmRvd30gd2luCiAgICAgICAgCSAqIEByZXR1cm5zIHtQcm9taXNlfQogICAgICAgIAkgKi8KICAgICAgICAJb3Blbih3aW4gPSBudWxsKSB7CiAgICAgICAgCQlyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgIAkJCWlmICghd2luKSB7CiAgICAgICAgCQkJCXdpbiA9IG9wZW5XaW5kb3coKTsKICAgICAgICAJCQl9CiAgICAgICAgCQkJdGhpcy5nZXRCbG9iKCkudGhlbihibG9iID0+IHsKICAgICAgICAJCQkJdHJ5IHsKICAgICAgICAJCQkJCWxldCB1cmxDcmVhdG9yID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMOwogICAgICAgIAkJCQkJbGV0IHBkZlVybCA9IHVybENyZWF0b3IuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgICAgIAkJCQkJd2luLmxvY2F0aW9uLmhyZWYgPSBwZGZVcmw7CgogICAgICAgIAkJCQkJLy8KICAgICAgICAJCQkJCXJlc29sdmUoKTsKICAgICAgICAJCQkJCS8qIHRlbXBvcmFyaWx5IGRpc2FibGVkCiAgICAgICAgCQkJCQlpZiAod2luID09PSB3aW5kb3cpIHsKICAgICAgICAJCQkJCQlyZXNvbHZlKCk7CiAgICAgICAgCQkJCQl9IGVsc2UgewogICAgICAgIAkJCQkJCXNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIAkJCQkJCQlpZiAod2luLndpbmRvdyA9PT0gbnVsbCkgeyAvLyBpcyBjbG9zZWQgYnkgQWRCbG9jawogICAgICAgIAkJCQkJCQkJd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwZGZVcmw7IC8vIG9wZW4gaW4gYWN0dWFsIHdpbmRvdwogICAgICAgIAkJCQkJCQl9CiAgICAgICAgCQkJCQkJCXJlc29sdmUoKTsKICAgICAgICAJCQkJCQl9LCA1MDApOwogICAgICAgIAkJCQkJfQogICAgICAgIAkJCQkJKi8KICAgICAgICAJCQkJfSBjYXRjaCAoZSkgewogICAgICAgIAkJCQkJd2luLmNsb3NlKCk7CiAgICAgICAgCQkJCQl0aHJvdyBlOwogICAgICAgIAkJCQl9CiAgICAgICAgCQkJfSwgcmVzdWx0ID0+IHsKICAgICAgICAJCQkJcmVqZWN0KHJlc3VsdCk7CiAgICAgICAgCQkJfSk7CiAgICAgICAgCQl9KTsKICAgICAgICAJfSwKCiAgICAgICAgCS8qKgogICAgICAgIAkgKiBAcGFyYW0ge1dpbmRvd30gd2luCiAgICAgICAgCSAqIEByZXR1cm5zIHtQcm9taXNlfQogICAgICAgIAkgKi8KICAgICAgICAJcHJpbnQod2luID0gbnVsbCkgewogICAgICAgIAkJdGhpcy5nZXRTdHJlYW0oKS5zZXRPcGVuQWN0aW9uQXNQcmludCgpOwogICAgICAgIAkJcmV0dXJuIHRoaXMub3Blbih3aW4pOwogICAgICAgIAl9LAoKICAgICAgICB9KTsKCiAgICAgICAgY2xhc3MgUERGRG9jdW1lbnQgZXh0ZW5kcyBTdHJlYW0uUmVhZGFibGUgewogICAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7CiAgICAgICAgICAgIHN1cGVyKG9wdGlvbnMpOwogICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwoKICAgICAgICAgICAgLy8gUERGIHZlcnNpb24KICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLnBkZlZlcnNpb24pIHsKICAgICAgICAgICAgICBjYXNlICcxLjQnOgogICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uID0gMS40OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSAnMS41JzoKICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IDEuNTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgJzEuNic6CiAgICAgICAgICAgICAgICB0aGlzLnZlcnNpb24gPSAxLjY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlICcxLjcnOgogICAgICAgICAgICAgIGNhc2UgJzEuN2V4dDMnOgogICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uID0gMS43OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IDEuMzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBXaGV0aGVyIHN0cmVhbXMgc2hvdWxkIGJlIGNvbXByZXNzZWQKICAgICAgICAgICAgdGhpcy5jb21wcmVzcyA9CiAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmNvbXByZXNzICE9IG51bGwgPyB0aGlzLm9wdGlvbnMuY29tcHJlc3MgOiB0cnVlOwoKICAgICAgICAgICAgdGhpcy5fcGFnZUJ1ZmZlciA9IFtdOwogICAgICAgICAgICB0aGlzLl9wYWdlQnVmZmVyU3RhcnQgPSAwOwoKICAgICAgICAgICAgLy8gVGhlIFBERiBvYmplY3Qgc3RvcmUKICAgICAgICAgICAgdGhpcy5fb2Zmc2V0cyA9IFtdOwogICAgICAgICAgICB0aGlzLl93YWl0aW5nID0gMDsKICAgICAgICAgICAgdGhpcy5fZW5kZWQgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gMDsKICAgICAgICAgICAgY29uc3QgUGFnZXMgPSB0aGlzLnJlZih7CiAgICAgICAgICAgICAgVHlwZTogJ1BhZ2VzJywKICAgICAgICAgICAgICBDb3VudDogMCwKICAgICAgICAgICAgICBLaWRzOiBbXQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNvbnN0IE5hbWVzID0gdGhpcy5yZWYoewogICAgICAgICAgICAgIERlc3RzOiBuZXcgUERGTmFtZVRyZWUoKQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSB0aGlzLnJlZih7CiAgICAgICAgICAgICAgVHlwZTogJ0NhdGFsb2cnLAogICAgICAgICAgICAgIFBhZ2VzLAogICAgICAgICAgICAgIE5hbWVzCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgcGFnZQogICAgICAgICAgICB0aGlzLnBhZ2UgPSBudWxsOwoKICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBtaXhpbnMKICAgICAgICAgICAgdGhpcy5pbml0Q29sb3IoKTsKICAgICAgICAgICAgdGhpcy5pbml0VmVjdG9yKCk7CiAgICAgICAgICAgIHRoaXMuaW5pdEltYWdlcygpOwoKICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgbWV0YWRhdGEKICAgICAgICAgICAgdGhpcy5pbmZvID0gewogICAgICAgICAgICAgIFByb2R1Y2VyOiAnUERGS2l0JywKICAgICAgICAgICAgICBDcmVhdG9yOiAnUERGS2l0JywKICAgICAgICAgICAgICBDcmVhdGlvbkRhdGU6IG5ldyBEYXRlKCkKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5mbykgewogICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLm9wdGlvbnMuaW5mbykgewogICAgICAgICAgICAgICAgY29uc3QgdmFsID0gdGhpcy5vcHRpb25zLmluZm9ba2V5XTsKICAgICAgICAgICAgICAgIHRoaXMuaW5mb1trZXldID0gdmFsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gR2VuZXJhdGUgZmlsZSBJRAogICAgICAgICAgICB0aGlzLl9pZCA9IFBERlNlY3VyaXR5LmdlbmVyYXRlRmlsZUlEKHRoaXMuaW5mbyk7CgogICAgICAgICAgICAvLyBJbml0aWFsaXplIHNlY3VyaXR5IHNldHRpbmdzCiAgICAgICAgICAgIHRoaXMuX3NlY3VyaXR5ID0gUERGU2VjdXJpdHkuY3JlYXRlKHRoaXMsIG9wdGlvbnMpOwoKICAgICAgICAgICAgLy8gV3JpdGUgdGhlIGhlYWRlcgogICAgICAgICAgICAvLyBQREYgdmVyc2lvbgogICAgICAgICAgICB0aGlzLl93cml0ZShgJVBERi0ke3RoaXMudmVyc2lvbn1gKTsKCiAgICAgICAgICAgIC8vIDQgYmluYXJ5IGNoYXJzLCBhcyByZWNvbW1lbmRlZCBieSB0aGUgc3BlYwogICAgICAgICAgICB0aGlzLl93cml0ZSgnJVx4RkZceEZGXHhGRlx4RkYnKTsKCiAgICAgICAgICAgIC8vIEFkZCB0aGUgZmlyc3QgcGFnZQogICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9GaXJzdFBhZ2UgIT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgdGhpcy5hZGRQYWdlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBhZGRQYWdlKG9wdGlvbnMpIHsKICAgICAgICAgICAgLy8gZW5kIHRoZSBjdXJyZW50IHBhZ2UgaWYgbmVlZGVkCiAgICAgICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHsKICAgICAgICAgICAgICAoeyBvcHRpb25zIH0gPSB0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5idWZmZXJQYWdlcykgewogICAgICAgICAgICAgIHRoaXMuZmx1c2hQYWdlcygpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBjcmVhdGUgYSBwYWdlIG9iamVjdAogICAgICAgICAgICB0aGlzLnBhZ2UgPSBuZXcgUERGUGFnZSh0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgdGhpcy5fcGFnZUJ1ZmZlci5wdXNoKHRoaXMucGFnZSk7CgogICAgICAgICAgICAvLyBhZGQgdGhlIHBhZ2UgdG8gdGhlIG9iamVjdCBzdG9yZQogICAgICAgICAgICBjb25zdCBwYWdlcyA9IHRoaXMuX3Jvb3QuZGF0YS5QYWdlcy5kYXRhOwogICAgICAgICAgICBwYWdlcy5LaWRzLnB1c2godGhpcy5wYWdlLmRpY3Rpb25hcnkpOwogICAgICAgICAgICBwYWdlcy5Db3VudCsrOwoKICAgICAgICAgICAgLy8gcmVzZXQgeCBhbmQgeSBjb29yZGluYXRlcwogICAgICAgICAgICB0aGlzLnggPSB0aGlzLnBhZ2UubWFyZ2lucy5sZWZ0OwogICAgICAgICAgICB0aGlzLnkgPSB0aGlzLnBhZ2UubWFyZ2lucy50b3A7CgogICAgICAgICAgICAvLyBmbGlwIFBERiBjb29yZGluYXRlIHN5c3RlbSBzbyB0aGF0IHRoZSBvcmlnaW4gaXMgaW4KICAgICAgICAgICAgLy8gdGhlIHRvcCBsZWZ0IHJhdGhlciB0aGFuIHRoZSBib3R0b20gbGVmdAogICAgICAgICAgICB0aGlzLl9jdG0gPSBbMSwgMCwgMCwgMSwgMCwgMF07CiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKDEsIDAsIDAsIC0xLCAwLCB0aGlzLnBhZ2UuaGVpZ2h0KTsKCiAgICAgICAgICAgIHRoaXMuZW1pdCgncGFnZUFkZGVkJyk7CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KCiAgICAgICAgICBidWZmZXJlZFBhZ2VSYW5nZSgpIHsKICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHRoaXMuX3BhZ2VCdWZmZXJTdGFydCwgY291bnQ6IHRoaXMuX3BhZ2VCdWZmZXIubGVuZ3RoIH07CiAgICAgICAgICB9CgogICAgICAgICAgc3dpdGNoVG9QYWdlKG4pIHsKICAgICAgICAgICAgbGV0IHBhZ2U7CiAgICAgICAgICAgIGlmICghKHBhZ2UgPSB0aGlzLl9wYWdlQnVmZmVyW24gLSB0aGlzLl9wYWdlQnVmZmVyU3RhcnRdKSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAgIGBzd2l0Y2hUb1BhZ2UoJHtufSkgb3V0IG9mIGJvdW5kcywgY3VycmVudCBidWZmZXIgY292ZXJzIHBhZ2VzICR7CiAgICAgICAgICB0aGlzLl9wYWdlQnVmZmVyU3RhcnQKICAgICAgICB9IHRvICR7dGhpcy5fcGFnZUJ1ZmZlclN0YXJ0ICsgdGhpcy5fcGFnZUJ1ZmZlci5sZW5ndGggLSAxfWAKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gKHRoaXMucGFnZSA9IHBhZ2UpOwogICAgICAgICAgfQoKICAgICAgICAgIGZsdXNoUGFnZXMoKSB7CiAgICAgICAgICAgIC8vIHRoaXMgbG9jYWwgdmFyaWFibGUgZXhpc3RzIHNvIHdlJ3JlIGZ1dHVyZS1wcm9vZiBhZ2FpbnN0CiAgICAgICAgICAgIC8vIHJlZW50cmFudCBjYWxscyB0byBmbHVzaFBhZ2VzLgogICAgICAgICAgICBjb25zdCBwYWdlcyA9IHRoaXMuX3BhZ2VCdWZmZXI7CiAgICAgICAgICAgIHRoaXMuX3BhZ2VCdWZmZXIgPSBbXTsKICAgICAgICAgICAgdGhpcy5fcGFnZUJ1ZmZlclN0YXJ0ICs9IHBhZ2VzLmxlbmd0aDsKICAgICAgICAgICAgZm9yIChsZXQgcGFnZSBvZiBwYWdlcykgewogICAgICAgICAgICAgIHBhZ2UuZW5kKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBhZGROYW1lZERlc3RpbmF0aW9uKG5hbWUsIC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgYXJncyA9IFsnWFlaJywgbnVsbCwgbnVsbCwgbnVsbF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGFyZ3NbMF0gPT09ICdYWVonICYmIGFyZ3NbMl0gIT09IG51bGwpIHsKICAgICAgICAgICAgICBhcmdzWzJdID0gdGhpcy5wYWdlLmhlaWdodCAtIGFyZ3NbMl07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXJncy51bnNoaWZ0KHRoaXMucGFnZS5kaWN0aW9uYXJ5KTsKICAgICAgICAgICAgdGhpcy5fcm9vdC5kYXRhLk5hbWVzLmRhdGEuRGVzdHMuYWRkKG5hbWUsIGFyZ3MpOwogICAgICAgICAgfQoKICAgICAgICAgIHJlZihkYXRhKSB7CiAgICAgICAgICAgIGNvbnN0IHJlZiA9IG5ldyBQREZSZWZlcmVuY2UodGhpcywgdGhpcy5fb2Zmc2V0cy5sZW5ndGggKyAxLCBkYXRhKTsKICAgICAgICAgICAgdGhpcy5fb2Zmc2V0cy5wdXNoKG51bGwpOyAvLyBwbGFjZWhvbGRlciBmb3IgdGhpcyBvYmplY3QncyBvZmZzZXQgb25jZSBpdCBpcyBmaW5hbGl6ZWQKICAgICAgICAgICAgdGhpcy5fd2FpdGluZysrOwogICAgICAgICAgICByZXR1cm4gcmVmOwogICAgICAgICAgfQoKICAgICAgICAgIF9yZWFkKCkge30KICAgICAgICAgIC8vIGRvIG5vdGhpbmcsIGJ1dCB0aGlzIG1ldGhvZCBpcyByZXF1aXJlZCBieSBub2RlCgogICAgICAgICAgX3dyaXRlKGRhdGEpIHsKICAgICAgICAgICAgaWYgKCFpc0J1ZmZlcihkYXRhKSkgewogICAgICAgICAgICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEgKyAnXG4nLCAnYmluYXJ5Jyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMucHVzaChkYXRhKTsKICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9vZmZzZXQgKz0gZGF0YS5sZW5ndGgpOwogICAgICAgICAgfQoKICAgICAgICAgIGFkZENvbnRlbnQoZGF0YSkgewogICAgICAgICAgICB0aGlzLnBhZ2Uud3JpdGUoZGF0YSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQoKICAgICAgICAgIF9yZWZFbmQocmVmKSB7CiAgICAgICAgICAgIHRoaXMuX29mZnNldHNbcmVmLmlkIC0gMV0gPSByZWYub2Zmc2V0OwogICAgICAgICAgICBpZiAoLS10aGlzLl93YWl0aW5nID09PSAwICYmIHRoaXMuX2VuZGVkKSB7CiAgICAgICAgICAgICAgdGhpcy5fZmluYWxpemUoKTsKICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2VuZGVkID0gZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgd3JpdGUoZmlsZW5hbWUsIGZuKSB7CiAgICAgICAgICAgIC8vIHByaW50IGEgZGVwcmVjYXRpb24gd2FybmluZyB3aXRoIGEgc3RhY2t0cmFjZQogICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYFwKUERGRG9jdW1lbnQjd3JpdGUgaXMgZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIFBERktpdC4gXApQbGVhc2UgcGlwZSB0aGUgZG9jdW1lbnQgaW50byBhIE5vZGUgc3RyZWFtLlwKYCk7CgogICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyLnN0YWNrKTsKCiAgICAgICAgICAgIHRoaXMucGlwZShmcy5jcmVhdGVXcml0ZVN0cmVhbShmaWxlbmFtZSkpOwogICAgICAgICAgICB0aGlzLmVuZCgpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5vbmNlKCdlbmQnLCBmbik7CiAgICAgICAgICB9CgogICAgICAgICAgZW5kKCkgewogICAgICAgICAgICB0aGlzLmZsdXNoUGFnZXMoKTsKICAgICAgICAgICAgdGhpcy5faW5mbyA9IHRoaXMucmVmKCk7CiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmluZm8pIHsKICAgICAgICAgICAgICBsZXQgdmFsID0gdGhpcy5pbmZvW2tleV07CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICB2YWwgPSBuZXcgU3RyaW5nKHZhbCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBsZXQgZW50cnkgPSB0aGlzLnJlZih2YWwpOwogICAgICAgICAgICAgIGVudHJ5LmVuZCgpOwoKICAgICAgICAgICAgICB0aGlzLl9pbmZvLmRhdGFba2V5XSA9IGVudHJ5OwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLl9pbmZvLmVuZCgpOwoKICAgICAgICAgICAgZm9yIChsZXQgbmFtZSBpbiB0aGlzLl9mb250RmFtaWxpZXMpIHsKICAgICAgICAgICAgICBjb25zdCBmb250ID0gdGhpcy5fZm9udEZhbWlsaWVzW25hbWVdOwogICAgICAgICAgICAgIGZvbnQuZmluYWxpemUoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5fcm9vdC5lbmQoKTsKICAgICAgICAgICAgdGhpcy5fcm9vdC5kYXRhLlBhZ2VzLmVuZCgpOwogICAgICAgICAgICB0aGlzLl9yb290LmRhdGEuTmFtZXMuZW5kKCk7CgogICAgICAgICAgICBpZiAodGhpcy5fc2VjdXJpdHkpIHsKICAgICAgICAgICAgICB0aGlzLl9zZWN1cml0eS5lbmQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMuX3dhaXRpbmcgPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmluYWxpemUoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2VuZGVkID0gdHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBfZmluYWxpemUoZm4pIHsKICAgICAgICAgICAgLy8gZ2VuZXJhdGUgeHJlZgogICAgICAgICAgICBjb25zdCB4UmVmT2Zmc2V0ID0gdGhpcy5fb2Zmc2V0OwogICAgICAgICAgICB0aGlzLl93cml0ZSgneHJlZicpOwogICAgICAgICAgICB0aGlzLl93cml0ZShgMCAke3RoaXMuX29mZnNldHMubGVuZ3RoICsgMX1gKTsKICAgICAgICAgICAgdGhpcy5fd3JpdGUoJzAwMDAwMDAwMDAgNjU1MzUgZiAnKTsKCiAgICAgICAgICAgIGZvciAobGV0IG9mZnNldCBvZiB0aGlzLl9vZmZzZXRzKSB7CiAgICAgICAgICAgICAgb2Zmc2V0ID0gYDAwMDAwMDAwMDAke29mZnNldH1gLnNsaWNlKC0xMCk7CiAgICAgICAgICAgICAgdGhpcy5fd3JpdGUob2Zmc2V0ICsgJyAwMDAwMCBuICcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyB0cmFpbGVyCiAgICAgICAgICAgIGNvbnN0IHRyYWlsZXIgPSB7CiAgICAgICAgICAgICAgU2l6ZTogdGhpcy5fb2Zmc2V0cy5sZW5ndGggKyAxLAogICAgICAgICAgICAgIFJvb3Q6IHRoaXMuX3Jvb3QsCiAgICAgICAgICAgICAgSW5mbzogdGhpcy5faW5mbywKICAgICAgICAgICAgICBJRDogW3RoaXMuX2lkLCB0aGlzLl9pZF0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHRoaXMuX3NlY3VyaXR5KSB7CiAgICAgICAgICAgICAgdHJhaWxlci5FbmNyeXB0ID0gdGhpcy5fc2VjdXJpdHkuZGljdGlvbmFyeTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5fd3JpdGUoJ3RyYWlsZXInKTsKICAgICAgICAgICAgdGhpcy5fd3JpdGUoUERGT2JqZWN0LmNvbnZlcnQodHJhaWxlcikpOwoKICAgICAgICAgICAgdGhpcy5fd3JpdGUoJ3N0YXJ0eHJlZicpOwogICAgICAgICAgICB0aGlzLl93cml0ZShgJHt4UmVmT2Zmc2V0fWApOwogICAgICAgICAgICB0aGlzLl93cml0ZSgnJSVFT0YnKTsKCiAgICAgICAgICAgIC8vIGVuZCB0aGUgc3RyZWFtCiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2gobnVsbCk7CiAgICAgICAgICB9CgogICAgICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgICAgIHJldHVybiAnW29iamVjdCBQREZEb2N1bWVudF0nOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc3QgbWl4aW4gPSBtZXRob2RzID0+IHsKICAgICAgICAgIE9iamVjdC5hc3NpZ24oUERGRG9jdW1lbnQucHJvdG90eXBlLCBtZXRob2RzKTsKICAgICAgICB9OwoKICAgICAgICBtaXhpbihDb2xvck1peGluKTsKICAgICAgICBtaXhpbihWZWN0b3JNaXhpbik7CiAgICAgICAgbWl4aW4oSW1hZ2VzTWl4aW4pOwogICAgICAgIG1peGluKE91dHB1dERvY3VtZW50QnJvd3Nlcik7CgogICAgICAgIHZhciBzb3VyY2UgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7CiAgICAgICAgdmFyIFNWR3RvUERGID0gZnVuY3Rpb24oZG9jLCBzdmcsIHgsIHksIG9wdGlvbnMpIHsNCg0KICAgICAgICAgICAgY29uc3QgTmFtZWRDb2xvcnMgPSB7YWxpY2VibHVlOiBbMjQwLDI0OCwyNTVdLCBhbnRpcXVld2hpdGU6IFsyNTAsMjM1LDIxNV0sIGFxdWE6IFswLDI1NSwyNTVdLCBhcXVhbWFyaW5lOiBbMTI3LDI1NSwyMTJdLCBhenVyZTogWzI0MCwyNTUsMjU1XSwgYmVpZ2U6IFsyNDUsMjQ1LDIyMF0sIGJpc3F1ZTogWzI1NSwyMjgsMTk2XSwgYmxhY2s6IFswLDAsMF0sIGJsYW5jaGVkYWxtb25kOiBbMjU1LDIzNSwyMDVdLCBibHVlOiBbMCwwLDI1NV0sIGJsdWV2aW9sZXQ6IFsxMzgsNDMsMjI2XSwgYnJvd246IFsxNjUsNDIsNDJdLCBidXJseXdvb2Q6IFsyMjIsMTg0LDEzNV0sIGNhZGV0Ymx1ZTogWzk1LDE1OCwxNjBdLCBjaGFydHJldXNlOiBbMTI3LDI1NSwwXSwNCiAgICAgICAgICAgICAgY2hvY29sYXRlOiBbMjEwLDEwNSwzMF0sIGNvcmFsOiBbMjU1LDEyNyw4MF0sIGNvcm5mbG93ZXJibHVlOiBbMTAwLDE0OSwyMzddLCBjb3Juc2lsazogWzI1NSwyNDgsMjIwXSwgY3JpbXNvbjogWzIyMCwyMCw2MF0sIGN5YW46IFswLDI1NSwyNTVdLCBkYXJrYmx1ZTogWzAsMCwxMzldLCBkYXJrY3lhbjogWzAsMTM5LDEzOV0sIGRhcmtnb2xkZW5yb2Q6IFsxODQsMTM0LDExXSwgZGFya2dyYXk6IFsxNjksMTY5LDE2OV0sIGRhcmtncmV5OiBbMTY5LDE2OSwxNjldLCBkYXJrZ3JlZW46IFswLDEwMCwwXSwgZGFya2toYWtpOiBbMTg5LDE4MywxMDddLCBkYXJrbWFnZW50YTogWzEzOSwwLDEzOV0sIGRhcmtvbGl2ZWdyZWVuOiBbODUsMTA3LDQ3XSwNCiAgICAgICAgICAgICAgZGFya29yYW5nZTogWzI1NSwxNDAsMF0sIGRhcmtvcmNoaWQ6IFsxNTMsNTAsMjA0XSwgZGFya3JlZDogWzEzOSwwLDBdLCBkYXJrc2FsbW9uOiBbMjMzLDE1MCwxMjJdLCBkYXJrc2VhZ3JlZW46IFsxNDMsMTg4LDE0M10sIGRhcmtzbGF0ZWJsdWU6IFs3Miw2MSwxMzldLCBkYXJrc2xhdGVncmF5OiBbNDcsNzksNzldLCBkYXJrc2xhdGVncmV5OiBbNDcsNzksNzldLCBkYXJrdHVycXVvaXNlOiBbMCwyMDYsMjA5XSwgZGFya3Zpb2xldDogWzE0OCwwLDIxMV0sIGRlZXBwaW5rOiBbMjU1LDIwLDE0N10sIGRlZXBza3libHVlOiBbMCwxOTEsMjU1XSwgZGltZ3JheTogWzEwNSwxMDUsMTA1XSwgZGltZ3JleTogWzEwNSwxMDUsMTA1XSwNCiAgICAgICAgICAgICAgZG9kZ2VyYmx1ZTogWzMwLDE0NCwyNTVdLCBmaXJlYnJpY2s6IFsxNzgsMzQsMzRdLCBmbG9yYWx3aGl0ZTogWzI1NSwyNTAsMjQwXSwgZm9yZXN0Z3JlZW46IFszNCwxMzksMzRdLCBmdWNoc2lhOiBbMjU1LDAsMjU1XSwgZ2FpbnNib3JvOiBbMjIwLDIyMCwyMjBdLCBnaG9zdHdoaXRlOiBbMjQ4LDI0OCwyNTVdLCBnb2xkOiBbMjU1LDIxNSwwXSwgZ29sZGVucm9kOiBbMjE4LDE2NSwzMl0sIGdyYXk6IFsxMjgsMTI4LDEyOF0sIGdyZXk6IFsxMjgsMTI4LDEyOF0sIGdyZWVuOiBbMCwxMjgsMF0sIGdyZWVueWVsbG93OiBbMTczLDI1NSw0N10sIGhvbmV5ZGV3OiBbMjQwLDI1NSwyNDBdLCBob3RwaW5rOiBbMjU1LDEwNSwxODBdLA0KICAgICAgICAgICAgICBpbmRpYW5yZWQ6IFsyMDUsOTIsOTJdLCBpbmRpZ286IFs3NSwwLDEzMF0sIGl2b3J5OiBbMjU1LDI1NSwyNDBdLCBraGFraTogWzI0MCwyMzAsMTQwXSwgbGF2ZW5kZXI6IFsyMzAsMjMwLDI1MF0sIGxhdmVuZGVyYmx1c2g6IFsyNTUsMjQwLDI0NV0sIGxhd25ncmVlbjogWzEyNCwyNTIsMF0sIGxlbW9uY2hpZmZvbjogWzI1NSwyNTAsMjA1XSwgbGlnaHRibHVlOiBbMTczLDIxNiwyMzBdLCBsaWdodGNvcmFsOiBbMjQwLDEyOCwxMjhdLCBsaWdodGN5YW46IFsyMjQsMjU1LDI1NV0sIGxpZ2h0Z29sZGVucm9keWVsbG93OiBbMjUwLDI1MCwyMTBdLCBsaWdodGdyYXk6IFsyMTEsMjExLDIxMV0sIGxpZ2h0Z3JleTogWzIxMSwyMTEsMjExXSwNCiAgICAgICAgICAgICAgbGlnaHRncmVlbjogWzE0NCwyMzgsMTQ0XSwgbGlnaHRwaW5rOiBbMjU1LDE4MiwxOTNdLCBsaWdodHNhbG1vbjogWzI1NSwxNjAsMTIyXSwgbGlnaHRzZWFncmVlbjogWzMyLDE3OCwxNzBdLCBsaWdodHNreWJsdWU6IFsxMzUsMjA2LDI1MF0sIGxpZ2h0c2xhdGVncmF5OiBbMTE5LDEzNiwxNTNdLCBsaWdodHNsYXRlZ3JleTogWzExOSwxMzYsMTUzXSwgbGlnaHRzdGVlbGJsdWU6IFsxNzYsMTk2LDIyMl0sIGxpZ2h0eWVsbG93OiBbMjU1LDI1NSwyMjRdLCBsaW1lOiBbMCwyNTUsMF0sIGxpbWVncmVlbjogWzUwLDIwNSw1MF0sIGxpbmVuOiBbMjUwLDI0MCwyMzBdLCBtYWdlbnRhOiBbMjU1LDAsMjU1XSwgbWFyb29uOiBbMTI4LDAsMF0sDQogICAgICAgICAgICAgIG1lZGl1bWFxdWFtYXJpbmU6IFsxMDIsMjA1LDE3MF0sIG1lZGl1bWJsdWU6IFswLDAsMjA1XSwgbWVkaXVtb3JjaGlkOiBbMTg2LDg1LDIxMV0sIG1lZGl1bXB1cnBsZTogWzE0NywxMTIsMjE5XSwgbWVkaXVtc2VhZ3JlZW46IFs2MCwxNzksMTEzXSwgbWVkaXVtc2xhdGVibHVlOiBbMTIzLDEwNCwyMzhdLCBtZWRpdW1zcHJpbmdncmVlbjogWzAsMjUwLDE1NF0sIG1lZGl1bXR1cnF1b2lzZTogWzcyLDIwOSwyMDRdLCBtZWRpdW12aW9sZXRyZWQ6IFsxOTksMjEsMTMzXSwgbWlkbmlnaHRibHVlOiBbMjUsMjUsMTEyXSwgbWludGNyZWFtOiBbMjQ1LDI1NSwyNTBdLCBtaXN0eXJvc2U6IFsyNTUsMjI4LDIyNV0sIG1vY2Nhc2luOiBbMjU1LDIyOCwxODFdLA0KICAgICAgICAgICAgICBuYXZham93aGl0ZTogWzI1NSwyMjIsMTczXSwgbmF2eTogWzAsMCwxMjhdLCBvbGRsYWNlOiBbMjUzLDI0NSwyMzBdLCBvbGl2ZTogWzEyOCwxMjgsMF0sIG9saXZlZHJhYjogWzEwNywxNDIsMzVdLCBvcmFuZ2U6IFsyNTUsMTY1LDBdLCBvcmFuZ2VyZWQ6IFsyNTUsNjksMF0sIG9yY2hpZDogWzIxOCwxMTIsMjE0XSwgcGFsZWdvbGRlbnJvZDogWzIzOCwyMzIsMTcwXSwgcGFsZWdyZWVuOiBbMTUyLDI1MSwxNTJdLCBwYWxldHVycXVvaXNlOiBbMTc1LDIzOCwyMzhdLCBwYWxldmlvbGV0cmVkOiBbMjE5LDExMiwxNDddLCBwYXBheWF3aGlwOiBbMjU1LDIzOSwyMTNdLCBwZWFjaHB1ZmY6IFsyNTUsMjE4LDE4NV0sIHBlcnU6IFsyMDUsMTMzLDYzXSwNCiAgICAgICAgICAgICAgcGluazogWzI1NSwxOTIsMjAzXSwgcGx1bTogWzIyMSwxNjAsMjIxXSwgcG93ZGVyYmx1ZTogWzE3NiwyMjQsMjMwXSwgcHVycGxlOiBbMTI4LDAsMTI4XSwgcmViZWNjYXB1cnBsZTogWzEwMiw1MSwxNTNdLCByZWQ6IFsyNTUsMCwwXSwgcm9zeWJyb3duOiBbMTg4LDE0MywxNDNdLCByb3lhbGJsdWU6IFs2NSwxMDUsMjI1XSwgc2FkZGxlYnJvd246IFsxMzksNjksMTldLCBzYWxtb246IFsyNTAsMTI4LDExNF0sIHNhbmR5YnJvd246IFsyNDQsMTY0LDk2XSwgc2VhZ3JlZW46IFs0NiwxMzksODddLCBzZWFzaGVsbDogWzI1NSwyNDUsMjM4XSwgc2llbm5hOiBbMTYwLDgyLDQ1XSwgc2lsdmVyOiBbMTkyLDE5MiwxOTJdLCBza3libHVlOiBbMTM1LDIwNiwyMzVdLA0KICAgICAgICAgICAgICBzbGF0ZWJsdWU6IFsxMDYsOTAsMjA1XSwgc2xhdGVncmF5OiBbMTEyLDEyOCwxNDRdLCBzbGF0ZWdyZXk6IFsxMTIsMTI4LDE0NF0sIHNub3c6IFsyNTUsMjUwLDI1MF0sIHNwcmluZ2dyZWVuOiBbMCwyNTUsMTI3XSwgc3RlZWxibHVlOiBbNzAsMTMwLDE4MF0sIHRhbjogWzIxMCwxODAsMTQwXSwgdGVhbDogWzAsMTI4LDEyOF0sIHRoaXN0bGU6IFsyMTYsMTkxLDIxNl0sIHRvbWF0bzogWzI1NSw5OSw3MV0sIHR1cnF1b2lzZTogWzY0LDIyNCwyMDhdLCB2aW9sZXQ6IFsyMzgsMTMwLDIzOF0sIHdoZWF0OiBbMjQ1LDIyMiwxNzldLCB3aGl0ZTogWzI1NSwyNTUsMjU1XSwgd2hpdGVzbW9rZTogWzI0NSwyNDUsMjQ1XSwgeWVsbG93OiBbMjU1LDI1NSwwXX07DQogICAgICAgICAgICBjb25zdCBEZWZhdWx0Q29sb3JzID0ge2JsYWNrOiBbTmFtZWRDb2xvcnMuYmxhY2ssIDFdLCB3aGl0ZTogW05hbWVkQ29sb3JzLndoaXRlLCAxXSwgdHJhbnNwYXJlbnQ6IFtOYW1lZENvbG9ycy5ibGFjaywgMF19Ow0KICAgICAgICAgICAgY29uc3QgRW50aXRpZXMgPSB7cXVvdDogMzQsIGFtcDogMzgsIGx0OiA2MCwgZ3Q6IDYyLCBhcG9zOiAzOSwgT0VsaWc6IDMzOCwgb2VsaWc6IDMzOSwgU2Nhcm9uOiAzNTIsIHNjYXJvbjogMzUzLCBZdW1sOiAzNzYsIGNpcmM6IDcxMCwgdGlsZGU6IDczMiwgZW5zcDogODE5NCwgZW1zcDogODE5NSwgdGhpbnNwOiA4MjAxLCB6d25qOiA4MjA0LCB6d2o6IDgyMDUsIGxybTogODIwNiwgcmxtOiA4MjA3LCBuZGFzaDogODIxMSwgbWRhc2g6IDgyMTIsIGxzcXVvOiA4MjE2LCByc3F1bzogODIxNywgc2JxdW86IDgyMTgsIGxkcXVvOiA4MjIwLCByZHF1bzogODIyMSwgYmRxdW86IDgyMjIsIGRhZ2dlcjogODIyNCwgRGFnZ2VyOiA4MjI1LCBwZXJtaWw6IDgyNDAsIGxzYXF1bzogODI0OSwNCiAgICAgICAgICAgICAgcnNhcXVvOiA4MjUwLCBldXJvOiA4MzY0LCBuYnNwOiAxNjAsIGlleGNsOiAxNjEsIGNlbnQ6IDE2MiwgcG91bmQ6IDE2MywgY3VycmVuOiAxNjQsIHllbjogMTY1LCBicnZiYXI6IDE2Niwgc2VjdDogMTY3LCB1bWw6IDE2OCwgY29weTogMTY5LCBvcmRmOiAxNzAsIGxhcXVvOiAxNzEsIG5vdDogMTcyLCBzaHk6IDE3MywgcmVnOiAxNzQsIG1hY3I6IDE3NSwgZGVnOiAxNzYsIHBsdXNtbjogMTc3LCBzdXAyOiAxNzgsIHN1cDM6IDE3OSwgYWN1dGU6IDE4MCwgbWljcm86IDE4MSwgcGFyYTogMTgyLCBtaWRkb3Q6IDE4MywgY2VkaWw6IDE4NCwgc3VwMTogMTg1LCBvcmRtOiAxODYsIHJhcXVvOiAxODcsIGZyYWMxNDogMTg4LCBmcmFjMTI6IDE4OSwgZnJhYzM0OiAxOTAsDQogICAgICAgICAgICAgIGlxdWVzdDogMTkxLCBBZ3JhdmU6IDE5MiwgQWFjdXRlOiAxOTMsIEFjaXJjOiAxOTQsIEF0aWxkZTogMTk1LCBBdW1sOiAxOTYsIEFyaW5nOiAxOTcsIEFFbGlnOiAxOTgsIENjZWRpbDogMTk5LCBFZ3JhdmU6IDIwMCwgRWFjdXRlOiAyMDEsIEVjaXJjOiAyMDIsIEV1bWw6IDIwMywgSWdyYXZlOiAyMDQsIElhY3V0ZTogMjA1LCBJY2lyYzogMjA2LCBJdW1sOiAyMDcsIEVUSDogMjA4LCBOdGlsZGU6IDIwOSwgT2dyYXZlOiAyMTAsIE9hY3V0ZTogMjExLCBPY2lyYzogMjEyLCBPdGlsZGU6IDIxMywgT3VtbDogMjE0LCB0aW1lczogMjE1LCBPc2xhc2g6IDIxNiwgVWdyYXZlOiAyMTcsIFVhY3V0ZTogMjE4LCBVY2lyYzogMjE5LCBVdW1sOiAyMjAsIFlhY3V0ZTogMjIxLA0KICAgICAgICAgICAgICBUSE9STjogMjIyLCBzemxpZzogMjIzLCBhZ3JhdmU6IDIyNCwgYWFjdXRlOiAyMjUsIGFjaXJjOiAyMjYsIGF0aWxkZTogMjI3LCBhdW1sOiAyMjgsIGFyaW5nOiAyMjksIGFlbGlnOiAyMzAsIGNjZWRpbDogMjMxLCBlZ3JhdmU6IDIzMiwgZWFjdXRlOiAyMzMsIGVjaXJjOiAyMzQsIGV1bWw6IDIzNSwgaWdyYXZlOiAyMzYsIGlhY3V0ZTogMjM3LCBpY2lyYzogMjM4LCBpdW1sOiAyMzksIGV0aDogMjQwLCBudGlsZGU6IDI0MSwgb2dyYXZlOiAyNDIsIG9hY3V0ZTogMjQzLCBvY2lyYzogMjQ0LCBvdGlsZGU6IDI0NSwgb3VtbDogMjQ2LCBkaXZpZGU6IDI0Nywgb3NsYXNoOiAyNDgsIHVncmF2ZTogMjQ5LCB1YWN1dGU6IDI1MCwgdWNpcmM6IDI1MSwgdXVtbDogMjUyLA0KICAgICAgICAgICAgICB5YWN1dGU6IDI1MywgdGhvcm46IDI1NCwgeXVtbDogMjU1LCBmbm9mOiA0MDIsIEFscGhhOiA5MTMsIEJldGE6IDkxNCwgR2FtbWE6IDkxNSwgRGVsdGE6IDkxNiwgRXBzaWxvbjogOTE3LCBaZXRhOiA5MTgsIEV0YTogOTE5LCBUaGV0YTogOTIwLCBJb3RhOiA5MjEsIEthcHBhOiA5MjIsIExhbWJkYTogOTIzLCBNdTogOTI0LCBOdTogOTI1LCBYaTogOTI2LCBPbWljcm9uOiA5MjcsIFBpOiA5MjgsIFJobzogOTI5LCBTaWdtYTogOTMxLCBUYXU6IDkzMiwgVXBzaWxvbjogOTMzLCBQaGk6IDkzNCwgQ2hpOiA5MzUsIFBzaTogOTM2LCBPbWVnYTogOTM3LCBhbHBoYTogOTQ1LCBiZXRhOiA5NDYsIGdhbW1hOiA5NDcsIGRlbHRhOiA5NDgsIGVwc2lsb246IDk0OSwNCiAgICAgICAgICAgICAgemV0YTogOTUwLCBldGE6IDk1MSwgdGhldGE6IDk1MiwgaW90YTogOTUzLCBrYXBwYTogOTU0LCBsYW1iZGE6IDk1NSwgbXU6IDk1NiwgbnU6IDk1NywgeGk6IDk1OCwgb21pY3JvbjogOTU5LCBwaTogOTYwLCByaG86IDk2MSwgc2lnbWFmOiA5NjIsIHNpZ21hOiA5NjMsIHRhdTogOTY0LCB1cHNpbG9uOiA5NjUsIHBoaTogOTY2LCBjaGk6IDk2NywgcHNpOiA5NjgsIG9tZWdhOiA5NjksIHRoZXRhc3ltOiA5NzcsIHVwc2loOiA5NzgsIHBpdjogOTgyLCBidWxsOiA4MjI2LCBoZWxsaXA6IDgyMzAsIHByaW1lOiA4MjQyLCBQcmltZTogODI0Mywgb2xpbmU6IDgyNTQsIGZyYXNsOiA4MjYwLCB3ZWllcnA6IDg0NzIsIGltYWdlOiA4NDY1LCByZWFsOiA4NDc2LA0KICAgICAgICAgICAgICB0cmFkZTogODQ4MiwgYWxlZnN5bTogODUwMSwgbGFycjogODU5MiwgdWFycjogODU5MywgcmFycjogODU5NCwgZGFycjogODU5NSwgaGFycjogODU5NiwgY3JhcnI6IDg2MjksIGxBcnI6IDg2NTYsIHVBcnI6IDg2NTcsIHJBcnI6IDg2NTgsIGRBcnI6IDg2NTksIGhBcnI6IDg2NjAsIGZvcmFsbDogODcwNCwgcGFydDogODcwNiwgZXhpc3Q6IDg3MDcsIGVtcHR5OiA4NzA5LCBuYWJsYTogODcxMSwgaXNpbjogODcxMiwgbm90aW46IDg3MTMsIG5pOiA4NzE1LCBwcm9kOiA4NzE5LCBzdW06IDg3MjEsIG1pbnVzOiA4NzIyLCBsb3dhc3Q6IDg3MjcsIHJhZGljOiA4NzMwLCBwcm9wOiA4NzMzLCBpbmZpbjogODczNCwgYW5nOiA4NzM2LCBhbmQ6IDg3NDMsIG9yOiA4NzQ0LA0KICAgICAgICAgICAgICBjYXA6IDg3NDUsIGN1cDogODc0NiwgaW50OiA4NzQ3LCB0aGVyZTQ6IDg3NTYsIHNpbTogODc2NCwgY29uZzogODc3MywgYXN5bXA6IDg3NzYsIG5lOiA4ODAwLCBlcXVpdjogODgwMSwgbGU6IDg4MDQsIGdlOiA4ODA1LCBzdWI6IDg4MzQsIHN1cDogODgzNSwgbnN1YjogODgzNiwgc3ViZTogODgzOCwgc3VwZTogODgzOSwgb3BsdXM6IDg4NTMsIG90aW1lczogODg1NSwgcGVycDogODg2OSwgc2RvdDogODkwMSwgbGNlaWw6IDg5NjgsIHJjZWlsOiA4OTY5LCBsZmxvb3I6IDg5NzAsIHJmbG9vcjogODk3MSwgbGFuZzogOTAwMSwgcmFuZzogOTAwMiwgbG96OiA5Njc0LCBzcGFkZXM6IDk4MjQsIGNsdWJzOiA5ODI3LCBoZWFydHM6IDk4MjksIGRpYW1zOiA5ODMwfTsNCiAgICAgICAgICAgIGNvbnN0IFBhdGhBcmd1bWVudHMgPSB7QTogNywgYTogNywgQzogNiwgYzogNiwgSDogMSwgaDogMSwgTDogMiwgbDogMiwgTTogMiwgbTogMiwgUTogNCwgcTogNCwgUzogNCwgczogNCwgVDogMiwgdDogMiwgVjogMSwgdjogMSwgWjogMCwgejogMH07DQogICAgICAgICAgICBjb25zdCBQYXRoRmxhZ3MgPSB7QTM6IHRydWUsIEE0OiB0cnVlLCBhMzogdHJ1ZSwgYTQ6IHRydWV9Ow0KICAgICAgICAgICAgY29uc3QgUHJvcGVydGllcyA9IHsNCiAgICAgICAgICAgICAgJ2NvbG9yJzogICAgICAgICAgICAgIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiB1bmRlZmluZWR9LA0KICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6ICAgICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6ICd2aXNpYmxlJywgdmFsdWVzOiB7J2hpZGRlbic6ICdoaWRkZW4nLCAnY29sbGFwc2UnOiAnaGlkZGVuJywgJ3Zpc2libGUnOid2aXNpYmxlJ319LA0KICAgICAgICAgICAgICAnZmlsbCc6ICAgICAgICAgICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6IERlZmF1bHRDb2xvcnMuYmxhY2t9LA0KICAgICAgICAgICAgICAnc3Ryb2tlJzogICAgICAgICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6ICdub25lJ30sDQogICAgICAgICAgICAgICdzdG9wLWNvbG9yJzogICAgICAgICB7aW5oZXJpdDogZmFsc2UsIGluaXRpYWw6IERlZmF1bHRDb2xvcnMuYmxhY2t9LA0KICAgICAgICAgICAgICAnZmlsbC1vcGFjaXR5JzogICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6IDF9LA0KICAgICAgICAgICAgICAnc3Ryb2tlLW9wYWNpdHknOiAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6IDF9LA0KICAgICAgICAgICAgICAnc3RvcC1vcGFjaXR5JzogICAgICAge2luaGVyaXQ6IGZhbHNlLCBpbml0aWFsOiAxfSwNCiAgICAgICAgICAgICAgJ2ZpbGwtcnVsZSc6ICAgICAgICAgIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiAnbm9uemVybycsIHZhbHVlczogeydub256ZXJvJzonbm9uemVybycsICdldmVub2RkJzonZXZlbm9kZCd9fSwNCiAgICAgICAgICAgICAgJ2NsaXAtcnVsZSc6ICAgICAgICAgIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiAnbm9uemVybycsIHZhbHVlczogeydub256ZXJvJzonbm9uemVybycsICdldmVub2RkJzonZXZlbm9kZCd9fSwNCiAgICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6ICAgICAgIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiAxfSwNCiAgICAgICAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiAgIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiBbXX0sDQogICAgICAgICAgICAgICdzdHJva2UtZGFzaG9mZnNldCc6ICB7aW5oZXJpdDogdHJ1ZSwgaW5pdGlhbDogMH0sDQogICAgICAgICAgICAgICdzdHJva2UtbWl0ZXJsaW1pdCc6ICB7aW5oZXJpdDogdHJ1ZSwgaW5pdGlhbDogNH0sDQogICAgICAgICAgICAgICdzdHJva2UtbGluZWpvaW4nOiAgICB7aW5oZXJpdDogdHJ1ZSwgaW5pdGlhbDogJ21pdGVyJywgdmFsdWVzOiB7J21pdGVyJzonbWl0ZXInLCAncm91bmQnOidyb3VuZCcsICdiZXZlbCc6J2JldmVsJ319LA0KICAgICAgICAgICAgICAnc3Ryb2tlLWxpbmVjYXAnOiAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6ICdidXR0JywgdmFsdWVzOiB7J2J1dHQnOididXR0JywgJ3JvdW5kJzoncm91bmQnLCAnc3F1YXJlJzonc3F1YXJlJ319LA0KICAgICAgICAgICAgICAnZm9udC1zaXplJzogICAgICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6IDE2LCB2YWx1ZXM6IHsneHgtc21hbGwnOjksICd4LXNtYWxsJzoxMCwgJ3NtYWxsJzoxMywgJ21lZGl1bSc6MTYsICdsYXJnZSc6MTgsICd4LWxhcmdlJzoyNCwgJ3h4LWxhcmdlJzozMn19LA0KICAgICAgICAgICAgICAnZm9udC1mYW1pbHknOiAgICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6ICdzYW5zLXNlcmlmJ30sDQogICAgICAgICAgICAgICdmb250LXdlaWdodCc6ICAgICAgICB7aW5oZXJpdDogdHJ1ZSwgaW5pdGlhbDogJ25vcm1hbCcsIHZhbHVlczogeyc2MDAnOidib2xkJywgJzcwMCc6J2JvbGQnLCAnODAwJzonYm9sZCcsICc5MDAnOidib2xkJywgJ2JvbGQnOidib2xkJywgJ2JvbGRlcic6J2JvbGQnLCAnNTAwJzonbm9ybWFsJywgJzQwMCc6J25vcm1hbCcsICczMDAnOidub3JtYWwnLCAnMjAwJzonbm9ybWFsJywgJzEwMCc6J25vcm1hbCcsICdub3JtYWwnOidub3JtYWwnLCAnbGlnaHRlcic6J25vcm1hbCd9fSwNCiAgICAgICAgICAgICAgJ2ZvbnQtc3R5bGUnOiAgICAgICAgIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiAnbm9ybWFsJywgdmFsdWVzOiB7J2l0YWxpYyc6J2l0YWxpYycsICdvYmxpcXVlJzonaXRhbGljJywgJ25vcm1hbCc6J25vcm1hbCd9fSwNCiAgICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogICAgICAgIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiAnc3RhcnQnLCB2YWx1ZXM6IHsnc3RhcnQnOidzdGFydCcsICdtaWRkbGUnOidtaWRkbGUnLCAnZW5kJzonZW5kJ319LA0KICAgICAgICAgICAgICAnZGlyZWN0aW9uJzogICAgICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6ICdsdHInLCB2YWx1ZXM6IHsnbHRyJzonbHRyJywgJ3J0bCc6J3J0bCd9fSwNCiAgICAgICAgICAgICAgJ2RvbWluYW50LWJhc2VsaW5lJzogIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiAnYmFzZWxpbmUnLCB2YWx1ZXM6IHsnYXV0byc6J2Jhc2VsaW5lJywgJ2Jhc2VsaW5lJzonYmFzZWxpbmUnLCAnYmVmb3JlLWVkZ2UnOidiZWZvcmUtZWRnZScsICd0ZXh0LWJlZm9yZS1lZGdlJzonYmVmb3JlLWVkZ2UnLCAnbWlkZGxlJzonbWlkZGxlJywgJ2NlbnRyYWwnOidjZW50cmFsJywgJ2FmdGVyLWVkZ2UnOidhZnRlci1lZGdlJywgJ3RleHQtYWZ0ZXItZWRnZSc6J2FmdGVyLWVkZ2UnLCAnaWRlb2dyYXBoaWMnOidpZGVvZ3JhcGhpYycsICdhbHBoYWJldGljJzonYWxwaGFiZXRpYycsICdoYW5naW5nJzonaGFuZ2luZycsICdtYXRoZW1hdGljYWwnOidtYXRoZW1hdGljYWwnfX0sDQogICAgICAgICAgICAgICdhbGlnbm1lbnQtYmFzZWxpbmUnOiB7aW5oZXJpdDogZmFsc2UsIGluaXRpYWw6IHVuZGVmaW5lZCwgdmFsdWVzOiB7J2F1dG8nOidiYXNlbGluZScsICdiYXNlbGluZSc6J2Jhc2VsaW5lJywgJ2JlZm9yZS1lZGdlJzonYmVmb3JlLWVkZ2UnLCAndGV4dC1iZWZvcmUtZWRnZSc6J2JlZm9yZS1lZGdlJywgJ21pZGRsZSc6J21pZGRsZScsICdjZW50cmFsJzonY2VudHJhbCcsICdhZnRlci1lZGdlJzonYWZ0ZXItZWRnZScsICd0ZXh0LWFmdGVyLWVkZ2UnOidhZnRlci1lZGdlJywgJ2lkZW9ncmFwaGljJzonaWRlb2dyYXBoaWMnLCAnYWxwaGFiZXRpYyc6J2FscGhhYmV0aWMnLCAnaGFuZ2luZyc6J2hhbmdpbmcnLCAnbWF0aGVtYXRpY2FsJzonbWF0aGVtYXRpY2FsJ319LA0KICAgICAgICAgICAgICAnYmFzZWxpbmUtc2hpZnQnOiAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6ICdiYXNlbGluZScsIHZhbHVlczogeydiYXNlbGluZSc6J2Jhc2VsaW5lJywgJ3N1Yic6J3N1YicsICdzdXBlcic6J3N1cGVyJ319LA0KICAgICAgICAgICAgICAnd29yZC1zcGFjaW5nJzogICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6IDAsIHZhbHVlczoge25vcm1hbDowfX0sDQogICAgICAgICAgICAgICdsZXR0ZXItc3BhY2luZyc6ICAgICB7aW5oZXJpdDogdHJ1ZSwgaW5pdGlhbDogMCwgdmFsdWVzOiB7bm9ybWFsOjB9fSwNCiAgICAgICAgICAgICAgJ3RleHQtZGVjb3JhdGlvbic6ICAgIHtpbmhlcml0OiBmYWxzZSwgaW5pdGlhbDogJ25vbmUnLCB2YWx1ZXM6IHsnbm9uZSc6J25vbmUnLCAndW5kZXJsaW5lJzondW5kZXJsaW5lJywgJ292ZXJsaW5lJzonb3ZlcmxpbmUnLCAnbGluZS10aHJvdWdoJzonbGluZS10aHJvdWdoJ319LA0KICAgICAgICAgICAgICAneG1sOnNwYWNlJzogICAgICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6ICdkZWZhdWx0JywgY3NzOiAnd2hpdGUtc3BhY2UnLCB2YWx1ZXM6IHsncHJlc2VydmUnOidwcmVzZXJ2ZScsICdkZWZhdWx0JzonZGVmYXVsdCcsICdwcmUnOidwcmVzZXJ2ZScsICdwcmUtbGluZSc6J3ByZXNlcnZlJywgJ3ByZS13cmFwJzoncHJlc2VydmUnLCAnbm93cmFwJzogJ2RlZmF1bHQnfX0sDQogICAgICAgICAgICAgICdtYXJrZXItc3RhcnQnOiAgICAgICB7aW5oZXJpdDogdHJ1ZSwgaW5pdGlhbDogJ25vbmUnfSwNCiAgICAgICAgICAgICAgJ21hcmtlci1taWQnOiAgICAgICAgIHtpbmhlcml0OiB0cnVlLCBpbml0aWFsOiAnbm9uZSd9LA0KICAgICAgICAgICAgICAnbWFya2VyLWVuZCc6ICAgICAgICAge2luaGVyaXQ6IHRydWUsIGluaXRpYWw6ICdub25lJ30sDQogICAgICAgICAgICAgICdvcGFjaXR5JzogICAgICAgICAgICB7aW5oZXJpdDogZmFsc2UsIGluaXRpYWw6IDF9LA0KICAgICAgICAgICAgICAndHJhbnNmb3JtJzogICAgICAgICAge2luaGVyaXQ6IGZhbHNlLCBpbml0aWFsOiBbMSwgMCwgMCwgMSwgMCwgMF19LA0KICAgICAgICAgICAgICAnZGlzcGxheSc6ICAgICAgICAgICAge2luaGVyaXQ6IGZhbHNlLCBpbml0aWFsOiAnaW5saW5lJywgdmFsdWVzOiB7J25vbmUnOidub25lJywgJ2lubGluZSc6J2lubGluZScsICdibG9jayc6J2lubGluZSd9fSwNCiAgICAgICAgICAgICAgJ2NsaXAtcGF0aCc6ICAgICAgICAgIHtpbmhlcml0OiBmYWxzZSwgaW5pdGlhbDogJ25vbmUnfSwNCiAgICAgICAgICAgICAgJ21hc2snOiAgICAgICAgICAgICAgIHtpbmhlcml0OiBmYWxzZSwgaW5pdGlhbDogJ25vbmUnfSwNCiAgICAgICAgICAgICAgJ292ZXJmbG93JzogICAgICAgICAgIHtpbmhlcml0OiBmYWxzZSwgaW5pdGlhbDogJ2hpZGRlbicsIHZhbHVlczogeydoaWRkZW4nOidoaWRkZW4nLCAnc2Nyb2xsJzonaGlkZGVuJywgJ3Zpc2libGUnOid2aXNpYmxlJ319DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBmdW5jdGlvbiBkb2NCZWdpbkdyb3VwKGJib3gpIHsNCiAgICAgICAgICAgICAgbGV0IGdyb3VwID0gbmV3IChmdW5jdGlvbiBQREZHcm91cCgpIHt9KSgpOw0KICAgICAgICAgICAgICBncm91cC5uYW1lID0gJ0cnICsgKGRvYy5fZ3JvdXBDb3VudCA9IChkb2MuX2dyb3VwQ291bnQgfHwgMCkgKyAxKTsNCiAgICAgICAgICAgICAgZ3JvdXAucmVzb3VyY2VzID0gZG9jLnJlZigpOw0KICAgICAgICAgICAgICBncm91cC54b2JqID0gZG9jLnJlZih7DQogICAgICAgICAgICAgICAgVHlwZTogJ1hPYmplY3QnLA0KICAgICAgICAgICAgICAgIFN1YnR5cGU6ICdGb3JtJywNCiAgICAgICAgICAgICAgICBGb3JtVHlwZTogMSwNCiAgICAgICAgICAgICAgICBCQm94OiBiYm94LA0KICAgICAgICAgICAgICAgIEdyb3VwOiB7UzogJ1RyYW5zcGFyZW5jeScsIENTOiAnRGV2aWNlUkdCJywgSTogdHJ1ZSwgSzogZmFsc2V9LA0KICAgICAgICAgICAgICAgIFJlc291cmNlczogZ3JvdXAucmVzb3VyY2VzDQogICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICBncm91cC54b2JqLndyaXRlKCcnKTsNCiAgICAgICAgICAgICAgZ3JvdXAuc2F2ZWRNYXRyaXggPSBkb2MuX2N0bTsNCiAgICAgICAgICAgICAgZ3JvdXAuc2F2ZWRQYWdlID0gZG9jLnBhZ2U7DQogICAgICAgICAgICAgIGdyb3VwU3RhY2sucHVzaChncm91cCk7DQogICAgICAgICAgICAgIGRvYy5fY3RtID0gWzEsIDAsIDAsIDEsIDAsIDBdOw0KICAgICAgICAgICAgICBkb2MucGFnZSA9IHsNCiAgICAgICAgICAgICAgICB3aWR0aDogZG9jLnBhZ2Uud2lkdGgsIGhlaWdodDogZG9jLnBhZ2UuaGVpZ2h0LA0KICAgICAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihkYXRhKSB7Z3JvdXAueG9iai53cml0ZShkYXRhKTt9LA0KICAgICAgICAgICAgICAgIGZvbnRzOiB7fSwgeG9iamVjdHM6IHt9LCBleHRfZ3N0YXRlczoge30sIHBhdHRlcm5zOiB7fQ0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICByZXR1cm4gZ3JvdXA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiBkb2NFbmRHcm91cChncm91cCkgew0KICAgICAgICAgICAgICBpZiAoZ3JvdXAgIT09IGdyb3VwU3RhY2sucG9wKCkpIHt0aHJvdygnR3JvdXAgbm90IG1hdGNoaW5nJyk7fQ0KICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoZG9jLnBhZ2UuZm9udHMpLmxlbmd0aCkge2dyb3VwLnJlc291cmNlcy5kYXRhLkZvbnQgPSBkb2MucGFnZS5mb250czt9DQogICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhkb2MucGFnZS54b2JqZWN0cykubGVuZ3RoKSB7Z3JvdXAucmVzb3VyY2VzLmRhdGEuWE9iamVjdCA9IGRvYy5wYWdlLnhvYmplY3RzO30NCiAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGRvYy5wYWdlLmV4dF9nc3RhdGVzKS5sZW5ndGgpIHtncm91cC5yZXNvdXJjZXMuZGF0YS5FeHRHU3RhdGUgPSBkb2MucGFnZS5leHRfZ3N0YXRlczt9DQogICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhkb2MucGFnZS5wYXR0ZXJucykubGVuZ3RoKSB7Z3JvdXAucmVzb3VyY2VzLmRhdGEuUGF0dGVybiA9IGRvYy5wYWdlLnBhdHRlcm5zO30NCiAgICAgICAgICAgICAgZ3JvdXAucmVzb3VyY2VzLmVuZCgpOw0KICAgICAgICAgICAgICBncm91cC54b2JqLmVuZCgpOw0KICAgICAgICAgICAgICBkb2MuX2N0bSA9IGdyb3VwLnNhdmVkTWF0cml4Ow0KICAgICAgICAgICAgICBkb2MucGFnZSA9IGdyb3VwLnNhdmVkUGFnZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGRvY0luc2VydEdyb3VwKGdyb3VwKSB7DQogICAgICAgICAgICAgIGRvYy5wYWdlLnhvYmplY3RzW2dyb3VwLm5hbWVdID0gZ3JvdXAueG9iajsNCiAgICAgICAgICAgICAgZG9jLmFkZENvbnRlbnQoJy8nICsgZ3JvdXAubmFtZSArICcgRG8nKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGRvY0FwcGx5TWFzayhncm91cCwgY2xpcCkgew0KICAgICAgICAgICAgICBsZXQgbmFtZSA9ICdNJyArIChkb2MuX21hc2tDb3VudCA9IChkb2MuX21hc2tDb3VudCB8fCAwKSArIDEpOw0KICAgICAgICAgICAgICBsZXQgZ3N0YXRlID0gZG9jLnJlZih7DQogICAgICAgICAgICAgICAgVHlwZTogJ0V4dEdTdGF0ZScsIENBOiAxLCBjYTogMSwgQk06ICdOb3JtYWwnLA0KICAgICAgICAgICAgICAgIFNNYXNrOiB7UzogJ0x1bWlub3NpdHknLCBHOiBncm91cC54b2JqLCBCQzogKGNsaXAgPyBbMCwgMCwgMF0gOiBbMSwgMSwgMV0pfQ0KICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgZ3N0YXRlLmVuZCgpOw0KICAgICAgICAgICAgICBkb2MucGFnZS5leHRfZ3N0YXRlc1tuYW1lXSA9IGdzdGF0ZTsNCiAgICAgICAgICAgICAgZG9jLmFkZENvbnRlbnQoJy8nICsgbmFtZSArICcgZ3MnKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGRvY0NyZWF0ZVBhdHRlcm4oZ3JvdXAsIGR4LCBkeSwgbWF0cml4KSB7DQogICAgICAgICAgICAgIGxldCBwYXR0ZXJuID0gbmV3IChmdW5jdGlvbiBQREZQYXR0ZXJuKCkge30pKCk7DQogICAgICAgICAgICAgIHBhdHRlcm4uZ3JvdXAgPSBncm91cDsNCiAgICAgICAgICAgICAgcGF0dGVybi5keCA9IGR4Ow0KICAgICAgICAgICAgICBwYXR0ZXJuLmR5ID0gZHk7DQogICAgICAgICAgICAgIHBhdHRlcm4ubWF0cml4ID0gbWF0cml4IHx8IFsxLCAwLCAwLCAxLCAwLCAwXTsNCiAgICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiBkb2NVc2VQYXR0ZXJuKHBhdHRlcm4sIHN0cm9rZSkgew0KICAgICAgICAgICAgICBsZXQgbmFtZSA9ICdQJyArIChkb2MuX3BhdHRlcm5Db3VudCA9IChkb2MuX3BhdHRlcm5Db3VudCB8fCAwKSArIDEpOw0KICAgICAgICAgICAgICBsZXQgcmVmID0gZG9jLnJlZih7DQogICAgICAgICAgICAgICAgVHlwZTogJ1BhdHRlcm4nLCBQYXR0ZXJuVHlwZTogMSwgUGFpbnRUeXBlOiAxLCBUaWxpbmdUeXBlOiAyLA0KICAgICAgICAgICAgICAgIEJCb3g6IFswLCAwLCBwYXR0ZXJuLmR4LCBwYXR0ZXJuLmR5XSwgWFN0ZXA6IHBhdHRlcm4uZHgsIFlTdGVwOiBwYXR0ZXJuLmR5LA0KICAgICAgICAgICAgICAgIE1hdHJpeDogbXVsdGlwbHlNYXRyaXgoZG9jLl9jdG0sIHBhdHRlcm4ubWF0cml4KSwNCiAgICAgICAgICAgICAgICBSZXNvdXJjZXM6IHsNCiAgICAgICAgICAgICAgICAgIFByb2NTZXQ6IFsnUERGJywgJ1RleHQnLCAnSW1hZ2VCJywgJ0ltYWdlQycsICdJbWFnZUknXSwNCiAgICAgICAgICAgICAgICAgIFhPYmplY3Q6IChmdW5jdGlvbigpIHtsZXQgdGVtcCA9IHt9OyB0ZW1wW3BhdHRlcm4uZ3JvdXAubmFtZV0gPSBwYXR0ZXJuLmdyb3VwLnhvYmo7IHJldHVybiB0ZW1wO30pKCkNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICByZWYud3JpdGUoJy8nICsgcGF0dGVybi5ncm91cC5uYW1lICsgJyBEbycpOw0KICAgICAgICAgICAgICByZWYuZW5kKCk7DQogICAgICAgICAgICAgIGRvYy5wYWdlLnBhdHRlcm5zW25hbWVdID0gcmVmOw0KICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSB7DQogICAgICAgICAgICAgICAgZG9jLmFkZENvbnRlbnQoJy9QYXR0ZXJuIENTJyk7DQogICAgICAgICAgICAgICAgZG9jLmFkZENvbnRlbnQoJy8nICsgbmFtZSArICcgU0NOJyk7DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZG9jLmFkZENvbnRlbnQoJy9QYXR0ZXJuIGNzJyk7DQogICAgICAgICAgICAgICAgZG9jLmFkZENvbnRlbnQoJy8nICsgbmFtZSArICcgc2NuJyk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGRvY0JlZ2luVGV4dChmb250LCBzaXplKSB7DQogICAgICAgICAgICAgIGlmICghZG9jLnBhZ2UuZm9udHNbZm9udC5pZF0pIHtkb2MucGFnZS5mb250c1tmb250LmlkXSA9IGZvbnQucmVmKCk7fQ0KICAgICAgICAgICAgICBkb2MuYWRkQ29udGVudCgnQlQnKS5hZGRDb250ZW50KCcvJyArIGZvbnQuaWQgKyAnICcgKyBzaXplICsgJyBUZicpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gZG9jU2V0VGV4dE1hdHJpeChhLCBiLCBjLCBkLCBlLCBmKSB7DQogICAgICAgICAgICAgIGRvYy5hZGRDb250ZW50KHZhbGlkYXRlTnVtYmVyKGEpICsgJyAnICsgdmFsaWRhdGVOdW1iZXIoYikgKyAnICcgKyB2YWxpZGF0ZU51bWJlcigtYykgKyAnICcgICsgdmFsaWRhdGVOdW1iZXIoLWQpICsgJyAnICsgdmFsaWRhdGVOdW1iZXIoZSkgKyAnICcgKyB2YWxpZGF0ZU51bWJlcihmKSArICcgVG0nKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGRvY1NldFRleHRNb2RlKGZpbGwsIHN0cm9rZSkgew0KICAgICAgICAgICAgICBsZXQgbW9kZSA9IGZpbGwgJiYgc3Ryb2tlID8gMiA6IHN0cm9rZSA/IDEgOiBmaWxsID8gMCA6IDM7DQogICAgICAgICAgICAgIGRvYy5hZGRDb250ZW50KG1vZGUgKyAnIFRyJyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiBkb2NXcml0ZUdseXBoKGdseXBoKSB7DQogICAgICAgICAgICAgIGRvYy5hZGRDb250ZW50KCc8JyArIGdseXBoICsgJz4gVGonKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGRvY0VuZFRleHQoKSB7DQogICAgICAgICAgICAgIGRvYy5hZGRDb250ZW50KCdFVCcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gZG9jRmlsbENvbG9yKGNvbG9yKSB7DQogICAgICAgICAgICAgIGlmIChjb2xvclswXS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnUERGUGF0dGVybicpIHsNCiAgICAgICAgICAgICAgICBkb2MuZmlsbE9wYWNpdHkoY29sb3JbMV0pOw0KICAgICAgICAgICAgICAgIGRvY1VzZVBhdHRlcm4oY29sb3JbMF0sIGZhbHNlKTsNCiAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBkb2MuZmlsbENvbG9yKGNvbG9yWzBdLCBjb2xvclsxXSk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGRvY1N0cm9rZUNvbG9yKGNvbG9yKSB7DQogICAgICAgICAgICAgIGlmIChjb2xvclswXS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnUERGUGF0dGVybicpIHsNCiAgICAgICAgICAgICAgICBkb2Muc3Ryb2tlT3BhY2l0eShjb2xvclsxXSk7DQogICAgICAgICAgICAgICAgZG9jVXNlUGF0dGVybihjb2xvclswXSwgdHJ1ZSk7DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZG9jLnN0cm9rZUNvbG9yKGNvbG9yWzBdLCBjb2xvclsxXSk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGRvY0luc2VydExpbmsoeCwgeSwgdywgaCwgdXJsKSB7DQogICAgICAgICAgICAgIGxldCByZWYgPSBkb2MucmVmKHsNCiAgICAgICAgICAgICAgICBUeXBlOiAnQW5ub3QnLA0KICAgICAgICAgICAgICAgIFN1YnR5cGU6ICdMaW5rJywNCiAgICAgICAgICAgICAgICBSZWN0OiBbeCwgeSwgdywgaF0sDQogICAgICAgICAgICAgICAgQm9yZGVyOiBbMCwgMCwgMF0sDQogICAgICAgICAgICAgICAgQTogew0KICAgICAgICAgICAgICAgICAgUzogJ1VSSScsDQogICAgICAgICAgICAgICAgICBVUkk6IG5ldyBTdHJpbmcodXJsKQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgIHJlZi5lbmQoKTsNCiAgICAgICAgICAgICAgbGlua3MucHVzaChyZWYpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VYbWwoeG1sKSB7DQogICAgICAgICAgICAgIGxldCBTdmdOb2RlID0gZnVuY3Rpb24odGFnLCB0eXBlLCB2YWx1ZSwgZXJyb3IpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7DQogICAgICAgICAgICAgICAgdGhpcy5ub2RlTmFtZSA9IHRhZzsNCiAgICAgICAgICAgICAgICB0aGlzLm5vZGVWYWx1ZSA9IHZhbHVlOw0KICAgICAgICAgICAgICAgIHRoaXMubm9kZVR5cGUgPSB0eXBlOw0KICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7DQogICAgICAgICAgICAgICAgdGhpcy5jaGlsZE5vZGVzID0gW107DQogICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlID0gbnVsbDsNCiAgICAgICAgICAgICAgICB0aGlzLmlkID0gJyc7DQogICAgICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9ICcnOw0KICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0ID0gW107DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIFN2Z05vZGUucHJvdG90eXBlLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGF0dHIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJdICE9IG51bGwgPyB0aGlzLmF0dHJpYnV0ZXNbYXR0cl0gOiBudWxsOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICBTdmdOb2RlLnByb3RvdHlwZS5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKGlkKSB7DQogICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7DQogICAgICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2l2ZShub2RlKSB7DQogICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7cmV0dXJuO30NCiAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmlkID09PSBpZCkge3Jlc3VsdCA9IG5vZGU7fQ0KICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2l2ZShub2RlLmNoaWxkTm9kZXNbaV0pOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSkodGhpcyk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgU3ZnTm9kZS5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBmdW5jdGlvbih0YWcpIHsNCiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107DQogICAgICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2l2ZShub2RlKSB7DQogICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gdGFnKSB7cmVzdWx0LnB1c2gobm9kZSk7fQ0KICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2l2ZShub2RlLmNoaWxkTm9kZXNbaV0pOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSkodGhpcyk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBTdHJpbmdQYXJzZXIoeG1sLnRyaW0oKSksIHJlc3VsdCwgY2hpbGQsIGVycm9yID0gZmFsc2U7IA0KICAgICAgICAgICAgICBsZXQgcmVjdXJzaXZlID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgbGV0IHRlbXAsIGNoaWxkOw0KICAgICAgICAgICAgICAgIGlmICh0ZW1wID0gcGFyc2VyLm1hdGNoKC9ePChbXHc6Li1dKylccyovLCB0cnVlKSkgeyAvLyBPcGVuaW5nIHRhZw0KICAgICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBuZXcgU3ZnTm9kZSh0ZW1wWzFdLCAxLCBudWxsLCBlcnJvcik7DQogICAgICAgICAgICAgICAgICB3aGlsZSAodGVtcCA9IHBhcnNlci5tYXRjaCgvXihbXHc6Li1dKykoPzpccyo9XHMqIihbXiJdKikifFxzKj1ccyonKFteJ10qKScpP1xzKi8sIHRydWUpKSB7IC8vIEF0dHJpYnV0ZQ0KICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ciA9IHRlbXBbMV0sIHZhbHVlID0gZGVjb2RlRW50aXRpZXModGVtcFsyXSB8fCB0ZW1wWzNdIHx8ICcnKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlLmF0dHJpYnV0ZXNbYXR0cl0pIHsNCiAgICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHJpYnV0ZXNbYXR0cl0gPSB2YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ciA9PT0gJ2lkJykge25vZGUuaWQgPSB2YWx1ZTt9DQogICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIgPT09ICdjbGFzcycpIHtub2RlLmNsYXNzTGlzdCA9IHZhbHVlLnNwbGl0KCcgJyk7fQ0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdDYWxsYmFjaygncGFyc2VYbWw6IGR1cGxpY2F0ZSBhdHRyaWJ1dGUgIicgKyBhdHRyICsgJyInKTsNCiAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZXIubWF0Y2goL14+LykpIHsgLy8gRW5kIG9mIG9wZW5pbmcgdGFnDQogICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZCA9IHJlY3Vyc2l2ZSgpKSB7DQogICAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZE5vZGVzLnB1c2goY2hpbGQpOw0KICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnBhcmVudE5vZGUgPSBub2RlOw0KICAgICAgICAgICAgICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgKz0gKGNoaWxkLm5vZGVUeXBlID09PSAzIHx8IGNoaWxkLm5vZGVUeXBlID09PSA0ID8gY2hpbGQubm9kZVZhbHVlIDogY2hpbGQudGV4dENvbnRlbnQpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wID0gcGFyc2VyLm1hdGNoKC9ePFwvKFtcdzouLV0rKVxzKj4vLCB0cnVlKSkgeyAvLyBDbG9zaW5nIHRhZw0KICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wWzFdID09PSBub2RlLm5vZGVOYW1lKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTsNCiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ0NhbGxiYWNrKCdwYXJzZVhtbDogdGFnIG5vdCBtYXRjaGluZywgb3BlbmluZyAiJyArIG5vZGUubm9kZU5hbWUgKyAnIiAmIGNsb3NpbmcgIicgKyB0ZW1wWzFdICsgJyInKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOw0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nQ2FsbGJhY2soJ3BhcnNlWG1sOiB0YWcgbm90IG1hdGNoaW5nLCBvcGVuaW5nICInICsgbm9kZS5ub2RlTmFtZSArICciICYgbm90IGNsb3NpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VyLm1hdGNoKC9eXC8+LykpIHsgLy8gU2VsZi1jbG9zaW5nIHRhZw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTsNCiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHdhcm5pbmdDYWxsYmFjaygncGFyc2VYbWw6IHRhZyBjb3VsZCBub3QgYmUgcGFyc2VkICInICsgbm9kZS5ub2RlTmFtZSArICciJyk7DQogICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRlbXAgPSBwYXJzZXIubWF0Y2goL148IS0tW1xzXFNdKj8tLT4vKSkgeyAvLyBDb21tZW50DQogICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN2Z05vZGUobnVsbCwgOCwgdGVtcCwgZXJyb3IpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcCA9IHBhcnNlci5tYXRjaCgvXjxcP1tcc1xTXSo/XD8+LykpIHsgLy8gUHJvY2Vzc2luZyBpbnN0cnVjdGlvbnMNCiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3ZnTm9kZShudWxsLCA3LCB0ZW1wLCBlcnJvcik7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZW1wID0gcGFyc2VyLm1hdGNoKC9ePCFET0NUWVBFXHMqKFtcc1xTXSo/KT4vKSkgeyAvLyBEb2N0eXBlDQogICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN2Z05vZGUobnVsbCwgMTAsIHRlbXAsIGVycm9yKTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRlbXAgPSBwYXJzZXIubWF0Y2goL148IVxbQ0RBVEFcWyhbXHNcU10qPylcXVxdPi8sIHRydWUpKSB7IC8vIENkYXRhIG5vZGUNCiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3ZnTm9kZSgnI2NkYXRhLXNlY3Rpb24nLCA0LCB0ZW1wWzFdLCBlcnJvcik7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZW1wID0gcGFyc2VyLm1hdGNoKC9eKFtePF0rKS8sIHRydWUpKSB7IC8vIFRleHQgbm9kZQ0KICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdmdOb2RlKCcjdGV4dCcsIDMsIGRlY29kZUVudGl0aWVzKHRlbXBbMV0pLCBlcnJvcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB3aGlsZSAoY2hpbGQgPSByZWN1cnNpdmUoKSkgew0KICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiAhcmVzdWx0KSB7DQogICAgICAgICAgICAgICAgICByZXN1bHQgPSBjaGlsZDsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxIHx8IChjaGlsZC5ub2RlVHlwZSA9PT0gMyAmJiBjaGlsZC5ub2RlVmFsdWUudHJpbSgpICE9PSAnJykpIHsNCiAgICAgICAgICAgICAgICAgIHdhcm5pbmdDYWxsYmFjaygncGFyc2VYbWw6IGRhdGEgYWZ0ZXIgZG9jdW1lbnQgZW5kIGhhcyBiZWVuIGRpc2NhcmRlZCcpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBpZiAocGFyc2VyLm1hdGNoQWxsKCkpIHsNCiAgICAgICAgICAgICAgICB3YXJuaW5nQ2FsbGJhY2soJ3BhcnNlWG1sOiBwYXJzaW5nIGVycm9yJyk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgICAgIH0gICAgZnVuY3Rpb24gZGVjb2RlRW50aXRpZXMoc3RyKSB7DQogICAgICAgICAgICAgIHJldHVybihzdHIucmVwbGFjZSgvJig/OiMoWzAtOV0rKXwjW3hYXShbMC05QS1GYS1mXSspfChbMC05QS1aYS16XSspKTsvZywgZnVuY3Rpb24obXQsIG0wLCBtMSwgbTIpIHsNCiAgICAgICAgICAgICAgICBpZiAobTApIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChtMCwgMTApKTt9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAobTEpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChtMSwgMTYpKTt9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAobTIgJiYgRW50aXRpZXNbbTJdKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoRW50aXRpZXNbbTJdKTt9DQogICAgICAgICAgICAgICAgZWxzZSB7cmV0dXJuIG10O30NCiAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VDb2xvcihyYXcpIHsNCiAgICAgICAgICAgICAgbGV0IHRlbXAsIHJlc3VsdDsNCiAgICAgICAgICAgICAgcmF3ID0gKHJhdyB8fCAnJykudHJpbSgpOw0KICAgICAgICAgICAgICBpZiAodGVtcCA9IE5hbWVkQ29sb3JzW3Jhd10pIHsNCiAgICAgICAgICAgICAgICByZXN1bHQgPSBbdGVtcC5zbGljZSgpLCAxXTsNCiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZW1wID0gcmF3Lm1hdGNoKC9ecmdiYVwoXHMqKFswLTldKylccyosXHMqKFswLTldKylccyosXHMqKFswLTldKylccyosXHMqKFswLTkuXSspXHMqXCkkL2kpKSB7DQogICAgICAgICAgICAgICAgdGVtcFsxXSA9IHBhcnNlSW50KHRlbXBbMV0pOyB0ZW1wWzJdID0gcGFyc2VJbnQodGVtcFsyXSk7IHRlbXBbM10gPSBwYXJzZUludCh0ZW1wWzNdKTsgdGVtcFs0XSA9IHBhcnNlRmxvYXQodGVtcFs0XSk7DQogICAgICAgICAgICAgICAgaWYgKHRlbXBbMV0gPCAyNTYgJiYgdGVtcFsyXSA8IDI1NiAmJiB0ZW1wWzNdIDwgMjU2ICYmIHRlbXBbNF0gPD0gMSkgew0KICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW3RlbXAuc2xpY2UoMSwgNCksIHRlbXBbNF1dOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZW1wID0gcmF3Lm1hdGNoKC9ecmdiXChccyooWzAtOV0rKVxzKixccyooWzAtOV0rKVxzKixccyooWzAtOV0rKVxzKlwpJC9pKSkgew0KICAgICAgICAgICAgICAgIHRlbXBbMV0gPSBwYXJzZUludCh0ZW1wWzFdKTsgdGVtcFsyXSA9IHBhcnNlSW50KHRlbXBbMl0pOyB0ZW1wWzNdID0gcGFyc2VJbnQodGVtcFszXSk7DQogICAgICAgICAgICAgICAgaWYgKHRlbXBbMV0gPCAyNTYgJiYgdGVtcFsyXSA8IDI1NiAmJiB0ZW1wWzNdIDwgMjU2KSB7DQogICAgICAgICAgICAgICAgICByZXN1bHQgPSBbdGVtcC5zbGljZSgxLCA0KSwgMV07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRlbXAgPSByYXcubWF0Y2goL15yZ2JcKFxzKihbMC05Ll0rKSVccyosXHMqKFswLTkuXSspJVxzKixccyooWzAtOS5dKyklXHMqXCkkL2kpKSB7DQogICAgICAgICAgICAgICAgdGVtcFsxXSA9IDIuNTUgKiBwYXJzZUZsb2F0KHRlbXBbMV0pOyB0ZW1wWzJdID0gMi41NSAqIHBhcnNlRmxvYXQodGVtcFsyXSk7IHRlbXBbM10gPSAyLjU1ICogcGFyc2VGbG9hdCh0ZW1wWzNdKTsNCiAgICAgICAgICAgICAgICBpZiAodGVtcFsxXSA8IDI1NiAmJiB0ZW1wWzJdIDwgMjU2ICYmIHRlbXBbM10gPCAyNTYpIHsNCiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFt0ZW1wLnNsaWNlKDEsIDQpLCAxXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcCA9IHJhdy5tYXRjaCgvXiMoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkkL2kpKSB7DQogICAgICAgICAgICAgICAgcmVzdWx0ID0gW1twYXJzZUludCh0ZW1wWzFdLCAxNiksIHBhcnNlSW50KHRlbXBbMl0sIDE2KSwgcGFyc2VJbnQodGVtcFszXSwgMTYpXSwgMV07DQogICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcCA9IHJhdy5tYXRjaCgvXiMoWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSkkL2kpKSB7DQogICAgICAgICAgICAgICAgcmVzdWx0ID0gW1sweDExICogcGFyc2VJbnQodGVtcFsxXSwgMTYpLCAweDExICogcGFyc2VJbnQodGVtcFsyXSwgMTYpLCAweDExICogcGFyc2VJbnQodGVtcFszXSwgMTYpXSwgMV07DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yQ2FsbGJhY2sgPyBjb2xvckNhbGxiYWNrKHJlc3VsdCwgcmF3KSA6IHJlc3VsdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIG9wYWNpdHlUb0NvbG9yKGNvbG9yLCBvcGFjaXR5LCBpc01hc2spIHsNCiAgICAgICAgICAgICAgbGV0IG5ld0NvbG9yID0gY29sb3JbMF0uc2xpY2UoKSwNCiAgICAgICAgICAgICAgICAgIG5ld09wYWNpdHkgPSBjb2xvclsxXSAqIG9wYWNpdHk7DQogICAgICAgICAgICAgIGlmIChpc01hc2spIHsNCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9yLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICBuZXdDb2xvcltpXSAqPSBuZXdPcGFjaXR5Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gW25ld0NvbG9yLCAxXTsNCiAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gW25ld0NvbG9yLCBuZXdPcGFjaXR5XTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gbXVsdGlwbHlNYXRyaXgoKSB7DQogICAgICAgICAgICAgIGZ1bmN0aW9uIG11bHRpcGx5KGEsIGIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gWyBhWzBdKmJbMF0rYVsyXSpiWzFdLCBhWzFdKmJbMF0rYVszXSpiWzFdLCBhWzBdKmJbMl0rYVsyXSpiWzNdLA0KICAgICAgICAgICAgICAgICAgICAgICAgIGFbMV0qYlsyXSthWzNdKmJbM10sIGFbMF0qYls0XSthWzJdKmJbNV0rYVs0XSwgYVsxXSpiWzRdK2FbM10qYls1XSthWzVdIF07DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGFyZ3VtZW50c1swXTsNCiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICByZXN1bHQgPSBtdWx0aXBseShyZXN1bHQsIGFyZ3VtZW50c1tpXSk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVBvaW50KHAsIG0pIHsNCiAgICAgICAgICAgICAgcmV0dXJuIFttWzBdICogcFswXSArIG1bMl0gKiBwWzFdICsgbVs0XSwgbVsxXSAqIHBbMF0gKyBtWzNdICogcFsxXSArIG1bNV1dOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0R2xvYmFsTWF0cml4KCkgew0KICAgICAgICAgICAgICBsZXQgY3RtID0gZG9jLl9jdG07DQogICAgICAgICAgICAgIGZvciAobGV0IGkgPSBncm91cFN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7DQogICAgICAgICAgICAgICAgY3RtID0gbXVsdGlwbHlNYXRyaXgoZ3JvdXBTdGFja1tpXS5zYXZlZE1hdHJpeCwgY3RtKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICByZXR1cm4gY3RtOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGFnZUJCb3goKSB7DQogICAgICAgICAgICAgIHJldHVybiBuZXcgU3ZnU2hhcGUoKS5NKDAsIDApLkwoZG9jLnBhZ2Uud2lkdGgsIDApLkwoZG9jLnBhZ2Uud2lkdGgsIGRvYy5wYWdlLmhlaWdodCkuTCgwLCBkb2MucGFnZS5oZWlnaHQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2Zvcm0oaW52ZXJzZU1hdHJpeChnZXRHbG9iYWxNYXRyaXgoKSkpLmdldEJvdW5kaW5nQm94KCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiBpbnZlcnNlTWF0cml4KG0pIHsNCiAgICAgICAgICAgICAgbGV0IGR0ID0gbVswXSAqIG1bM10gLSBtWzFdICogbVsyXTsNCiAgICAgICAgICAgICAgcmV0dXJuIFttWzNdIC8gZHQsIC1tWzFdIC8gZHQsIC1tWzJdIC8gZHQsIG1bMF0gLyBkdCwgKG1bMl0qbVs1XSAtIG1bM10qbVs0XSkgLyBkdCwgKG1bMV0qbVs0XSAtIG1bMF0qbVs1XSkgLyBkdF07DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZU1hdHJpeChtKSB7DQogICAgICAgICAgICAgIGxldCBtMCA9IHZhbGlkYXRlTnVtYmVyKG1bMF0pLCBtMSA9IHZhbGlkYXRlTnVtYmVyKG1bMV0pLCBtMiA9IHZhbGlkYXRlTnVtYmVyKG1bMl0pLA0KICAgICAgICAgICAgICAgICAgbTMgPSB2YWxpZGF0ZU51bWJlcihtWzNdKSwgbTQgPSB2YWxpZGF0ZU51bWJlcihtWzRdKSwgbTUgPSB2YWxpZGF0ZU51bWJlcihtWzVdKTsNCiAgICAgICAgICAgICAgaWYgKGlzTm90RXF1YWwobTAgKiBtMyAtIG0xICogbTIsIDApKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFttMCwgbTEsIG0yLCBtMywgbTQsIG01XTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gc29sdmVFcXVhdGlvbihjdXJ2ZSkgew0KICAgICAgICAgICAgICBsZXQgYSA9IGN1cnZlWzJdIHx8IDAsIGIgPSBjdXJ2ZVsxXSB8fCAwLCBjID0gY3VydmVbMF0gfHwgMDsNCiAgICAgICAgICAgICAgaWYgKGlzRXF1YWwoYSwgMCkgJiYgaXNFcXVhbChiLCAwKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBbXTsNCiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0VxdWFsKGEsIDApKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFsoLWMpIC8gYl07DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgbGV0IGQgPSBiICogYiAtIDQgKiBhICogYzsNCiAgICAgICAgICAgICAgICBpZiAoaXNOb3RFcXVhbChkLCAwKSAmJiBkID4gMCkgew0KICAgICAgICAgICAgICAgICAgcmV0dXJuIFsoLWIgKyBNYXRoLnNxcnQoZCkpIC8gKDIgKiBhKSwgKC1iIC0gTWF0aC5zcXJ0KGQpKSAvICgyICogYSldOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNFcXVhbChkLCAwKSkgew0KICAgICAgICAgICAgICAgICAgcmV0dXJuIFsoLWIpIC8gKDIgKiBhKV07DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgIHJldHVybiBbXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEN1cnZlVmFsdWUodCwgY3VydmUpIHsNCiAgICAgICAgICAgICAgcmV0dXJuIChjdXJ2ZVswXSB8fCAwKSArIChjdXJ2ZVsxXSB8fCAwKSAqIHQgKyAoY3VydmVbMl0gfHwgMCkgKiB0ICogdCArIChjdXJ2ZVszXSB8fCAwKSAqIHQgKiB0ICogdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRXF1YWwobnVtYmVyLCByZWYpIHsNCiAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKG51bWJlciAtIHJlZikgPCAxZS0xMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzTm90RXF1YWwobnVtYmVyLCByZWYpIHsNCiAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKG51bWJlciAtIHJlZikgPj0gMWUtMTA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZU51bWJlcihuKSB7DQogICAgICAgICAgICAgIHJldHVybiBuID4gLTFlMjEgJiYgbiA8IDFlMjEgPyBNYXRoLnJvdW5kKG4gKiAxZTYpIC8gMWU2IDogMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHYpIHsNCiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnb2JqZWN0JyAmJiB2ICE9PSBudWxsICYmIHR5cGVvZiB2Lmxlbmd0aCA9PT0gJ251bWJlcic7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVRyYW5mb3JtKHYpIHsNCiAgICAgICAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBTdHJpbmdQYXJzZXIoKHYgfHwgJycpLnRyaW0oKSksIHJlc3VsdCA9IFsxLCAwLCAwLCAxLCAwLCAwXSwgdGVtcDsNCiAgICAgICAgICAgICAgd2hpbGUgKHRlbXAgPSBwYXJzZXIubWF0Y2goL14oW0EtWmEtel0rKVxzKlsoXShbXihdKylbKV0vLCB0cnVlKSkgew0KICAgICAgICAgICAgICAgIGxldCBmdW5jID0gdGVtcFsxXSwgbnVtcyA9IFtdLCBwYXJzZXIyID0gbmV3IFN0cmluZ1BhcnNlcih0ZW1wWzJdLnRyaW0oKSksIHRlbXAyOw0KICAgICAgICAgICAgICAgIHdoaWxlICh0ZW1wMiA9IHBhcnNlcjIubWF0Y2hOdW1iZXIoKSkgew0KICAgICAgICAgICAgICAgICAgbnVtcy5wdXNoKE51bWJlcih0ZW1wMikpOw0KICAgICAgICAgICAgICAgICAgcGFyc2VyMi5tYXRjaFNlcGFyYXRvcigpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoZnVuYyA9PT0gJ21hdHJpeCcgJiYgbnVtcy5sZW5ndGggPT09IDYpIHsNCiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG11bHRpcGx5TWF0cml4KHJlc3VsdCwgW251bXNbMF0sIG51bXNbMV0sIG51bXNbMl0sIG51bXNbM10sIG51bXNbNF0sIG51bXNbNV1dKTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bmMgPT09ICd0cmFuc2xhdGUnICYmIG51bXMubGVuZ3RoID09PSAyKSB7DQogICAgICAgICAgICAgICAgICByZXN1bHQgPSBtdWx0aXBseU1hdHJpeChyZXN1bHQsIFsxLCAwLCAwLCAxLCBudW1zWzBdLCBudW1zWzFdXSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmdW5jID09PSAndHJhbnNsYXRlJyAmJiBudW1zLmxlbmd0aCA9PT0gMSkgew0KICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbXVsdGlwbHlNYXRyaXgocmVzdWx0LCBbMSwgMCwgMCwgMSwgbnVtc1swXSwgMF0pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZnVuYyA9PT0gJ3NjYWxlJyAmJiBudW1zLmxlbmd0aCA9PT0gMikgew0KICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbXVsdGlwbHlNYXRyaXgocmVzdWx0LCBbbnVtc1swXSwgMCwgMCwgbnVtc1sxXSwgMCwgMF0pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZnVuYyA9PT0gJ3NjYWxlJyAmJiBudW1zLmxlbmd0aCA9PT0gMSkgew0KICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbXVsdGlwbHlNYXRyaXgocmVzdWx0LCBbbnVtc1swXSwgMCwgMCwgbnVtc1swXSwgMCwgMF0pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZnVuYyA9PT0gJ3JvdGF0ZScgJiYgbnVtcy5sZW5ndGggPT09IDMpIHsNCiAgICAgICAgICAgICAgICAgIGxldCBhID0gbnVtc1swXSAqIE1hdGguUEkgLyAxODA7DQogICAgICAgICAgICAgICAgICByZXN1bHQgPSBtdWx0aXBseU1hdHJpeChyZXN1bHQsIFsxLCAwLCAwLCAxLCBudW1zWzFdLCBudW1zWzJdXSwgW01hdGguY29zKGEpLCBNYXRoLnNpbihhKSwgLU1hdGguc2luKGEpLCBNYXRoLmNvcyhhKSwgMCwgMF0sIFsxLCAwLCAwLCAxLCAtbnVtc1sxXSwgLW51bXNbMl1dKTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bmMgPT09ICdyb3RhdGUnICYmIG51bXMubGVuZ3RoID09PSAxKSB7DQogICAgICAgICAgICAgICAgICBsZXQgYSA9IG51bXNbMF0gKiBNYXRoLlBJIC8gMTgwOw0KICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbXVsdGlwbHlNYXRyaXgocmVzdWx0LCBbTWF0aC5jb3MoYSksIE1hdGguc2luKGEpLCAtTWF0aC5zaW4oYSksIE1hdGguY29zKGEpLCAwLCAwXSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmdW5jID09PSAnc2tld1gnICYmIG51bXMubGVuZ3RoID09PSAxKSB7DQogICAgICAgICAgICAgICAgICBsZXQgYSA9IG51bXNbMF0gKiBNYXRoLlBJIC8gMTgwOw0KICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbXVsdGlwbHlNYXRyaXgocmVzdWx0LCBbMSwgMCwgTWF0aC50YW4oYSksIDEsIDAsIDBdKTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bmMgPT09ICdza2V3WScgJiYgbnVtcy5sZW5ndGggPT09IDEpIHsNCiAgICAgICAgICAgICAgICAgIGxldCBhID0gbnVtc1swXSAqIE1hdGguUEkgLyAxODA7DQogICAgICAgICAgICAgICAgICByZXN1bHQgPSBtdWx0aXBseU1hdHJpeChyZXN1bHQsIFsxLCBNYXRoLnRhbihhKSwgMCwgMSwgMCwgMF0pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7cmV0dXJuO30NCiAgICAgICAgICAgICAgICBwYXJzZXIubWF0Y2hTZXBhcmF0b3IoKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBpZiAocGFyc2VyLm1hdGNoQWxsKCkpIHtyZXR1cm47fQ0KICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VBc3BlY3RSYXRpbyhhc3BlY3RSYXRpbywgYXZhaWxXaWR0aCwgYXZhaWxIZWlnaHQsIGVsZW1XaWR0aCwgZWxlbUhlaWdodCwgaW5pdEFsaWduKSB7DQogICAgICAgICAgICAgIGxldCB0ZW1wID0gKGFzcGVjdFJhdGlvIHx8ICcnKS50cmltKCkubWF0Y2goL14obm9uZSkkfF54KE1pbnxNaWR8TWF4KVkoTWlufE1pZHxNYXgpKD86XHMrKG1lZXR8c2xpY2UpKT8kLykgfHwgW10sDQogICAgICAgICAgICAgICAgICByYXRpb1R5cGUgPSB0ZW1wWzFdIHx8IHRlbXBbNF0gfHwgJ21lZXQnLA0KICAgICAgICAgICAgICAgICAgeEFsaWduID0gdGVtcFsyXSB8fCAnTWlkJywNCiAgICAgICAgICAgICAgICAgIHlBbGlnbiA9IHRlbXBbM10gfHwgJ01pZCcsDQogICAgICAgICAgICAgICAgICBzY2FsZVggPSBhdmFpbFdpZHRoIC8gZWxlbVdpZHRoLA0KICAgICAgICAgICAgICAgICAgc2NhbGVZID0gYXZhaWxIZWlnaHQgLyBlbGVtSGVpZ2h0LA0KICAgICAgICAgICAgICAgICAgZHggPSB7J01pbic6MCwgJ01pZCc6MC41LCAnTWF4JzoxfVt4QWxpZ25dIC0gKGluaXRBbGlnbiB8fCAwKSwNCiAgICAgICAgICAgICAgICAgIGR5ID0geydNaW4nOjAsICdNaWQnOjAuNSwgJ01heCc6MX1beUFsaWduXSAtIChpbml0QWxpZ24gfHwgMCk7DQogICAgICAgICAgICAgIGlmIChyYXRpb1R5cGUgPT09ICdzbGljZScpIHsNCiAgICAgICAgICAgICAgICBzY2FsZVkgPSBzY2FsZVggPSBNYXRoLm1heChzY2FsZVgsIHNjYWxlWSk7DQogICAgICAgICAgICAgIH0gZWxzZSBpZiAocmF0aW9UeXBlID09PSAnbWVldCcpIHsNCiAgICAgICAgICAgICAgICBzY2FsZVkgPSBzY2FsZVggPSBNYXRoLm1pbihzY2FsZVgsIHNjYWxlWSk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgcmV0dXJuIFtzY2FsZVgsIDAsIDAsIHNjYWxlWSwgZHggKiAoYXZhaWxXaWR0aCAtIGVsZW1XaWR0aCAqIHNjYWxlWCksIGR5ICogKGF2YWlsSGVpZ2h0IC0gZWxlbUhlaWdodCAqIHNjYWxlWSldOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VTdHlsZUF0dHIodikgew0KICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTsNCiAgICAgICAgICAgICAgdiA9ICh2IHx8ICcnKS50cmltKCkuc3BsaXQoLzsvKTsNCiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgbGV0IGtleSA9ICh2W2ldLnNwbGl0KCc6JylbMF0gfHwgJycpLnRyaW0oKSwNCiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodltpXS5zcGxpdCgnOicpWzFdIHx8ICcnKS50cmltKCk7DQogICAgICAgICAgICAgICAgaWYgKGtleSkgew0KICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgaWYgKHJlc3VsdFsnbWFya2VyJ10pIHsNCiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdFsnbWFya2VyLXN0YXJ0J10pIHtyZXN1bHRbJ21hcmtlci1zdGFydCddID0gcmVzdWx0WydtYXJrZXInXTt9DQogICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbJ21hcmtlci1taWQnXSkge3Jlc3VsdFsnbWFya2VyLW1pZCddID0gcmVzdWx0WydtYXJrZXInXTt9DQogICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbJ21hcmtlci1lbmQnXSkge3Jlc3VsdFsnbWFya2VyLWVuZCddID0gcmVzdWx0WydtYXJrZXInXTt9DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgaWYgKHJlc3VsdFsnZm9udCddKSB7DQogICAgICAgICAgICAgICAgbGV0IGZvbnRGYW1pbHkgPSBudWxsLCBmb250U2l6ZSA9IG51bGwsIGZvbnRTdHlsZSA9ICJub3JtYWwiLCBmb250V2VpZ2h0ID0gIm5vcm1hbCIsIGZvbnRWYXJpYW50ID0gIm5vcm1hbCI7DQogICAgICAgICAgICAgICAgbGV0IHBhcnRzID0gcmVzdWx0Wydmb250J10uc3BsaXQoL1xzKy8pOw0KICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgIHN3aXRjaCAocGFydHNbaV0pIHsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAibm9ybWFsIjoNCiAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiaXRhbGljIjogY2FzZSAib2JsaXF1ZSI6DQogICAgICAgICAgICAgICAgICAgICAgZm9udFN0eWxlID0gcGFydHNbaV07DQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgInNtYWxsLWNhcHMiOg0KICAgICAgICAgICAgICAgICAgICAgIGZvbnRWYXJpYW50ID0gcGFydHNbaV07DQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgImJvbGQiOiBjYXNlICJib2xkZXIiOiBjYXNlICJsaWdodGVyIjogY2FzZSAiMTAwIjogY2FzZSAiMjAwIjogY2FzZSAiMzAwIjoNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiNDAwIjogY2FzZSAiNTAwIjogY2FzZSAiNjAwIjogY2FzZSAiNzAwIjogY2FzZSAiODAwIjogY2FzZSAiOTAwIjoNCiAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0ID0gcGFydHNbaV07DQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb250U2l6ZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemUgPSBwYXJ0c1tpXS5zcGxpdCgnLycpWzBdOw0KICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvbnRGYW1pbHkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseSA9IHBhcnRzW2ldOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseSArPSAnICcgKyBwYXJ0c1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICghcmVzdWx0Wydmb250LXN0eWxlJ10pIHtyZXN1bHRbJ2ZvbnQtc3R5bGUnXSA9IGZvbnRTdHlsZTt9DQogICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbJ2ZvbnQtdmFyaWFudCddKSB7cmVzdWx0Wydmb250LXZhcmlhbnQnXSA9IGZvbnRWYXJpYW50O30NCiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdFsnZm9udC13ZWlnaHQnXSkge3Jlc3VsdFsnZm9udC13ZWlnaHQnXSA9IGZvbnRXZWlnaHQ7fQ0KICAgICAgICAgICAgICAgIGlmICghcmVzdWx0Wydmb250LXNpemUnXSkge3Jlc3VsdFsnZm9udC1zaXplJ10gPSBmb250U2l6ZTt9DQogICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbJ2ZvbnQtZmFtaWx5J10pIHtyZXN1bHRbJ2ZvbnQtZmFtaWx5J10gPSBmb250RmFtaWx5O30NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VTZWxlY3Rvcih2KSB7DQogICAgICAgICAgICAgIGxldCBwYXJ0cyA9IHYuc3BsaXQoLyg/PVsuI10pL2cpLCBpZHMgPSBbXSwgY2xhc3NlcyA9IFtdLCB0YWdzID0gW10sIHRlbXA7DQogICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICBpZiAodGVtcCA9IHBhcnRzW2ldLm1hdGNoKC9eWyNdKFtfQS1aYS16MC05LV0rKSQvKSkgew0KICAgICAgICAgICAgICAgICAgaWRzLnB1c2godGVtcFsxXSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZW1wID0gcGFydHNbaV0ubWF0Y2goL15bLl0oW19BLVphLXowLTktXSspJC8pKSB7DQogICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2godGVtcFsxXSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZW1wID0gcGFydHNbaV0ubWF0Y2goL14oW19BLVphLXowLTktXSspJC8pKSB7DQogICAgICAgICAgICAgICAgICB0YWdzLnB1c2godGVtcFsxXSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXSAhPT0gJyonKSB7DQogICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGFnczogdGFncywgaWRzOiBpZHMsIGNsYXNzZXM6IGNsYXNzZXMsDQogICAgICAgICAgICAgICAgc3BlY2lmaWNpdHk6IGlkcy5sZW5ndGggKiAxMDAwMCArIGNsYXNzZXMubGVuZ3RoICogMTAwICsgdGFncy5sZW5ndGgNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlU3R5bGVTaGVldCh2KSB7DQogICAgICAgICAgICAgIGxldCBwYXJzZXIgPSBuZXcgU3RyaW5nUGFyc2VyKHYudHJpbSgpKSwgcnVsZXMgPSBbXSwgcnVsZTsNCiAgICAgICAgICAgICAgd2hpbGUgKHJ1bGUgPSBwYXJzZXIubWF0Y2goL15ccyooW15ce1x9XSo/KVxzKlx7KFteXHtcfV0qPylcfS8sIHRydWUpKSB7DQogICAgICAgICAgICAgICAgbGV0IHNlbGVjdG9ycyA9IHJ1bGVbMV0uc3BsaXQoL1xzKixccyovZyksDQogICAgICAgICAgICAgICAgICAgIGNzcyA9IHBhcnNlU3R5bGVBdHRyKHJ1bGVbMl0pOw0KICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0b3IgPSBwYXJzZVNlbGVjdG9yKHNlbGVjdG9yc1tpXSk7DQogICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHsNCiAgICAgICAgICAgICAgICAgICAgcnVsZXMucHVzaCh7c2VsZWN0b3I6IHNlbGVjdG9yLCBjc3M6Y3NzfSk7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIHJldHVybiBydWxlczsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvcihlbGVtLCBzZWxlY3Rvcikgew0KICAgICAgICAgICAgICBpZiAoZWxlbS5ub2RlVHlwZSAhPT0gMSkge3JldHVybiBmYWxzZTt9DQogICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3IudGFncy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci50YWdzW2ldICE9PSBlbGVtLm5vZGVOYW1lKSB7cmV0dXJuIGZhbHNlO30NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdG9yLmlkcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5pZHNbaV0gIT09IGVsZW0uaWQpIHtyZXR1cm4gZmFsc2U7fQ0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3IuY2xhc3Nlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGlmIChlbGVtLmNsYXNzTGlzdC5pbmRleE9mKHNlbGVjdG9yLmNsYXNzZXNbaV0pID09PSAtMSkge3JldHVybiBmYWxzZTt9DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiBnZXRTdHlsZShlbGVtKSB7DQogICAgICAgICAgICAgIGxldCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpOw0KICAgICAgICAgICAgICBsZXQgc3BlY2lmaWNpdGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7DQogICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVSdWxlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGxldCBydWxlID0gc3R5bGVSdWxlc1tpXTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlc1NlbGVjdG9yKGVsZW0sIHJ1bGUuc2VsZWN0b3IpKSB7DQogICAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gcnVsZS5jc3MpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc3BlY2lmaWNpdGllc1trZXldID4gcnVsZS5zZWxlY3Rvci5zcGVjaWZpY2l0eSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHJ1bGUuY3NzW2tleV07DQogICAgICAgICAgICAgICAgICAgICAgc3BlY2lmaWNpdGllc1trZXldID0gcnVsZS5zZWxlY3Rvci5zcGVjaWZpY2l0eTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gY29tYmluZUFycmF5cyhhcnJheTEsIGFycmF5Mikgew0KICAgICAgICAgICAgICByZXR1cm4gYXJyYXkxLmNvbmNhdChhcnJheTIuc2xpY2UoYXJyYXkxLmxlbmd0aCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXNjZW50KGZvbnQsIHNpemUpIHsNCiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGZvbnQuYXNjZW5kZXIsIChmb250LmJib3hbM10gfHwgZm9udC5iYm94Lm1heFkpICogKGZvbnQuc2NhbGUgfHwgMSkpICogc2l6ZSAvIDEwMDA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmdW5jdGlvbiBnZXREZXNjZW50KGZvbnQsIHNpemUpIHsNCiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKGZvbnQuZGVzY2VuZGVyLCAoZm9udC5iYm94WzFdIHx8IGZvbnQuYmJveC5taW5ZKSAqIChmb250LnNjYWxlIHx8IDEpKSAqIHNpemUgLyAxMDAwOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0WEhlaWdodChmb250LCBzaXplKSB7DQogICAgICAgICAgICAgIHJldHVybiAoZm9udC54SGVpZ2h0IHx8IDAuNSAqIChmb250LmFzY2VuZGVyIC0gZm9udC5kZXNjZW5kZXIpKSAqIHNpemUgLyAxMDAwOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QmFzZWxpbmUoZm9udCwgc2l6ZSwgYmFzZWxpbmUsIHNoaWZ0KSB7DQogICAgICAgICAgICAgIGxldCBkeTEsIGR5MjsNCiAgICAgICAgICAgICAgc3dpdGNoIChiYXNlbGluZSkgew0KICAgICAgICAgICAgICAgIGNhc2UgJ21pZGRsZSc6IGR5MSA9IDAuNSAqIGdldFhIZWlnaHQoZm9udCwgc2l6ZSk7IGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgJ2NlbnRyYWwnOiBkeTEgPSAwLjUgKiAoZ2V0RGVzY2VudChmb250LCBzaXplKSArIGdldEFzY2VudChmb250LCBzaXplKSk7IGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgJ2FmdGVyLWVkZ2UnOiBjYXNlICd0ZXh0LWFmdGVyLWVkZ2UnOiBkeTEgPSBnZXREZXNjZW50KGZvbnQsIHNpemUpOyBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdhbHBoYWJldGljJzogY2FzZSAnYXV0byc6IGNhc2UgJ2Jhc2VsaW5lJzogZHkxID0gMDsgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnbWF0aGVtYXRpY2FsJzogZHkxID0gMC41ICogZ2V0QXNjZW50KGZvbnQsIHNpemUpOyBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdoYW5naW5nJzogZHkxID0gMC44ICogZ2V0QXNjZW50KGZvbnQsIHNpemUpOyBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdiZWZvcmUtZWRnZSc6IGNhc2UgJ3RleHQtYmVmb3JlLWVkZ2UnOiBkeTEgPSBnZXRBc2NlbnQoZm9udCwgc2l6ZSk7IGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGR5MSA9IDA7IGJyZWFrOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIHN3aXRjaCAoc2hpZnQpIHsNCiAgICAgICAgICAgICAgICBjYXNlICdiYXNlbGluZSc6IGR5MiA9IDA7IGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgJ3N1cGVyJzogZHkyID0gMC42ICogc2l6ZTsgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnc3ViJzogZHkyID0gLTAuNiAqIHNpemU7IGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGR5MiA9IHNoaWZ0OyBicmVhazsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICByZXR1cm4gZHkxIC0gZHkyOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGV4dFBvcyhmb250LCBzaXplLCB0ZXh0KSB7DQogICAgICAgICAgICAgIGxldCBlbmNvZGVkID0gZm9udC5lbmNvZGUoJycgKyB0ZXh0KSwgaGV4ID0gZW5jb2RlZFswXSwgcG9zID0gZW5jb2RlZFsxXSwgZGF0YSA9IFtdOw0KICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleC5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGxldCB1bmljb2RlID0gZm9udC51bmljb2RlID8gZm9udC51bmljb2RlW3BhcnNlSW50KGhleFtpXSwgMTYpXSA6IFt0ZXh0LmNoYXJDb2RlQXQoaSldOw0KICAgICAgICAgICAgICAgIGRhdGEucHVzaCh7DQogICAgICAgICAgICAgICAgICBnbHlwaDogaGV4W2ldLA0KICAgICAgICAgICAgICAgICAgdW5pY29kZTogdW5pY29kZSwNCiAgICAgICAgICAgICAgICAgIHdpZHRoOiBwb3NbaV0uYWR2YW5jZVdpZHRoICogc2l6ZSAvIDEwMDAsDQogICAgICAgICAgICAgICAgICB4T2Zmc2V0OiBwb3NbaV0ueE9mZnNldCAqIHNpemUgLyAxMDAwLA0KICAgICAgICAgICAgICAgICAgeU9mZnNldDogcG9zW2ldLnlPZmZzZXQgKiBzaXplIC8gMTAwMCwNCiAgICAgICAgICAgICAgICAgIHhBZHZhbmNlOiBwb3NbaV0ueEFkdmFuY2UgKiBzaXplIC8gMTAwMCwNCiAgICAgICAgICAgICAgICAgIHlBZHZhbmNlOiBwb3NbaV0ueUFkdmFuY2UgKiBzaXplIC8gMTAwMA0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIHJldHVybiBkYXRhOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlU1ZHRWxlbWVudChvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIHN3aXRjaCAob2JqLm5vZGVOYW1lKSB7DQogICAgICAgICAgICAgICAgY2FzZSAndXNlJzogcmV0dXJuIG5ldyBTdmdFbGVtVXNlKG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICAgIGNhc2UgJ3N5bWJvbCc6IHJldHVybiBuZXcgU3ZnRWxlbVN5bWJvbChvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgICBjYXNlICdnJzogcmV0dXJuIG5ldyBTdmdFbGVtR3JvdXAob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgICAgY2FzZSAnYSc6IHJldHVybiBuZXcgU3ZnRWxlbUxpbmsob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgICAgY2FzZSAnc3ZnJzogcmV0dXJuIG5ldyBTdmdFbGVtU3ZnKG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzogcmV0dXJuIG5ldyBTVkdFbGVtSW1hZ2Uob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgICAgY2FzZSAncmVjdCc6IHJldHVybiBuZXcgU3ZnRWxlbVJlY3Qob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgICAgY2FzZSAnY2lyY2xlJzogcmV0dXJuIG5ldyBTdmdFbGVtQ2lyY2xlKG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICAgIGNhc2UgJ2VsbGlwc2UnOiByZXR1cm4gbmV3IFN2Z0VsZW1FbGxpcHNlKG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmUnOiByZXR1cm4gbmV3IFN2Z0VsZW1MaW5lKG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICAgIGNhc2UgJ3BvbHlsaW5lJzogcmV0dXJuIG5ldyBTdmdFbGVtUG9seWxpbmUob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgICAgY2FzZSAncG9seWdvbic6IHJldHVybiBuZXcgU3ZnRWxlbVBvbHlnb24ob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgICAgY2FzZSAncGF0aCc6IHJldHVybiBuZXcgU3ZnRWxlbVBhdGgob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6IHJldHVybiBuZXcgU3ZnRWxlbVRleHQob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgICAgY2FzZSAndHNwYW4nOiByZXR1cm4gbmV3IFN2Z0VsZW1Uc3BhbihvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgICBjYXNlICd0ZXh0UGF0aCc6IHJldHVybiBuZXcgU3ZnRWxlbVRleHRQYXRoKG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICAgIGNhc2UgJyN0ZXh0JzogY2FzZSAnI2NkYXRhLXNlY3Rpb24nOiByZXR1cm4gbmV3IFN2Z0VsZW1UZXh0Tm9kZShvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbmV3IFN2Z0VsZW0ob2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdmFyIFN0cmluZ1BhcnNlciA9IGZ1bmN0aW9uKHN0cikgew0KICAgICAgICAgICAgICB0aGlzLm1hdGNoID0gZnVuY3Rpb24oZXhwLCBhbGwpIHsNCiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IHN0ci5tYXRjaChleHApOw0KICAgICAgICAgICAgICAgIGlmICghdGVtcCB8fCB0ZW1wLmluZGV4ICE9PSAwKSB7cmV0dXJuO30NCiAgICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKHRlbXBbMF0ubGVuZ3RoKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gKGFsbCA/IHRlbXAgOiB0ZW1wWzBdKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5tYXRjaFNlcGFyYXRvciA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hdGNoKC9eKD86XHMqLFxzKnxccyp8KS8pOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLm1hdGNoU3BhY2UgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXRjaCgvXig/OlxzKikvKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5tYXRjaExlbmd0aFVuaXQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXRjaCgvXig/OnB4fHB0fGNtfG1tfGlufHBjfGVtfGV4fCV8KS8pOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLm1hdGNoTnVtYmVyID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goL14oPzpbLStdPyg/OlswLTldK1suXVswLTldK3xbMC05XStbLl18Wy5dWzAtOV0rfFswLTldKykoPzpbZUVdWy0rXT9bMC05XSspPykvKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5tYXRjaEFsbCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hdGNoKC9eW1xzXFNdKy8pOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIEJlemllclNlZ21lbnQgPSBmdW5jdGlvbihwMXgsIHAxeSwgYzF4LCBjMXksIGMyeCwgYzJ5LCBwMngsIHAyeSkgew0KICAgICAgICAgICAgICBsZXQgZGl2aXNpb25zID0gNiAqIHByZWNpc2lvbjsNCiAgICAgICAgICAgICAgbGV0IGVxdWF0aW9uWCA9IFtwMXgsIC0zICogcDF4ICsgMyAqIGMxeCwgMyAqIHAxeCAtIDYgKiBjMXggKyAzICogYzJ4LCAtcDF4ICsgMyAqIGMxeCAtIDMgKiBjMnggKyBwMnhdOw0KICAgICAgICAgICAgICBsZXQgZXF1YXRpb25ZID0gW3AxeSwgLTMgKiBwMXkgKyAzICogYzF5LCAzICogcDF5IC0gNiAqIGMxeSArIDMgKiBjMnksIC1wMXkgKyAzICogYzF5IC0gMyAqIGMyeSArIHAyeV07DQogICAgICAgICAgICAgIGxldCBkZXJpdmF0aXZlWCA9IFstMyAqIHAxeCArIDMgKiBjMXgsIDYgKiBwMXggLSAxMiAqIGMxeCArIDYgKiBjMngsIC0zICogcDF4ICsgOSAqIGMxeCAtIDkgKiBjMnggKyAzICogcDJ4XTsNCiAgICAgICAgICAgICAgbGV0IGRlcml2YXRpdmVZID0gWy0zICogcDF5ICsgMyAqIGMxeSwgNiAqIHAxeSAtIDEyICogYzF5ICsgNiAqIGMyeSwgLTMgKiBwMXkgKyA5ICogYzF5IC0gOSAqIGMyeSArIDMgKiBwMnldOw0KICAgICAgICAgICAgICBsZXQgbGVuZ3RoTWFwID0gWzBdOw0KICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBkaXZpc2lvbnM7IGkrKykgew0KICAgICAgICAgICAgICAgIGxldCB0ID0gKGkgLSAwLjUpIC8gZGl2aXNpb25zOw0KICAgICAgICAgICAgICAgIGxldCBkeCA9IGdldEN1cnZlVmFsdWUodCwgZGVyaXZhdGl2ZVgpIC8gZGl2aXNpb25zLA0KICAgICAgICAgICAgICAgICAgICBkeSA9IGdldEN1cnZlVmFsdWUodCwgZGVyaXZhdGl2ZVkpIC8gZGl2aXNpb25zLA0KICAgICAgICAgICAgICAgICAgICBsID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTsNCiAgICAgICAgICAgICAgICBsZW5ndGhNYXBbaV0gPSBsZW5ndGhNYXBbaSAtIDFdICsgbDsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB0aGlzLnRvdGFsTGVuZ3RoID0gbGVuZ3RoTWFwW2RpdmlzaW9uc107DQogICAgICAgICAgICAgIHRoaXMuc3RhcnRQb2ludCA9IFtwMXgsIHAxeSwgaXNFcXVhbChwMXgsIGMxeCkgJiYgaXNFcXVhbChwMXksIGMxeSkgPyBNYXRoLmF0YW4yKGMyeSAtIGMxeSwgYzJ4IC0gYzF4KSA6IE1hdGguYXRhbjIoYzF5IC0gcDF5LCBjMXggLSBwMXgpXTsNCiAgICAgICAgICAgICAgdGhpcy5lbmRQb2ludCA9IFtwMngsIHAyeSwgaXNFcXVhbChjMngsIHAyeCkgJiYgaXNFcXVhbChjMnksIHAyeSkgPyBNYXRoLmF0YW4yKGMyeSAtIGMxeSwgYzJ4IC0gYzF4KSA6IE1hdGguYXRhbjIocDJ5IC0gYzJ5LCBwMnggLSBjMngpXTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRCb3VuZGluZ0JveCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGxldCB0ZW1wOw0KICAgICAgICAgICAgICAgIGxldCBtaW5YID0gZ2V0Q3VydmVWYWx1ZSgwLCBlcXVhdGlvblgpLCBtaW5ZID0gZ2V0Q3VydmVWYWx1ZSgwLCBlcXVhdGlvblkpLA0KICAgICAgICAgICAgICAgICAgICBtYXhYID0gZ2V0Q3VydmVWYWx1ZSgxLCBlcXVhdGlvblgpLCBtYXhZID0gZ2V0Q3VydmVWYWx1ZSgxLCBlcXVhdGlvblkpOw0KICAgICAgICAgICAgICAgIGlmIChtaW5YID4gbWF4WCkge3RlbXAgPSBtYXhYOyBtYXhYID0gbWluWDsgbWluWCA9IHRlbXA7fQ0KICAgICAgICAgICAgICAgIGlmIChtaW5ZID4gbWF4WSkge3RlbXAgPSBtYXhZOyBtYXhZID0gbWluWTsgbWluWSA9IHRlbXA7fQ0KICAgICAgICAgICAgICAgIGxldCByb290c1ggPSBzb2x2ZUVxdWF0aW9uKGRlcml2YXRpdmVYKTsNCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvb3RzWC5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgaWYgKHJvb3RzWFtpXSA+PSAwICYmIHJvb3RzWFtpXSA8PSAxKSB7DQogICAgICAgICAgICAgICAgICAgIGxldCB4ID0gZ2V0Q3VydmVWYWx1ZShyb290c1hbaV0sIGVxdWF0aW9uWCk7DQogICAgICAgICAgICAgICAgICAgIGlmICh4IDwgbWluWCkge21pblggPSB4O30NCiAgICAgICAgICAgICAgICAgICAgaWYgKHggPiBtYXhYKSB7bWF4WCA9IHg7fQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBsZXQgcm9vdHNZID0gc29sdmVFcXVhdGlvbihkZXJpdmF0aXZlWSk7DQogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb290c1kubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgIGlmIChyb290c1lbaV0gPj0gMCAmJiByb290c1lbaV0gPD0gMSkgew0KICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IGdldEN1cnZlVmFsdWUocm9vdHNZW2ldLCBlcXVhdGlvblkpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoeSA8IG1pblkpIHttaW5ZID0geTt9DQogICAgICAgICAgICAgICAgICAgIGlmICh5ID4gbWF4WSkge21heFkgPSB5O30NCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIFttaW5YLCBtaW5ZLCBtYXhYLCBtYXhZXTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRQb2ludEF0TGVuZ3RoID0gZnVuY3Rpb24obCkgew0KICAgICAgICAgICAgICAgIGlmIChpc0VxdWFsKGwsIDApKSB7cmV0dXJuIHRoaXMuc3RhcnRQb2ludDt9DQogICAgICAgICAgICAgICAgaWYgKGlzRXF1YWwobCwgdGhpcy50b3RhbExlbmd0aCkpIHtyZXR1cm4gdGhpcy5lbmRQb2ludDt9DQogICAgICAgICAgICAgICAgaWYgKGwgPCAwIHx8IGwgPiB0aGlzLnRvdGFsTGVuZ3RoKSB7cmV0dXJuO30NCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBkaXZpc2lvbnM7IGkrKykgew0KICAgICAgICAgICAgICAgICAgbGV0IGwxID0gbGVuZ3RoTWFwW2ktMV0sIGwyID0gbGVuZ3RoTWFwW2ldOw0KICAgICAgICAgICAgICAgICAgaWYgKGwxIDw9IGwgJiYgbCA8PSBsMikgew0KICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IChpIC0gKGwyIC0gbCkgLyAobDIgLSBsMSkpIC8gZGl2aXNpb25zLA0KICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGdldEN1cnZlVmFsdWUodCwgZXF1YXRpb25YKSwgeSA9IGdldEN1cnZlVmFsdWUodCwgZXF1YXRpb25ZKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGR4ID0gZ2V0Q3VydmVWYWx1ZSh0LCBkZXJpdmF0aXZlWCksIGR5ID0gZ2V0Q3VydmVWYWx1ZSh0LCBkZXJpdmF0aXZlWSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBbeCwgeSwgTWF0aC5hdGFuMihkeSwgZHgpXTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgTGluZVNlZ21lbnQgPSBmdW5jdGlvbihwMXgsIHAxeSwgcDJ4LCBwMnkpIHsNCiAgICAgICAgICAgICAgdGhpcy50b3RhbExlbmd0aCA9IE1hdGguc3FydCgocDJ4IC0gcDF4KSAqIChwMnggLSBwMXgpICsgKHAyeSAtIHAxeSkgKiAocDJ5IC0gcDF5KSk7DQogICAgICAgICAgICAgIHRoaXMuc3RhcnRQb2ludCA9IFtwMXgsIHAxeSwgTWF0aC5hdGFuMihwMnkgLSBwMXksIHAyeCAtIHAxeCldOw0KICAgICAgICAgICAgICB0aGlzLmVuZFBvaW50ID0gW3AyeCwgcDJ5LCBNYXRoLmF0YW4yKHAyeSAtIHAxeSwgcDJ4IC0gcDF4KV07DQogICAgICAgICAgICAgIHRoaXMuZ2V0Qm91bmRpbmdCb3ggPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gW01hdGgubWluKHRoaXMuc3RhcnRQb2ludFswXSwgdGhpcy5lbmRQb2ludFswXSksIE1hdGgubWluKHRoaXMuc3RhcnRQb2ludFsxXSwgdGhpcy5lbmRQb2ludFsxXSksDQogICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heCh0aGlzLnN0YXJ0UG9pbnRbMF0sIHRoaXMuZW5kUG9pbnRbMF0pLCBNYXRoLm1heCh0aGlzLnN0YXJ0UG9pbnRbMV0sIHRoaXMuZW5kUG9pbnRbMV0pXTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRQb2ludEF0TGVuZ3RoID0gZnVuY3Rpb24obCkgew0KICAgICAgICAgICAgICAgIGlmIChsID49IDAgJiYgbCA8PSB0aGlzLnRvdGFsTGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgICBsZXQgciA9IGwgLyB0aGlzLnRvdGFsTGVuZ3RoIHx8IDAsDQogICAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMuc3RhcnRQb2ludFswXSArIHIgKiAodGhpcy5lbmRQb2ludFswXSAtIHRoaXMuc3RhcnRQb2ludFswXSksDQogICAgICAgICAgICAgICAgICAgICAgeSA9IHRoaXMuc3RhcnRQb2ludFsxXSArIHIgKiAodGhpcy5lbmRQb2ludFsxXSAtIHRoaXMuc3RhcnRQb2ludFsxXSk7DQogICAgICAgICAgICAgICAgICByZXR1cm4gW3gsIHksIHRoaXMuc3RhcnRQb2ludFsyXV07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z1NoYXBlID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgIHRoaXMucGF0aENvbW1hbmRzID0gW107DQogICAgICAgICAgICAgIHRoaXMucGF0aFNlZ21lbnRzID0gW107DQogICAgICAgICAgICAgIHRoaXMuc3RhcnRQb2ludCA9IG51bGw7DQogICAgICAgICAgICAgIHRoaXMuZW5kUG9pbnQgPSBudWxsOw0KICAgICAgICAgICAgICB0aGlzLnRvdGFsTGVuZ3RoID0gMDsNCiAgICAgICAgICAgICAgbGV0IHN0YXJ0WCA9IDAsIHN0YXJ0WSA9IDAsIGN1cnJYID0gMCwgY3VyclkgPSAwLCBsYXN0Q29tLCBsYXN0Q3RybFgsIGxhc3RDdHJsWTsNCiAgICAgICAgICAgICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oeCwgeSkgew0KICAgICAgICAgICAgICAgIHN0YXJ0WCA9IGN1cnJYID0geDsgc3RhcnRZID0gY3VyclkgPSB5Ow0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmxpbmUgPSBmdW5jdGlvbih4LCB5KSB7DQogICAgICAgICAgICAgICAgbGV0IHNlZ21lbnQgPSBuZXcgTGluZVNlZ21lbnQoY3VyclgsIGN1cnJZLCB4LCB5KTsNCiAgICAgICAgICAgICAgICBjdXJyWCA9IHg7IGN1cnJZID0geTsNCiAgICAgICAgICAgICAgICByZXR1cm4gc2VnbWVudDsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5jdXJ2ZSA9IGZ1bmN0aW9uKGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeSkgew0KICAgICAgICAgICAgICAgIGxldCBzZWdtZW50ID0gbmV3IEJlemllclNlZ21lbnQoY3VyclgsIGN1cnJZLCBjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpOw0KICAgICAgICAgICAgICAgIGN1cnJYID0geDsgY3VyclkgPSB5Ow0KICAgICAgICAgICAgICAgIHJldHVybiBzZWdtZW50Ow0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmNsb3NlID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgbGV0IHNlZ21lbnQgPSBuZXcgTGluZVNlZ21lbnQoY3VyclgsIGN1cnJZLCBzdGFydFgsIHN0YXJ0WSk7DQogICAgICAgICAgICAgICAgY3VyclggPSBzdGFydFg7IGN1cnJZID0gc3RhcnRZOw0KICAgICAgICAgICAgICAgIHJldHVybiBzZWdtZW50Ow0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQgPSBmdW5jdGlvbihkYXRhKSB7DQogICAgICAgICAgICAgICAgdGhpcy5wYXRoQ29tbWFuZHMucHVzaChkYXRhKTsNCiAgICAgICAgICAgICAgICBsZXQgc2VnbWVudCA9IHRoaXNbZGF0YVswXV0uYXBwbHkodGhpcywgZGF0YS5zbGljZSgzKSk7DQogICAgICAgICAgICAgICAgaWYgKHNlZ21lbnQpIHsNCiAgICAgICAgICAgICAgICAgIHNlZ21lbnQuaGFzU3RhcnQgPSBkYXRhWzFdOw0KICAgICAgICAgICAgICAgICAgc2VnbWVudC5oYXNFbmQgPSBkYXRhWzJdOw0KICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFBvaW50ID0gdGhpcy5zdGFydFBvaW50IHx8IHNlZ21lbnQuc3RhcnRQb2ludDsNCiAgICAgICAgICAgICAgICAgIHRoaXMuZW5kUG9pbnQgPSBzZWdtZW50LmVuZFBvaW50Ow0KICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoU2VnbWVudHMucHVzaChzZWdtZW50KTsNCiAgICAgICAgICAgICAgICAgIHRoaXMudG90YWxMZW5ndGggKz0gc2VnbWVudC50b3RhbExlbmd0aDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuTSA9IGZ1bmN0aW9uKHgsIHkpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoWydtb3ZlJywgdHJ1ZSwgdHJ1ZSwgeCwgeV0pOw0KICAgICAgICAgICAgICAgIGxhc3RDb20gPSAnTSc7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMubSA9IGZ1bmN0aW9uKHgsIHkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5NKGN1cnJYICsgeCwgY3VyclkgKyB5KTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5aID0gdGhpcy56ID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgdGhpcy5hZGRDb21tYW5kKFsnY2xvc2UnLCB0cnVlLCB0cnVlXSk7DQogICAgICAgICAgICAgICAgbGFzdENvbSA9ICdaJzsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5MID0gZnVuY3Rpb24oeCwgeSkgew0KICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29tbWFuZChbJ2xpbmUnLCB0cnVlLCB0cnVlLCB4LCB5XSk7DQogICAgICAgICAgICAgICAgbGFzdENvbSA9ICdMJzsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5sID0gZnVuY3Rpb24oeCwgeSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkwoY3VyclggKyB4LCBjdXJyWSArIHkpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLkggPSBmdW5jdGlvbih4KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuTCh4LCBjdXJyWSk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuaCA9IGZ1bmN0aW9uKHgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5MKGN1cnJYICsgeCwgY3VyclkpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLlYgPSBmdW5jdGlvbih5KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuTChjdXJyWCwgeSk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMudiA9IGZ1bmN0aW9uKHkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5MKGN1cnJYLCBjdXJyWSArIHkpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLkMgPSBmdW5jdGlvbihjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoWydjdXJ2ZScsIHRydWUsIHRydWUsIGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeV0pOw0KICAgICAgICAgICAgICAgIGxhc3RDb20gPSAnQyc7IGxhc3RDdHJsWCA9IGMyeDsgbGFzdEN0cmxZID0gYzJ5Ow0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmMgPSBmdW5jdGlvbihjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5DKGN1cnJYICsgYzF4LCBjdXJyWSArIGMxeSwgY3VyclggKyBjMngsIGN1cnJZICsgYzJ5LCBjdXJyWCArIHgsIGN1cnJZICsgeSk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuUyA9IGZ1bmN0aW9uKGMxeCwgYzF5LCB4LCB5KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuQyhjdXJyWCArIChsYXN0Q29tID09PSAnQycgPyBjdXJyWCAtIGxhc3RDdHJsWCA6IDApLCBjdXJyWSArIChsYXN0Q29tID09PSAnQycgPyBjdXJyWSAtIGxhc3RDdHJsWSA6IDApLCBjMXgsIGMxeSwgeCwgeSk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMucyA9IGZ1bmN0aW9uKGMxeCwgYzF5LCB4LCB5KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuQyhjdXJyWCArIChsYXN0Q29tID09PSAnQycgPyBjdXJyWCAtIGxhc3RDdHJsWCA6IDApLCBjdXJyWSArIChsYXN0Q29tID09PSAnQycgPyBjdXJyWSAtIGxhc3RDdHJsWSA6IDApLCBjdXJyWCArIGMxeCwgY3VyclkgKyBjMXksIGN1cnJYICsgeCwgY3VyclkgKyB5KTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5RID0gZnVuY3Rpb24oY3gsIGN5LCB4LCB5KSB7DQogICAgICAgICAgICAgICAgbGV0IGMxeCA9IGN1cnJYICsgMiAvIDMgKiAoY3ggLSBjdXJyWCksIGMxeSA9IGN1cnJZICsgMiAvIDMgKiAoY3kgLSBjdXJyWSksDQogICAgICAgICAgICAgICAgICAgIGMyeCA9IHggKyAyIC8gMyAqIChjeCAtIHgpLCBjMnkgPSB5ICsgMiAvIDMgKiAoY3kgLSB5KTsNCiAgICAgICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoWydjdXJ2ZScsIHRydWUsIHRydWUsIGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeV0pOw0KICAgICAgICAgICAgICAgIGxhc3RDb20gPSAnUSc7IGxhc3RDdHJsWCA9IGN4OyBsYXN0Q3RybFkgPSBjeTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5xID0gZnVuY3Rpb24oYzF4LCBjMXksIHgsIHkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5RKGN1cnJYICsgYzF4LCBjdXJyWSArIGMxeSwgY3VyclggKyB4LCBjdXJyWSArIHkpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLlQgPSBmdW5jdGlvbih4LCB5KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUShjdXJyWCArIChsYXN0Q29tID09PSAnUScgPyBjdXJyWCAtIGxhc3RDdHJsWCA6IDApLCBjdXJyWSArIChsYXN0Q29tID09PSAnUScgPyBjdXJyWSAtIGxhc3RDdHJsWSA6IDApLCB4LCB5KTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy50ID0gZnVuY3Rpb24oeCwgeSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlEoY3VyclggKyAobGFzdENvbSA9PT0gJ1EnID8gY3VyclggLSBsYXN0Q3RybFggOiAwKSwgY3VyclkgKyAobGFzdENvbSA9PT0gJ1EnID8gY3VyclkgLSBsYXN0Q3RybFkgOiAwKSwgY3VyclggKyB4LCBjdXJyWSArIHkpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLkEgPSBmdW5jdGlvbihyeCwgcnksIGZpLCBmYSwgZnMsIHgsIHkpIHsNCiAgICAgICAgICAgICAgICBpZiAoaXNFcXVhbChyeCwgMCkgfHwgaXNFcXVhbChyeSwgMCkpIHsNCiAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29tbWFuZChbJ2xpbmUnLCB0cnVlLCB0cnVlLCB4LCB5XSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgIGZpID0gZmkgKiAoTWF0aC5QSSAvIDE4MCk7DQogICAgICAgICAgICAgICAgICByeCA9IE1hdGguYWJzKHJ4KTsNCiAgICAgICAgICAgICAgICAgIHJ5ID0gTWF0aC5hYnMocnkpOw0KICAgICAgICAgICAgICAgICAgZmEgPSAxICogISFmYTsNCiAgICAgICAgICAgICAgICAgIGZzID0gMSAqICEhZnM7DQogICAgICAgICAgICAgICAgICBsZXQgeDEgPSBNYXRoLmNvcyhmaSkgKiAoY3VyclggLSB4KSAvIDIgKyBNYXRoLnNpbihmaSkgKiAoY3VyclkgLSB5KSAvIDIsDQogICAgICAgICAgICAgICAgICAgICAgeTEgPSBNYXRoLmNvcyhmaSkgKiAoY3VyclkgLSB5KSAvIDIgLSBNYXRoLnNpbihmaSkgKiAoY3VyclggLSB4KSAvIDIsDQogICAgICAgICAgICAgICAgICAgICAgbGFtYmRhID0gKHgxICogeDEpIC8gKHJ4ICogcngpICsgKHkxICogeTEpIC8gKHJ5ICogcnkpOw0KICAgICAgICAgICAgICAgICAgaWYgKGxhbWJkYSA+IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgcnggKj0gTWF0aC5zcXJ0KGxhbWJkYSk7DQogICAgICAgICAgICAgICAgICAgIHJ5ICo9IE1hdGguc3FydChsYW1iZGEpOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgbGV0IHIgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgcnggKiByeCAqIHJ5ICogcnkgLSByeCAqIHJ4ICogeTEgKiB5MSAtIHJ5ICogcnkgKiB4MSAqIHgxKSAvIChyeCAqIHJ4ICogeTEgKiB5MSArIHJ5ICogcnkgKiB4MSAqIHgxKSksDQogICAgICAgICAgICAgICAgICAgICAgeDIgPSAoZmEgPT09IGZzID8gLTEgOiAxKSAqIHIgKiByeCAqIHkxIC8gcnksDQogICAgICAgICAgICAgICAgICAgICAgeTIgPSAoZmEgPT09IGZzID8gMSA6IC0xKSAqIHIgKiByeSAqIHgxIC8gcng7DQogICAgICAgICAgICAgICAgICBsZXQgY3ggPSBNYXRoLmNvcyhmaSkgKiB4MiAtIE1hdGguc2luKGZpKSAqIHkyICsgKGN1cnJYICsgeCkgLyAyLA0KICAgICAgICAgICAgICAgICAgICAgIGN5ID0gTWF0aC5zaW4oZmkpICogeDIgKyBNYXRoLmNvcyhmaSkgKiB5MiArIChjdXJyWSArIHkpIC8gMiwNCiAgICAgICAgICAgICAgICAgICAgICB0aDEgPSBNYXRoLmF0YW4yKCh5MSAtIHkyKSAvIHJ5LCAoeDEgLSB4MikgLyByeCksDQogICAgICAgICAgICAgICAgICAgICAgdGgyID0gTWF0aC5hdGFuMigoLXkxIC0geTIpIC8gcnksICgteDEgLSB4MikgLyByeCk7DQogICAgICAgICAgICAgICAgICBpZiAoZnMgPT09IDAgJiYgdGgyIC0gdGgxID4gMCkgew0KICAgICAgICAgICAgICAgICAgICB0aDIgLT0gMiAqIE1hdGguUEk7DQogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZzID09PSAxICYmIHRoMiAtIHRoMSA8IDApIHsNCiAgICAgICAgICAgICAgICAgICAgdGgyICs9IDIgKiBNYXRoLlBJOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgbGV0IHNlZ21zID0gTWF0aC5jZWlsKE1hdGguYWJzKHRoMiAtIHRoMSkgLyAoTWF0aC5QSSAvIHByZWNpc2lvbikpOw0KICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtczsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgIGxldCB0aDMgPSB0aDEgKyBpICogKHRoMiAtIHRoMSkgLyBzZWdtcywNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoNCA9IHRoMSArIChpICsgMSkgKiAodGgyIC0gdGgxKSAvIHNlZ21zLA0KICAgICAgICAgICAgICAgICAgICAgICAgdCA9IDQvMyAqIE1hdGgudGFuKCh0aDQgLSB0aDMpIC8gNCk7DQogICAgICAgICAgICAgICAgICAgIGxldCBjMXggPSBjeCArIE1hdGguY29zKGZpKSAqIHJ4ICogKE1hdGguY29zKHRoMykgLSB0ICogTWF0aC5zaW4odGgzKSkgLSBNYXRoLnNpbihmaSkgKiByeSAqIChNYXRoLnNpbih0aDMpICsgdCAqIE1hdGguY29zKHRoMykpLA0KICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0gY3kgKyBNYXRoLnNpbihmaSkgKiByeCAqIChNYXRoLmNvcyh0aDMpIC0gdCAqIE1hdGguc2luKHRoMykpICsgTWF0aC5jb3MoZmkpICogcnkgKiAoTWF0aC5zaW4odGgzKSArIHQgKiBNYXRoLmNvcyh0aDMpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGN4ICsgTWF0aC5jb3MoZmkpICogcnggKiAoTWF0aC5jb3ModGg0KSArIHQgKiBNYXRoLnNpbih0aDQpKSAtIE1hdGguc2luKGZpKSAqIHJ5ICogKE1hdGguc2luKHRoNCkgLSB0ICogTWF0aC5jb3ModGg0KSksDQogICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjeSArIE1hdGguc2luKGZpKSAqIHJ4ICogKE1hdGguY29zKHRoNCkgKyB0ICogTWF0aC5zaW4odGg0KSkgKyBNYXRoLmNvcyhmaSkgKiByeSAqIChNYXRoLnNpbih0aDQpIC0gdCAqIE1hdGguY29zKHRoNCkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgZW5kWCA9IGN4ICsgTWF0aC5jb3MoZmkpICogcnggKiBNYXRoLmNvcyh0aDQpIC0gTWF0aC5zaW4oZmkpICogcnkgKiBNYXRoLnNpbih0aDQpLA0KICAgICAgICAgICAgICAgICAgICAgICAgZW5kWSA9IGN5ICsgTWF0aC5zaW4oZmkpICogcnggKiBNYXRoLmNvcyh0aDQpICsgTWF0aC5jb3MoZmkpICogcnkgKiBNYXRoLnNpbih0aDQpOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoWydjdXJ2ZScsIChpID09PSAwKSwgKGkgPT09IHNlZ21zIC0gMSksIGMxeCwgYzF5LCBjMngsIGMyeSwgZW5kWCwgZW5kWV0pOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBsYXN0Q29tID0gJ0EnOw0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmEgPSBmdW5jdGlvbihyeCwgcnksIGZpLCBmYSwgZnMsIHgsIHkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5BKHJ4LCByeSwgZmksIGZhLCBmcywgY3VyclggKyB4LCBjdXJyWSArIHkpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLnBhdGggPSBmdW5jdGlvbihkKSB7DQogICAgICAgICAgICAgICAgbGV0IGNvbW1hbmQsIHZhbHVlLCB0ZW1wLA0KICAgICAgICAgICAgICAgICAgICBwYXJzZXIgPSBuZXcgU3RyaW5nUGFyc2VyKChkIHx8ICcnKS50cmltKCkpOw0KICAgICAgICAgICAgICAgIHdoaWxlIChjb21tYW5kID0gcGFyc2VyLm1hdGNoKC9eW2FzdHZ6cW1obGNBU1RWWlFNSExDXS8pKSB7DQogICAgICAgICAgICAgICAgICBwYXJzZXIubWF0Y2hTZXBhcmF0b3IoKTsNCiAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZXMgPSBbXTsNCiAgICAgICAgICAgICAgICAgIHdoaWxlICh2YWx1ZSA9IChQYXRoRmxhZ3NbY29tbWFuZCArIHZhbHVlcy5sZW5ndGhdID8gcGFyc2VyLm1hdGNoKC9eWzAxXS8pIDogcGFyc2VyLm1hdGNoTnVtYmVyKCkpKSB7DQogICAgICAgICAgICAgICAgICAgIHBhcnNlci5tYXRjaFNlcGFyYXRvcigpOw0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gUGF0aEFyZ3VtZW50c1tjb21tYW5kXSkgew0KICAgICAgICAgICAgICAgICAgICAgIHRoaXNbY29tbWFuZF0uYXBwbHkodGhpcywgdmFsdWVzKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTsNCiAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gJ00nKSB7Y29tbWFuZCA9ICdMJzt9DQogICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY29tbWFuZCA9PT0gJ20nKSB7Y29tbWFuZCA9ICdsJzt9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goTnVtYmVyKHZhbHVlKSk7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gUGF0aEFyZ3VtZW50c1tjb21tYW5kXSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzW2NvbW1hbmRdLmFwcGx5KHRoaXMsIHZhbHVlcyk7DQogICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB3YXJuaW5nQ2FsbGJhY2soJ1N2Z1BhdGg6IGNvbW1hbmQgJyArIGNvbW1hbmQgKyAnIHdpdGggJyArIHZhbHVlcy5sZW5ndGggKyAnIG51bWJlcnMnKTsgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAodGVtcCA9IHBhcnNlci5tYXRjaEFsbCgpKSB7DQogICAgICAgICAgICAgICAgICB3YXJuaW5nQ2FsbGJhY2soJ1N2Z1BhdGg6IHVuZXhwZWN0ZWQgc3RyaW5nICcgKyB0ZW1wKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0Qm91bmRpbmdCb3ggPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBsZXQgYmJveCA9IFtJbmZpbml0eSwgSW5maW5pdHksIC1JbmZpbml0eSwgLUluZmluaXR5XTsNCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGRCb3VuZHMoYmJveDEpIHsNCiAgICAgICAgICAgICAgICAgIGlmIChiYm94MVswXSA8IGJib3hbMF0pIHtiYm94WzBdID0gYmJveDFbMF07fQ0KICAgICAgICAgICAgICAgICAgaWYgKGJib3gxWzJdID4gYmJveFsyXSkge2Jib3hbMl0gPSBiYm94MVsyXTt9DQogICAgICAgICAgICAgICAgICBpZiAoYmJveDFbMV0gPCBiYm94WzFdKSB7YmJveFsxXSA9IGJib3gxWzFdO30NCiAgICAgICAgICAgICAgICAgIGlmIChiYm94MVszXSA+IGJib3hbM10pIHtiYm94WzNdID0gYmJveDFbM107fQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aFNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICBhZGRCb3VuZHModGhpcy5wYXRoU2VnbWVudHNbaV0uZ2V0Qm91bmRpbmdCb3goKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChiYm94WzBdID09PSBJbmZpbml0eSkge2Jib3hbMF0gPSAwO30NCiAgICAgICAgICAgICAgICBpZiAoYmJveFsxXSA9PT0gSW5maW5pdHkpIHtiYm94WzFdID0gMDt9DQogICAgICAgICAgICAgICAgaWYgKGJib3hbMl0gPT09IC1JbmZpbml0eSkge2Jib3hbMl0gPSAwO30NCiAgICAgICAgICAgICAgICBpZiAoYmJveFszXSA9PT0gLUluZmluaXR5KSB7YmJveFszXSA9IDA7fQ0KICAgICAgICAgICAgICAgIHJldHVybiBiYm94Ow0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFBvaW50QXRMZW5ndGggPSBmdW5jdGlvbihsKSB7DQogICAgICAgICAgICAgICAgaWYgKGwgPj0gMCAmJiBsIDw9IHRoaXMudG90YWxMZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgIGxldCB0ZW1wOw0KICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGhTZWdtZW50cy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICBpZiAodGVtcCA9IHRoaXMucGF0aFNlZ21lbnRzW2ldLmdldFBvaW50QXRMZW5ndGgobCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVtcDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBsIC09IHRoaXMucGF0aFNlZ21lbnRzW2ldLnRvdGFsTGVuZ3RoOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5kUG9pbnQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKG0pIHsNCiAgICAgICAgICAgICAgICB0aGlzLnBhdGhTZWdtZW50cyA9IFtdOw0KICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQb2ludCA9IG51bGw7DQogICAgICAgICAgICAgICAgdGhpcy5lbmRQb2ludCA9IG51bGw7DQogICAgICAgICAgICAgICAgdGhpcy50b3RhbExlbmd0aCA9IDA7DQogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGhDb21tYW5kcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB0aGlzLnBhdGhDb21tYW5kcy5zaGlmdCgpOw0KICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDM7IGogPCBkYXRhLmxlbmd0aDsgais9Mikgew0KICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IHRyYW5zZm9ybVBvaW50KFtkYXRhW2pdLCBkYXRhW2ogKyAxXV0sIG0pOw0KICAgICAgICAgICAgICAgICAgICBkYXRhW2pdID0gcFswXTsNCiAgICAgICAgICAgICAgICAgICAgZGF0YVtqICsgMV0gPSBwWzFdOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDb21tYW5kKGRhdGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsgICAgICAgIA0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLm1lcmdlU2hhcGUgPSBmdW5jdGlvbihzaGFwZSkgew0KICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hhcGUucGF0aENvbW1hbmRzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoc2hhcGUucGF0aENvbW1hbmRzW2ldLnNsaWNlKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5jbG9uZSA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3ZnU2hhcGUoKS5tZXJnZVNoYXBlKHRoaXMpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmluc2VydEluRG9jdW1lbnQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aENvbW1hbmRzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICBsZXQgY29tbWFuZCA9IHRoaXMucGF0aENvbW1hbmRzW2ldWzBdLCB2YWx1ZXMgPSB0aGlzLnBhdGhDb21tYW5kc1tpXS5zbGljZSgzKTsNCiAgICAgICAgICAgICAgICAgIHN3aXRjaChjb21tYW5kKSB7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmUnOiAgZG9jLm1vdmVUbyh2YWx1ZXNbMF0sIHZhbHVlc1sxXSk7ICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGluZSc6ICBkb2MubGluZVRvKHZhbHVlc1swXSwgdmFsdWVzWzFdKTsgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICdjdXJ2ZSc6ICBkb2MuYmV6aWVyQ3VydmVUbyh2YWx1ZXNbMF0sIHZhbHVlc1sxXSwgdmFsdWVzWzJdLCB2YWx1ZXNbM10sIHZhbHVlc1s0XSwgdmFsdWVzWzVdKTsgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICdjbG9zZSc6ICBkb2MuY2xvc2VQYXRoKCk7ICBicmVhazsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0U3ViUGF0aHMgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBsZXQgc3ViUGF0aHMgPSBbXSwgc2hhcGUgPSBuZXcgU3ZnU2hhcGUoKTsNCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aENvbW1hbmRzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHRoaXMucGF0aENvbW1hbmRzW2ldLCBjb21tYW5kID0gdGhpcy5wYXRoQ29tbWFuZHNbaV1bMF07DQogICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gJ21vdmUnICYmIGkgIT09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgc3ViUGF0aHMucHVzaChzaGFwZSk7DQogICAgICAgICAgICAgICAgICAgIHNoYXBlID0gbmV3IFN2Z1NoYXBlKCk7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBzaGFwZS5hZGRDb21tYW5kKGRhdGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBzdWJQYXRocy5wdXNoKHNoYXBlKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gc3ViUGF0aHM7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0TWFya2VycyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGxldCBtYXJrZXJzID0gW10sIHN1YlBhdGhzID0gdGhpcy5nZXRTdWJQYXRocygpOw0KICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ViUGF0aHMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgIGxldCBzdWJQYXRoID0gc3ViUGF0aHNbaV0sIHN1YlBhdGhNYXJrZXJzID0gW107DQogICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN1YlBhdGgucGF0aFNlZ21lbnRzLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICAgIGxldCBzZWdtZW50ID0gc3ViUGF0aC5wYXRoU2VnbWVudHNbal07DQogICAgICAgICAgICAgICAgICAgIGlmIChpc05vdEVxdWFsKHNlZ21lbnQudG90YWxMZW5ndGgsIDApIHx8IGogPT09IDAgfHwgaiA9PT0gc3ViUGF0aC5wYXRoU2VnbWVudHMubGVuZ3RoIC0gMSkgew0KICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50Lmhhc1N0YXJ0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRNYXJrZXIgPSBzZWdtZW50LmdldFBvaW50QXRMZW5ndGgoMCksIHByZXZFbmRNYXJrZXIgPSBzdWJQYXRoTWFya2Vycy5wb3AoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2RW5kTWFya2VyKSB7c3RhcnRNYXJrZXJbMl0gPSAwLjUgKiAocHJldkVuZE1hcmtlclsyXSArIHN0YXJ0TWFya2VyWzJdKTt9DQogICAgICAgICAgICAgICAgICAgICAgICBzdWJQYXRoTWFya2Vycy5wdXNoKHN0YXJ0TWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgaWYgKHNlZ21lbnQuaGFzRW5kKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5kTWFya2VyID0gc2VnbWVudC5nZXRQb2ludEF0TGVuZ3RoKHNlZ21lbnQudG90YWxMZW5ndGgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgc3ViUGF0aE1hcmtlcnMucHVzaChlbmRNYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgbWFya2VycyA9IG1hcmtlcnMuY29uY2F0KHN1YlBhdGhNYXJrZXJzKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlcnM7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbSA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgbGV0IHN0eWxlQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOw0KICAgICAgICAgICAgICBsZXQgY2hpbGRyZW5DYWNoZSA9IG51bGw7DQogICAgICAgICAgICAgIHRoaXMubmFtZSA9IG9iai5ub2RlTmFtZTsNCiAgICAgICAgICAgICAgdGhpcy5pc091dGVyRWxlbWVudCA9IG9iaiA9PT0gc3ZnIHx8ICFvYmoucGFyZW50Tm9kZTsNCiAgICAgICAgICAgICAgdGhpcy5pbmhlcml0cyA9IGluaGVyaXRzIHx8ICghdGhpcy5pc091dGVyRWxlbWVudCA/IGNyZWF0ZVNWR0VsZW1lbnQob2JqLnBhcmVudE5vZGUsIG51bGwpIDogbnVsbCk7DQogICAgICAgICAgICAgIHRoaXMuc3RhY2sgPSAodGhpcy5pbmhlcml0cyA/IHRoaXMuaW5oZXJpdHMuc3RhY2suY29uY2F0KG9iaikgOiBbb2JqXSk7DQogICAgICAgICAgICAgIHRoaXMuc3R5bGUgPSBwYXJzZVN0eWxlQXR0cih0eXBlb2Ygb2JqLmdldEF0dHJpYnV0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouZ2V0QXR0cmlidXRlKCdzdHlsZScpKTsNCiAgICAgICAgICAgICAgdGhpcy5jc3MgPSB1c2VDU1MgPyBnZXRDb21wdXRlZFN0eWxlKG9iaikgOiBnZXRTdHlsZShvYmopOw0KICAgICAgICAgICAgICB0aGlzLmFsbG93ZWRDaGlsZHJlbiA9IFtdOw0KICAgICAgICAgICAgICB0aGlzLmF0dHIgPSBmdW5jdGlvbihrZXkpIHsNCiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iai5nZXRBdHRyaWJ1dGUgPT09ICdmdW5jdGlvbicpIHsNCiAgICAgICAgICAgICAgICAgIHJldHVybiBvYmouZ2V0QXR0cmlidXRlKGtleSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLnJlc29sdmVVcmwgPSBmdW5jdGlvbih2YWx1ZSkgew0KICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gKHZhbHVlIHx8ICcnKS5tYXRjaCgvXlxzKig/OnVybFwoIiguKikjKC4qKSJcKXx1cmxcKCcoLiopIyguKiknXCl8dXJsXCgoLiopIyguKilcKXwoLiopIyguKikpXHMqJC8pIHx8IFtdOw0KICAgICAgICAgICAgICAgIGxldCBmaWxlID0gdGVtcFsxXSB8fCB0ZW1wWzNdIHx8IHRlbXBbNV0gfHwgdGVtcFs3XSwNCiAgICAgICAgICAgICAgICAgICAgaWQgPSB0ZW1wWzJdIHx8IHRlbXBbNF0gfHwgdGVtcFs2XSB8fCB0ZW1wWzhdOw0KICAgICAgICAgICAgICAgIGlmIChpZCkgew0KICAgICAgICAgICAgICAgICAgaWYgKCFmaWxlKSB7DQogICAgICAgICAgICAgICAgICAgIGxldCBzdmdPYmogPSBzdmcuZ2V0RWxlbWVudEJ5SWQoaWQpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoc3ZnT2JqKSB7DQogICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhY2suaW5kZXhPZihzdmdPYmopID09PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN2Z09iajsNCiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ0NhbGxiYWNrKCdTVkd0b1BERjogbG9vcCBvZiBjaXJjdWxhciByZWZlcmVuY2VzIGZvciBpZCAiJyArIGlkICsgJyInKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudENhbGxiYWNrKSB7DQogICAgICAgICAgICAgICAgICAgIGxldCBzdmdzID0gZG9jdW1lbnRDYWNoZVtmaWxlXTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdmdzKSB7DQogICAgICAgICAgICAgICAgICAgICAgc3ZncyA9IGRvY3VtZW50Q2FsbGJhY2soZmlsZSk7DQogICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5TGlrZShzdmdzKSkge3N2Z3MgPSBbc3Znc107fQ0KICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Zncy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdmdzW2ldID09PSAnc3RyaW5nJykge3N2Z3NbaV0gPSBwYXJzZVhtbChzdmdzW2ldKTt9DQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Q2FjaGVbZmlsZV0gPSBzdmdzOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Zncy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgIGxldCBzdmdPYmogPSBzdmdzW2ldLmdldEVsZW1lbnRCeUlkKGlkKTsNCiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ZnT2JqKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFjay5pbmRleE9mKHN2Z09iaikgPT09IC0xKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdmdPYmo7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nQ2FsbGJhY2soJ1NWR3RvUERGOiBsb29wIG9mIGNpcmN1bGFyIHJlZmVyZW5jZXMgZm9yIGlkICInICsgZmlsZSArICcjJyArIGlkICsgJyInKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5jb21wdXRlVW5pdHMgPSBmdW5jdGlvbih2YWx1ZSwgdW5pdCwgcGVyY2VudCwgaXNGb250U2l6ZSkgew0KICAgICAgICAgICAgICAgIGlmICh1bml0ID09PSAnJScpIHsNCiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMCAqIChpc0ZvbnRTaXplIHx8IHBlcmNlbnQgIT0gbnVsbCA/IHBlcmNlbnQgOiB0aGlzLmdldFZpZXdwb3J0KCkpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodW5pdCA9PT0gJ2V4JyB8fCB1bml0ID09PSAnZW0nKSB7DQogICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgKiB7J2VtJzoxLCAnZXgnOjAuNX1bdW5pdF0gKiAoaXNGb250U2l6ZSA/IHBlcmNlbnQgOiB0aGlzLmdldCgnZm9udC1zaXplJykpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgKiB7Jyc6MSwgJ3B4JzoxLCAncHQnOjk2LzcyLCAnY20nOjk2LzIuNTQsICdtbSc6OTYvMjUuNCwgJ2luJzo5NiwgJ3BjJzo5Ni82fVt1bml0XTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuY29tcHV0ZUxlbmd0aCA9IGZ1bmN0aW9uKHZhbHVlLCBwZXJjZW50LCBpbml0aWFsLCBpc0ZvbnRTaXplKSB7DQogICAgICAgICAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBTdHJpbmdQYXJzZXIoKHZhbHVlIHx8ICcnKS50cmltKCkpLCB0ZW1wMSwgdGVtcDI7DQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodGVtcDEgPSBwYXJzZXIubWF0Y2hOdW1iZXIoKSkgPT09ICdzdHJpbmcnICYmIHR5cGVvZiAodGVtcDIgPSBwYXJzZXIubWF0Y2hMZW5ndGhVbml0KCkpID09PSAnc3RyaW5nJyAmJiAhcGFyc2VyLm1hdGNoQWxsKCkpIHsNCiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVVbml0cyh0ZW1wMSwgdGVtcDIsIHBlcmNlbnQsIGlzRm9udFNpemUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdGlhbDsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5jb21wdXRlTGVuZ3RoTGlzdCA9IGZ1bmN0aW9uKHZhbHVlLCBwZXJjZW50LCBzdHJpY3QpIHsNCiAgICAgICAgICAgICAgICBsZXQgcGFyc2VyID0gbmV3IFN0cmluZ1BhcnNlcigodmFsdWUgfHwgJycpLnRyaW0oKSksIHJlc3VsdCA9IFtdLCB0ZW1wMSwgdGVtcDI7DQogICAgICAgICAgICAgICAgd2hpbGUgKHR5cGVvZiAodGVtcDEgPSBwYXJzZXIubWF0Y2hOdW1iZXIoKSkgPT09ICdzdHJpbmcnICYmIHR5cGVvZiAodGVtcDIgPSBwYXJzZXIubWF0Y2hMZW5ndGhVbml0KCkpID09PSAnc3RyaW5nJykgew0KICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5jb21wdXRlVW5pdHModGVtcDEsIHRlbXAyLCBwZXJjZW50KSk7DQogICAgICAgICAgICAgICAgICBwYXJzZXIubWF0Y2hTZXBhcmF0b3IoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBwYXJzZXIubWF0Y2hBbGwoKSkge3JldHVybjt9DQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRMZW5ndGggPSBmdW5jdGlvbihrZXksIHBlcmNlbnQsIGluaXRpYWwpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlTGVuZ3RoKHRoaXMuYXR0cihrZXkpLCBwZXJjZW50LCBpbml0aWFsKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRMZW5ndGhMaXN0ID0gZnVuY3Rpb24oa2V5LCBwZXJjZW50KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZUxlbmd0aExpc3QodGhpcy5hdHRyKGtleSksIHBlcmNlbnQpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFVybCA9IGZ1bmN0aW9uKGtleSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVVcmwodGhpcy5hdHRyKGtleSkpDQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0TnVtYmVyTGlzdCA9IGZ1bmN0aW9uKGtleSkgew0KICAgICAgICAgICAgICAgIGxldCBwYXJzZXIgPSBuZXcgU3RyaW5nUGFyc2VyKCh0aGlzLmF0dHIoa2V5KSB8fCAnJykudHJpbSgpKSwgcmVzdWx0ID0gW10sIHRlbXA7DQogICAgICAgICAgICAgICAgd2hpbGUgKHRlbXAgPSBwYXJzZXIubWF0Y2hOdW1iZXIoKSkgew0KICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goTnVtYmVyKHRlbXApKTsNCiAgICAgICAgICAgICAgICAgIHBhcnNlci5tYXRjaFNlcGFyYXRvcigpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXN1bHQuZXJyb3IgPSBwYXJzZXIubWF0Y2hBbGwoKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFZpZXdib3ggPSBmdW5jdGlvbihrZXksIGluaXRpYWwpIHsNCiAgICAgICAgICAgICAgICBsZXQgdmlld0JveCA9IHRoaXMuZ2V0TnVtYmVyTGlzdChrZXkpOw0KICAgICAgICAgICAgICAgIGlmICh2aWV3Qm94Lmxlbmd0aCA9PT0gNCAmJiB2aWV3Qm94WzJdID49IDAgJiYgdmlld0JveFszXSA+PSAwKSB7cmV0dXJuIHZpZXdCb3g7fQ0KICAgICAgICAgICAgICAgIHJldHVybiBpbml0aWFsOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFBlcmNlbnQgPSBmdW5jdGlvbihrZXksIGluaXRpYWwpIHsNCiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmF0dHIoa2V5KTsNCiAgICAgICAgICAgICAgICBsZXQgcGFyc2VyID0gbmV3IFN0cmluZ1BhcnNlcigodmFsdWUgfHwgJycpLnRyaW0oKSk7DQogICAgICAgICAgICAgICAgbGV0IG51bWJlciA9IHBhcnNlci5tYXRjaE51bWJlcigpOw0KICAgICAgICAgICAgICAgIGlmICghbnVtYmVyKSB7cmV0dXJuIGluaXRpYWw7fQ0KICAgICAgICAgICAgICAgIGlmIChwYXJzZXIubWF0Y2goJyUnKSkge251bWJlciAqPSAwLjAxO30NCiAgICAgICAgICAgICAgICBpZiAocGFyc2VyLm1hdGNoQWxsKCkpIHtyZXR1cm4gaW5pdGlhbDt9DQogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG51bWJlcikpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmNob29zZVZhbHVlID0gZnVuY3Rpb24oYXJncykgew0KICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldICE9IG51bGwgJiYgYXJndW1lbnRzW2ldID09PSBhcmd1bWVudHNbaV0pIHtyZXR1cm4gYXJndW1lbnRzW2ldO30NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24oa2V5KSB7DQogICAgICAgICAgICAgICAgaWYgKHN0eWxlQ2FjaGVba2V5XSAhPT0gdW5kZWZpbmVkKSB7cmV0dXJuIHN0eWxlQ2FjaGVba2V5XTt9DQogICAgICAgICAgICAgICAgbGV0IGtleUluZm8gPSBQcm9wZXJ0aWVzW2tleV0gfHwge30sIHZhbHVlLCByZXN1bHQ7DQogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkgew0KICAgICAgICAgICAgICAgICAgICBjYXNlIDA6DQogICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3RyYW5zZm9ybScpIHsgLy8gdGhlIENTUyB0cmFuc2Zvcm0gYmVoYXZlcyBzdHJhbmdlbHkNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jc3Nba2V5SW5mby5jc3MgfHwga2V5XTsNCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgMToNCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuc3R5bGVba2V5XTsNCiAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOg0KICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5hdHRyKGtleSk7DQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdpbmhlcml0Jykgew0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAodGhpcy5pbmhlcml0cyA/IHRoaXMuaW5oZXJpdHMuZ2V0KGtleSkgOiBrZXlJbmZvLmluaXRpYWwpOw0KICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtyZXR1cm4gc3R5bGVDYWNoZVtrZXldID0gcmVzdWx0O30NCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIGlmIChrZXlJbmZvLnZhbHVlcyAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGtleUluZm8udmFsdWVzW3ZhbHVlXTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7cmV0dXJuIHN0eWxlQ2FjaGVba2V5XSA9IHJlc3VsdDt9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBsZXQgcGFyc2VkOw0KICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkgew0KICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvbnQtc2l6ZSc6DQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmNvbXB1dGVMZW5ndGgodmFsdWUsIHRoaXMuaW5oZXJpdHMgPyB0aGlzLmluaGVyaXRzLmdldChrZXkpIDoga2V5SW5mby5pbml0aWFsLCB1bmRlZmluZWQsIHRydWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFzZWxpbmUtc2hpZnQnOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5jb21wdXRlTGVuZ3RoKHZhbHVlLCB0aGlzLmdldCgnZm9udC1zaXplJykpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9udC1mYW1pbHknOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWUgfHwgdW5kZWZpbmVkOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb3BhY2l0eSc6IGNhc2UgJ3N0cm9rZS1vcGFjaXR5JzogY2FzZSAnZmlsbC1vcGFjaXR5JzogY2FzZSAnc3RvcC1vcGFjaXR5JzoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZCA9IHBhcnNlRmxvYXQodmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZWQpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHBhcnNlZCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJhbnNmb3JtJzoNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBhcnNlVHJhbmZvcm0odmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3Ryb2tlLWRhc2hhcnJheSc6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdub25lJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VkID0gdGhpcy5jb21wdXRlTGVuZ3RoTGlzdCh2YWx1ZSwgdGhpcy5nZXRWaWV3cG9ydCgpLCB0cnVlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VtID0gMCwgZXJyb3IgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXJzZWQubGVuZ3RoOyBqKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkW2pdIDwgMCkge2Vycm9yID0gdHJ1ZTt9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtICs9IHBhcnNlZFtqXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVycm9yKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5sZW5ndGggJSAyID09PSAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQgPSBwYXJzZWQuY29uY2F0KHBhcnNlZCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChzdW0gPT09IDAgPyBbXSA6IHBhcnNlZCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbG9yJzoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ25vbmUnIHx8IHZhbHVlID09PSAndHJhbnNwYXJlbnQnKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICdub25lJzsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBhcnNlQ29sb3IodmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmlsbCc6IGNhc2UgJ3N0cm9rZSc6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdub25lJyB8fCB2YWx1ZSA9PT0gJ3RyYW5zcGFyZW50Jykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAnbm9uZSc7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnY3VycmVudENvbG9yJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmdldCgnY29sb3InKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VkID0gcGFyc2VDb2xvcih2YWx1ZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZDsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VkID0gKHZhbHVlIHx8ICcnKS5zcGxpdCgnICcpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvYmplY3QgPSB0aGlzLnJlc29sdmVVcmwocGFyc2VkWzBdKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrQ29sb3IgPSBwYXJzZUNvbG9yKHBhcnNlZFsxXSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbGxiYWNrQ29sb3I7DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqZWN0Lm5vZGVOYW1lID09PSAnbGluZWFyR3JhZGllbnQnIHx8IG9iamVjdC5ub2RlTmFtZSA9PT0gJ3JhZGlhbEdyYWRpZW50Jykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBTdmdFbGVtR3JhZGllbnQob2JqZWN0LCBudWxsLCBmYWxsYmFja0NvbG9yKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmplY3Qubm9kZU5hbWUgPT09ICdwYXR0ZXJuJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBTdmdFbGVtUGF0dGVybihvYmplY3QsIG51bGwsIGZhbGxiYWNrQ29sb3IpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbGxiYWNrQ29sb3I7DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0b3AtY29sb3InOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnbm9uZScgfHwgdmFsdWUgPT09ICd0cmFuc3BhcmVudCcpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gJ25vbmUnOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ2N1cnJlbnRDb2xvcicpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5nZXQoJ2NvbG9yJyk7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBwYXJzZUNvbG9yKHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hcmtlci1zdGFydCc6IGNhc2UgJ21hcmtlci1taWQnOiBjYXNlICdtYXJrZXItZW5kJzogY2FzZSAnY2xpcC1wYXRoJzogY2FzZSAnbWFzayc6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdub25lJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAnbm9uZSc7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc29sdmVVcmwodmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3Ryb2tlLXdpZHRoJzoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMuY29tcHV0ZUxlbmd0aCh2YWx1ZSwgdGhpcy5nZXRWaWV3cG9ydCgpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWQgIT0gbnVsbCAmJiBwYXJzZWQgPj0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBwYXJzZWQ7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdHJva2UtbWl0ZXJsaW1pdCc6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQgPSBwYXJzZUZsb2F0KHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWQgIT0gbnVsbCAmJiBwYXJzZWQgPj0gMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBwYXJzZWQ7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICBjYXNlICd3b3JkLXNwYWNpbmcnOiBjYXNlICdsZXR0ZXItc3BhY2luZyc6DQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmNvbXB1dGVMZW5ndGgodmFsdWUsIHRoaXMuZ2V0Vmlld3BvcnQoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdHJva2UtZGFzaG9mZnNldCc6DQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmNvbXB1dGVMZW5ndGgodmFsdWUsIHRoaXMuZ2V0Vmlld3BvcnQoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA8IDApIHsgLy8gZml4IGZvciBjcmJ1Zy5jb20vNjYwODUwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhc2hhcnJheSA9IHRoaXMuZ2V0KCdzdHJva2UtZGFzaGFycmF5Jyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXNoYXJyYXkubGVuZ3RoOyBqKyspIHtyZXN1bHQgKz0gZGFzaGFycmF5W2pdO30NCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7cmV0dXJuIHN0eWxlQ2FjaGVba2V5XSA9IHJlc3VsdDt9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZUNhY2hlW2tleV0gPSAoa2V5SW5mby5pbmhlcml0ICYmIHRoaXMuaW5oZXJpdHMgPyB0aGlzLmluaGVyaXRzLmdldChrZXkpIDoga2V5SW5mby5pbml0aWFsKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbkNhY2hlICE9IG51bGwpIHtyZXR1cm4gY2hpbGRyZW5DYWNoZTt9DQogICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gW107DQogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmouY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gb2JqLmNoaWxkTm9kZXNbaV07DQogICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkLmVycm9yICYmIHRoaXMuYWxsb3dlZENoaWxkcmVuLmluZGV4T2YoY2hpbGQubm9kZU5hbWUpICE9PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNyZWF0ZVNWR0VsZW1lbnQoY2hpbGQsIHRoaXMpKTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuQ2FjaGUgPSBjaGlsZHJlbjsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRQYXJlbnRWV2lkdGggPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuaW5oZXJpdHMgPyB0aGlzLmluaGVyaXRzLmdldFZXaWR0aCgpOiB2aWV3cG9ydFdpZHRoKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRQYXJlbnRWSGVpZ2h0ID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmluaGVyaXRzID8gdGhpcy5pbmhlcml0cy5nZXRWSGVpZ2h0KCkgOiB2aWV3cG9ydEhlaWdodCk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0UGFyZW50Vmlld3BvcnQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KDAuNSAqIHRoaXMuZ2V0UGFyZW50VldpZHRoKCkgKiB0aGlzLmdldFBhcmVudFZXaWR0aCgpICsgMC41ICogdGhpcy5nZXRQYXJlbnRWSGVpZ2h0KCkgKiB0aGlzLmdldFBhcmVudFZIZWlnaHQoKSk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0VldpZHRoID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50VldpZHRoKCk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0VkhlaWdodCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBhcmVudFZIZWlnaHQoKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRWaWV3cG9ydCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoMC41ICogdGhpcy5nZXRWV2lkdGgoKSAqIHRoaXMuZ2V0VldpZHRoKCkgKyAwLjUgKiB0aGlzLmdldFZIZWlnaHQoKSAqIHRoaXMuZ2V0VkhlaWdodCgpKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRCb3VuZGluZ0JveCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGxldCBzaGFwZSA9IHRoaXMuZ2V0Qm91bmRpbmdTaGFwZSgpOw0KICAgICAgICAgICAgICAgIHJldHVybiBzaGFwZS5nZXRCb3VuZGluZ0JveCgpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z0VsZW1TdHlsYWJsZSA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgU3ZnRWxlbS5jYWxsKHRoaXMsIG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGRvYy50cmFuc2Zvcm0uYXBwbHkoZG9jLCB0aGlzLmdldFRyYW5zZm9ybWF0aW9uKCkpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmNsaXAgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXQoJ2NsaXAtcGF0aCcpICE9PSAnbm9uZScpIHsNCiAgICAgICAgICAgICAgICAgIGxldCBjbGlwUGF0aCA9IG5ldyBTdmdFbGVtQ2xpcFBhdGgodGhpcy5nZXQoJ2NsaXAtcGF0aCcpLCBudWxsKTsNCiAgICAgICAgICAgICAgICAgIGNsaXBQYXRoLnVzZU1hc2sodGhpcy5nZXRCb3VuZGluZ0JveCgpKTsNCiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5tYXNrID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCdtYXNrJykgIT09ICdub25lJykgew0KICAgICAgICAgICAgICAgICAgbGV0IG1hc2sgPSBuZXcgU3ZnRWxlbU1hc2sodGhpcy5nZXQoJ21hc2snKSwgbnVsbCk7DQogICAgICAgICAgICAgICAgICBtYXNrLnVzZU1hc2sodGhpcy5nZXRCb3VuZGluZ0JveCgpKTsNCiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRGaWxsID0gZnVuY3Rpb24oaXNDbGlwLCBpc01hc2spIHsNCiAgICAgICAgICAgICAgICBsZXQgb3BhY2l0eSA9IHRoaXMuZ2V0KCdvcGFjaXR5JyksDQogICAgICAgICAgICAgICAgICAgIGZpbGwgPSB0aGlzLmdldCgnZmlsbCcpLA0KICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eSA9IHRoaXMuZ2V0KCdmaWxsLW9wYWNpdHknKTsNCiAgICAgICAgICAgICAgICBpZiAoaXNDbGlwKSB7cmV0dXJuIERlZmF1bHRDb2xvcnMud2hpdGU7fQ0KICAgICAgICAgICAgICAgIGlmIChmaWxsICE9PSAnbm9uZScgJiYgb3BhY2l0eSAmJiBmaWxsT3BhY2l0eSkgew0KICAgICAgICAgICAgICAgICAgaWYgKGZpbGwgaW5zdGFuY2VvZiBTdmdFbGVtR3JhZGllbnQgfHwgZmlsbCBpbnN0YW5jZW9mIFN2Z0VsZW1QYXR0ZXJuKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxsLmdldFBhaW50KHRoaXMuZ2V0Qm91bmRpbmdCb3goKSwgZmlsbE9wYWNpdHkgKiBvcGFjaXR5LCBpc0NsaXAsIGlzTWFzayk7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICByZXR1cm4gb3BhY2l0eVRvQ29sb3IoZmlsbCwgZmlsbE9wYWNpdHkgKiBvcGFjaXR5LCBpc01hc2spOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRTdHJva2UgPSBmdW5jdGlvbihpc0NsaXAsIGlzTWFzaykgew0KICAgICAgICAgICAgICAgIGxldCBvcGFjaXR5ID0gdGhpcy5nZXQoJ29wYWNpdHknKSwNCiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlID0gdGhpcy5nZXQoJ3N0cm9rZScpLA0KICAgICAgICAgICAgICAgICAgICBzdHJva2VPcGFjaXR5ID0gdGhpcy5nZXQoJ3N0cm9rZS1vcGFjaXR5Jyk7DQogICAgICAgICAgICAgICAgaWYgKGlzQ2xpcCB8fCBpc0VxdWFsKHRoaXMuZ2V0KCdzdHJva2Utd2lkdGgnKSwgMCkpIHtyZXR1cm47fQ0KICAgICAgICAgICAgICAgIGlmIChzdHJva2UgIT09ICdub25lJyAmJiBvcGFjaXR5ICYmIHN0cm9rZU9wYWNpdHkpIHsNCiAgICAgICAgICAgICAgICAgIGlmIChzdHJva2UgaW5zdGFuY2VvZiBTdmdFbGVtR3JhZGllbnQgfHwgc3Ryb2tlIGluc3RhbmNlb2YgU3ZnRWxlbVBhdHRlcm4pIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cm9rZS5nZXRQYWludCh0aGlzLmdldEJvdW5kaW5nQm94KCksIHN0cm9rZU9wYWNpdHkgKiBvcGFjaXR5LCBpc0NsaXAsIGlzTWFzayk7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICByZXR1cm4gb3BhY2l0eVRvQ29sb3Ioc3Ryb2tlLCBzdHJva2VPcGFjaXR5ICogb3BhY2l0eSwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbUhhc0NoaWxkcmVuID0gZnVuY3Rpb24ob2JqLCBpbmhlcml0cykgew0KICAgICAgICAgICAgICBTdmdFbGVtU3R5bGFibGUuY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgdGhpcy5hbGxvd2VkQ2hpbGRyZW4gPSBbJ3VzZScsICdnJywgJ2EnLCAnc3ZnJywgJ2ltYWdlJywgJ3JlY3QnLCAnY2lyY2xlJywgJ2VsbGlwc2UnLCAnbGluZScsICdwb2x5bGluZScsICdwb2x5Z29uJywgJ3BhdGgnLCAndGV4dCddOw0KICAgICAgICAgICAgICB0aGlzLmdldEJvdW5kaW5nU2hhcGUgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBsZXQgc2hhcGUgPSBuZXcgU3ZnU2hhcGUoKSwNCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKCk7DQogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2ldLmdldCgnZGlzcGxheScpICE9PSAnbm9uZScpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbltpXS5nZXRCb3VuZGluZ1NoYXBlID09PSAnZnVuY3Rpb24nKSB7DQogICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkU2hhcGUgPSBjaGlsZHJlbltpXS5nZXRCb3VuZGluZ1NoYXBlKCkuY2xvbmUoKTsNCiAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkcmVuW2ldLmdldFRyYW5zZm9ybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFNoYXBlLnRyYW5zZm9ybShjaGlsZHJlbltpXS5nZXRUcmFuc2Zvcm1hdGlvbigpKTsNCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgc2hhcGUubWVyZ2VTaGFwZShjaGlsZFNoYXBlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gc2hhcGU7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZHJhd0NoaWxkcmVuID0gZnVuY3Rpb24oaXNDbGlwLCBpc01hc2spIHsNCiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKCk7DQogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2ldLmdldCgnZGlzcGxheScpICE9PSAnbm9uZScpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbltpXS5kcmF3SW5Eb2N1bWVudCA9PT0gJ2Z1bmN0aW9uJykgew0KICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2ldLmRyYXdJbkRvY3VtZW50KGlzQ2xpcCwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtQ29udGFpbmVyID0gZnVuY3Rpb24ob2JqLCBpbmhlcml0cykgew0KICAgICAgICAgICAgICBTdmdFbGVtSGFzQ2hpbGRyZW4uY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgdGhpcy5kcmF3Q29udGVudCA9IGZ1bmN0aW9uKGlzQ2xpcCwgaXNNYXNrKSB7DQogICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0oKTsNCiAgICAgICAgICAgICAgICBsZXQgY2xpcHBlZCA9IHRoaXMuY2xpcCgpLA0KICAgICAgICAgICAgICAgICAgICBtYXNrZWQgPSB0aGlzLm1hc2soKSwNCiAgICAgICAgICAgICAgICAgICAgZ3JvdXA7DQogICAgICAgICAgICAgICAgaWYgKCh0aGlzLmdldCgnb3BhY2l0eScpIDwgMSB8fCBjbGlwcGVkIHx8IG1hc2tlZCkgJiYgIWlzQ2xpcCkgew0KICAgICAgICAgICAgICAgICAgZ3JvdXAgPSBkb2NCZWdpbkdyb3VwKGdldFBhZ2VCQm94KCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0aGlzLmRyYXdDaGlsZHJlbihpc0NsaXAsIGlzTWFzayk7DQogICAgICAgICAgICAgICAgaWYgKGdyb3VwKSB7DQogICAgICAgICAgICAgICAgICBkb2NFbmRHcm91cChncm91cCk7DQogICAgICAgICAgICAgICAgICBkb2MuZmlsbE9wYWNpdHkodGhpcy5nZXQoJ29wYWNpdHknKSk7DQogICAgICAgICAgICAgICAgICBkb2NJbnNlcnRHcm91cChncm91cCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z0VsZW1Vc2UgPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1Db250YWluZXIuY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLmdldExlbmd0aCgneCcsIHRoaXMuZ2V0VldpZHRoKCksIDApLA0KICAgICAgICAgICAgICAgICAgeSA9IHRoaXMuZ2V0TGVuZ3RoKCd5JywgdGhpcy5nZXRWSGVpZ2h0KCksIDApLA0KICAgICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLmdldFVybCgnaHJlZicpIHx8IHRoaXMuZ2V0VXJsKCd4bGluazpocmVmJyk7DQogICAgICAgICAgICAgIGlmIChjaGlsZCkge2NoaWxkID0gY3JlYXRlU1ZHRWxlbWVudChjaGlsZCwgdGhpcyk7fQ0KICAgICAgICAgICAgICB0aGlzLmdldENoaWxkcmVuICA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZCA/IFtjaGlsZF0gOiBbXTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5kcmF3SW5Eb2N1bWVudCA9IGZ1bmN0aW9uKGlzQ2xpcCwgaXNNYXNrKSB7DQogICAgICAgICAgICAgICAgZG9jLnNhdmUoKTsNCiAgICAgICAgICAgICAgICB0aGlzLmRyYXdDb250ZW50KGlzQ2xpcCwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICBkb2MucmVzdG9yZSgpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG11bHRpcGx5TWF0cml4KHRoaXMuZ2V0KCd0cmFuc2Zvcm0nKSwgWzEsIDAsIDAsIDEsIHgsIHldKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtU3ltYm9sID0gZnVuY3Rpb24ob2JqLCBpbmhlcml0cykgew0KICAgICAgICAgICAgICBTdmdFbGVtQ29udGFpbmVyLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIGxldCB3aWR0aCA9IHRoaXMuZ2V0TGVuZ3RoKCd3aWR0aCcsIHRoaXMuZ2V0UGFyZW50VldpZHRoKCksIHRoaXMuZ2V0UGFyZW50VldpZHRoKCkpLA0KICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5nZXRMZW5ndGgoJ2hlaWdodCcsIHRoaXMuZ2V0UGFyZW50VkhlaWdodCgpLCB0aGlzLmdldFBhcmVudFZIZWlnaHQoKSk7DQogICAgICAgICAgICAgIGlmIChpbmhlcml0cyBpbnN0YW5jZW9mIFN2Z0VsZW1Vc2UpIHsNCiAgICAgICAgICAgICAgICB3aWR0aCA9IGluaGVyaXRzLmdldExlbmd0aCgnd2lkdGgnLCBpbmhlcml0cy5nZXRQYXJlbnRWV2lkdGgoKSwgd2lkdGgpOw0KICAgICAgICAgICAgICAgIGhlaWdodCA9IGluaGVyaXRzLmdldExlbmd0aCgnaGVpZ2h0JywgaW5oZXJpdHMuZ2V0UGFyZW50VkhlaWdodCgpLCBoZWlnaHQpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIGxldCBhc3BlY3RSYXRpbyA9ICh0aGlzLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nKSB8fCAnJykudHJpbSgpLA0KICAgICAgICAgICAgICAgICAgdmlld0JveCA9IHRoaXMuZ2V0Vmlld2JveCgndmlld0JveCcsIFswLCAwLCB3aWR0aCwgaGVpZ2h0XSk7DQogICAgICAgICAgICAgIHRoaXMuZ2V0VldpZHRoID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdCb3hbMl07DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0VkhlaWdodCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB2aWV3Qm94WzNdOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmRyYXdJbkRvY3VtZW50ID0gZnVuY3Rpb24oaXNDbGlwLCBpc01hc2spIHsNCiAgICAgICAgICAgICAgICBkb2Muc2F2ZSgpOw0KICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NvbnRlbnQoaXNDbGlwLCBpc01hc2spOw0KICAgICAgICAgICAgICAgIGRvYy5yZXN0b3JlKCk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0VHJhbnNmb3JtYXRpb24gPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbXVsdGlwbHlNYXRyaXgocGFyc2VBc3BlY3RSYXRpbyhhc3BlY3RSYXRpbywgd2lkdGgsIGhlaWdodCwgdmlld0JveFsyXSwgdmlld0JveFszXSksIFsxLCAwLCAwLCAxLCAtdmlld0JveFswXSwgLXZpZXdCb3hbMV1dKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtR3JvdXAgPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1Db250YWluZXIuY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgdGhpcy5kcmF3SW5Eb2N1bWVudCA9IGZ1bmN0aW9uKGlzQ2xpcCwgaXNNYXNrKSB7DQogICAgICAgICAgICAgICAgZG9jLnNhdmUoKTsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5saW5rICYmICFpc0NsaXAgJiYgIWlzTWFzaykge3RoaXMuYWRkTGluaygpO30NCiAgICAgICAgICAgICAgICB0aGlzLmRyYXdDb250ZW50KGlzQ2xpcCwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICBkb2MucmVzdG9yZSgpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd0cmFuc2Zvcm0nKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtTGluayA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgaWYgKGluaGVyaXRzICYmIGluaGVyaXRzLmlzVGV4dCkgew0KICAgICAgICAgICAgICAgIFN2Z0VsZW1Uc3Bhbi5jYWxsKHRoaXMsIG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICAgIHRoaXMuYWxsb3dlZENoaWxkcmVuID0gWyd0ZXh0UGF0aCcsICd0c3BhbicsICcjdGV4dCcsICcjY2RhdGEtc2VjdGlvbicsICdhJ107DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgU3ZnRWxlbUdyb3VwLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgdGhpcy5saW5rID0gdGhpcy5hdHRyKCdocmVmJykgfHwgdGhpcy5hdHRyKCd4bGluazpocmVmJyk7DQogICAgICAgICAgICAgIHRoaXMuYWRkTGluayA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmsubWF0Y2goL14oPzpbYS16XVthLXowLTkrLi1dKjp8XC9cLyk/L2kpICYmIHRoaXMuZ2V0Q2hpbGRyZW4oKS5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgIGxldCBiYm94ID0gdGhpcy5nZXRCb3VuZGluZ1NoYXBlKCkudHJhbnNmb3JtKGdldEdsb2JhbE1hdHJpeCgpKS5nZXRCb3VuZGluZ0JveCgpOw0KICAgICAgICAgICAgICAgICAgZG9jSW5zZXJ0TGluayhiYm94WzBdLCBiYm94WzFdLCBiYm94WzJdLCBiYm94WzNdLCB0aGlzLmxpbmspOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtU3ZnID0gZnVuY3Rpb24ob2JqLCBpbmhlcml0cykgew0KICAgICAgICAgICAgICBTdmdFbGVtQ29udGFpbmVyLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIGxldCB3aWR0aCA9IHRoaXMuZ2V0TGVuZ3RoKCd3aWR0aCcsIHRoaXMuZ2V0UGFyZW50VldpZHRoKCksIHRoaXMuZ2V0UGFyZW50VldpZHRoKCkpLA0KICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5nZXRMZW5ndGgoJ2hlaWdodCcsIHRoaXMuZ2V0UGFyZW50VkhlaWdodCgpLCB0aGlzLmdldFBhcmVudFZIZWlnaHQoKSksDQogICAgICAgICAgICAgICAgICB4ID0gdGhpcy5nZXRMZW5ndGgoJ3gnLCB0aGlzLmdldFBhcmVudFZXaWR0aCgpLCAwKSwNCiAgICAgICAgICAgICAgICAgIHkgPSB0aGlzLmdldExlbmd0aCgneScsIHRoaXMuZ2V0UGFyZW50VkhlaWdodCgpLCAwKTsNCiAgICAgICAgICAgICAgaWYgKGluaGVyaXRzIGluc3RhbmNlb2YgU3ZnRWxlbVVzZSkgew0KICAgICAgICAgICAgICAgIHdpZHRoID0gaW5oZXJpdHMuZ2V0TGVuZ3RoKCd3aWR0aCcsIGluaGVyaXRzLmdldFBhcmVudFZXaWR0aCgpLCB3aWR0aCk7DQogICAgICAgICAgICAgICAgaGVpZ2h0ID0gaW5oZXJpdHMuZ2V0TGVuZ3RoKCdoZWlnaHQnLCBpbmhlcml0cy5nZXRQYXJlbnRWSGVpZ2h0KCksIGhlaWdodCk7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgbGV0IGFzcGVjdFJhdGlvID0gdGhpcy5hdHRyKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyksDQogICAgICAgICAgICAgICAgICB2aWV3Qm94ID0gdGhpcy5nZXRWaWV3Ym94KCd2aWV3Qm94JywgWzAsIDAsIHdpZHRoLCBoZWlnaHRdKTsNCiAgICAgICAgICAgICAgaWYgKHRoaXMuaXNPdXRlckVsZW1lbnQgJiYgcHJlc2VydmVBc3BlY3RSYXRpbykgew0KICAgICAgICAgICAgICAgIHggPSB5ID0gMDsNCiAgICAgICAgICAgICAgICB3aWR0aCA9IHZpZXdwb3J0V2lkdGg7DQogICAgICAgICAgICAgICAgaGVpZ2h0ID0gdmlld3BvcnRIZWlnaHQ7DQogICAgICAgICAgICAgICAgYXNwZWN0UmF0aW8gPSBwcmVzZXJ2ZUFzcGVjdFJhdGlvOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIHRoaXMuZ2V0VldpZHRoID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdCb3hbMl07DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0VkhlaWdodCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB2aWV3Qm94WzNdOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmRyYXdJbkRvY3VtZW50ID0gZnVuY3Rpb24oaXNDbGlwLCBpc01hc2spIHsNCiAgICAgICAgICAgICAgICBkb2Muc2F2ZSgpOw0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldCgnb3ZlcmZsb3cnKSA9PT0gJ2hpZGRlbicpIHsNCiAgICAgICAgICAgICAgICAgIG5ldyBTdmdTaGFwZSgpLk0oeCwgeSkuTCh4ICsgd2lkdGgsIHkpLkwoeCArIHdpZHRoLCB5ICsgaGVpZ2h0KS5MKHgsIHkgKyBoZWlnaHQpLlooKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJhbnNmb3JtKHRoaXMuZ2V0KCd0cmFuc2Zvcm0nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmluc2VydEluRG9jdW1lbnQoKTsNCiAgICAgICAgICAgICAgICAgIGRvYy5jbGlwKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NvbnRlbnQoaXNDbGlwLCBpc01hc2spOw0KICAgICAgICAgICAgICAgIGRvYy5yZXN0b3JlKCk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0VHJhbnNmb3JtYXRpb24gPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbXVsdGlwbHlNYXRyaXgoDQogICAgICAgICAgICAgICAgICB0aGlzLmdldCgndHJhbnNmb3JtJyksDQogICAgICAgICAgICAgICAgICBbMSwgMCwgMCwgMSwgeCwgeV0sDQogICAgICAgICAgICAgICAgICBwYXJzZUFzcGVjdFJhdGlvKGFzcGVjdFJhdGlvLCB3aWR0aCwgaGVpZ2h0LCB2aWV3Qm94WzJdLCB2aWV3Qm94WzNdKSwNCiAgICAgICAgICAgICAgICAgIFsxLCAwLCAwLCAxLCAtdmlld0JveFswXSwgLXZpZXdCb3hbMV1dDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTVkdFbGVtSW1hZ2UgPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1TdHlsYWJsZS5jYWxsKHRoaXMsIG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICBsZXQgbGluayA9IGltYWdlQ2FsbGJhY2sodGhpcy5hdHRyKCdocmVmJykgfHwgdGhpcy5hdHRyKCd4bGluazpocmVmJykgfHwgJycpLA0KICAgICAgICAgICAgICAgICAgeCA9IHRoaXMuZ2V0TGVuZ3RoKCd4JywgdGhpcy5nZXRWV2lkdGgoKSwgMCksDQogICAgICAgICAgICAgICAgICB5ID0gdGhpcy5nZXRMZW5ndGgoJ3knLCB0aGlzLmdldFZIZWlnaHQoKSwgMCksDQogICAgICAgICAgICAgICAgICB3aWR0aCA9IHRoaXMuZ2V0TGVuZ3RoKCd3aWR0aCcsIHRoaXMuZ2V0VldpZHRoKCksICdhdXRvJyksDQogICAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmdldExlbmd0aCgnaGVpZ2h0JywgdGhpcy5nZXRWSGVpZ2h0KCksICdhdXRvJyksDQogICAgICAgICAgICAgICAgICBpbWFnZTsNCiAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBpbWFnZSA9IGRvYy5vcGVuSW1hZ2UobGluayk7DQogICAgICAgICAgICAgIH0gY2F0Y2goZSkgew0KICAgICAgICAgICAgICAgIHdhcm5pbmdDYWxsYmFjaygnU1ZHRWxlbUltYWdlOiBmYWlsZWQgdG8gb3BlbiBpbWFnZSAiJyArIGxpbmsgKyAnIiBpbiBQREZLaXQnKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBpZiAoaW1hZ2UpIHsNCiAgICAgICAgICAgICAgICBpZiAod2lkdGggPT09ICdhdXRvJyAmJiBoZWlnaHQgIT09ICdhdXRvJykgew0KICAgICAgICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgKiBpbWFnZS53aWR0aCAvIGltYWdlLmhlaWdodDsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlaWdodCA9PT0gJ2F1dG8nICYmIHdpZHRoICE9PSAnYXV0bycpIHsNCiAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHdpZHRoICogaW1hZ2UuaGVpZ2h0IC8gaW1hZ2Uud2lkdGg7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aWR0aCA9PT0gJ2F1dG8nICYmIGhlaWdodCA9PT0gJ2F1dG8nKSB7DQogICAgICAgICAgICAgICAgICB3aWR0aCA9IGltYWdlLndpZHRoOw0KICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBpZiAod2lkdGggPT09ICdhdXRvJyB8fCB3aWR0aCA8IDApIHt3aWR0aCA9IDA7fQ0KICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID09PSAnYXV0bycgfHwgaGVpZ2h0IDwgMCkge2hlaWdodCA9IDA7fQ0KICAgICAgICAgICAgICB0aGlzLmdldFRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd0cmFuc2Zvcm0nKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRCb3VuZGluZ1NoYXBlID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdmdTaGFwZSgpLk0oeCwgeSkuTCh4ICsgd2lkdGgsIHkpLk0oeCArIHdpZHRoLCB5ICsgaGVpZ2h0KS5MKHgsIHkgKyBoZWlnaHQpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmRyYXdJbkRvY3VtZW50ID0gZnVuY3Rpb24oaXNDbGlwLCBpc01hc2spIHsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXQoJ3Zpc2liaWxpdHknKSA9PT0gJ2hpZGRlbicgfHwgIWltYWdlKSB7cmV0dXJuO30NCiAgICAgICAgICAgICAgICBkb2Muc2F2ZSgpOw0KICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKCk7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCdvdmVyZmxvdycpID09PSAnaGlkZGVuJykgew0KICAgICAgICAgICAgICAgICAgZG9jLnJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCkuY2xpcCgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0aGlzLmNsaXAoKTsNCiAgICAgICAgICAgICAgICB0aGlzLm1hc2soKTsNCiAgICAgICAgICAgICAgICBkb2MudHJhbnNsYXRlKHgsIHkpOw0KICAgICAgICAgICAgICAgIGRvYy50cmFuc2Zvcm0uYXBwbHkoZG9jLCBwYXJzZUFzcGVjdFJhdGlvKHRoaXMuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycpLCB3aWR0aCwgaGVpZ2h0LCBpbWFnZSA/IGltYWdlLndpZHRoIDogd2lkdGgsIGltYWdlID8gaW1hZ2UuaGVpZ2h0IDogaGVpZ2h0KSk7DQogICAgICAgICAgICAgICAgaWYgKCFpc0NsaXApIHsNCiAgICAgICAgICAgICAgICAgIGRvYy5maWxsT3BhY2l0eSh0aGlzLmdldCgnb3BhY2l0eScpKTsNCiAgICAgICAgICAgICAgICAgIGRvYy5pbWFnZShpbWFnZSwgMCwgMCk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgIGRvYy5yZWN0KDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpOw0KICAgICAgICAgICAgICAgICAgZG9jRmlsbENvbG9yKERlZmF1bHRDb2xvcnMud2hpdGUpLmZpbGwoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZG9jLnJlc3RvcmUoKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtUGF0dGVybiA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMsIGZhbGxiYWNrKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1IYXNDaGlsZHJlbi5jYWxsKHRoaXMsIG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICB0aGlzLnJlZiA9IChmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBsZXQgcmVmID0gdGhpcy5nZXRVcmwoJ2hyZWYnKSB8fCB0aGlzLmdldFVybCgneGxpbms6aHJlZicpOw0KICAgICAgICAgICAgICAgIGlmIChyZWYgJiYgcmVmLm5vZGVOYW1lID09PSBvYmoubm9kZU5hbWUpIHsNCiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3ZnRWxlbVBhdHRlcm4ocmVmLCBpbmhlcml0cywgZmFsbGJhY2spOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfSkuY2FsbCh0aGlzKTsNCiAgICAgICAgICAgICAgbGV0IF9hdHRyID0gdGhpcy5hdHRyOw0KICAgICAgICAgICAgICB0aGlzLmF0dHIgPSBmdW5jdGlvbihrZXkpIHsNCiAgICAgICAgICAgICAgICBsZXQgYXR0ciA9IF9hdHRyLmNhbGwodGhpcywga2V5KTsNCiAgICAgICAgICAgICAgICBpZiAoYXR0ciAhPSBudWxsIHx8IGtleSA9PT0gJ2hyZWYnIHx8IGtleSA9PT0gJ3hsaW5rOmhyZWYnKSB7cmV0dXJuIGF0dHI7fQ0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZiA/IHRoaXMucmVmLmF0dHIoa2V5KSA6IG51bGw7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIGxldCBfZ2V0Q2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuOw0KICAgICAgICAgICAgICB0aGlzLmdldENoaWxkcmVuID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gX2dldENoaWxkcmVuLmNhbGwodGhpcyk7DQogICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDApIHtyZXR1cm4gY2hpbGRyZW47fQ0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZiA/IHRoaXMucmVmLmdldENoaWxkcmVuKCkgOiBbXTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5nZXRQYWludCA9IGZ1bmN0aW9uKGJCb3gsIGdPcGFjaXR5LCBpc0NsaXAsIGlzTWFzaykgew0KICAgICAgICAgICAgICAgIGxldCBiQm94VW5pdHNQYXR0ZXJuID0gKHRoaXMuYXR0cigncGF0dGVyblVuaXRzJykgIT09ICd1c2VyU3BhY2VPblVzZScpLA0KICAgICAgICAgICAgICAgICAgICBiQm94VW5pdHNDb250ZW50ID0gKHRoaXMuYXR0cigncGF0dGVybkNvbnRlbnRVbml0cycpID09PSAnb2JqZWN0Qm91bmRpbmdCb3gnKSwNCiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMuZ2V0TGVuZ3RoKCd4JywgKGJCb3hVbml0c1BhdHRlcm4gPyAxIDogdGhpcy5nZXRQYXJlbnRWV2lkdGgoKSksIDApLA0KICAgICAgICAgICAgICAgICAgICB5ID0gdGhpcy5nZXRMZW5ndGgoJ3knLCAoYkJveFVuaXRzUGF0dGVybiA/IDEgOiB0aGlzLmdldFBhcmVudFZIZWlnaHQoKSksIDApLA0KICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHRoaXMuZ2V0TGVuZ3RoKCd3aWR0aCcsIChiQm94VW5pdHNQYXR0ZXJuID8gMSA6IHRoaXMuZ2V0UGFyZW50VldpZHRoKCkpLCAwKSwNCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5nZXRMZW5ndGgoJ2hlaWdodCcsIChiQm94VW5pdHNQYXR0ZXJuID8gMSA6IHRoaXMuZ2V0UGFyZW50VkhlaWdodCgpKSwgMCk7DQogICAgICAgICAgICAgICAgaWYgKGJCb3hVbml0c0NvbnRlbnQgJiYgIWJCb3hVbml0c1BhdHRlcm4pIHsgLy8gVXNlIHRoZSBzYW1lIHVuaXRzIGZvciBwYXR0ZXJuICYgcGF0dGVybiBjb250ZW50DQogICAgICAgICAgICAgICAgICB4ID0gKHggLSBiQm94WzBdKSAvIChiQm94WzJdIC0gYkJveFswXSkgfHwgMDsNCiAgICAgICAgICAgICAgICAgIHkgPSAoeSAtIGJCb3hbMV0pIC8gKGJCb3hbM10gLSBiQm94WzFdKSB8fCAwOw0KICAgICAgICAgICAgICAgICAgd2lkdGggPSB3aWR0aCAvIChiQm94WzJdIC0gYkJveFswXSkgfHwgMDsNCiAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAvIChiQm94WzNdIC0gYkJveFsxXSkgfHwgMDsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFiQm94VW5pdHNDb250ZW50ICYmIGJCb3hVbml0c1BhdHRlcm4pIHsNCiAgICAgICAgICAgICAgICAgIHggPSBiQm94WzBdICsgeCAqIChiQm94WzJdIC0gYkJveFswXSk7DQogICAgICAgICAgICAgICAgICB5ID0gYkJveFsxXSArIHkgKiAoYkJveFszXSAtIGJCb3hbMV0pOw0KICAgICAgICAgICAgICAgICAgd2lkdGggPSB3aWR0aCAqIChiQm94WzJdIC0gYkJveFswXSk7DQogICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgKiAoYkJveFszXSAtIGJCb3hbMV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBsZXQgdmlld0JveCA9IHRoaXMuZ2V0Vmlld2JveCgndmlld0JveCcsIFswLCAwLCB3aWR0aCwgaGVpZ2h0XSksDQogICAgICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvID0gKHRoaXMuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycpIHx8ICcnKS50cmltKCksDQogICAgICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvTWF0cml4ID0gbXVsdGlwbHlNYXRyaXgoDQogICAgICAgICAgICAgICAgICAgICAgcGFyc2VBc3BlY3RSYXRpbyhhc3BlY3RSYXRpbywgd2lkdGgsIGhlaWdodCwgdmlld0JveFsyXSwgdmlld0JveFszXSwgMCksDQogICAgICAgICAgICAgICAgICAgICAgWzEsIDAsIDAsIDEsIC12aWV3Qm94WzBdLCAtdmlld0JveFsxXV0NCiAgICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgICAgbWF0cml4ID0gcGFyc2VUcmFuZm9ybSh0aGlzLmF0dHIoJ3BhdHRlcm5UcmFuc2Zvcm0nKSk7DQogICAgICAgICAgICAgICAgaWYgKGJCb3hVbml0c0NvbnRlbnQpIHsNCiAgICAgICAgICAgICAgICAgIG1hdHJpeCA9IG11bHRpcGx5TWF0cml4KFtiQm94WzJdIC0gYkJveFswXSwgMCwgMCwgYkJveFszXSAtIGJCb3hbMV0sIGJCb3hbMF0sIGJCb3hbMV1dLCBtYXRyaXgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBtYXRyaXggPSBtdWx0aXBseU1hdHJpeChtYXRyaXgsIFsxLCAwLCAwLCAxLCB4LCB5XSk7DQogICAgICAgICAgICAgICAgaWYgKChtYXRyaXggPSB2YWxpZGF0ZU1hdHJpeChtYXRyaXgpKSAmJiAoYXNwZWN0UmF0aW9NYXRyaXggPSB2YWxpZGF0ZU1hdHJpeChhc3BlY3RSYXRpb01hdHJpeCkpICYmICh3aWR0aCA9IHZhbGlkYXRlTnVtYmVyKHdpZHRoKSkgJiYgKGhlaWdodCA9IHZhbGlkYXRlTnVtYmVyKGhlaWdodCkpKSB7DQogICAgICAgICAgICAgICAgICBsZXQgZ3JvdXAgPSBkb2NCZWdpbkdyb3VwKFswLCAwLCB3aWR0aCwgaGVpZ2h0XSk7DQogICAgICAgICAgICAgICAgICBkb2MudHJhbnNmb3JtLmFwcGx5KGRvYywgYXNwZWN0UmF0aW9NYXRyaXgpOw0KICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2hpbGRyZW4oaXNDbGlwLCBpc01hc2spOw0KICAgICAgICAgICAgICAgICAgZG9jRW5kR3JvdXAoZ3JvdXApOw0KICAgICAgICAgICAgICAgICAgcmV0dXJuIFtkb2NDcmVhdGVQYXR0ZXJuKGdyb3VwLCB3aWR0aCwgaGVpZ2h0LCBtYXRyaXgpLCBnT3BhY2l0eV07DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxsYmFjayA/IFtmYWxsYmFja1swXSwgZmFsbGJhY2tbMV0gKiBnT3BhY2l0eV0gOiB1bmRlZmluZWQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFZXaWR0aCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGxldCBiQm94VW5pdHNQYXR0ZXJuID0gKHRoaXMuYXR0cigncGF0dGVyblVuaXRzJykgIT09ICd1c2VyU3BhY2VPblVzZScpLA0KICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHRoaXMuZ2V0TGVuZ3RoKCd3aWR0aCcsIChiQm94VW5pdHNQYXR0ZXJuID8gMSA6IHRoaXMuZ2V0UGFyZW50VldpZHRoKCkpLCAwKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWaWV3Ym94KCd2aWV3Qm94JywgWzAsIDAsIHdpZHRoLCAwXSlbMl07DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0VkhlaWdodCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGxldCBiQm94VW5pdHNQYXR0ZXJuID0gKHRoaXMuYXR0cigncGF0dGVyblVuaXRzJykgIT09ICd1c2VyU3BhY2VPblVzZScpLA0KICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmdldExlbmd0aCgnaGVpZ2h0JywgKGJCb3hVbml0c1BhdHRlcm4gPyAxIDogdGhpcy5nZXRQYXJlbnRWSGVpZ2h0KCkpLCAwKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWaWV3Ym94KCd2aWV3Qm94JywgWzAsIDAsIDAsIGhlaWdodF0pWzNdOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z0VsZW1HcmFkaWVudCA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMsIGZhbGxiYWNrKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW0uY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgdGhpcy5hbGxvd2VkQ2hpbGRyZW4gPSBbJ3N0b3AnXTsNCiAgICAgICAgICAgICAgdGhpcy5yZWYgPSAoZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgbGV0IHJlZiA9IHRoaXMuZ2V0VXJsKCdocmVmJykgfHwgdGhpcy5nZXRVcmwoJ3hsaW5rOmhyZWYnKTsNCiAgICAgICAgICAgICAgICBpZiAocmVmICYmIHJlZi5ub2RlTmFtZSA9PT0gb2JqLm5vZGVOYW1lKSB7DQogICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN2Z0VsZW1HcmFkaWVudChyZWYsIGluaGVyaXRzLCBmYWxsYmFjayk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9KS5jYWxsKHRoaXMpOw0KICAgICAgICAgICAgICBsZXQgX2F0dHIgPSB0aGlzLmF0dHI7DQogICAgICAgICAgICAgIHRoaXMuYXR0ciA9IGZ1bmN0aW9uKGtleSkgew0KICAgICAgICAgICAgICAgIGxldCBhdHRyID0gX2F0dHIuY2FsbCh0aGlzLCBrZXkpOw0KICAgICAgICAgICAgICAgIGlmIChhdHRyICE9IG51bGwgfHwga2V5ID09PSAnaHJlZicgfHwga2V5ID09PSAneGxpbms6aHJlZicpIHtyZXR1cm4gYXR0cjt9DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmID8gdGhpcy5yZWYuYXR0cihrZXkpIDogbnVsbDsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgbGV0IF9nZXRDaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW47DQogICAgICAgICAgICAgIHRoaXMuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBfZ2V0Q2hpbGRyZW4uY2FsbCh0aGlzKTsNCiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMCkge3JldHVybiBjaGlsZHJlbjt9DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmID8gdGhpcy5yZWYuZ2V0Q2hpbGRyZW4oKSA6IFtdOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFBhaW50ID0gZnVuY3Rpb24oYkJveCwgZ09wYWNpdHksIGlzQ2xpcCwgaXNNYXNrKSB7DQogICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5nZXRDaGlsZHJlbigpOw0KICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHtyZXR1cm47fQ0KICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEpIHsNCiAgICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuWzBdLA0KICAgICAgICAgICAgICAgICAgICAgIHN0b3BDb2xvciA9IGNoaWxkLmdldCgnc3RvcC1jb2xvcicpOw0KICAgICAgICAgICAgICAgICAgaWYgKHN0b3BDb2xvciA9PT0gJ25vbmUnKSB7cmV0dXJuO30NCiAgICAgICAgICAgICAgICAgIHJldHVybiBvcGFjaXR5VG9Db2xvcihzdG9wQ29sb3IsIGNoaWxkLmdldCgnc3RvcC1vcGFjaXR5JykgKiBnT3BhY2l0eSwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbGV0IGJCb3hVbml0cyA9ICh0aGlzLmF0dHIoJ2dyYWRpZW50VW5pdHMnKSAhPT0gJ3VzZXJTcGFjZU9uVXNlJyksDQogICAgICAgICAgICAgICAgICAgIG1hdHJpeCA9IHBhcnNlVHJhbmZvcm0odGhpcy5hdHRyKCdncmFkaWVudFRyYW5zZm9ybScpKSwNCiAgICAgICAgICAgICAgICAgICAgc3ByZWFkID0gdGhpcy5hdHRyKCdzcHJlYWRNZXRob2QnKSwNCiAgICAgICAgICAgICAgICAgICAgZ3JhZCwNCiAgICAgICAgICAgICAgICAgICAgeDEsIHgyLCB5MSwgeTIsIHIyLA0KICAgICAgICAgICAgICAgICAgICBuQWZ0ZXIgPSAwLA0KICAgICAgICAgICAgICAgICAgICBuQmVmb3JlID0gMCwNCiAgICAgICAgICAgICAgICAgICAgblRvdGFsID0gMTsNCiAgICAgICAgICAgICAgICBpZiAoYkJveFVuaXRzKSB7DQogICAgICAgICAgICAgICAgICBtYXRyaXggPSBtdWx0aXBseU1hdHJpeChbYkJveFsyXSAtIGJCb3hbMF0sIDAsIDAsIGJCb3hbM10gLSBiQm94WzFdLCBiQm94WzBdLCBiQm94WzFdXSwgbWF0cml4KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKG1hdHJpeCA9IHZhbGlkYXRlTWF0cml4KG1hdHJpeCkpIHsNCiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hbWUgPT09ICdsaW5lYXJHcmFkaWVudCcpIHsNCiAgICAgICAgICAgICAgICAgICAgeDEgPSB0aGlzLmdldExlbmd0aCgneDEnLCAoYkJveFVuaXRzID8gMSA6IHRoaXMuZ2V0VldpZHRoKCkpLCAwKTsNCiAgICAgICAgICAgICAgICAgICAgeDIgPSB0aGlzLmdldExlbmd0aCgneDInLCAoYkJveFVuaXRzID8gMSA6IHRoaXMuZ2V0VldpZHRoKCkpLCAoYkJveFVuaXRzID8gMSA6IHRoaXMuZ2V0VldpZHRoKCkpKTsNCiAgICAgICAgICAgICAgICAgICAgeTEgPSB0aGlzLmdldExlbmd0aCgneTEnLCAoYkJveFVuaXRzID8gMSA6IHRoaXMuZ2V0VkhlaWdodCgpKSwgMCk7DQogICAgICAgICAgICAgICAgICAgIHkyID0gdGhpcy5nZXRMZW5ndGgoJ3kyJywgKGJCb3hVbml0cyA/IDEgOiB0aGlzLmdldFZIZWlnaHQoKSksIDApOw0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgeDIgPSB0aGlzLmdldExlbmd0aCgnY3gnLCAoYkJveFVuaXRzID8gMSA6IHRoaXMuZ2V0VldpZHRoKCkpLCAoYkJveFVuaXRzID8gMC41IDogMC41ICogdGhpcy5nZXRWV2lkdGgoKSkpOw0KICAgICAgICAgICAgICAgICAgICB5MiA9IHRoaXMuZ2V0TGVuZ3RoKCdjeScsIChiQm94VW5pdHMgPyAxIDogdGhpcy5nZXRWSGVpZ2h0KCkpLCAoYkJveFVuaXRzID8gMC41IDogMC41ICogdGhpcy5nZXRWSGVpZ2h0KCkpKTsNCiAgICAgICAgICAgICAgICAgICAgcjIgPSB0aGlzLmdldExlbmd0aCgncicsIChiQm94VW5pdHMgPyAxIDogdGhpcy5nZXRWaWV3cG9ydCgpKSwgKGJCb3hVbml0cyA/IDAuNSA6IDAuNSAqIHRoaXMuZ2V0Vmlld3BvcnQoKSkpOw0KICAgICAgICAgICAgICAgICAgICB4MSA9IHRoaXMuZ2V0TGVuZ3RoKCdmeCcsIChiQm94VW5pdHMgPyAxIDogdGhpcy5nZXRWV2lkdGgoKSksIHgyKTsNCiAgICAgICAgICAgICAgICAgICAgeTEgPSB0aGlzLmdldExlbmd0aCgnZnknLCAoYkJveFVuaXRzID8gMSA6IHRoaXMuZ2V0VkhlaWdodCgpKSwgeTIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAocjIgPCAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgd2FybmluZ0NhbGxiYWNrKCdTdmdFbGVtR3JhZGllbnQ6IG5lZ2F0aXZlIHIgdmFsdWUnKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IE1hdGguc3FydChNYXRoLnBvdyh4MiAtIHgxLCAyKSArIE1hdGgucG93KHkyIC0geTEsIDIpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxpZXIgPSAxOw0KICAgICAgICAgICAgICAgICAgICBpZiAoZCA+IHIyKSB7IC8vIGFjY29yZGluZyB0byBzcGVjaWZpY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IHIyIC8gZDsNCiAgICAgICAgICAgICAgICAgICAgICB4MSA9IHgyICsgKHgxIC0geDIpICogbXVsdGlwbGllcjsNCiAgICAgICAgICAgICAgICAgICAgICB5MSA9IHkyICsgKHkxIC0geTIpICogbXVsdGlwbGllcjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByMiA9IE1hdGgubWF4KHIyLCBkICogbXVsdGlwbGllciAqICgxICsgMWUtNikpOyAvLyBmaXggZm9yIGVkZ2UtY2FzZSBncmFkaWVudHMgc2VlIGlzc3VlICM4NA0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgaWYgKHNwcmVhZCA9PT0gJ3JlZmxlY3QnIHx8IHNwcmVhZCA9PT0gJ3JlcGVhdCcpIHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGludiA9IGludmVyc2VNYXRyaXgobWF0cml4KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvcm5lcjEgPSB0cmFuc2Zvcm1Qb2ludChbYkJveFswXSwgYkJveFsxXV0sIGludiksDQogICAgICAgICAgICAgICAgICAgICAgICBjb3JuZXIyID0gdHJhbnNmb3JtUG9pbnQoW2JCb3hbMl0sIGJCb3hbMV1dLCBpbnYpLA0KICAgICAgICAgICAgICAgICAgICAgICAgY29ybmVyMyA9IHRyYW5zZm9ybVBvaW50KFtiQm94WzJdLCBiQm94WzNdXSwgaW52KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvcm5lcjQgPSB0cmFuc2Zvcm1Qb2ludChbYkJveFswXSwgYkJveFszXV0sIGludik7DQogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hbWUgPT09ICdsaW5lYXJHcmFkaWVudCcpIHsgLy8gU2VlIGZpbGUgJ2dyYWRpZW50LXJlcGVhdC1tYXRocy5wbmcnDQogICAgICAgICAgICAgICAgICAgICAgbkFmdGVyICA9IE1hdGgubWF4KChjb3JuZXIxWzBdIC0geDIpICogKHgyIC0geDEpICsgKGNvcm5lcjFbMV0gLSB5MikgKiAoeTIgLSB5MSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb3JuZXIyWzBdIC0geDIpICogKHgyIC0geDEpICsgKGNvcm5lcjJbMV0gLSB5MikgKiAoeTIgLSB5MSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb3JuZXIzWzBdIC0geDIpICogKHgyIC0geDEpICsgKGNvcm5lcjNbMV0gLSB5MikgKiAoeTIgLSB5MSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb3JuZXI0WzBdIC0geDIpICogKHgyIC0geDEpICsgKGNvcm5lcjRbMV0gLSB5MikgKiAoeTIgLSB5MSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyAoTWF0aC5wb3coeDIgLSB4MSwgMikgKyBNYXRoLnBvdyh5MiAtIHkxLCAyKSk7DQogICAgICAgICAgICAgICAgICAgICAgbkJlZm9yZSA9IE1hdGgubWF4KChjb3JuZXIxWzBdIC0geDEpICogKHgxIC0geDIpICsgKGNvcm5lcjFbMV0gLSB5MSkgKiAoeTEgLSB5MiksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb3JuZXIyWzBdIC0geDEpICogKHgxIC0geDIpICsgKGNvcm5lcjJbMV0gLSB5MSkgKiAoeTEgLSB5MiksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb3JuZXIzWzBdIC0geDEpICogKHgxIC0geDIpICsgKGNvcm5lcjNbMV0gLSB5MSkgKiAoeTEgLSB5MiksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb3JuZXI0WzBdIC0geDEpICogKHgxIC0geDIpICsgKGNvcm5lcjRbMV0gLSB5MSkgKiAoeTEgLSB5MikpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyAoTWF0aC5wb3coeDIgLSB4MSwgMikgKyBNYXRoLnBvdyh5MiAtIHkxLCAyKSk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgbkFmdGVyICA9IE1hdGguc3FydChNYXRoLm1heChNYXRoLnBvdyhjb3JuZXIxWzBdIC0geDIsIDIpICsgTWF0aC5wb3coY29ybmVyMVsxXSAtIHkyLCAyKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucG93KGNvcm5lcjJbMF0gLSB4MiwgMikgKyBNYXRoLnBvdyhjb3JuZXIyWzFdIC0geTIsIDIpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coY29ybmVyM1swXSAtIHgyLCAyKSArIE1hdGgucG93KGNvcm5lcjNbMV0gLSB5MiwgMiksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhjb3JuZXI0WzBdIC0geDIsIDIpICsgTWF0aC5wb3coY29ybmVyNFsxXSAtIHkyLCAyKSkpIC8gcjIgLSAxOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIG5BZnRlciA9IE1hdGguY2VpbChuQWZ0ZXIgKyAwLjUpOyAvLyBBZGQgYSBsaXR0bGUgbW9yZSBiZWNhdXNlIHRoZSBzdHJva2UgY2FuIGV4dGVuZCBvdXRzaWRlIG9mIHRoZSBib3VuZGluZyBib3gNCiAgICAgICAgICAgICAgICAgICAgbkJlZm9yZSA9IE1hdGguY2VpbChuQmVmb3JlICsgMC41KTsNCiAgICAgICAgICAgICAgICAgICAgblRvdGFsID0gbkJlZm9yZSArIDEgKyBuQWZ0ZXI7IC8vIEhvdyBtYW55IHRpbWVzIHRoZSBncmFkaWVudCBuZWVkcyB0byBiZSByZXBlYXRlZCB0byBmaWxsIHRoZSBvYmplY3QgYm91bmRpbmcgYm94DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lID09PSAnbGluZWFyR3JhZGllbnQnKSB7DQogICAgICAgICAgICAgICAgICAgIGdyYWQgPSBkb2MubGluZWFyR3JhZGllbnQoeDEgLSBuQmVmb3JlICogKHgyIC0geDEpLCB5MSAtIG5CZWZvcmUgKiAoeTIgLSB5MSksIHgyICsgbkFmdGVyICogKHgyIC0geDEpLCB5MiArIG5BZnRlciAqICh5MiAtIHkxKSk7DQogICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBncmFkID0gZG9jLnJhZGlhbEdyYWRpZW50KHgxLCB5MSwgMCwgeDIsIHkyLCByMiArIG5BZnRlciAqIHIyKTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgblRvdGFsOyBuKyspIHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IDAsDQogICAgICAgICAgICAgICAgICAgICAgICBpbk9yZGVyID0gKHNwcmVhZCAhPT0gJ3JlZmxlY3QnIHx8IChuIC0gbkJlZm9yZSkgJSAyID09PSAwKTsNCiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuW2luT3JkZXIgPyBpIDogY2hpbGRyZW4ubGVuZ3RoIC0gMSAtIGldLA0KICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wQ29sb3IgPSBjaGlsZC5nZXQoJ3N0b3AtY29sb3InKTsNCiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcENvbG9yID09PSAnbm9uZScpIHtzdG9wQ29sb3IgPSBEZWZhdWx0Q29sb3JzLnRyYW5zcGFyZW50O30NCiAgICAgICAgICAgICAgICAgICAgICBzdG9wQ29sb3IgPSBvcGFjaXR5VG9Db2xvcihzdG9wQ29sb3IsIGNoaWxkLmdldCgnc3RvcC1vcGFjaXR5JykgKiBnT3BhY2l0eSwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChvZmZzZXQsIGluT3JkZXIgPyBjaGlsZC5nZXRQZXJjZW50KCdvZmZzZXQnLCAwKSA6IDEgLSBjaGlsZC5nZXRQZXJjZW50KCdvZmZzZXQnLCAwKSk7DQogICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDAgJiYgc3RvcENvbG9yWzBdLmxlbmd0aCA9PT0gNCkge2dyYWQuX2NvbG9yU3BhY2UgPSAnRGV2aWNlQ01ZSyc7fSAvLyBGaXggdW50aWwgUFIgIzc2MyBpcyBtZXJnZWQgaW50byBQREZLaXQNCiAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCAmJiBvZmZzZXQgPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBncmFkLnN0b3AoKG4gKyAwKSAvIG5Ub3RhbCwgc3RvcENvbG9yWzBdLCBzdG9wQ29sb3JbMV0pOw0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICBncmFkLnN0b3AoKG4gKyBvZmZzZXQpIC8gKG5BZnRlciArIG5CZWZvcmUgKyAxKSwgc3RvcENvbG9yWzBdLCBzdG9wQ29sb3JbMV0pOw0KICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBjaGlsZHJlbi5sZW5ndGggLSAxICYmIG9mZnNldCA8IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGdyYWQuc3RvcCgobiArIDEpIC8gblRvdGFsLCBzdG9wQ29sb3JbMF0sIHN0b3BDb2xvclsxXSk7DQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBncmFkLnNldFRyYW5zZm9ybS5hcHBseShncmFkLCBtYXRyaXgpOw0KICAgICAgICAgICAgICAgICAgcmV0dXJuIFtncmFkLCAxXTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrID8gW2ZhbGxiYWNrWzBdLCBmYWxsYmFja1sxXSAqIGdPcGFjaXR5XSA6IHVuZGVmaW5lZDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbUJhc2ljU2hhcGUgPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1TdHlsYWJsZS5jYWxsKHRoaXMsIG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICB0aGlzLmRhc2hTY2FsZSA9IDE7DQogICAgICAgICAgICAgIHRoaXMuZ2V0Qm91bmRpbmdTaGFwZSA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNoYXBlOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmdldFRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd0cmFuc2Zvcm0nKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgdGhpcy5kcmF3SW5Eb2N1bWVudCA9IGZ1bmN0aW9uKGlzQ2xpcCwgaXNNYXNrKSB7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCd2aXNpYmlsaXR5JykgPT09ICdoaWRkZW4nIHx8ICF0aGlzLnNoYXBlKSB7cmV0dXJuO30NCiAgICAgICAgICAgICAgICBkb2Muc2F2ZSgpOw0KICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKCk7DQogICAgICAgICAgICAgICAgdGhpcy5jbGlwKCk7DQogICAgICAgICAgICAgICAgaWYgKCFpc0NsaXApIHsNCiAgICAgICAgICAgICAgICAgIGxldCBtYXNrZWQgPSB0aGlzLm1hc2soKSwNCiAgICAgICAgICAgICAgICAgICAgICBncm91cDsNCiAgICAgICAgICAgICAgICAgIGlmIChtYXNrZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSBkb2NCZWdpbkdyb3VwKGdldFBhZ2VCQm94KCkpOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgbGV0IHN1YlBhdGhzID0gdGhpcy5zaGFwZS5nZXRTdWJQYXRocygpLA0KICAgICAgICAgICAgICAgICAgICAgIGZpbGwgPSB0aGlzLmdldEZpbGwoaXNDbGlwLCBpc01hc2spLA0KICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZSA9IHRoaXMuZ2V0U3Ryb2tlKGlzQ2xpcCwgaXNNYXNrKSwNCiAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGggPSB0aGlzLmdldCgnc3Ryb2tlLXdpZHRoJyksDQogICAgICAgICAgICAgICAgICAgICAgbGluZUNhcCA9IHRoaXMuZ2V0KCdzdHJva2UtbGluZWNhcCcpOw0KICAgICAgICAgICAgICAgICAgaWYgKGZpbGwgfHwgc3Ryb2tlKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChmaWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgZG9jRmlsbENvbG9yKGZpbGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChzdHJva2UpIHsNCiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN1YlBhdGhzLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNFcXVhbChzdWJQYXRoc1tqXS50b3RhbExlbmd0aCwgMCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChsaW5lQ2FwID09PSAnc3F1YXJlJyB8fCBsaW5lQ2FwID09PSAncm91bmQnKSAmJiBsaW5lV2lkdGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YlBhdGhzW2pdLnN0YXJ0UG9pbnQgJiYgc3ViUGF0aHNbal0uc3RhcnRQb2ludC5sZW5ndGggPiAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHN1YlBhdGhzW2pdLnN0YXJ0UG9pbnRbMF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHN1YlBhdGhzW2pdLnN0YXJ0UG9pbnRbMV07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NGaWxsQ29sb3Ioc3Ryb2tlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lQ2FwID09PSAnc3F1YXJlJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MucmVjdCh4IC0gMC41ICogbGluZVdpZHRoLCB5IC0gMC41ICogbGluZVdpZHRoLCBsaW5lV2lkdGgsIGxpbmVXaWR0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmVDYXAgPT09ICdyb3VuZCcpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jLmNpcmNsZSh4LCB5LCAwLjUgKiBsaW5lV2lkdGgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jLmZpbGwoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgbGV0IGRhc2hBcnJheSA9IHRoaXMuZ2V0KCdzdHJva2UtZGFzaGFycmF5JyksDQogICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hPZmZzZXQgPSB0aGlzLmdldCgnc3Ryb2tlLWRhc2hvZmZzZXQnKTsNCiAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOb3RFcXVhbCh0aGlzLmRhc2hTY2FsZSwgMSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGFzaEFycmF5Lmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheVtqXSAqPSB0aGlzLmRhc2hTY2FsZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hPZmZzZXQgKj0gdGhpcy5kYXNoU2NhbGU7DQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgIGRvY1N0cm9rZUNvbG9yKHN0cm9rZSk7DQogICAgICAgICAgICAgICAgICAgICAgZG9jLmxpbmVXaWR0aChsaW5lV2lkdGgpDQogICAgICAgICAgICAgICAgICAgICAgICAgLm1pdGVyTGltaXQodGhpcy5nZXQoJ3N0cm9rZS1taXRlcmxpbWl0JykpDQogICAgICAgICAgICAgICAgICAgICAgICAgLmxpbmVKb2luKHRoaXMuZ2V0KCdzdHJva2UtbGluZWpvaW4nKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAubGluZUNhcChsaW5lQ2FwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgIC5kYXNoKGRhc2hBcnJheSwge3BoYXNlOiBkYXNoT2Zmc2V0fSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdWJQYXRocy5sZW5ndGg7IGorKykgew0KICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJQYXRoc1tqXS50b3RhbExlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YlBhdGhzW2pdLmluc2VydEluRG9jdW1lbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGwgJiYgc3Ryb2tlKSB7DQogICAgICAgICAgICAgICAgICAgICAgZG9jLmZpbGxBbmRTdHJva2UodGhpcy5nZXQoJ2ZpbGwtcnVsZScpKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgZG9jLmZpbGwodGhpcy5nZXQoJ2ZpbGwtcnVsZScpKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJva2UpIHsNCiAgICAgICAgICAgICAgICAgICAgICBkb2Muc3Ryb2tlKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIGxldCBtYXJrZXJTdGFydCA9IHRoaXMuZ2V0KCdtYXJrZXItc3RhcnQnKSwNCiAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJNaWQgPSB0aGlzLmdldCgnbWFya2VyLW1pZCcpLA0KICAgICAgICAgICAgICAgICAgICAgIG1hcmtlckVuZCA9IHRoaXMuZ2V0KCdtYXJrZXItZW5kJyk7DQogICAgICAgICAgICAgICAgICBpZiAobWFya2VyU3RhcnQgIT09ICdub25lJyB8fCBtYXJrZXJNaWQgIT09ICdub25lJyB8fCBtYXJrZXJFbmQgIT09ICdub25lJykgew0KICAgICAgICAgICAgICAgICAgICBsZXQgbWFya2Vyc1BvcyA9IHRoaXMuc2hhcGUuZ2V0TWFya2VycygpOw0KICAgICAgICAgICAgICAgICAgICBpZiAobWFya2VyU3RhcnQgIT09ICdub25lJykgew0KICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrZXIgPSBuZXcgU3ZnRWxlbU1hcmtlcihtYXJrZXJTdGFydCwgbnVsbCk7DQogICAgICAgICAgICAgICAgICAgICAgbWFya2VyLmRyYXdNYXJrZXIoZmFsc2UsIGlzTWFzaywgbWFya2Vyc1Bvc1swXSwgbGluZVdpZHRoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAobWFya2VyTWlkICE9PSAnbm9uZScpIHsNCiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1hcmtlcnNQb3MubGVuZ3RoIC0gMTsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya2VyID0gbmV3IFN2Z0VsZW1NYXJrZXIobWFya2VyTWlkLCBudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlci5kcmF3TWFya2VyKGZhbHNlLCBpc01hc2ssIG1hcmtlcnNQb3NbaV0sIGxpbmVXaWR0aCk7DQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChtYXJrZXJFbmQgIT09ICdub25lJykgew0KICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrZXIgPSBuZXcgU3ZnRWxlbU1hcmtlcihtYXJrZXJFbmQsIG51bGwpOw0KICAgICAgICAgICAgICAgICAgICAgIG1hcmtlci5kcmF3TWFya2VyKGZhbHNlLCBpc01hc2ssIG1hcmtlcnNQb3NbbWFya2Vyc1Bvcy5sZW5ndGggLSAxXSwgbGluZVdpZHRoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgaWYgKGdyb3VwKSB7DQogICAgICAgICAgICAgICAgICAgIGRvY0VuZEdyb3VwKGdyb3VwKTsNCiAgICAgICAgICAgICAgICAgICAgZG9jSW5zZXJ0R3JvdXAoZ3JvdXApOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICB0aGlzLnNoYXBlLmluc2VydEluRG9jdW1lbnQoKTsNCiAgICAgICAgICAgICAgICAgIGRvY0ZpbGxDb2xvcihEZWZhdWx0Q29sb3JzLndoaXRlKTsNCiAgICAgICAgICAgICAgICAgIGRvYy5maWxsKHRoaXMuZ2V0KCdjbGlwLXJ1bGUnKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGRvYy5yZXN0b3JlKCk7DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbVJlY3QgPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1CYXNpY1NoYXBlLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIGxldCB4ID0gdGhpcy5nZXRMZW5ndGgoJ3gnLCB0aGlzLmdldFZXaWR0aCgpLCAwKSwNCiAgICAgICAgICAgICAgICAgIHkgPSB0aGlzLmdldExlbmd0aCgneScsIHRoaXMuZ2V0VkhlaWdodCgpLCAwKSwNCiAgICAgICAgICAgICAgICAgIHcgPSB0aGlzLmdldExlbmd0aCgnd2lkdGgnLCB0aGlzLmdldFZXaWR0aCgpLCAwKSwNCiAgICAgICAgICAgICAgICAgIGggPSB0aGlzLmdldExlbmd0aCgnaGVpZ2h0JywgdGhpcy5nZXRWSGVpZ2h0KCksIDApLA0KICAgICAgICAgICAgICAgICAgcnggPSB0aGlzLmdldExlbmd0aCgncngnLCB0aGlzLmdldFZXaWR0aCgpKSwNCiAgICAgICAgICAgICAgICAgIHJ5ID0gdGhpcy5nZXRMZW5ndGgoJ3J5JywgdGhpcy5nZXRWSGVpZ2h0KCkpOw0KICAgICAgICAgICAgICBpZiAocnggPT09IHVuZGVmaW5lZCAmJiByeSA9PT0gdW5kZWZpbmVkKSB7cnggPSByeSA9IDA7fQ0KICAgICAgICAgICAgICBlbHNlIGlmIChyeCA9PT0gdW5kZWZpbmVkICYmIHJ5ICE9PSB1bmRlZmluZWQpIHtyeCA9IHJ5O30NCiAgICAgICAgICAgICAgZWxzZSBpZiAocnggIT09IHVuZGVmaW5lZCAmJiByeSA9PT0gdW5kZWZpbmVkKSB7cnkgPSByeDt9DQogICAgICAgICAgICAgIGlmICh3ID4gMCAmJiBoID4gMCkgew0KICAgICAgICAgICAgICAgIGlmIChyeCAmJiByeSkgew0KICAgICAgICAgICAgICAgICAgcnggPSBNYXRoLm1pbihyeCwgMC41ICogdyk7DQogICAgICAgICAgICAgICAgICByeSA9IE1hdGgubWluKHJ5LCAwLjUgKiBoKTsNCiAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUgPSBuZXcgU3ZnU2hhcGUoKS5NKHggKyByeCwgeSkuTCh4ICsgdyAtIHJ4LCB5KS5BKHJ4LCByeSwgMCwgMCwgMSwgeCArIHcsIHkgKyByeSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5MKHggKyB3LCB5ICsgaCAtIHJ5KS5BKHJ4LCByeSwgMCwgMCwgMSwgeCArIHcgLSByeCwgeSArIGgpLkwoeCArIHJ4LCB5ICsgaCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5BKHJ4LCByeSwgMCwgMCwgMSwgeCwgeSArIGggLSByeSkuTCh4LCB5ICsgcnkpLkEocngsIHJ5LCAwLCAwLCAxLCB4ICsgcngsIHkpLlooKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgdGhpcy5zaGFwZSA9IG5ldyBTdmdTaGFwZSgpLk0oeCwgeSkuTCh4ICsgdywgeSkuTCh4ICsgdywgeSArIGgpLkwoeCwgeSArIGgpLlooKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdGhpcy5zaGFwZSA9IG5ldyBTdmdTaGFwZSgpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbUNpcmNsZSA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgU3ZnRWxlbUJhc2ljU2hhcGUuY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgbGV0IGN4ID0gdGhpcy5nZXRMZW5ndGgoJ2N4JywgdGhpcy5nZXRWV2lkdGgoKSwgMCksDQogICAgICAgICAgICAgICAgICBjeSA9IHRoaXMuZ2V0TGVuZ3RoKCdjeScsIHRoaXMuZ2V0VkhlaWdodCgpLCAwKSwNCiAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLmdldExlbmd0aCgncicsIHRoaXMuZ2V0Vmlld3BvcnQoKSwgMCk7DQogICAgICAgICAgICAgIGlmIChyID4gMCkgew0KICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUgPSBuZXcgU3ZnU2hhcGUoKS5NKGN4ICsgciwgY3kpLkEociwgciwgMCwgMCwgMSwgY3ggLSByLCBjeSkuQShyLCByLCAwLCAwLCAxLCBjeCArIHIsIGN5KS5aKCk7DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdGhpcy5zaGFwZSA9IG5ldyBTdmdTaGFwZSgpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbUVsbGlwc2UgPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1CYXNpY1NoYXBlLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIGxldCBjeCA9IHRoaXMuZ2V0TGVuZ3RoKCdjeCcsIHRoaXMuZ2V0VldpZHRoKCksIDApLA0KICAgICAgICAgICAgICAgICAgY3kgPSB0aGlzLmdldExlbmd0aCgnY3knLCB0aGlzLmdldFZIZWlnaHQoKSwgMCksDQogICAgICAgICAgICAgICAgICByeCA9IHRoaXMuZ2V0TGVuZ3RoKCdyeCcsIHRoaXMuZ2V0VldpZHRoKCksIDApLA0KICAgICAgICAgICAgICAgICAgcnkgPSB0aGlzLmdldExlbmd0aCgncnknLCB0aGlzLmdldFZIZWlnaHQoKSwgMCk7DQogICAgICAgICAgICAgIGlmIChyeCA+IDAgJiYgcnkgPiAwKSB7DQogICAgICAgICAgICAgICAgdGhpcy5zaGFwZSA9IG5ldyBTdmdTaGFwZSgpLk0oY3ggKyByeCwgY3kpLkEocngsIHJ5LCAwLCAwLCAxLCBjeCAtIHJ4LCBjeSkuQShyeCwgcnksIDAsIDAsIDEsIGN4ICsgcngsIGN5KS5aKCk7DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdGhpcy5zaGFwZSA9IG5ldyBTdmdTaGFwZSgpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbUxpbmUgPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1CYXNpY1NoYXBlLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIGxldCB4MSA9IHRoaXMuZ2V0TGVuZ3RoKCd4MScsIHRoaXMuZ2V0VldpZHRoKCksIDApLA0KICAgICAgICAgICAgICAgICAgeTEgPSB0aGlzLmdldExlbmd0aCgneTEnLCB0aGlzLmdldFZIZWlnaHQoKSwgMCksDQogICAgICAgICAgICAgICAgICB4MiA9IHRoaXMuZ2V0TGVuZ3RoKCd4MicsIHRoaXMuZ2V0VldpZHRoKCksIDApLA0KICAgICAgICAgICAgICAgICAgeTIgPSB0aGlzLmdldExlbmd0aCgneTInLCB0aGlzLmdldFZIZWlnaHQoKSwgMCk7DQogICAgICAgICAgICAgIHRoaXMuc2hhcGUgPSBuZXcgU3ZnU2hhcGUoKS5NKHgxLCB5MSkuTCh4MiwgeTIpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z0VsZW1Qb2x5bGluZSA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgU3ZnRWxlbUJhc2ljU2hhcGUuY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgbGV0IHBvaW50cyA9IHRoaXMuZ2V0TnVtYmVyTGlzdCgncG9pbnRzJyk7DQogICAgICAgICAgICAgIHRoaXMuc2hhcGUgPSBuZXcgU3ZnU2hhcGUoKTsNCiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoIC0gMTsgaSArPSAyKSB7DQogICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHsNCiAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUuTShwb2ludHNbaV0sIHBvaW50c1tpKzFdKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgdGhpcy5zaGFwZS5MKHBvaW50c1tpXSwgcG9pbnRzW2krMV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBpZiAocG9pbnRzLmVycm9yKSB7d2FybmluZ0NhbGxiYWNrKCdTdmdFbGVtUG9seWdvbjogdW5leHBlY3RlZCBzdHJpbmcgJyArIHBvaW50cy5lcnJvcik7fQ0KICAgICAgICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCAlIDIgPT09IDEpIHt3YXJuaW5nQ2FsbGJhY2soJ1N2Z0VsZW1Qb2x5bGluZTogdW5ldmVuIG51bWJlciBvZiBjb29yZGluYXRlcycpO30NCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtUG9seWdvbiA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgU3ZnRWxlbUJhc2ljU2hhcGUuY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgbGV0IHBvaW50cyA9IHRoaXMuZ2V0TnVtYmVyTGlzdCgncG9pbnRzJyk7DQogICAgICAgICAgICAgIHRoaXMuc2hhcGUgPSBuZXcgU3ZnU2hhcGUoKTsNCiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoIC0gMTsgaSArPSAyKSB7DQogICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHsNCiAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUuTShwb2ludHNbaV0sIHBvaW50c1tpKzFdKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgdGhpcy5zaGFwZS5MKHBvaW50c1tpXSwgcG9pbnRzW2krMV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB0aGlzLnNoYXBlLlooKTsNCiAgICAgICAgICAgICAgaWYgKHBvaW50cy5lcnJvcikge3dhcm5pbmdDYWxsYmFjaygnU3ZnRWxlbVBvbHlnb246IHVuZXhwZWN0ZWQgc3RyaW5nICcgKyBwb2ludHMuZXJyb3IpO30NCiAgICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggJSAyID09PSAxKSB7d2FybmluZ0NhbGxiYWNrKCdTdmdFbGVtUG9seWdvbjogdW5ldmVuIG51bWJlciBvZiBjb29yZGluYXRlcycpO30NCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtUGF0aCA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgU3ZnRWxlbUJhc2ljU2hhcGUuY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgdGhpcy5zaGFwZSA9IG5ldyBTdmdTaGFwZSgpLnBhdGgodGhpcy5hdHRyKCdkJykpOw0KICAgICAgICAgICAgICBsZXQgcGF0aExlbmd0aCA9IHRoaXMuZ2V0TGVuZ3RoKCdwYXRoTGVuZ3RoJywgdGhpcy5nZXRWaWV3cG9ydCgpKTsNCiAgICAgICAgICAgICAgdGhpcy5wYXRoTGVuZ3RoID0gcGF0aExlbmd0aCA+IDAgPyBwYXRoTGVuZ3RoIDogdW5kZWZpbmVkOw0KICAgICAgICAgICAgICB0aGlzLmRhc2hTY2FsZSA9ICh0aGlzLnBhdGhMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoaXMuc2hhcGUudG90YWxMZW5ndGggLyB0aGlzLnBhdGhMZW5ndGggOiAxKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtTWFya2VyID0gZnVuY3Rpb24ob2JqLCBpbmhlcml0cykgew0KICAgICAgICAgICAgICBTdmdFbGVtSGFzQ2hpbGRyZW4uY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5nZXRMZW5ndGgoJ21hcmtlcldpZHRoJywgdGhpcy5nZXRQYXJlbnRWV2lkdGgoKSwgMyksDQogICAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmdldExlbmd0aCgnbWFya2VySGVpZ2h0JywgdGhpcy5nZXRQYXJlbnRWSGVpZ2h0KCksIDMpLA0KICAgICAgICAgICAgICAgICAgdmlld0JveCA9IHRoaXMuZ2V0Vmlld2JveCgndmlld0JveCcsIFswLCAwLCB3aWR0aCwgaGVpZ2h0XSk7DQogICAgICAgICAgICAgIHRoaXMuZ2V0VldpZHRoID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdCb3hbMl07DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZ2V0VkhlaWdodCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB2aWV3Qm94WzNdOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmRyYXdNYXJrZXIgPSBmdW5jdGlvbihpc0NsaXAsIGlzTWFzaywgcG9zQXJyYXksIHN0cm9rZVdpZHRoKSB7DQogICAgICAgICAgICAgICAgZG9jLnNhdmUoKTsNCiAgICAgICAgICAgICAgICBsZXQgb3JpZW50ID0gdGhpcy5hdHRyKCdvcmllbnQnKSwNCiAgICAgICAgICAgICAgICAgICAgdW5pdHMgPSB0aGlzLmF0dHIoJ21hcmtlclVuaXRzJyksDQogICAgICAgICAgICAgICAgICAgIHJvdGF0ZSA9IChvcmllbnQgPT09ICdhdXRvJyA/IHBvc0FycmF5WzJdIDogKHBhcnNlRmxvYXQob3JpZW50KSB8fCAwKSAqIE1hdGguUEkgLyAxODApLA0KICAgICAgICAgICAgICAgICAgICBzY2FsZSA9ICh1bml0cyA9PT0gJ3VzZXJTcGFjZU9uVXNlJyA/IDEgOiBzdHJva2VXaWR0aCk7DQogICAgICAgICAgICAgICAgZG9jLnRyYW5zZm9ybShNYXRoLmNvcyhyb3RhdGUpICogc2NhbGUsIE1hdGguc2luKHJvdGF0ZSkgKiBzY2FsZSwgLU1hdGguc2luKHJvdGF0ZSkgKiBzY2FsZSwgTWF0aC5jb3Mocm90YXRlKSAqIHNjYWxlLCBwb3NBcnJheVswXSwgcG9zQXJyYXlbMV0pOw0KICAgICAgICAgICAgICAgIGxldCByZWZYID0gdGhpcy5nZXRMZW5ndGgoJ3JlZlgnLCB0aGlzLmdldFZXaWR0aCgpLCAwKSwNCiAgICAgICAgICAgICAgICAgICAgcmVmWSA9IHRoaXMuZ2V0TGVuZ3RoKCdyZWZZJywgdGhpcy5nZXRWSGVpZ2h0KCksIDApLA0KICAgICAgICAgICAgICAgICAgICBhc3BlY3RSYXRpb01hdHJpeCA9IHBhcnNlQXNwZWN0UmF0aW8odGhpcy5hdHRyKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyksIHdpZHRoLCBoZWlnaHQsIHZpZXdCb3hbMl0sIHZpZXdCb3hbM10sIDAuNSk7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCdvdmVyZmxvdycpID09PSAnaGlkZGVuJykgew0KICAgICAgICAgICAgICAgICAgZG9jLnJlY3QoYXNwZWN0UmF0aW9NYXRyaXhbMF0gKiAodmlld0JveFswXSArIHZpZXdCb3hbMl0gLyAyIC0gcmVmWCkgLSB3aWR0aCAvIDIsIGFzcGVjdFJhdGlvTWF0cml4WzNdICogKHZpZXdCb3hbMV0gKyB2aWV3Qm94WzNdIC8gMiAtIHJlZlkpIC0gaGVpZ2h0IC8gMiwgd2lkdGgsIGhlaWdodCkuY2xpcCgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBkb2MudHJhbnNmb3JtLmFwcGx5KGRvYywgYXNwZWN0UmF0aW9NYXRyaXgpOw0KICAgICAgICAgICAgICAgIGRvYy50cmFuc2xhdGUoLXJlZlgsIC1yZWZZKTsNCiAgICAgICAgICAgICAgICBsZXQgZ3JvdXA7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCdvcGFjaXR5JykgPCAxICYmICFpc0NsaXApIHsNCiAgICAgICAgICAgICAgICAgIGdyb3VwID0gZG9jQmVnaW5Hcm91cChnZXRQYWdlQkJveCgpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2hpbGRyZW4oaXNDbGlwLCBpc01hc2spOw0KICAgICAgICAgICAgICAgIGlmIChncm91cCkgew0KICAgICAgICAgICAgICAgICAgZG9jRW5kR3JvdXAoZ3JvdXApOw0KICAgICAgICAgICAgICAgICAgZG9jLmZpbGxPcGFjaXR5KHRoaXMuZ2V0KCdvcGFjaXR5JykpOw0KICAgICAgICAgICAgICAgICAgZG9jSW5zZXJ0R3JvdXAoZ3JvdXApOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBkb2MucmVzdG9yZSgpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z0VsZW1DbGlwUGF0aCA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgU3ZnRWxlbUhhc0NoaWxkcmVuLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIHRoaXMudXNlTWFzayA9IGZ1bmN0aW9uKGJCb3gpIHsNCiAgICAgICAgICAgICAgICBsZXQgZ3JvdXAgPSBkb2NCZWdpbkdyb3VwKGdldFBhZ2VCQm94KCkpOw0KICAgICAgICAgICAgICAgIGRvYy5zYXZlKCk7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuYXR0cignY2xpcFBhdGhVbml0cycpID09PSAnb2JqZWN0Qm91bmRpbmdCb3gnKSB7DQogICAgICAgICAgICAgICAgICBkb2MudHJhbnNmb3JtKGJCb3hbMl0gLSBiQm94WzBdLCAwLCAwLCBiQm94WzNdIC0gYkJveFsxXSwgYkJveFswXSwgYkJveFsxXSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRoaXMuY2xpcCgpOw0KICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NoaWxkcmVuKHRydWUsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBkb2MucmVzdG9yZSgpOw0KICAgICAgICAgICAgICAgIGRvY0VuZEdyb3VwKGdyb3VwKTsNCiAgICAgICAgICAgICAgICBkb2NBcHBseU1hc2soZ3JvdXAsIHRydWUpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z0VsZW1NYXNrID0gZnVuY3Rpb24ob2JqLCBpbmhlcml0cykgew0KICAgICAgICAgICAgICBTdmdFbGVtSGFzQ2hpbGRyZW4uY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgdGhpcy51c2VNYXNrID0gZnVuY3Rpb24oYkJveCkgew0KICAgICAgICAgICAgICAgIGxldCBncm91cCA9IGRvY0JlZ2luR3JvdXAoZ2V0UGFnZUJCb3goKSk7DQogICAgICAgICAgICAgICAgZG9jLnNhdmUoKTsNCiAgICAgICAgICAgICAgICBsZXQgeCwgeSwgdywgaDsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdHRyKCdtYXNrVW5pdHMnKSA9PT0gJ3VzZXJTcGFjZU9uVXNlJykgew0KICAgICAgICAgICAgICAgICAgeCA9IHRoaXMuZ2V0TGVuZ3RoKCd4JywgdGhpcy5nZXRWV2lkdGgoKSwgLTAuMSAqIChiQm94WzJdIC0gYkJveFswXSkgKyBiQm94WzBdKTsNCiAgICAgICAgICAgICAgICAgIHkgPSB0aGlzLmdldExlbmd0aCgneScsIHRoaXMuZ2V0VkhlaWdodCgpLCAtMC4xICogKGJCb3hbM10gLSBiQm94WzFdKSArIGJCb3hbMV0pOw0KICAgICAgICAgICAgICAgICAgdyA9IHRoaXMuZ2V0TGVuZ3RoKCd3aWR0aCcsIHRoaXMuZ2V0VldpZHRoKCksIDEuMiAqIChiQm94WzJdIC0gYkJveFswXSkpOw0KICAgICAgICAgICAgICAgICAgaCA9IHRoaXMuZ2V0TGVuZ3RoKCdoZWlnaHQnLCB0aGlzLmdldFZIZWlnaHQoKSwgMS4yICogKGJCb3hbM10gLSBiQm94WzFdKSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgIHggPSB0aGlzLmdldExlbmd0aCgneCcsIHRoaXMuZ2V0VldpZHRoKCksIC0wLjEpICogKGJCb3hbMl0gLSBiQm94WzBdKSArIGJCb3hbMF07DQogICAgICAgICAgICAgICAgICB5ID0gdGhpcy5nZXRMZW5ndGgoJ3knLCB0aGlzLmdldFZIZWlnaHQoKSwgLTAuMSkgKiAoYkJveFszXSAtIGJCb3hbMV0pICsgYkJveFsxXTsNCiAgICAgICAgICAgICAgICAgIHcgPSB0aGlzLmdldExlbmd0aCgnd2lkdGgnLCB0aGlzLmdldFZXaWR0aCgpLCAxLjIpICogKGJCb3hbMl0gLSBiQm94WzBdKTsNCiAgICAgICAgICAgICAgICAgIGggPSB0aGlzLmdldExlbmd0aCgnaGVpZ2h0JywgdGhpcy5nZXRWSGVpZ2h0KCksIDEuMikgKiAoYkJveFszXSAtIGJCb3hbMV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBkb2MucmVjdCh4LCB5LCB3LCBoKS5jbGlwKCk7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuYXR0cignbWFza0NvbnRlbnRVbml0cycpID09PSAnb2JqZWN0Qm91bmRpbmdCb3gnKSB7DQogICAgICAgICAgICAgICAgICBkb2MudHJhbnNmb3JtKGJCb3hbMl0gLSBiQm94WzBdLCAwLCAwLCBiQm94WzNdIC0gYkJveFsxXSwgYkJveFswXSwgYkJveFsxXSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRoaXMuY2xpcCgpOw0KICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NoaWxkcmVuKGZhbHNlLCB0cnVlKTsNCiAgICAgICAgICAgICAgICBkb2MucmVzdG9yZSgpOw0KICAgICAgICAgICAgICAgIGRvY0VuZEdyb3VwKGdyb3VwKTsNCiAgICAgICAgICAgICAgICBkb2NBcHBseU1hc2soZ3JvdXAsIHRydWUpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z0VsZW1UZXh0Q29udGFpbmVyID0gZnVuY3Rpb24ob2JqLCBpbmhlcml0cykgew0KICAgICAgICAgICAgICBTdmdFbGVtU3R5bGFibGUuY2FsbCh0aGlzLCBvYmosIGluaGVyaXRzKTsNCiAgICAgICAgICAgICAgdGhpcy5hbGxvd2VkQ2hpbGRyZW4gPSBbJ3RzcGFuJywgJyN0ZXh0JywgJyNjZGF0YS1zZWN0aW9uJywgJ2EnXTsNCiAgICAgICAgICAgICAgdGhpcy5pc1RleHQgPSB0cnVlOw0KICAgICAgICAgICAgICB0aGlzLmdldEJvdW5kaW5nU2hhcGUgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBsZXQgc2hhcGUgPSBuZXcgU3ZnU2hhcGUoKTsNCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3Bvcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgbGV0IHBvcyA9IHRoaXMuX3Bvc1tpXTsNCiAgICAgICAgICAgICAgICAgIGlmICghcG9zLmhpZGRlbikgew0KICAgICAgICAgICAgICAgICAgICBsZXQgZHgwID0gcG9zLmFzY2VudCAqIE1hdGguc2luKHBvcy5yb3RhdGUpLCBkeTAgPSAtcG9zLmFzY2VudCAqIE1hdGguY29zKHBvcy5yb3RhdGUpLA0KICAgICAgICAgICAgICAgICAgICAgICAgZHgxID0gcG9zLmRlc2NlbnQgKiBNYXRoLnNpbihwb3Mucm90YXRlKSwgZHkxID0gLXBvcy5kZXNjZW50ICogTWF0aC5jb3MocG9zLnJvdGF0ZSksDQogICAgICAgICAgICAgICAgICAgICAgICBkeDIgPSBwb3Mud2lkdGggKiBNYXRoLmNvcyhwb3Mucm90YXRlKSwgZHkyID0gcG9zLndpZHRoICogTWF0aC5zaW4ocG9zLnJvdGF0ZSk7DQogICAgICAgICAgICAgICAgICAgIHNoYXBlLk0ocG9zLnggKyBkeDAsIHBvcy55ICsgZHkwKS5MKHBvcy54ICsgZHgwICsgZHgyLCBwb3MueSArIGR5MCArIGR5MikNCiAgICAgICAgICAgICAgICAgICAgICAgICAuTShwb3MueCArIGR4MSArIGR4MiwgcG9zLnkgKyBkeTEgKyBkeTIpLkwocG9zLnggKyBkeDEsIHBvcy55ICsgZHkxKTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIHNoYXBlOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmRyYXdUZXh0SW5Eb2N1bWVudCA9IGZ1bmN0aW9uKGlzQ2xpcCwgaXNNYXNrKSB7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMubGluayAmJiAhaXNDbGlwICYmICFpc01hc2spIHt0aGlzLmFkZExpbmsoKTt9DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCd0ZXh0LWRlY29yYXRpb24nKSA9PT0gJ3VuZGVybGluZScpIHsNCiAgICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoMC4wNSAqIHRoaXMuX2ZvbnQuc2l6ZSwgLTAuMDc1ICogdGhpcy5fZm9udC5zaXplLCBpc0NsaXAsIGlzTWFzayk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldCgndGV4dC1kZWNvcmF0aW9uJykgPT09ICdvdmVybGluZScpIHsNCiAgICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoMC4wNSAqIHRoaXMuX2ZvbnQuc2l6ZSwgZ2V0QXNjZW50KHRoaXMuX2ZvbnQuZm9udCwgdGhpcy5fZm9udC5zaXplKSArIDAuMDc1ICogdGhpcy5fZm9udC5zaXplLCBpc0NsaXAsIGlzTWFzayk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGxldCBmaWxsID0gdGhpcy5nZXRGaWxsKGlzQ2xpcCwgaXNNYXNrKSwNCiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlID0gdGhpcy5nZXRTdHJva2UoaXNDbGlwLCBpc01hc2spLA0KICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aCA9IHRoaXMuZ2V0KCdzdHJva2Utd2lkdGgnKTsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZm9udC5mYXV4Qm9sZCkgew0KICAgICAgICAgICAgICAgICAgaWYgKCFzdHJva2UpIHsNCiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlID0gZmlsbDsNCiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSB0aGlzLl9mb250LnNpemUgKiAwLjAzOw0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGggKz0gdGhpcy5fZm9udC5zaXplICogMC4wMzsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5nZXRDaGlsZHJlbigpOw0KICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgIGxldCBjaGlsZEVsZW0gPSBjaGlsZHJlbltpXTsNCiAgICAgICAgICAgICAgICAgIHN3aXRjaChjaGlsZEVsZW0ubmFtZSkgew0KICAgICAgICAgICAgICAgICAgICBjYXNlICd0c3Bhbic6IGNhc2UgJ3RleHRQYXRoJzogY2FzZSAnYSc6DQogICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkRWxlbS5nZXQoJ2Rpc3BsYXknKSAhPT0gJ25vbmUnKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVsZW0uZHJhd1RleHRJbkRvY3VtZW50KGlzQ2xpcCwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgJyN0ZXh0JzogY2FzZSAnI2NkYXRhLXNlY3Rpb24nOg0KICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldCgndmlzaWJpbGl0eScpID09PSAnaGlkZGVuJykge2NvbnRpbnVlO30NCiAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbCB8fCBzdHJva2UgfHwgaXNDbGlwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NGaWxsQ29sb3IoZmlsbCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlICYmIHN0cm9rZVdpZHRoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGRvY1N0cm9rZUNvbG9yKHN0cm9rZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGRvYy5saW5lV2lkdGgoc3Ryb2tlV2lkdGgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5taXRlckxpbWl0KHRoaXMuZ2V0KCdzdHJva2UtbWl0ZXJsaW1pdCcpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGluZUpvaW4odGhpcy5nZXQoJ3N0cm9rZS1saW5lam9pbicpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGluZUNhcCh0aGlzLmdldCgnc3Ryb2tlLWxpbmVjYXAnKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRhc2godGhpcy5nZXQoJ3N0cm9rZS1kYXNoYXJyYXknKSwge3BoYXNlOnRoaXMuZ2V0KCdzdHJva2UtZGFzaG9mZnNldCcpfSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBkb2NCZWdpblRleHQodGhpcy5fZm9udC5mb250LCB0aGlzLl9mb250LnNpemUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZG9jU2V0VGV4dE1vZGUoISFmaWxsLCAhIXN0cm9rZSk7DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgcG9zID0gY2hpbGRFbGVtLl9wb3M7IGogPCBwb3MubGVuZ3RoOyBqKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3Nbal0uaGlkZGVuICYmIGlzTm90RXF1YWwocG9zW2pdLndpZHRoLCAwKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb3MgPSBNYXRoLmNvcyhwb3Nbal0ucm90YXRlKSwgc2luID0gTWF0aC5zaW4ocG9zW2pdLnJvdGF0ZSksIHNrZXcgPSAodGhpcy5fZm9udC5mYXV4SXRhbGljID8gLTAuMjUgOiAwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NTZXRUZXh0TWF0cml4KGNvcyAqIHBvc1tqXS5zY2FsZSwgc2luICogcG9zW2pdLnNjYWxlLCBjb3MgKiBza2V3IC0gc2luLCBzaW4gKiBza2V3ICsgY29zLCBwb3Nbal0ueCwgcG9zW2pdLnkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY1dyaXRlR2x5cGgocG9zW2pdLmdseXBoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZG9jRW5kVGV4dCgpOw0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCd0ZXh0LWRlY29yYXRpb24nKSA9PT0gJ2xpbmUtdGhyb3VnaCcpIHsNCiAgICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoMC4wNSAqIHRoaXMuX2ZvbnQuc2l6ZSwgMC41ICogKGdldEFzY2VudCh0aGlzLl9mb250LmZvbnQsIHRoaXMuX2ZvbnQuc2l6ZSkgKyBnZXREZXNjZW50KHRoaXMuX2ZvbnQuZm9udCwgdGhpcy5fZm9udC5zaXplKSksIGlzQ2xpcCwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUgPSBmdW5jdGlvbihsaW5lV2lkdGgsIGxpbmVQb3NpdGlvbiwgaXNDbGlwLCBpc01hc2spIHsNCiAgICAgICAgICAgICAgICBsZXQgZmlsbCA9IHRoaXMuZ2V0RmlsbChpc0NsaXAsIGlzTWFzayksDQogICAgICAgICAgICAgICAgICAgIHN0cm9rZSA9IHRoaXMuZ2V0U3Ryb2tlKGlzQ2xpcCwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICBpZiAoZmlsbCkgew0KICAgICAgICAgICAgICAgICAgZG9jRmlsbENvbG9yKGZpbGwpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSB7DQogICAgICAgICAgICAgICAgICBkb2NTdHJva2VDb2xvcihzdHJva2UpOw0KICAgICAgICAgICAgICAgICAgZG9jLmxpbmVXaWR0aCh0aGlzLmdldCgnc3Ryb2tlLXdpZHRoJykpDQogICAgICAgICAgICAgICAgICAgICAubWl0ZXJMaW1pdCh0aGlzLmdldCgnc3Ryb2tlLW1pdGVybGltaXQnKSkNCiAgICAgICAgICAgICAgICAgICAgIC5saW5lSm9pbih0aGlzLmdldCgnc3Ryb2tlLWxpbmVqb2luJykpDQogICAgICAgICAgICAgICAgICAgICAubGluZUNhcCh0aGlzLmdldCgnc3Ryb2tlLWxpbmVjYXAnKSkNCiAgICAgICAgICAgICAgICAgICAgIC5kYXNoKHRoaXMuZ2V0KCdzdHJva2UtZGFzaGFycmF5JyksIHtwaGFzZTp0aGlzLmdldCgnc3Ryb2tlLWRhc2hvZmZzZXQnKX0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgcG9zID0gdGhpcy5fcG9zOyBqIDwgcG9zLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICBpZiAoIXBvc1tqXS5oaWRkZW4gJiYgaXNOb3RFcXVhbChwb3Nbal0ud2lkdGgsIDApKSB7DQogICAgICAgICAgICAgICAgICAgIGxldCBkeDAgPSAobGluZVBvc2l0aW9uICsgbGluZVdpZHRoIC8gMikgKiBNYXRoLnNpbihwb3Nbal0ucm90YXRlKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGR5MCA9IC0obGluZVBvc2l0aW9uICsgbGluZVdpZHRoIC8gMikgKiBNYXRoLmNvcyhwb3Nbal0ucm90YXRlKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGR4MSA9IChsaW5lUG9zaXRpb24gLSBsaW5lV2lkdGggLyAyKSAqIE1hdGguc2luKHBvc1tqXS5yb3RhdGUpLA0KICAgICAgICAgICAgICAgICAgICAgICAgZHkxID0gLShsaW5lUG9zaXRpb24gLSBsaW5lV2lkdGggLyAyKSAqIE1hdGguY29zKHBvc1tqXS5yb3RhdGUpLA0KICAgICAgICAgICAgICAgICAgICAgICAgZHgyID0gcG9zW2pdLndpZHRoICogTWF0aC5jb3MocG9zW2pdLnJvdGF0ZSksDQogICAgICAgICAgICAgICAgICAgICAgICBkeTIgPSBwb3Nbal0ud2lkdGggKiBNYXRoLnNpbihwb3Nbal0ucm90YXRlKTsNCiAgICAgICAgICAgICAgICAgICAgbmV3IFN2Z1NoYXBlKCkuTShwb3Nbal0ueCArIGR4MCwgcG9zW2pdLnkgKyBkeTApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkwocG9zW2pdLnggKyBkeDAgKyBkeDIsIHBvc1tqXS55ICsgZHkwICsgZHkyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5MKHBvc1tqXS54ICsgZHgxICsgZHgyLCBwb3Nbal0ueSArIGR5MSArIGR5MikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuTChwb3Nbal0ueCArIGR4MSwgcG9zW2pdLnkgKyBkeTEpLlooKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pbnNlcnRJbkRvY3VtZW50KCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChmaWxsICYmIHN0cm9rZSkgew0KICAgICAgICAgICAgICAgICAgICAgIGRvYy5maWxsQW5kU3Ryb2tlKCk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsbCkgew0KICAgICAgICAgICAgICAgICAgICAgIGRvYy5maWxsKCk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3Ryb2tlKSB7DQogICAgICAgICAgICAgICAgICAgICAgZG9jLnN0cm9rZSgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIFN2Z0VsZW1UZXh0Tm9kZSA9IGZ1bmN0aW9uKG9iaiwgaW5oZXJpdHMpIHsNCiAgICAgICAgICAgICAgdGhpcy5uYW1lID0gb2JqLm5vZGVOYW1lOw0KICAgICAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gb2JqLm5vZGVWYWx1ZTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHZhciBTdmdFbGVtVHNwYW4gPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1UZXh0Q29udGFpbmVyLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbVRleHRQYXRoID0gZnVuY3Rpb24ob2JqLCBpbmhlcml0cykgew0KICAgICAgICAgICAgICBTdmdFbGVtVGV4dENvbnRhaW5lci5jYWxsKHRoaXMsIG9iaiwgaW5oZXJpdHMpOw0KICAgICAgICAgICAgICBsZXQgdGVtcDsNCiAgICAgICAgICAgICAgaWYgKCh0ZW1wID0gdGhpcy5hdHRyKCdwYXRoJykpICYmIHRlbXAudHJpbSgpICE9PSAnJykgew0KICAgICAgICAgICAgICAgIGxldCBwYXRoTGVuZ3RoID0gdGhpcy5nZXRMZW5ndGgoJ3BhdGhMZW5ndGgnLCB0aGlzLmdldFZpZXdwb3J0KCkpOw0KICAgICAgICAgICAgICAgIHRoaXMucGF0aE9iamVjdCA9IG5ldyBTdmdTaGFwZSgpLnBhdGgodGVtcCk7DQogICAgICAgICAgICAgICAgdGhpcy5wYXRoTGVuZ3RoID0gcGF0aExlbmd0aCA+IDAgPyBwYXRoTGVuZ3RoIDogdGhpcy5wYXRoT2JqZWN0LnRvdGFsTGVuZ3RoOw0KICAgICAgICAgICAgICAgIHRoaXMucGF0aFNjYWxlID0gdGhpcy5wYXRoT2JqZWN0LnRvdGFsTGVuZ3RoIC8gdGhpcy5wYXRoTGVuZ3RoOw0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0ZW1wID0gdGhpcy5nZXRVcmwoJ2hyZWYnKSB8fCB0aGlzLmdldFVybCgneGxpbms6aHJlZicpKSAmJiB0ZW1wLm5vZGVOYW1lID09PSAncGF0aCcpIHsNCiAgICAgICAgICAgICAgICBsZXQgcGF0aEVsZW0gPSBuZXcgU3ZnRWxlbVBhdGgodGVtcCwgdGhpcyk7DQogICAgICAgICAgICAgICAgdGhpcy5wYXRoT2JqZWN0ID0gcGF0aEVsZW0uc2hhcGUuY2xvbmUoKS50cmFuc2Zvcm0ocGF0aEVsZW0uZ2V0KCd0cmFuc2Zvcm0nKSk7DQogICAgICAgICAgICAgICAgdGhpcy5wYXRoTGVuZ3RoID0gdGhpcy5jaG9vc2VWYWx1ZShwYXRoRWxlbS5wYXRoTGVuZ3RoLCB0aGlzLnBhdGhPYmplY3QudG90YWxMZW5ndGgpOw0KICAgICAgICAgICAgICAgIHRoaXMucGF0aFNjYWxlID0gdGhpcy5wYXRoT2JqZWN0LnRvdGFsTGVuZ3RoIC8gdGhpcy5wYXRoTGVuZ3RoOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgU3ZnRWxlbVRleHQgPSBmdW5jdGlvbihvYmosIGluaGVyaXRzKSB7DQogICAgICAgICAgICAgIFN2Z0VsZW1UZXh0Q29udGFpbmVyLmNhbGwodGhpcywgb2JqLCBpbmhlcml0cyk7DQogICAgICAgICAgICAgIHRoaXMuYWxsb3dlZENoaWxkcmVuID0gWyd0ZXh0UGF0aCcsICd0c3BhbicsICcjdGV4dCcsICcjY2RhdGEtc2VjdGlvbicsICdhJ107DQogICAgICAgICAgICAgIChmdW5jdGlvbiAodGV4dFBhcmVudEVsZW0pIHsNCiAgICAgICAgICAgICAgICBsZXQgcHJvY2Vzc2VkVGV4dCA9ICcnLCByZW1haW5pbmdUZXh0ID0gb2JqLnRleHRDb250ZW50LCB0ZXh0UGF0aHMgPSBbXSwgY3VycmVudENodW5rID0gW10sIGN1cnJlbnRBbmNob3IsIGN1cnJlbnREaXJlY3Rpb24sIGN1cnJlbnRYID0gMCwgY3VycmVudFkgPSAwOw0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvQW5jaG9yaW5nKCkgew0KICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDaHVuay5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBjdXJyZW50Q2h1bmtbY3VycmVudENodW5rLmxlbmd0aCAtIDFdOw0KICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3QgPSBjdXJyZW50Q2h1bmtbMF07DQogICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IGxhc3QueCArIGxhc3Qud2lkdGggLSBmaXJzdC54Ow0KICAgICAgICAgICAgICAgICAgICBsZXQgYW5jaG9yZHggPSB7J3N0YXJ0bHRyJzogMCwgJ21pZGRsZWx0cic6IDAuNSwgJ2VuZGx0cic6IDEsICdzdGFydHJ0bCc6IDEsICdtaWRkbGVydGwnOiAwLjUsICdlbmRydGwnOiAwfVtjdXJyZW50QW5jaG9yICsgY3VycmVudERpcmVjdGlvbl0gKiB3aWR0aCB8fCAwOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRDaHVuay5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaHVua1tpXS54IC09IGFuY2hvcmR4Ow0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBjdXJyZW50Q2h1bmsgPSBbXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZnVuY3Rpb24gYWRqdXN0TGVuZ3RoKHBvcywgbGVuZ3RoLCBzcGFjaW5nQW5kR2x5cGhzKSB7DQogICAgICAgICAgICAgICAgICBsZXQgZmlyc3RDaGFyID0gcG9zWzBdLCBsYXN0Q2hhciA9IHBvc1twb3MubGVuZ3RoIC0gMV0sDQogICAgICAgICAgICAgICAgICAgICAgc3RhcnRYID0gZmlyc3RDaGFyLngsIGVuZFggPSBsYXN0Q2hhci54ICsgbGFzdENoYXIud2lkdGg7DQogICAgICAgICAgICAgICAgICBpZiAoc3BhY2luZ0FuZEdseXBocykgew0KICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dFNjYWxlID0gbGVuZ3RoIC8gKGVuZFggLSBzdGFydFgpOw0KICAgICAgICAgICAgICAgICAgICBpZiAodGV4dFNjYWxlID4gMCAmJiB0ZXh0U2NhbGUgPCBJbmZpbml0eSkgew0KICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9zLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3Nbal0ueCA9IHN0YXJ0WCArIHRleHRTY2FsZSAqIChwb3Nbal0ueCAtIHN0YXJ0WCk7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3Nbal0uc2NhbGUgKj0gdGV4dFNjYWxlOw0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zW2pdLndpZHRoICo9IHRleHRTY2FsZTsNCiAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChwb3MubGVuZ3RoID49IDIpIHsNCiAgICAgICAgICAgICAgICAgICAgICBsZXQgc3BhY2VEaWZmID0gKGxlbmd0aCAtIChlbmRYIC0gc3RhcnRYKSkgLyAocG9zLmxlbmd0aCAtIDEpOw0KICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9zLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3Nbal0ueCArPSBqICogc3BhY2VEaWZmOw0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgY3VycmVudFggKz0gbGVuZ3RoIC0gKGVuZFggLSBzdGFydFgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZWN1cnNpdmUoY3VycmVudEVsZW0sIHBhcmVudEVsZW0pIHsNCiAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtLl94ID0gY29tYmluZUFycmF5cyhjdXJyZW50RWxlbS5nZXRMZW5ndGhMaXN0KCd4JywgY3VycmVudEVsZW0uZ2V0VldpZHRoKCkpLCAocGFyZW50RWxlbSA/IHBhcmVudEVsZW0uX3guc2xpY2UocGFyZW50RWxlbS5fcG9zLmxlbmd0aCkgOiBbXSkpOw0KICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX3kgPSBjb21iaW5lQXJyYXlzKGN1cnJlbnRFbGVtLmdldExlbmd0aExpc3QoJ3knLCBjdXJyZW50RWxlbS5nZXRWSGVpZ2h0KCkpLCAocGFyZW50RWxlbSA/IHBhcmVudEVsZW0uX3kuc2xpY2UocGFyZW50RWxlbS5fcG9zLmxlbmd0aCkgOiBbXSkpOw0KICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX2R4ID0gY29tYmluZUFycmF5cyhjdXJyZW50RWxlbS5nZXRMZW5ndGhMaXN0KCdkeCcsIGN1cnJlbnRFbGVtLmdldFZXaWR0aCgpKSwgKHBhcmVudEVsZW0gPyBwYXJlbnRFbGVtLl9keC5zbGljZShwYXJlbnRFbGVtLl9wb3MubGVuZ3RoKSA6IFtdKSk7DQogICAgICAgICAgICAgICAgICBjdXJyZW50RWxlbS5fZHkgPSBjb21iaW5lQXJyYXlzKGN1cnJlbnRFbGVtLmdldExlbmd0aExpc3QoJ2R5JywgY3VycmVudEVsZW0uZ2V0VkhlaWdodCgpKSwgKHBhcmVudEVsZW0gPyBwYXJlbnRFbGVtLl9keS5zbGljZShwYXJlbnRFbGVtLl9wb3MubGVuZ3RoKSA6IFtdKSk7DQogICAgICAgICAgICAgICAgICBjdXJyZW50RWxlbS5fcm90ID0gY29tYmluZUFycmF5cyhjdXJyZW50RWxlbS5nZXROdW1iZXJMaXN0KCdyb3RhdGUnKSwgKHBhcmVudEVsZW0gPyBwYXJlbnRFbGVtLl9yb3Quc2xpY2UocGFyZW50RWxlbS5fcG9zLmxlbmd0aCkgOiBbXSkpOw0KICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX2RlZlJvdCA9IGN1cnJlbnRFbGVtLmNob29zZVZhbHVlKGN1cnJlbnRFbGVtLl9yb3RbY3VycmVudEVsZW0uX3JvdC5sZW5ndGggLSAxXSwgcGFyZW50RWxlbSAmJiBwYXJlbnRFbGVtLl9kZWZSb3QsIDApOw0KICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRFbGVtLm5hbWUgPT09ICd0ZXh0UGF0aCcpIHtjdXJyZW50RWxlbS5feSA9IFtdO30NCiAgICAgICAgICAgICAgICAgIGxldCBmb250T3B0aW9ucyA9IHtmYXV4SXRhbGljOiBmYWxzZSwgZmF1eEJvbGQ6IGZhbHNlfSwNCiAgICAgICAgICAgICAgICAgICAgICBmb250TmFtZW9yTGluayA9IGZvbnRDYWxsYmFjayhjdXJyZW50RWxlbS5nZXQoJ2ZvbnQtZmFtaWx5JyksIGN1cnJlbnRFbGVtLmdldCgnZm9udC13ZWlnaHQnKSA9PT0gJ2JvbGQnLCBjdXJyZW50RWxlbS5nZXQoJ2ZvbnQtc3R5bGUnKSA9PT0gJ2l0YWxpYycsIGZvbnRPcHRpb25zKTsNCiAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIGRvYy5mb250KGZvbnROYW1lb3JMaW5rKTsNCiAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgew0KICAgICAgICAgICAgICAgICAgICB3YXJuaW5nQ2FsbGJhY2soJ1NWR0VsZW1UZXh0OiBmYWlsZWQgdG8gb3BlbiBmb250ICInICsgZm9udE5hbWVvckxpbmsgKyAnIiBpbiBQREZLaXQnKTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtLl9wb3MgPSBbXTsNCiAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtLl9pbmRleCA9IDA7DQogICAgICAgICAgICAgICAgICBjdXJyZW50RWxlbS5fZm9udCA9IHtmb250OiBkb2MuX2ZvbnQsIHNpemU6IGN1cnJlbnRFbGVtLmdldCgnZm9udC1zaXplJyksIGZhdXhJdGFsaWM6IGZvbnRPcHRpb25zLmZhdXhJdGFsaWMsIGZhdXhCb2xkOiBmb250T3B0aW9ucy5mYXV4Qm9sZH07DQogICAgICAgICAgICAgICAgICBsZXQgdGV4dExlbmd0aCA9IGN1cnJlbnRFbGVtLmdldExlbmd0aCgndGV4dExlbmd0aCcsIGN1cnJlbnRFbGVtLmdldFZXaWR0aCgpLCB1bmRlZmluZWQpLA0KICAgICAgICAgICAgICAgICAgICAgIHNwYWNpbmdBbmRHbHlwaHMgPSBjdXJyZW50RWxlbS5hdHRyKCdsZW5ndGhBZGp1c3QnKSA9PT0gJ3NwYWNpbmdBbmRHbHlwaHMnLA0KICAgICAgICAgICAgICAgICAgICAgIHdvcmRTcGFjaW5nID0gY3VycmVudEVsZW0uZ2V0KCd3b3JkLXNwYWNpbmcnKSwNCiAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXJTcGFjaW5nID0gY3VycmVudEVsZW0uZ2V0KCdsZXR0ZXItc3BhY2luZycpLA0KICAgICAgICAgICAgICAgICAgICAgIHRleHRBbmNob3IgPSBjdXJyZW50RWxlbS5nZXQoJ3RleHQtYW5jaG9yJyksDQogICAgICAgICAgICAgICAgICAgICAgdGV4dERpcmVjdGlvbiA9IGN1cnJlbnRFbGVtLmdldCgnZGlyZWN0aW9uJyksDQogICAgICAgICAgICAgICAgICAgICAgYmFzZWxpbmUgPSBnZXRCYXNlbGluZShjdXJyZW50RWxlbS5fZm9udC5mb250LCBjdXJyZW50RWxlbS5fZm9udC5zaXplLCBjdXJyZW50RWxlbS5nZXQoJ2FsaWdubWVudC1iYXNlbGluZScpIHx8IGN1cnJlbnRFbGVtLmdldCgnZG9taW5hbnQtYmFzZWxpbmUnKSwgY3VycmVudEVsZW0uZ2V0KCdiYXNlbGluZS1zaGlmdCcpKTsNCiAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RWxlbS5uYW1lID09PSAndGV4dFBhdGgnKSB7DQogICAgICAgICAgICAgICAgICAgIGRvQW5jaG9yaW5nKCk7DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRYID0gY3VycmVudFkgPSAwOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gY3VycmVudEVsZW0uZ2V0Q2hpbGRyZW4oKTsNCiAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkRWxlbSA9IGNoaWxkcmVuW2ldOw0KICAgICAgICAgICAgICAgICAgICBzd2l0Y2goY2hpbGRFbGVtLm5hbWUpIHsNCiAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0c3Bhbic6IGNhc2UgJ3RleHRQYXRoJzogY2FzZSAnYSc6DQogICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmUoY2hpbGRFbGVtLCBjdXJyZW50RWxlbSk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICBjYXNlICcjdGV4dCc6IGNhc2UgJyNjZGF0YS1zZWN0aW9uJzoNCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByYXdUZXh0ID0gY2hpbGRFbGVtLnRleHRDb250ZW50LCByZW5kZXJlZFRleHQgPSByYXdUZXh0LCB3b3JkczsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRWxlbS5fZm9udCA9IGN1cnJlbnRFbGVtLl9mb250Ow0KICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRFbGVtLl9wb3MgPSBbXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ1RleHQgPSByZW1haW5pbmdUZXh0LnN1YnN0cmluZyhyYXdUZXh0Lmxlbmd0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEVsZW0uZ2V0KCd4bWw6c3BhY2UnKSA9PT0gJ3ByZXNlcnZlJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlZFRleHQgPSByZW5kZXJlZFRleHQucmVwbGFjZSgvW1xzXS9nLCAnICcpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRUZXh0ID0gcmVuZGVyZWRUZXh0LnJlcGxhY2UoL1tcc10rL2csICcgJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzZWRUZXh0Lm1hdGNoKC9bXHNdJHxeJC8pKSB7cmVuZGVyZWRUZXh0ID0gcmVuZGVyZWRUZXh0LnJlcGxhY2UoL15bXHNdLywgJycpO30NCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZ1RleHQubWF0Y2goL15bXHNdKiQvKSkge3JlbmRlcmVkVGV4dCA9IHJlbmRlcmVkVGV4dC5yZXBsYWNlKC9bXHNdJC8sICcnKTt9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWRUZXh0ICs9IHJhd1RleHQ7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAod29yZFNwYWNpbmcgPT09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMgPSBbcmVuZGVyZWRUZXh0XTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzID0gcmVuZGVyZWRUZXh0LnNwbGl0KC8oXHMpLyk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB3ID0gMDsgdyA8IHdvcmRzLmxlbmd0aDsgdysrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3MgPSBnZXRUZXh0UG9zKGN1cnJlbnRFbGVtLl9mb250LmZvbnQsIGN1cnJlbnRFbGVtLl9mb250LnNpemUsIHdvcmRzW3ddKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwb3MubGVuZ3RoOyBqKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBjdXJyZW50RWxlbS5faW5kZXgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhBdHRyID0gY3VycmVudEVsZW0uX3hbaW5kZXhdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5QXR0ciA9IGN1cnJlbnRFbGVtLl95W2luZGV4XSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHhBdHRyID0gY3VycmVudEVsZW0uX2R4W2luZGV4XSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHlBdHRyID0gY3VycmVudEVsZW0uX2R5W2luZGV4XSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90QXR0ciA9IGN1cnJlbnRFbGVtLl9yb3RbaW5kZXhdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51b3VzID0gISh3ID09PSAwICYmIGogPT09IDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4QXR0ciAhPT0gdW5kZWZpbmVkKSB7Y29udGludW91cyA9IGZhbHNlOyBkb0FuY2hvcmluZygpOyBjdXJyZW50WCA9IHhBdHRyO30NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeUF0dHIgIT09IHVuZGVmaW5lZCkge2NvbnRpbnVvdXMgPSBmYWxzZTsgZG9BbmNob3JpbmcoKTsgY3VycmVudFkgPSB5QXR0cjt9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR4QXR0ciAhPT0gdW5kZWZpbmVkKSB7Y29udGludW91cyA9IGZhbHNlOyBjdXJyZW50WCArPSBkeEF0dHI7fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeUF0dHIgIT09IHVuZGVmaW5lZCkge2NvbnRpbnVvdXMgPSBmYWxzZTsgY3VycmVudFkgKz0gZHlBdHRyO30NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm90QXR0ciAhPT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRFbGVtLl9kZWZSb3QgIT09IDApIHtjb250aW51b3VzID0gZmFsc2U7fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3NpdGlvbiA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoOiBwb3Nbal0uZ2x5cGgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGU6IChNYXRoLlBJIC8gMTgwKSAqIGN1cnJlbnRFbGVtLmNob29zZVZhbHVlKHJvdEF0dHIsIGN1cnJlbnRFbGVtLl9kZWZSb3QpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogY3VycmVudFggKyBwb3Nbal0ueE9mZnNldCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGN1cnJlbnRZICsgYmFzZWxpbmUgKyBwb3Nbal0ueU9mZnNldCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwb3Nbal0ud2lkdGgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2NlbnQ6IGdldEFzY2VudChjdXJyZW50RWxlbS5fZm9udC5mb250LCBjdXJyZW50RWxlbS5fZm9udC5zaXplKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NlbnQ6IGdldERlc2NlbnQoY3VycmVudEVsZW0uX2ZvbnQuZm9udCwgY3VycmVudEVsZW0uX2ZvbnQuc2l6ZSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZTogMSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogZmFsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51b3VzOiBjb250aW51b3VzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2h1bmsucHVzaChwb3NpdGlvbik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRFbGVtLl9wb3MucHVzaChwb3NpdGlvbik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX3Bvcy5wdXNoKHBvc2l0aW9uKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RWxlbS5faW5kZXggKz0gcG9zW2pdLnVuaWNvZGUubGVuZ3RoOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2h1bmsubGVuZ3RoID09PSAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QW5jaG9yID0gdGV4dEFuY2hvcjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb24gPSB0ZXh0RGlyZWN0aW9uOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50WCArPSBwb3Nbal0ueEFkdmFuY2UgKyBsZXR0ZXJTcGFjaW5nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRZICs9IHBvc1tqXS55QWR2YW5jZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod29yZHNbd10gPT09ICcgJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRYICs9IHdvcmRTcGFjaW5nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nVGV4dCA9IHJlbWFpbmluZ1RleHQuc3Vic3RyaW5nKGNoaWxkRWxlbS50ZXh0Q29udGVudC5sZW5ndGgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBpZiAodGV4dExlbmd0aCAmJiBjdXJyZW50RWxlbS5fcG9zLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgICAgICBhZGp1c3RMZW5ndGgoY3VycmVudEVsZW0uX3BvcywgdGV4dExlbmd0aCwgc3BhY2luZ0FuZEdseXBocyk7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEVsZW0ubmFtZSA9PT0gJ3RleHRQYXRoJyB8fCBjdXJyZW50RWxlbS5uYW1lID09PSAndGV4dCcpIHsNCiAgICAgICAgICAgICAgICAgICAgZG9BbmNob3JpbmcoKTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RWxlbS5uYW1lID09PSAndGV4dFBhdGgnKSB7DQogICAgICAgICAgICAgICAgICAgIHRleHRQYXRocy5wdXNoKGN1cnJlbnRFbGVtKTsNCiAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGhPYmplY3QgPSBjdXJyZW50RWxlbS5wYXRoT2JqZWN0Ow0KICAgICAgICAgICAgICAgICAgICBpZiAocGF0aE9iamVjdCkgew0KICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRYID0gcGF0aE9iamVjdC5lbmRQb2ludFswXTsgY3VycmVudFkgPSBwYXRoT2JqZWN0LmVuZFBvaW50WzFdOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBpZiAocGFyZW50RWxlbSkgew0KICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtLl9wb3MgPSBwYXJlbnRFbGVtLl9wb3MuY29uY2F0KGN1cnJlbnRFbGVtLl9wb3MpOw0KICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtLl9pbmRleCArPSBjdXJyZW50RWxlbS5faW5kZXg7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRleHRPblBhdGgoY3VycmVudEVsZW0pIHsNCiAgICAgICAgICAgICAgICAgIGxldCBwYXRoT2JqZWN0ID0gY3VycmVudEVsZW0ucGF0aE9iamVjdCwNCiAgICAgICAgICAgICAgICAgICAgICBwYXRoTGVuZ3RoID0gY3VycmVudEVsZW0ucGF0aExlbmd0aCwNCiAgICAgICAgICAgICAgICAgICAgICBwYXRoU2NhbGUgPSBjdXJyZW50RWxlbS5wYXRoU2NhbGU7DQogICAgICAgICAgICAgICAgICBpZiAocGF0aE9iamVjdCkgew0KICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dE9mZnNldCA9IGN1cnJlbnRFbGVtLmdldExlbmd0aCgnc3RhcnRPZmZzZXQnLCBwYXRoTGVuZ3RoLCAwKTsNCiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjdXJyZW50RWxlbS5fcG9zLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJNaWRYID0gdGV4dE9mZnNldCArIGN1cnJlbnRFbGVtLl9wb3Nbal0ueCArIDAuNSAqIGN1cnJlbnRFbGVtLl9wb3Nbal0ud2lkdGg7DQogICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJNaWRYID4gcGF0aExlbmd0aCB8fCBjaGFyTWlkWCA8IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtLl9wb3Nbal0uaGlkZGVuID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvaW50T25QYXRoID0gcGF0aE9iamVjdC5nZXRQb2ludEF0TGVuZ3RoKGNoYXJNaWRYICogcGF0aFNjYWxlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05vdEVxdWFsKHBhdGhTY2FsZSwgMSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX3Bvc1tqXS5zY2FsZSAqPSBwYXRoU2NhbGU7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtLl9wb3Nbal0ud2lkdGggKj0gcGF0aFNjYWxlOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX3Bvc1tqXS54ID0gcG9pbnRPblBhdGhbMF0gLSAwLjUgKiBjdXJyZW50RWxlbS5fcG9zW2pdLndpZHRoICogTWF0aC5jb3MocG9pbnRPblBhdGhbMl0pIC0gY3VycmVudEVsZW0uX3Bvc1tqXS55ICogTWF0aC5zaW4ocG9pbnRPblBhdGhbMl0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX3Bvc1tqXS55ID0gcG9pbnRPblBhdGhbMV0gLSAwLjUgKiBjdXJyZW50RWxlbS5fcG9zW2pdLndpZHRoICogTWF0aC5zaW4ocG9pbnRPblBhdGhbMl0pICsgY3VycmVudEVsZW0uX3Bvc1tqXS55ICogTWF0aC5jb3MocG9pbnRPblBhdGhbMl0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX3Bvc1tqXS5yb3RhdGUgPSBwb2ludE9uUGF0aFsyXSArIGN1cnJlbnRFbGVtLl9wb3Nbal0ucm90YXRlOw0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW0uX3Bvc1tqXS5jb250aW51b3VzID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGN1cnJlbnRFbGVtLl9wb3MubGVuZ3RoOyBqKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RWxlbS5fcG9zW2pdLmhpZGRlbiA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmVjdXJzaXZlKHRleHRQYXJlbnRFbGVtLCBudWxsKTsNCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHRQYXRocy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgdGV4dE9uUGF0aCh0ZXh0UGF0aHNbaV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfSkodGhpcyk7DQogICAgICAgICAgICAgIHRoaXMuZ2V0VHJhbnNmb3JtYXRpb24gPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ3RyYW5zZm9ybScpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICB0aGlzLmRyYXdJbkRvY3VtZW50ID0gZnVuY3Rpb24oaXNDbGlwLCBpc01hc2spIHsNCiAgICAgICAgICAgICAgICBkb2Muc2F2ZSgpOw0KICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKCk7DQogICAgICAgICAgICAgICAgdGhpcy5jbGlwKCk7DQogICAgICAgICAgICAgICAgbGV0IG1hc2tlZCA9IHRoaXMubWFzaygpLCBncm91cDsNCiAgICAgICAgICAgICAgICBpZiAobWFza2VkKSB7DQogICAgICAgICAgICAgICAgICBncm91cCA9IGRvY0JlZ2luR3JvdXAoZ2V0UGFnZUJCb3goKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRoaXMuZHJhd1RleHRJbkRvY3VtZW50KGlzQ2xpcCwgaXNNYXNrKTsNCiAgICAgICAgICAgICAgICBpZiAoZ3JvdXApIHsNCiAgICAgICAgICAgICAgICAgIGRvY0VuZEdyb3VwKGdyb3VwKTsNCiAgICAgICAgICAgICAgICAgIGRvY0luc2VydEdyb3VwKGdyb3VwKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZG9jLnJlc3RvcmUoKTsNCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9Ow0KICAgICAgICAgICAgdmFyIHB4VG9QdCA9IG9wdGlvbnMuYXNzdW1lUHQgPyAxIDogKDcyLzk2KSwgLy8gMXB4ID0gNzIvOTZwdCwgYnV0IG9ubHkgaWYgYXNzdW1lUHQgaXMgZmFsc2UNCiAgICAgICAgICAgICAgICB2aWV3cG9ydFdpZHRoID0gKG9wdGlvbnMud2lkdGggfHwgZG9jLnBhZ2Uud2lkdGgpIC8gcHhUb1B0LA0KICAgICAgICAgICAgICAgIHZpZXdwb3J0SGVpZ2h0ID0gKG9wdGlvbnMuaGVpZ2h0IHx8IGRvYy5wYWdlLmhlaWdodCkgLyBweFRvUHQsDQogICAgICAgICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbyA9IG9wdGlvbnMucHJlc2VydmVBc3BlY3RSYXRpbyB8fCBudWxsLCAvLyBkZWZhdWx0IHRvIG51bGwgc28gdGhhdCB0aGUgYXR0ciBjYW4gb3ZlcnJpZGUgaWYgbm90IHBhc3NlZA0KICAgICAgICAgICAgICAgIHVzZUNTUyA9IG9wdGlvbnMudXNlQ1NTICYmIHR5cGVvZiBTVkdFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBzdmcgaW5zdGFuY2VvZiBTVkdFbGVtZW50ICYmIHR5cGVvZiBnZXRDb21wdXRlZFN0eWxlID09PSAnZnVuY3Rpb24nLA0KICAgICAgICAgICAgICAgIHdhcm5pbmdDYWxsYmFjayA9IG9wdGlvbnMud2FybmluZ0NhbGxiYWNrLA0KICAgICAgICAgICAgICAgIGZvbnRDYWxsYmFjayA9IG9wdGlvbnMuZm9udENhbGxiYWNrLA0KICAgICAgICAgICAgICAgIGltYWdlQ2FsbGJhY2sgPSBvcHRpb25zLmltYWdlQ2FsbGJhY2ssDQogICAgICAgICAgICAgICAgY29sb3JDYWxsYmFjayA9IG9wdGlvbnMuY29sb3JDYWxsYmFjaywNCiAgICAgICAgICAgICAgICBkb2N1bWVudENhbGxiYWNrID0gb3B0aW9ucy5kb2N1bWVudENhbGxiYWNrLA0KICAgICAgICAgICAgICAgIHByZWNpc2lvbiA9IE1hdGguY2VpbChNYXRoLm1heCgxLCBvcHRpb25zLnByZWNpc2lvbikpIHx8IDMsDQogICAgICAgICAgICAgICAgZ3JvdXBTdGFjayA9IFtdLA0KICAgICAgICAgICAgICAgIGRvY3VtZW50Q2FjaGUgPSB7fSwNCiAgICAgICAgICAgICAgICBsaW5rcyA9IFtdLA0KICAgICAgICAgICAgICAgIHN0eWxlUnVsZXMgPSBbXTsNCg0KICAgICAgICAgICAgaWYgKHR5cGVvZiB3YXJuaW5nQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHsNCiAgICAgICAgICAgICAgd2FybmluZ0NhbGxiYWNrID0gZnVuY3Rpb24oc3RyKSB7DQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gJ2Z1bmN0aW9uJykge2NvbnNvbGUud2FybihzdHIpO30NCiAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICh0eXBlb2YgZm9udENhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7DQogICAgICAgICAgICAgIGZvbnRDYWxsYmFjayA9IGZ1bmN0aW9uKGZhbWlseSwgYm9sZCwgaXRhbGljLCBmb250T3B0aW9ucykgew0KICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBmb250IGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBpbiB0aGUgZG9jdW1lbnQNCiAgICAgICAgICAgICAgICBpZiAoYm9sZCAmJiBpdGFsaWMpIHsNCiAgICAgICAgICAgICAgICAgIGlmIChkb2MuX3JlZ2lzdGVyZWRGb250cy5oYXNPd25Qcm9wZXJ0eShmYW1pbHkgKyAnLUJvbGRJdGFsaWMnKSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFtaWx5ICsgJy1Cb2xkSXRhbGljJzsNCiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jLl9yZWdpc3RlcmVkRm9udHMuaGFzT3duUHJvcGVydHkoZmFtaWx5ICsgJy1JdGFsaWMnKSkgew0KICAgICAgICAgICAgICAgICAgICBmb250T3B0aW9ucy5mYXV4Qm9sZCA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYW1pbHkgKyAnLUl0YWxpYyc7DQogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRvYy5fcmVnaXN0ZXJlZEZvbnRzLmhhc093blByb3BlcnR5KGZhbWlseSArICctQm9sZCcpKSB7DQogICAgICAgICAgICAgICAgICAgIGZvbnRPcHRpb25zLmZhdXhJdGFsaWMgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFtaWx5ICsgJy1Cb2xkJzsNCiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jLl9yZWdpc3RlcmVkRm9udHMuaGFzT3duUHJvcGVydHkoZmFtaWx5KSkgew0KICAgICAgICAgICAgICAgICAgICBmb250T3B0aW9ucy5mYXV4Qm9sZCA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIGZvbnRPcHRpb25zLmZhdXhJdGFsaWMgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFtaWx5Ow0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoYm9sZCAmJiAhaXRhbGljKSB7DQogICAgICAgICAgICAgICAgICBpZiAoZG9jLl9yZWdpc3RlcmVkRm9udHMuaGFzT3duUHJvcGVydHkoZmFtaWx5ICsgJy1Cb2xkJykpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbWlseSArICctQm9sZCc7DQogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRvYy5fcmVnaXN0ZXJlZEZvbnRzLmhhc093blByb3BlcnR5KGZhbWlseSkpIHsNCiAgICAgICAgICAgICAgICAgICAgZm9udE9wdGlvbnMuZmF1eEJvbGQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFtaWx5Ow0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIWJvbGQgJiYgaXRhbGljKSB7DQogICAgICAgICAgICAgICAgICBpZiAoZG9jLl9yZWdpc3RlcmVkRm9udHMuaGFzT3duUHJvcGVydHkoZmFtaWx5ICsgJy1JdGFsaWMnKSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFtaWx5ICsgJy1JdGFsaWMnOw0KICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2MuX3JlZ2lzdGVyZWRGb250cy5oYXNPd25Qcm9wZXJ0eShmYW1pbHkpKSB7DQogICAgICAgICAgICAgICAgICAgIGZvbnRPcHRpb25zLmZhdXhJdGFsaWMgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFtaWx5Ow0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIWJvbGQgJiYgIWl0YWxpYykgew0KICAgICAgICAgICAgICAgICAgaWYgKGRvYy5fcmVnaXN0ZXJlZEZvbnRzLmhhc093blByb3BlcnR5KGZhbWlseSkpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbWlseTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gVXNlIHN0YW5kYXJkIGZvbnRzIGFzIGZhbGxiYWNrDQogICAgICAgICAgICAgICAgaWYgKGZhbWlseS5tYXRjaCgvKD86XnwsKVxzKnNlcmlmXHMqJC8pKSB7DQogICAgICAgICAgICAgICAgICBpZiAoYm9sZCAmJiBpdGFsaWMpIHtyZXR1cm4gJ1RpbWVzLUJvbGRJdGFsaWMnO30NCiAgICAgICAgICAgICAgICAgIGlmIChib2xkICYmICFpdGFsaWMpIHtyZXR1cm4gJ1RpbWVzLUJvbGQnO30NCiAgICAgICAgICAgICAgICAgIGlmICghYm9sZCAmJiBpdGFsaWMpIHtyZXR1cm4gJ1RpbWVzLUl0YWxpYyc7fQ0KICAgICAgICAgICAgICAgICAgaWYgKCFib2xkICYmICFpdGFsaWMpIHtyZXR1cm4gJ1RpbWVzLVJvbWFuJzt9DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmYW1pbHkubWF0Y2goLyg/Ol58LClccyptb25vc3BhY2VccyokLykpIHsNCiAgICAgICAgICAgICAgICAgIGlmIChib2xkICYmIGl0YWxpYykge3JldHVybiAnQ291cmllci1Cb2xkT2JsaXF1ZSc7fQ0KICAgICAgICAgICAgICAgICAgaWYgKGJvbGQgJiYgIWl0YWxpYykge3JldHVybiAnQ291cmllci1Cb2xkJzt9DQogICAgICAgICAgICAgICAgICBpZiAoIWJvbGQgJiYgaXRhbGljKSB7cmV0dXJuICdDb3VyaWVyLU9ibGlxdWUnO30NCiAgICAgICAgICAgICAgICAgIGlmICghYm9sZCAmJiAhaXRhbGljKSB7cmV0dXJuICdDb3VyaWVyJzt9DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmYW1pbHkubWF0Y2goLyg/Ol58LClccypzYW5zLXNlcmlmXHMqJC8pIHx8IHRydWUpIHsNCiAgICAgICAgICAgICAgICAgIGlmIChib2xkICYmIGl0YWxpYykge3JldHVybiAnSGVsdmV0aWNhLUJvbGRPYmxpcXVlJzt9DQogICAgICAgICAgICAgICAgICBpZiAoYm9sZCAmJiAhaXRhbGljKSB7cmV0dXJuICdIZWx2ZXRpY2EtQm9sZCc7fQ0KICAgICAgICAgICAgICAgICAgaWYgKCFib2xkICYmIGl0YWxpYykge3JldHVybiAnSGVsdmV0aWNhLU9ibGlxdWUnO30NCiAgICAgICAgICAgICAgICAgIGlmICghYm9sZCAmJiAhaXRhbGljKSB7cmV0dXJuICdIZWx2ZXRpY2EnO30NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAodHlwZW9mIGltYWdlQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHsNCiAgICAgICAgICAgICAgaW1hZ2VDYWxsYmFjayA9IGZ1bmN0aW9uKGxpbmspIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbGluay5yZXBsYWNlKC9ccysvZywgJycpOw0KICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2xvckNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7DQogICAgICAgICAgICAgIGNvbG9yQ2FsbGJhY2sgPSBudWxsOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgZm9yIChsZXQgY29sb3IgaW4gRGVmYXVsdENvbG9ycykgew0KICAgICAgICAgICAgICAgIGxldCBuZXdDb2xvciA9IGNvbG9yQ2FsbGJhY2soRGVmYXVsdENvbG9yc1tjb2xvcl0pOw0KICAgICAgICAgICAgICAgIERlZmF1bHRDb2xvcnNbY29sb3JdWzBdID0gbmV3Q29sb3JbMF07DQogICAgICAgICAgICAgICAgRGVmYXVsdENvbG9yc1tjb2xvcl1bMV0gPSBuZXdDb2xvclsxXTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudENhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7DQogICAgICAgICAgICAgIGRvY3VtZW50Q2FsbGJhY2sgPSBudWxsOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAodHlwZW9mIHN2ZyA9PT0gJ3N0cmluZycpIHtzdmcgPSBwYXJzZVhtbChzdmcpO30NCiAgICAgICAgICAgIGlmIChzdmcpIHsNCiAgICAgICAgICAgICAgbGV0IHN0eWxlcyA9IHN2Zy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTsNCiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICBzdHlsZVJ1bGVzID0gc3R5bGVSdWxlcy5jb25jYXQocGFyc2VTdHlsZVNoZWV0KHN0eWxlc1tpXS50ZXh0Q29udGVudCkpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIGxldCBlbGVtID0gY3JlYXRlU1ZHRWxlbWVudChzdmcsIG51bGwpOw0KICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW0uZHJhd0luRG9jdW1lbnQgPT09ICdmdW5jdGlvbicpIHsNCiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy51c2VDU1MgJiYgIXVzZUNTUykgew0KICAgICAgICAgICAgICAgICAgd2FybmluZ0NhbGxiYWNrKCdTVkd0b1BERjogdXNlQ1NTIG9wdGlvbiBjYW4gb25seSBiZSB1c2VkIGZvciBTVkcgKmVsZW1lbnRzKiBpbiBjb21wYXRpYmxlIGJyb3dzZXJzJyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGxldCBzYXZlZEZpbGxDb2xvciA9IGRvYy5fZmlsbENvbG9yOw0KICAgICAgICAgICAgICAgIGRvYy5zYXZlKCkudHJhbnNsYXRlKHggfHwgMCwgeSB8fCAwKS5zY2FsZShweFRvUHQpOw0KICAgICAgICAgICAgICAgIGVsZW0uZHJhd0luRG9jdW1lbnQoKTsNCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICBkb2MucGFnZS5hbm5vdGF0aW9ucy5wdXNoKGxpbmtzW2ldKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZG9jLnJlc3RvcmUoKTsNCiAgICAgICAgICAgICAgICBkb2MuX2ZpbGxDb2xvciA9IHNhdmVkRmlsbENvbG9yOw0KICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHdhcm5pbmdDYWxsYmFjaygnU1ZHdG9QREY6IHRoaXMgZWxlbWVudCBjYW5cJ3QgYmUgcmVuZGVyZWQgZGlyZWN0bHk6ICcgKyBzdmcubm9kZU5hbWUpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICB3YXJuaW5nQ2FsbGJhY2soJ1NWR3RvUERGOiB0aGUgaW5wdXQgZG9lcyBub3QgbG9vayBsaWtlIGEgdmFsaWQgU1ZHJyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgfTsNCg0KICAgICAgICBpZiAoIG1vZHVsZSAmJiAnb2JqZWN0JyAhPT0gJ3VuZGVmaW5lZCcpIHsNCiAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IFNWR3RvUERGOw0KICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vLyA8cmVmZXJlbmNlIGxpYj0id2Vid29ya2VyIiAvPgogICAgICAgIGNvbnN0IHJlYWREYXRhID0gKGRhdGEsIHR5cGUpID0+IHsKICAgICAgICAgICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7IC8vIGJsb2IKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZWFkZXIucmVzdWx0OwogICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZWFkZXIub25lcnJvciA9IHJlamVjdDsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RhdGFVcmwnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7IC8vIGJ1ZmZlcgogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdkYXRhVXJsJykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyBkYXRhLnRvU3RyaW5nKCdiYXNlNjQnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCd1dGYtOCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAvKioKICAgICAgICAgKiBAcGxhdGZvcm0gYnJvd3NlcgogICAgICAgICAqLwogICAgICAgIGNvbnN0IGZldGNoQmxvYiA9IChpbWdVcmwpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgICAgICBjb25zdCByID0geWllbGQgZmV0Y2goaW1nVXJsLCB7CiAgICAgICAgICAgICAgICBjYWNoZTogJ25vLWNhY2hlJywKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiByLmJsb2IoKTsKICAgICAgICB9KTsKICAgICAgICAvKioKICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgICAqIGltcG9ydCB7IFBERldvcmtlciB9IGZyb20gJy4uL2Rpc3QvY2FjaGUvd29ya2VyJwogICAgICAgICAqIGNvbnN0IHsgZ2VuZXJhdGVQREYgfSA9IFBERldvcmtlcigpCiAgICAgICAgICogY29uc3QgcGRmRGF0YSA9IGF3YWl0IGdlbmVyYXRlUERGKC4uLikKICAgICAgICAgKi8KICAgICAgICBjb25zdCBnZW5lcmF0ZVBERiA9IChpbWdCbG9icywgaW1nVHlwZSwgd2lkdGgsIGhlaWdodCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUKICAgICAgICAgICAgY29uc3QgcGRmID0gbmV3IFBERkRvY3VtZW50KHsKICAgICAgICAgICAgICAgIC8vIGNvbXByZXNzOiB0cnVlLAogICAgICAgICAgICAgICAgc2l6ZTogW3dpZHRoLCBoZWlnaHRdLAogICAgICAgICAgICAgICAgYXV0b0ZpcnN0UGFnZTogZmFsc2UsCiAgICAgICAgICAgICAgICBtYXJnaW46IDAsCiAgICAgICAgICAgICAgICBsYXlvdXQ6ICdwb3J0cmFpdCcsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAoaW1nVHlwZSA9PT0gJ3BuZycpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGltZ0RhdGFVcmxMaXN0ID0geWllbGQgUHJvbWlzZS5hbGwoaW1nQmxvYnMubWFwKGIgPT4gcmVhZERhdGEoYiwgJ2RhdGFVcmwnKSkpOwogICAgICAgICAgICAgICAgaW1nRGF0YVVybExpc3QuZm9yRWFjaCgoZGF0YSkgPT4gewogICAgICAgICAgICAgICAgICAgIHBkZi5hZGRQYWdlKCk7CiAgICAgICAgICAgICAgICAgICAgcGRmLmltYWdlKGRhdGEsIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgeyAvLyBpbWdUeXBlID09ICJzdmciCiAgICAgICAgICAgICAgICBjb25zdCBzdmdMaXN0ID0geWllbGQgUHJvbWlzZS5hbGwoaW1nQmxvYnMubWFwKGIgPT4gcmVhZERhdGEoYiwgJ3RleHQnKSkpOwogICAgICAgICAgICAgICAgc3ZnTGlzdC5mb3JFYWNoKChzdmcpID0+IHsKICAgICAgICAgICAgICAgICAgICBwZGYuYWRkUGFnZSgpOwogICAgICAgICAgICAgICAgICAgIHNvdXJjZShwZGYsIHN2ZywgMCwgMCwgewogICAgICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBAdHMtaWdub3JlCiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IHlpZWxkIHBkZi5nZXRCdWZmZXIoKTsKICAgICAgICAgICAgcmV0dXJuIGJ1Zi5idWZmZXI7CiAgICAgICAgfSk7CiAgICAgICAgLyoqCiAgICAgICAgICogQHBsYXRmb3JtIGJyb3dzZXIgKHdlYiB3b3JrZXIpCiAgICAgICAgICovCiAgICAgICAgaWYgKHR5cGVvZiBvbm1lc3NhZ2UgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIG9ubWVzc2FnZSA9IChlKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICAgICAgICAgIGNvbnN0IFtpbWdVcmxzLCBpbWdUeXBlLCB3aWR0aCwgaGVpZ2h0LF0gPSBlLmRhdGE7CiAgICAgICAgICAgICAgICBjb25zdCBpbWdCbG9icyA9IHlpZWxkIFByb21pc2UuYWxsKGltZ1VybHMubWFwKHVybCA9PiBmZXRjaEJsb2IodXJsKSkpOwogICAgICAgICAgICAgICAgY29uc3QgcGRmQnVmID0geWllbGQgZ2VuZXJhdGVQREYoaW1nQmxvYnMsIGltZ1R5cGUsIHdpZHRoLCBoZWlnaHQpOwogICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UocGRmQnVmLCBbcGRmQnVmXSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZXhwb3J0cy5nZW5lcmF0ZVBERiA9IGdlbmVyYXRlUERGOwoKICAgICAgICByZXR1cm4gZXhwb3J0czsKCiAgICB9KHt9KSk7CiAgICByZXR1cm4gd29ya2VyCiAgICB9OwoKICAgIGNvbnN0IHNjcmlwdFVybEZyb21GdW5jdGlvbiA9IChmbikgPT4gewogICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbJygnICsgZm4udG9TdHJpbmcoKSArICcpKCknXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcgfSk7CiAgICAgICAgcmV0dXJuIHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgfTsKICAgIC8vIE5vZGUuanMgZml4CiAgICBpZiAodHlwZW9mIFdvcmtlciA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBnbG9iYWxUaGlzLldvcmtlciA9IGNsYXNzIHsKICAgICAgICB9OyAvLyBub29wIHNoaW0KICAgIH0KICAgIGNsYXNzIFBERldvcmtlckhlbHBlciBleHRlbmRzIFdvcmtlciB7CiAgICAgICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgICAgIGNvbnN0IHVybCA9IHNjcmlwdFVybEZyb21GdW5jdGlvbihQREZXb3JrZXIpOwogICAgICAgICAgICBzdXBlcih1cmwpOwogICAgICAgIH0KICAgICAgICBnZW5lcmF0ZVBERihpbWdVUkxzLCBpbWdUeXBlLCB3aWR0aCwgaGVpZ2h0KSB7CiAgICAgICAgICAgIGNvbnN0IG1zZyA9IFsKICAgICAgICAgICAgICAgIGltZ1VSTHMsCiAgICAgICAgICAgICAgICBpbWdUeXBlLAogICAgICAgICAgICAgICAgd2lkdGgsCiAgICAgICAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICAgIF07CiAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZSkgPT4gewogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZS5kYXRhKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CgogICAgLyogZXNsaW50LWRpc2FibGUgbm8tZXh0ZW5kLW5hdGl2ZSAqLwogICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlcyAqLwogICAgLyoqCiAgICAgKiBtYWtlIGhvb2tlZCBtZXRob2RzICJuYXRpdmUiCiAgICAgKi8KICAgIGNvbnN0IG1ha2VOYXRpdmUgPSAoKCkgPT4gewogICAgICAgIGNvbnN0IGwgPSBuZXcgTWFwKCk7CiAgICAgICAgaG9va05hdGl2ZShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIChfdG9TdHJpbmcpID0+IHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmIChsLmhhcyh0aGlzKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IF9mbiA9IGwuZ2V0KHRoaXMpIHx8IHBhcnNlSW50OyAvLyAiZnVuY3Rpb24gKCkge1xuICAgIFtuYXRpdmUgY29kZV1cbn0iCiAgICAgICAgICAgICAgICAgICAgaWYgKGwuaGFzKF9mbikpIHsgLy8gbmVzdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfZm4udG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChfZm4pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbCh0aGlzKTsKICAgICAgICAgICAgfTsKICAgICAgICB9LCB0cnVlKTsKICAgICAgICByZXR1cm4gKGZuLCBvcmlnaW5hbCkgPT4gewogICAgICAgICAgICBsLnNldChmbiwgb3JpZ2luYWwpOwogICAgICAgIH07CiAgICB9KSgpOwogICAgZnVuY3Rpb24gaG9va05hdGl2ZSh0YXJnZXQsIG1ldGhvZCwgaG9vaywgYXN5bmMgPSBmYWxzZSkgewogICAgICAgIC8vIHJlc2VydmUgZm9yIGZ1dHVyZSBob29rIHVwZGF0ZQogICAgICAgIGNvbnN0IF9mbiA9IHRhcmdldFttZXRob2RdOwogICAgICAgIGNvbnN0IGRldGFjaCA9ICgpID0+IHsKICAgICAgICAgICAgdGFyZ2V0W21ldGhvZF0gPSBfZm47IC8vIGRldGFjaAogICAgICAgIH07CiAgICAgICAgLy8gVGhpcyBzY3JpcHQgY2FuIHJ1biBiZWZvcmUgYW55dGhpbmcgb24gdGhlIHBhZ2UsICAKICAgICAgICAvLyBzbyBzZXR0aW5nIHRoaXMgZnVuY3Rpb24gdG8gYmUgbm9uLWNvbmZpZ3VyYWJsZSBhbmQgbm9uLXdyaXRhYmxlIGlzIG5vIHVzZS4KICAgICAgICBjb25zdCBob29rZWRGbiA9IGhvb2soX2ZuLCBkZXRhY2gpOwogICAgICAgIHRhcmdldFttZXRob2RdID0gaG9va2VkRm47CiAgICAgICAgaWYgKCFhc3luYykgewogICAgICAgICAgICBtYWtlTmF0aXZlKGhvb2tlZEZuLCBfZm4pOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICBtYWtlTmF0aXZlKGhvb2tlZEZuLCBfZm4pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CgogICAgY29uc3QgVFlQRV9SRUcgPSAvdHlwZT0oaW1nfG1wM3xtaWRpKS87CiAgICAvKioKICAgICAqIEkga25vdyB0aGlzIGlzIHN1cGVyIGhhY2t5LgogICAgICovCiAgICBjb25zdCBtYWdpY0hvb2tDb25zdHIgPSAoKCkgPT4gewogICAgICAgIGNvbnN0IGwgPSB7fTsKICAgICAgICBpZiAoZGV0ZWN0Tm9kZSkgeyAvLyBub29wIGluIENMSQogICAgICAgICAgICByZXR1cm4gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCcnKTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgY29uc3QgcCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihkb2N1bWVudC5ib2R5KTsKICAgICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGRvY3VtZW50LmJvZHksIG51bGwpOwogICAgICAgICAgICBob29rTmF0aXZlKGRvY3VtZW50LmJvZHksICdhcHBlbmQnLCAoKSA9PiB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLm5vZGVzKSB7CiAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmQuY2FsbCh0aGlzLCAuLi5ub2Rlcyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVzWzBdLm5vZGVOYW1lID09PSAnSUZSQU1FJykgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpZnJhbWUgPSBub2Rlc1swXTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdyA9IGlmcmFtZS5jb250ZW50V2luZG93OwogICAgICAgICAgICAgICAgICAgICAgICBob29rTmF0aXZlKHcsICdmZXRjaCcsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodXJsLCBpbml0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IChfYSA9IGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5oZWFkZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuQXV0aG9yaXphdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gJ3N0cmluZycgJiYgdG9rZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbSA9IHVybC5tYXRjaChUWVBFX1JFRyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcodXJsLCB0b2tlbiwgbSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gbVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYiA9IGxbdHlwZV0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKGwsIHRva2VuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2godXJsLCBpbml0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZG9jdW1lbnQuYm9keSwgcCk7CiAgICAgICAgfQogICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gKHR5cGUpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICAgICAgICAgIGxbdHlwZV0gPSAodG9rZW4pID0+IHsKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRva2VuKTsKICAgICAgICAgICAgICAgICAgICBtYWdpY3NbdHlwZV0gPSB0b2tlbjsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfSkoKTsKICAgIGNvbnN0IG1hZ2ljcyA9IHsKICAgICAgICBpbWc6IG1hZ2ljSG9va0NvbnN0cignaW1nJyksCiAgICAgICAgbWlkaTogbWFnaWNIb29rQ29uc3RyKCdtaWRpJyksCiAgICAgICAgbXAzOiBtYWdpY0hvb2tDb25zdHIoJ21wMycpLAogICAgfTsKCiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1leHRlbmQtbmF0aXZlICovCiAgICBjb25zdCBnZXRBcGlVcmwgPSAoaWQsIHR5cGUsIGluZGV4KSA9PiB7CiAgICAgICAgcmV0dXJuIGAvYXBpL2ptdXNlP2lkPSR7aWR9JnR5cGU9JHt0eXBlfSZpbmRleD0ke2luZGV4fSZ2Mj0xYDsKICAgIH07CiAgICAvKioKICAgICAqIGhhcmQtY29kZWQgYXV0aCB0b2tlbnMKICAgICAqLwogICAgY29uc3QgdXNlQnVpbHRpbkF1dGggPSAodHlwZSkgPT4gewogICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgICBjYXNlICdpbWcnOiByZXR1cm4gJzhjMDIyYmRlZjQ1MzQxMDc0Y2U4NzZhZTU3YTQ4ZjY0Yjg2Y2RjZjUnOwogICAgICAgICAgICBjYXNlICdtaWRpJzogcmV0dXJuICczOGZiOWVmYWFlNTFiMGM4M2I1YmI1NzkxYTY5OGI0ODI5MjEyOWU3JzsKICAgICAgICAgICAgY2FzZSAnbXAzJzogcmV0dXJuICc2Mzc5NGU1NDYxZTRjZmEwNDZlZGZiZGRkZmNjYzFhYzE2ZGFmZmQyJzsKICAgICAgICB9CiAgICB9OwogICAgY29uc3QgZ2V0QXBpQXV0aCA9ICh0eXBlLCBpbmRleCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgdmFyIF9hLCBfYiwgX2M7CiAgICAgICAgaWYgKGRldGVjdE5vZGUpIHsKICAgICAgICAgICAgLy8gd2UgY2Fubm90IGludGVyY2VwdCBBUEkgcmVxdWVzdHMgaW4gTm9kZS5qcyAoYXMgbm8gcmVxdWVzdHMgYXJlIHNlbnQpLCBzbyBnbyBzdHJhaWdodGZvcndhcmQgdG8gdGhlIGhhcmQtY29kZWQgdG9rZW5zCiAgICAgICAgICAgIHJldHVybiB1c2VCdWlsdGluQXV0aCh0eXBlKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWFnaWMgPSBtYWdpY3NbdHlwZV07CiAgICAgICAgaWYgKG1hZ2ljIGluc3RhbmNlb2YgUHJvbWlzZSkgewogICAgICAgICAgICAvLyBmb3JjZSB0byByZXRyaWV2ZSB0aGUgTUFHSUMKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pZGknOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZzQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uW3RpdGxlPSJUb2dnbGUgRnVsbHNjcmVlbiJdJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gKF9iID0gKF9hID0gZnNCdG4ucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhcmVudEVsZW1lbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWwuY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ21wMyc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b25bdGl0bGU9IlRvZ2dsZSBQbGF5Il0nKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWwuY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ltZyc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nRSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2ltZ1tzcmMqPXNjb3JlX10nKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dEUgPSAoX2MgPSBpbWdFID09PSBudWxsIHx8IGltZ0UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltZ0UucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLm5leHRFbGVtZW50U2libGluZzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEUuc2Nyb2xsSW50b1ZpZXcoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICAgICAgICAgIHJldHVybiB1c2VCdWlsdGluQXV0aCh0eXBlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4geWllbGQgdXNlVGltZW91dChtYWdpYywgNSAqIDEwMDAgLyogNXMgKi8pOwogICAgICAgIH0KICAgICAgICBjYXRjaCAoX2QpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcih0eXBlLCAndG9rZW4gdGltZW91dCcpOwogICAgICAgICAgICAvLyB0cnkgaGFyZC1jb2RlZCB0b2tlbnMKICAgICAgICAgICAgcmV0dXJuIHVzZUJ1aWx0aW5BdXRoKHR5cGUpOwogICAgICAgIH0KICAgIH0pOwogICAgY29uc3QgZ2V0RmlsZVVybCA9IChpZCwgdHlwZSwgaW5kZXggPSAwLCBfZmV0Y2ggPSBnZXRGZXRjaCgpKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBjb25zdCB1cmwgPSBnZXRBcGlVcmwoaWQsIHR5cGUsIGluZGV4KTsKICAgICAgICBjb25zdCBhdXRoID0geWllbGQgZ2V0QXBpQXV0aCh0eXBlKTsKICAgICAgICBjb25zdCByID0geWllbGQgX2ZldGNoKHVybCwgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBhdXRoLAogICAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgICAgIGNvbnN0IHsgaW5mbyB9ID0geWllbGQgci5qc29uKCk7CiAgICAgICAgcmV0dXJuIGluZm8udXJsOwogICAgfSk7CgogICAgY29uc3QgX2V4cG9ydFBERkJyb3dzZXIgPSAoaW1nVVJMcywgaW1nVHlwZSwgZGltZW5zaW9ucykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgY29uc3Qgd29ya2VyID0gbmV3IFBERldvcmtlckhlbHBlcigpOwogICAgICAgIGNvbnN0IHBkZkFycmF5QnVmZmVyID0geWllbGQgd29ya2VyLmdlbmVyYXRlUERGKGltZ1VSTHMsIGltZ1R5cGUsIGRpbWVuc2lvbnMud2lkdGgsIGRpbWVuc2lvbnMuaGVpZ2h0KTsKICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7CiAgICAgICAgcmV0dXJuIHBkZkFycmF5QnVmZmVyOwogICAgfSk7CiAgICBjb25zdCBfZXhwb3J0UERGTm9kZSA9IChpbWdVUkxzLCBpbWdUeXBlLCBkaW1lbnNpb25zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBjb25zdCBpbWdCdWZzID0geWllbGQgUHJvbWlzZS5hbGwoaW1nVVJMcy5tYXAodXJsID0+IGZldGNoQnVmZmVyKHVybCkpKTsKICAgICAgICBjb25zdCB7IGdlbmVyYXRlUERGIH0gPSBQREZXb3JrZXIoKTsKICAgICAgICBjb25zdCBwZGZBcnJheUJ1ZmZlciA9IHlpZWxkIGdlbmVyYXRlUERGKGltZ0J1ZnMsIGltZ1R5cGUsIGRpbWVuc2lvbnMud2lkdGgsIGRpbWVuc2lvbnMuaGVpZ2h0KTsKICAgICAgICByZXR1cm4gcGRmQXJyYXlCdWZmZXI7CiAgICB9KTsKICAgIGNvbnN0IGV4cG9ydFBERiA9IChzY29yZWluZm8sIHNoZWV0KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBjb25zdCBpbWdUeXBlID0gc2hlZXQuaW1nVHlwZTsKICAgICAgICBjb25zdCBwYWdlQ291bnQgPSBzaGVldC5wYWdlQ291bnQ7CiAgICAgICAgY29uc3QgcnMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBwYWdlQ291bnQgfSkubWFwKChfLCBpKSA9PiB7CiAgICAgICAgICAgIGlmIChpID09PSAwKSB7IC8vIFRoZSB1cmwgdG8gdGhlIGZpcnN0IHBhZ2UgaXMgc3RhdGljLiBXZSBkb24ndCBuZWVkIHRvIHVzZSBBUEkgdG8gb2J0YWluIGl0LgogICAgICAgICAgICAgICAgcmV0dXJuIHNoZWV0LnRodW1ibmFpbFVybDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsgLy8gb2J0YWluIGltYWdlIHVybHMgdXNpbmcgdGhlIEFQSQogICAgICAgICAgICAgICAgcmV0dXJuIGdldEZpbGVVcmwoc2NvcmVpbmZvLmlkLCAnaW1nJywgaSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBjb25zdCBzaGVldEltZ1VSTHMgPSB5aWVsZCBQcm9taXNlLmFsbChycyk7CiAgICAgICAgY29uc3QgYXJncyA9IFtzaGVldEltZ1VSTHMsIGltZ1R5cGUsIHNoZWV0LmRpbWVuc2lvbnNdOwogICAgICAgIGlmICghZGV0ZWN0Tm9kZSkgewogICAgICAgICAgICByZXR1cm4gX2V4cG9ydFBERkJyb3dzZXIoLi4uYXJncyk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gX2V4cG9ydFBERk5vZGUoLi4uYXJncyk7CiAgICAgICAgfQogICAgfSk7CiAgICBsZXQgcGRmQmxvYjsKICAgIGNvbnN0IGRvd25sb2FkUERGID0gKHNjb3JlaW5mbywgc2hlZXQsIHNhdmVBcykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgY29uc3QgbmFtZSA9IHNjb3JlaW5mby5maWxlTmFtZTsKICAgICAgICBpZiAocGRmQmxvYikgewogICAgICAgICAgICByZXR1cm4gc2F2ZUFzKHBkZkJsb2IsIGAke25hbWV9LnBkZmApOwogICAgICAgIH0KICAgICAgICBjb25zdCBwZGZBcnJheUJ1ZmZlciA9IHlpZWxkIGV4cG9ydFBERihzY29yZWluZm8sIHNoZWV0KTsKICAgICAgICBwZGZCbG9iID0gbmV3IEJsb2IoW3BkZkFycmF5QnVmZmVyXSk7CiAgICAgICAgc2F2ZUFzKHBkZkJsb2IsIGAke25hbWV9LnBkZmApOwogICAgfSk7CgogICAgY29uc3QgTVNDWl9CVUZfU1lNID0gU3ltYm9sKCdtc2N6QnVmZmVyUCcpOwogICAgY29uc3QgTVNDWl9VUkxfU1lNID0gU3ltYm9sKCdtc2N6VXJsJyk7CiAgICBjb25zdCBNQUlOX0NJRF9TWU0gPSBTeW1ib2woJ21haW5DaWQnKTsKICAgIGNvbnN0IElQTlNfS0VZID0gJ1FtU2RYdHZ6Qzh2OGlUVFp1ajVjVm1pdWduemJSMVFBVFlSY0dpeDRiQnNpb1AnOwogICAgY29uc3QgSVBOU19SU19VUkwgPSBgaHR0cHM6Ly9pcGZzLmlvL2FwaS92MC9kYWcvcmVzb2x2ZT9hcmc9L2lwbnMvJHtJUE5TX0tFWX1gOwogICAgY29uc3QgZ2V0TWFpbkNpZCA9IChzY29yZWluZm8sIF9mZXRjaCA9IGdldEZldGNoKCkpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgIC8vIGxvb2sgZm9yIHRoZSBwZXJzaXN0ZWQgbXNjelVybCBpbnNpZGUgc2NvcmVpbmZvCiAgICAgICAgbGV0IHJlc3VsdCA9IHNjb3JlaW5mby5zdG9yZS5nZXQoTUFJTl9DSURfU1lNKTsKICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHIgPSB5aWVsZCBfZmV0Y2goSVBOU19SU19VUkwpOwogICAgICAgIGFzc2VydFJlcyhyKTsKICAgICAgICBjb25zdCBqc29uID0geWllbGQgci5qc29uKCk7CiAgICAgICAgcmVzdWx0ID0ganNvbi5DaWRbJy8nXTsKICAgICAgICBzY29yZWluZm8uc3RvcmUuc2V0KE1BSU5fQ0lEX1NZTSwgcmVzdWx0KTsgLy8gcGVyc2lzdCB0byBzY29yZWluZm8KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfSk7CiAgICBjb25zdCBsb2FkTXNjelVybCA9IChzY29yZWluZm8sIF9mZXRjaCA9IGdldEZldGNoKCkpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgIC8vIGxvb2sgZm9yIHRoZSBwZXJzaXN0ZWQgbXNjelVybCBpbnNpZGUgc2NvcmVpbmZvCiAgICAgICAgbGV0IHJlc3VsdCA9IHNjb3JlaW5mby5zdG9yZS5nZXQoTVNDWl9VUkxfU1lNKTsKICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1haW5DaWQgPSB5aWVsZCBnZXRNYWluQ2lkKHNjb3JlaW5mbywgX2ZldGNoKTsKICAgICAgICBjb25zdCB1cmwgPSBzY29yZWluZm8uZ2V0TXNjekNpZFVybChtYWluQ2lkKTsKICAgICAgICBjb25zdCByMCA9IHlpZWxkIF9mZXRjaCh1cmwpOwogICAgICAgIC8vIGlwZnMtaHR0cC1nYXRld2F5IHNwZWNpZmljIGVycm9yCiAgICAgICAgLy8gbWF5IHJlYWQgZnVydGhlciBlcnJvciBtc2cgYXMganNvbgogICAgICAgIGlmIChyMC5zdGF0dXMgIT09IDUwMCkgewogICAgICAgICAgICBhc3NlcnRSZXMocjApOwogICAgICAgIH0KICAgICAgICBjb25zdCBjaWRSZXMgPSB5aWVsZCByMC5qc29uKCk7CiAgICAgICAgY29uc3QgY2lkID0gY2lkUmVzLktleTsKICAgICAgICBpZiAoIWNpZCkgewogICAgICAgICAgICAvLyByZWFkIGZ1cnRoZXIgZXJyb3IgbXNnCiAgICAgICAgICAgIGNvbnN0IGVyciA9IGNpZFJlcy5NZXNzYWdlOwogICAgICAgICAgICBpZiAoZXJyLmluY2x1ZGVzKCdubyBsaW5rIG5hbWVkJykpIHsgLy8gZmlsZSBub3QgZm91bmQKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2NvcmUgbm90IGluIGRhdGFzZXQnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJlc3VsdCA9IGBodHRwczovL2lwZnMuaW5mdXJhLmlvL2lwZnMvJHtjaWR9YDsKICAgICAgICBzY29yZWluZm8uc3RvcmUuc2V0KE1TQ1pfVVJMX1NZTSwgcmVzdWx0KTsgLy8gcGVyc2lzdCB0byBzY29yZWluZm8KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfSk7CiAgICBjb25zdCBmZXRjaE1zY3ogPSAoc2NvcmVpbmZvLCBfZmV0Y2ggPSBnZXRGZXRjaCgpKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBsZXQgbXNjekJ1ZmZlclAgPSBzY29yZWluZm8uc3RvcmUuZ2V0KE1TQ1pfQlVGX1NZTSk7CiAgICAgICAgaWYgKCFtc2N6QnVmZmVyUCkgewogICAgICAgICAgICBtc2N6QnVmZmVyUCA9ICgoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IHlpZWxkIGxvYWRNc2N6VXJsKHNjb3JlaW5mbywgX2ZldGNoKTsKICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB5aWVsZCBfZmV0Y2godXJsKTsKICAgICAgICAgICAgICAgIGFzc2VydFJlcyhyKTsKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCByLmFycmF5QnVmZmVyKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICAgICAgfSkpKCk7CiAgICAgICAgICAgIHNjb3JlaW5mby5zdG9yZS5zZXQoTVNDWl9CVUZfU1lNLCBtc2N6QnVmZmVyUCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBtc2N6QnVmZmVyUDsKICAgIH0pOwogICAgY29uc3QgZG93bmxvYWRNc2N6ID0gKHNjb3JlaW5mbywgc2F2ZUFzKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBjb25zdCBkYXRhID0gbmV3IEJsb2IoW3lpZWxkIGZldGNoTXNjeihzY29yZWluZm8pXSk7CiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBzY29yZWluZm8uZmlsZU5hbWU7CiAgICAgICAgc2F2ZUFzKGRhdGEsIGAke2ZpbGVuYW1lfS5tc2N6YCk7CiAgICB9KTsKCiAgICAvKioKICAgICAqIHR5cGUgY2hlY2tpbmcgb25seSBzbyBubyBtaXNzaW5nIGtleXMKICAgICAqLwogICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxlKG9iaikgewogICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKG9iaik7CiAgICB9CgogICAgdmFyIGVuID0gY3JlYXRlTG9jYWxlKHsKICAgICAgICAnUFJPQ0VTU0lORycoKSB7CiAgICAgICAgICAgIHJldHVybiAnUHJvY2Vzc2luZ+KApic7CiAgICAgICAgfSwKICAgICAgICAnQlROX0VSUk9SJygpIHsKICAgICAgICAgICAgcmV0dXJuICfinYxEb3dubG9hZCBGYWlsZWQhJzsKICAgICAgICB9LAogICAgICAgICdERVBSRUNBVElPTl9OT1RJQ0UnKGJ0bk5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIGBERVBSRUNBVEVEIVxuVXNlIFxgJHtidG5OYW1lfVxgIGluc2lkZSBcYEluZGl2aWR1YWwgUGFydHNcYCBpbnN0ZWFkLlxuKFRoaXMgbWF5IHN0aWxsIHdvcmsuIENsaWNrIFxgT0tcYCB0byBjb250aW51ZS4pYDsKICAgICAgICB9LAogICAgICAgICdET1dOTE9BRCcoZmlsZVR5cGUpIHsKICAgICAgICAgICAgcmV0dXJuIGBEb3dubG9hZCAke2ZpbGVUeXBlfWA7CiAgICAgICAgfSwKICAgICAgICAnRE9XTkxPQURfQVVESU8nKGZpbGVUeXBlKSB7CiAgICAgICAgICAgIHJldHVybiBgRG93bmxvYWQgJHtmaWxlVHlwZX0gQXVkaW9gOwogICAgICAgIH0sCiAgICAgICAgJ0lORF9QQVJUUycoKSB7CiAgICAgICAgICAgIHJldHVybiAnSW5kaXZpZHVhbCBQYXJ0cyc7CiAgICAgICAgfSwKICAgICAgICAnSU5EX1BBUlRTX1RPT0xUSVAnKCkgewogICAgICAgICAgICByZXR1cm4gJ0Rvd25sb2FkIGluZGl2aWR1YWwgcGFydHMgKEJFVEEpJzsKICAgICAgICB9LAogICAgICAgICdWSUVXX0lOX0xJQlJFU0NPUkUnKCkgewogICAgICAgICAgICByZXR1cm4gJ1ZpZXcgaW4gTGlicmVTY29yZSc7CiAgICAgICAgfSwKICAgICAgICAnRlVMTF9TQ09SRScoKSB7CiAgICAgICAgICAgIHJldHVybiAnRnVsbCBzY29yZSc7CiAgICAgICAgfSwKICAgIH0pOwoKICAgIHZhciBlcyA9IGNyZWF0ZUxvY2FsZSh7CiAgICAgICAgJ1BST0NFU1NJTkcnKCkgewogICAgICAgICAgICByZXR1cm4gJ0NhcmdhbmRv4oCmJzsKICAgICAgICB9LAogICAgICAgICdCVE5fRVJST1InKCkgewogICAgICAgICAgICByZXR1cm4gJ+KdjMKhRGVzY2FyZ2EgRmFsbGlkYSEnOwogICAgICAgIH0sCiAgICAgICAgJ0RFUFJFQ0FUSU9OX05PVElDRScoYnRuTmFtZSkgewogICAgICAgICAgICByZXR1cm4gYMKhT0JTT0xFVE8hXG5VdGlsaXphciBcYCR7YnRuTmFtZX1cYCBkZW50cm8gZGUgXGBQYXJ0ZXMgSW5kaXZkdWFsZXNcYCBlbiBzdSBsdWdhci5cbihFc3RvIHRvZGF2w61hIHB1ZWRlIGZ1bmNpb25hci4gUHVsc2EgXGBBY2VwdGFyXGAgcGFyYSBjb250aW51YXIuKWA7CiAgICAgICAgfSwKICAgICAgICAnRE9XTkxPQUQnKGZpbGVUeXBlKSB7CiAgICAgICAgICAgIHJldHVybiBgRGVzY2FyZ2FyICR7ZmlsZVR5cGV9YDsKICAgICAgICB9LAogICAgICAgICdET1dOTE9BRF9BVURJTycoZmlsZVR5cGUpIHsKICAgICAgICAgICAgcmV0dXJuIGBEZXNjYXJnYXIgQXVkaW8gJHtmaWxlVHlwZX1gOwogICAgICAgIH0sCiAgICAgICAgJ0lORF9QQVJUUycoKSB7CiAgICAgICAgICAgIHJldHVybiAnUGFydGVzIGluZGl2aWR1YWxlcyc7CiAgICAgICAgfSwKICAgICAgICAnSU5EX1BBUlRTX1RPT0xUSVAnKCkgewogICAgICAgICAgICByZXR1cm4gJ0Rlc2NhcmdhciBwYXJ0ZXMgaW5kaXZpZHVhbGVzIChCRVRBKSc7CiAgICAgICAgfSwKICAgICAgICAnVklFV19JTl9MSUJSRVNDT1JFJygpIHsKICAgICAgICAgICAgcmV0dXJuICdWaXN1YWxpemFyIGVuIExpYnJlU2NvcmUnOwogICAgICAgIH0sCiAgICAgICAgJ0ZVTExfU0NPUkUnKCkgewogICAgICAgICAgICByZXR1cm4gJ1BhcnRpdHVyYSBDb21wbGV0YSc7CiAgICAgICAgfSwKICAgIH0pOwoKICAgIHZhciBpdCA9IGNyZWF0ZUxvY2FsZSh7CiAgICAgICAgJ1BST0NFU1NJTkcnKCkgewogICAgICAgICAgICByZXR1cm4gJ0NhcmljYW1lbnRv4oCmJzsKICAgICAgICB9LAogICAgICAgICdCVE5fRVJST1InKCkgewogICAgICAgICAgICByZXR1cm4gJ+KdjERvd25sb2FkIEZhbGxpdG8hJzsKICAgICAgICB9LAogICAgICAgICdERVBSRUNBVElPTl9OT1RJQ0UnKGJ0bk5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIGDCoURFUFJFQ0FUTyFcblV0aWxpenphcmUgXGAke2J0bk5hbWV9XGAgYWxsJ2ludGVybm8gZGkgXGBQYXJ0aSBJbmRpdmR1YWxpXGAuXG4oUXVzdG8gcG90cmViYmUgZnVuemlvbmFyZS4gQ2xpY2NhcmUgXGBPa1xgIHBlciBjb250aW51YXJlLilgOwogICAgICAgIH0sCiAgICAgICAgJ0RPV05MT0FEJyhmaWxlVHlwZSkgewogICAgICAgICAgICByZXR1cm4gYFNjYXJpY2FyZSAke2ZpbGVUeXBlfWA7CiAgICAgICAgfSwKICAgICAgICAnRE9XTkxPQURfQVVESU8nKGZpbGVUeXBlKSB7CiAgICAgICAgICAgIHJldHVybiBgU2NhcmljYXJlICR7ZmlsZVR5cGV9IEF1ZGlvYDsKICAgICAgICB9LAogICAgICAgICdJTkRfUEFSVFMnKCkgewogICAgICAgICAgICByZXR1cm4gJ1BhcnRpIFNpbmdvbGUnOwogICAgICAgIH0sCiAgICAgICAgJ0lORF9QQVJUU19UT09MVElQJygpIHsKICAgICAgICAgICAgcmV0dXJuICdTY2FyaWNhcmUgUGFydGkgU2luZ29sZSAoQkVUQSknOwogICAgICAgIH0sCiAgICAgICAgJ1ZJRVdfSU5fTElCUkVTQ09SRScoKSB7CiAgICAgICAgICAgIHJldHVybiAnVmlzdWFsaXp6YXJlIGluIExpYnJlU2NvcmUnOwogICAgICAgIH0sCiAgICAgICAgJ0ZVTExfU0NPUkUnKCkgewogICAgICAgICAgICByZXR1cm4gJ1NwYXJ0aXRvIENvbXBsZXRvJzsKICAgICAgICB9LAogICAgfSk7CgogICAgdmFyIHpoID0gY3JlYXRlTG9jYWxlKHsKICAgICAgICAnUFJPQ0VTU0lORycoKSB7CiAgICAgICAgICAgIHJldHVybiAn5aSE55CG5Lit4oCmJzsKICAgICAgICB9LAogICAgICAgICdCVE5fRVJST1InKCkgewogICAgICAgICAgICByZXR1cm4gJ+KdjOS4i+i9veWksei0pSEnOwogICAgICAgIH0sCiAgICAgICAgJ0RFUFJFQ0FUSU9OX05PVElDRScoYnRuTmFtZSkgewogICAgICAgICAgICByZXR1cm4gYOS4jeW7uuiuruS9v+eUqFxu6K+35L2/55SoIFxg5Y2V54us5YiG6LCxXGAg6YeM55qEIFxgJHtidG5OYW1lfVxgIOaMiemSruS7o+abv1xu77yI6L+Z5Lmf6K645LuN5Lya6LW35L2c55So44CC5Y2V5Ye7XGDnoa7lrppcYOS7pee7p+e7reOAgu+8iWA7CiAgICAgICAgfSwKICAgICAgICAnRE9XTkxPQUQnKGZpbGVUeXBlKSB7CiAgICAgICAgICAgIHJldHVybiBg5LiL6L29ICR7ZmlsZVR5cGV9YDsKICAgICAgICB9LAogICAgICAgICdET1dOTE9BRF9BVURJTycoZmlsZVR5cGUpIHsKICAgICAgICAgICAgcmV0dXJuIGDkuIvovb0gJHtmaWxlVHlwZX0g6Z+z6aKRYDsKICAgICAgICB9LAogICAgICAgICdJTkRfUEFSVFMnKCkgewogICAgICAgICAgICByZXR1cm4gJ+WNleeLrOWIhuiwsSc7CiAgICAgICAgfSwKICAgICAgICAnSU5EX1BBUlRTX1RPT0xUSVAnKCkgewogICAgICAgICAgICByZXR1cm4gJ+S4i+i9veWNleeLrOWIhuiwsSAoQkVUQSknOwogICAgICAgIH0sCiAgICAgICAgJ1ZJRVdfSU5fTElCUkVTQ09SRScoKSB7CiAgICAgICAgICAgIHJldHVybiAn5ZyoIExpYnJlU2NvcmUg5Lit5p+l55yLJzsKICAgICAgICB9LAogICAgICAgICdGVUxMX1NDT1JFJygpIHsKICAgICAgICAgICAgcmV0dXJuICflrozmlbTkuZDosLEnOwogICAgICAgIH0sCiAgICB9KTsKCiAgICBjb25zdCBsb2NhbGVzID0gKChsKSA9PiBPYmplY3QuZnJlZXplKGwpKSh7CiAgICAgICAgZW4sCiAgICAgICAgZXMsCiAgICAgICAgaXQsCiAgICAgICAgemgsCiAgICB9KTsKICAgIC8vIGRldGVjdCBicm93c2VyIGxhbmd1YWdlCiAgICBjb25zdCBsYW5nID0gKCgpID0+IHsKICAgICAgICBsZXQgdXNlckxhbmdzOwogICAgICAgIGlmICghZGV0ZWN0Tm9kZSkgewogICAgICAgICAgICB1c2VyTGFuZ3MgPSBuYXZpZ2F0b3IubGFuZ3VhZ2VzOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgY29uc3QgZW52ID0gcHJvY2Vzcy5lbnY7CiAgICAgICAgICAgIGNvbnN0IGwgPSBlbnYuTENfQUxMIHx8IGVudi5MQ19NRVNTQUdFUyB8fCBlbnYuTEFORyB8fCBlbnYuTEFOR1VBR0UgfHwgJyc7CiAgICAgICAgICAgIHVzZXJMYW5ncyA9IFtsLnNsaWNlKDAsIDIpXTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhsb2NhbGVzKTsKICAgICAgICBjb25zdCBfbGFuZyA9IHVzZXJMYW5ncy5maW5kKGwgPT4gewogICAgICAgICAgICAvLyBmaW5kIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHZhbGlkIGxhbmd1YWdlcwogICAgICAgICAgICByZXR1cm4gbmFtZXMuaW5jbHVkZXMobCk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIF9sYW5nIHx8ICdlbic7CiAgICB9KSgpOwogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMKICAgIGZ1bmN0aW9uIGkxOG4oa2V5KSB7CiAgICAgICAgY29uc3QgbG9jYWxlID0gbG9jYWxlc1tsYW5nXTsKICAgICAgICByZXR1cm4gbG9jYWxlW2tleV07CiAgICB9CgogICAgdmFyIGRlcGVuZGVuY2llcyA9IHsKICAgIAkiQGxpYnJlc2NvcmUvZm9udHMiOiAiXjAuNC4wIiwKICAgIAkiQGxpYnJlc2NvcmUvc2YzIjogIl4wLjMuMCIsCiAgICAJImRldGVjdC1ub2RlIjogIl4yLjAuNCIsCiAgICAJaW5xdWlyZXI6ICJeNy4zLjMiLAogICAgCSJub2RlLWZldGNoIjogIl4yLjYuMSIsCiAgICAJb3JhOiAiXjUuMS4wIiwKICAgIAl3ZWJtc2NvcmU6ICJeMC4xOC4wIgogICAgfTsKCiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzICovCiAgICBjb25zdCBXRUJNU0NPUkVfVVJMID0gYGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vd2VibXNjb3JlQCR7ZGVwZW5kZW5jaWVzLndlYm1zY29yZX0vd2VibXNjb3JlLmpzYDsKICAgIC8vIGZvbnRzIGZvciBDaGluZXNlIGNoYXJhY3RlcnMgKENOKSBhbmQgS29yZWFuIGhhbmd1bCAoS1IpCiAgICAvLyBKUCBjaGFyYWN0ZXJzIGFyZSBpbmNsdWRlZCBpbiB0aGUgQ04gZm9udAogICAgY29uc3QgRk9OVF9VUkxTID0gWydDTicsICdLUiddLm1hcChsID0+IGBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL0BsaWJyZXNjb3JlL2ZvbnRzQCR7ZGVwZW5kZW5jaWVzWydAbGlicmVzY29yZS9mb250cyddfS9Tb3VyY2VIYW5TYW5zJHtsfS5taW4ud29mZjJgKTsKICAgIGNvbnN0IFNGM19VUkwgPSBgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9AbGlicmVzY29yZS9zZjNAJHtkZXBlbmRlbmNpZXNbJ0BsaWJyZXNjb3JlL3NmMyddfS9GbHVpZFIzTW9ub19HTS5zZjNgOwogICAgY29uc3QgU09VTkRfRk9OVF9MT0FERUQgPSBTeW1ib2woJ1NvdW5kRm9udCBsb2FkZWQnKTsKICAgIGNvbnN0IGluaXRNc2NvcmUgPSAodykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgaWYgKCFkZXRlY3ROb2RlKSB7IC8vIGF0dGFjaGVkIHRvIGEgcGFnZQogICAgICAgICAgICBpZiAoIXdbJ1dlYk1zY29yZSddKSB7CiAgICAgICAgICAgICAgICAvLyBpbml0IHdlYm1zY29yZSAoaHR0cHM6Ly9naXRodWIuY29tL0xpYnJlU2NvcmUvd2VibXNjb3JlKQogICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0ID0gdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSBXRUJNU0NPUkVfVVJMOwogICAgICAgICAgICAgICAgdy5kb2N1bWVudC5ib2R5LmFwcGVuZChzY3JpcHQpOwogICAgICAgICAgICAgICAgeWllbGQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHNjcmlwdC5vbmxvYWQgPSByZXNvbHZlOyB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gd1snV2ViTXNjb3JlJ107CiAgICAgICAgfQogICAgICAgIGVsc2UgeyAvLyBub2RlanMKICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoJ3dlYm1zY29yZScpLmRlZmF1bHQ7CiAgICAgICAgfQogICAgfSk7CiAgICBsZXQgZm9udHM7CiAgICBjb25zdCBpbml0Rm9udHMgPSAoKSA9PiB7CiAgICAgICAgLy8gbG9hZCBDSksgZm9udHMKICAgICAgICAvLyBDSksgKEVhc3QgQXNpYW4pIGNoYXJhY3RlcnMgd2lsbCBiZSByZW5kZXJlZCBhcyAidG9mdSIgaWYgdGhlcmUgaXMgbm8gZm9udAogICAgICAgIGlmICghZm9udHMpIHsKICAgICAgICAgICAgaWYgKGRldGVjdE5vZGUpIHsKICAgICAgICAgICAgICAgIC8vIG1vZHVsZS5leHBvcnRzLkNOID0gLi4uLCBtb2R1bGUuZXhwb3J0cy5LUiA9IC4uLgogICAgICAgICAgICAgICAgY29uc3QgRk9OVFMgPSBPYmplY3QudmFsdWVzKHJlcXVpcmUoJ0BsaWJyZXNjb3JlL2ZvbnRzJykpOwogICAgICAgICAgICAgICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpOwogICAgICAgICAgICAgICAgZm9udHMgPSBQcm9taXNlLmFsbChGT05UUy5tYXAoKHBhdGgpID0+IGZzLnByb21pc2VzLnJlYWRGaWxlKHBhdGgpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBmb250cyA9IFByb21pc2UuYWxsKEZPTlRfVVJMUy5tYXAodXJsID0+IGZldGNoRGF0YSh1cmwpKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwogICAgY29uc3QgbG9hZFNvdW5kRm9udCA9IChzY29yZSkgPT4gewogICAgICAgIGlmICghc2NvcmVbU09VTkRfRk9OVF9MT0FERURdKSB7CiAgICAgICAgICAgIGNvbnN0IGxvYWRQcm9taXNlID0gKCgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgICAgICAgICAgbGV0IGRhdGE7CiAgICAgICAgICAgICAgICBpZiAoZGV0ZWN0Tm9kZSkgewogICAgICAgICAgICAgICAgICAgIC8vIG1vZHVsZS5leHBvcnRzLkZsdWlkUjNNb25vID0gLi4uCiAgICAgICAgICAgICAgICAgICAgY29uc3QgU0YzID0gT2JqZWN0LnZhbHVlcyhyZXF1aXJlKCdAbGlicmVzY29yZS9zZjMnKSlbMF07CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpOwogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB5aWVsZCBmcy5wcm9taXNlcy5yZWFkRmlsZShTRjMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHlpZWxkIGZldGNoRGF0YShTRjNfVVJMKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHlpZWxkIHNjb3JlLnNldFNvdW5kRm9udChkYXRhKTsKICAgICAgICAgICAgfSkpKCk7CiAgICAgICAgICAgIHNjb3JlW1NPVU5EX0ZPTlRfTE9BREVEXSA9IGxvYWRQcm9taXNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc2NvcmVbU09VTkRfRk9OVF9MT0FERURdOwogICAgfTsKICAgIGNvbnN0IGxvYWRNc2NvcmUgPSAoc2NvcmVpbmZvLCB3KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBpbml0Rm9udHMoKTsKICAgICAgICBjb25zdCBXZWJNc2NvcmUgPSB5aWVsZCBpbml0TXNjb3JlKHcpOwogICAgICAgIC8vIHBhcnNlIG1zY3ogZGF0YQogICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShuZXcgVWludDhBcnJheSh5aWVsZCBmZXRjaE1zY3ooc2NvcmVpbmZvKSkpOwogICAgICAgIGNvbnN0IHNjb3JlID0geWllbGQgV2ViTXNjb3JlLmxvYWQoJ21zY3onLCBkYXRhLCB5aWVsZCBmb250cyk7CiAgICAgICAgeWllbGQgc2NvcmUuZ2VuZXJhdGVFeGNlcnB0cygpOwogICAgICAgIHJldHVybiBzY29yZTsKICAgIH0pOwogICAgY29uc3QgSU5EVl9ET1dOTE9BRFMgPSBbCiAgICAgICAgewogICAgICAgICAgICBuYW1lOiBpMThuKCdET1dOTE9BRCcpKCdQREYnKSwKICAgICAgICAgICAgZmlsZUV4dDogJ3BkZicsCiAgICAgICAgICAgIGFjdGlvbjogKHNjb3JlKSA9PiBzY29yZS5zYXZlUGRmKCksCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6IGkxOG4oJ0RPV05MT0FEJykoJ01TQ1onKSwKICAgICAgICAgICAgZmlsZUV4dDogJ21zY3onLAogICAgICAgICAgICBhY3Rpb246IChzY29yZSkgPT4gc2NvcmUuc2F2ZU1zYygnbXNjeicpLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBuYW1lOiBpMThuKCdET1dOTE9BRCcpKCdNdXNpY1hNTCcpLAogICAgICAgICAgICBmaWxlRXh0OiAnbXhsJywKICAgICAgICAgICAgYWN0aW9uOiAoc2NvcmUpID0+IHNjb3JlLnNhdmVNeGwoKSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgbmFtZTogaTE4bignRE9XTkxPQUQnKSgnTUlESScpLAogICAgICAgICAgICBmaWxlRXh0OiAnbWlkJywKICAgICAgICAgICAgYWN0aW9uOiAoc2NvcmUpID0+IHNjb3JlLnNhdmVNaWRpKHRydWUsIHRydWUpLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBuYW1lOiBpMThuKCdET1dOTE9BRF9BVURJTycpKCdNUDMnKSwKICAgICAgICAgICAgZmlsZUV4dDogJ21wMycsCiAgICAgICAgICAgIGFjdGlvbjogKHNjb3JlKSA9PiBsb2FkU291bmRGb250KHNjb3JlKS50aGVuKCgpID0+IHNjb3JlLnNhdmVBdWRpbygnbXAzJykpLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBuYW1lOiBpMThuKCdET1dOTE9BRF9BVURJTycpKCdGTEFDJyksCiAgICAgICAgICAgIGZpbGVFeHQ6ICdmbGFjJywKICAgICAgICAgICAgYWN0aW9uOiAoc2NvcmUpID0+IGxvYWRTb3VuZEZvbnQoc2NvcmUpLnRoZW4oKCkgPT4gc2NvcmUuc2F2ZUF1ZGlvKCdmbGFjJykpLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBuYW1lOiBpMThuKCdET1dOTE9BRF9BVURJTycpKCdPR0cnKSwKICAgICAgICAgICAgZmlsZUV4dDogJ29nZycsCiAgICAgICAgICAgIGFjdGlvbjogKHNjb3JlKSA9PiBsb2FkU291bmRGb250KHNjb3JlKS50aGVuKCgpID0+IHNjb3JlLnNhdmVBdWRpbygnb2dnJykpLAogICAgICAgIH0sCiAgICBdOwoKICAgIGNvbnN0IF9nZXRMaW5rID0gKGluZGV4aW5nSW5mbykgPT4gewogICAgICAgIGNvbnN0IHsgc2NvcmVwYWNrIH0gPSBKU09OLnBhcnNlKGluZGV4aW5nSW5mbyk7CiAgICAgICAgcmV0dXJuIGBodHRwczovL2xpYnJlc2NvcmUub3JnL3Njb3JlLyR7c2NvcmVwYWNrfWA7CiAgICB9OwogICAgY29uc3QgZ2V0TGlicmVTY29yZUxpbmsgPSAoc2NvcmVpbmZvLCBfZmV0Y2ggPSBnZXRGZXRjaCgpKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBjb25zdCBtYWluQ2lkID0geWllbGQgZ2V0TWFpbkNpZChzY29yZWluZm8sIF9mZXRjaCk7CiAgICAgICAgY29uc3QgcmVmID0gc2NvcmVpbmZvLmdldFNjb3JlcGFja1JlZihtYWluQ2lkKTsKICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9pcGZzLmluZnVyYS5pbzo1MDAxL2FwaS92MC9kYWcvZ2V0P2FyZz0ke3JlZn1gOwogICAgICAgIGNvbnN0IHIwID0geWllbGQgX2ZldGNoKHVybCk7CiAgICAgICAgaWYgKHIwLnN0YXR1cyAhPT0gNTAwKSB7CiAgICAgICAgICAgIGFzc2VydFJlcyhyMCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIHIwLmpzb24oKTsKICAgICAgICBpZiAodHlwZW9mIHJlcyAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgLy8gcmVhZCBmdXJ0aGVyIGVycm9yIG1zZwogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzLk1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gX2dldExpbmsocmVzKTsKICAgIH0pOwoKICAgIHZhciBidG5MaXN0Q3NzID0gImRpdiB7XG4gIHdpZHRoOiA0MjJweDtcbiAgcmlnaHQ6IDA7XG4gIG1hcmdpbjogMCAxOHB4IDE4cHggMDtcblxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZvbnQtZmFtaWx5OiAnSW50ZXInLCAnSGVsdmV0aWNhIG5ldWUnLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogOTk5OTtcbiAgYmFja2dyb3VuZDogI2Y2ZjZmNjtcbiAgbWluLXdpZHRoOiAyMzBweDtcblxuICAvKiBwYXNzIHRoZSBzY3JvbGwgZXZlbnQgdGhyb3VnaCB0aGUgYnRucyBiYWNrZ3JvdW5kICovXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5NTBweCkge1xuICBkaXYge1xuICAgIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XG4gIH1cbn1cblxuYnV0dG9uIHtcbiAgd2lkdGg6IDE3OHB4ICFpbXBvcnRhbnQ7XG4gIG1pbi13aWR0aDogMTc4cHg7XG4gIGhlaWdodDogNDBweDtcblxuICBjb2xvcjogI2ZmZjtcbiAgYmFja2dyb3VuZDogIzJlNjhjMDtcblxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuXG4gIG1hcmdpbi1ib3R0b206IDhweDtcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gIHBhZGRpbmc6IDRweCAxMnB4O1xuXG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcblxuICBmb250LXNpemU6IDE2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgYm9yZGVyOiAwO1xuXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG59XG5cbi8qIGZpeCBgVmlldyBpbiBMaWJyZVNjb3JlYCBidXR0b24gdGV4dCBvdmVyZmxvdyAqL1xuYnV0dG9uOmxhc3Qtb2YtdHlwZSB7XG4gIHdpZHRoOiB1bnNldCAhaW1wb3J0YW50O1xufVxuXG5idXR0b246aG92ZXIge1xuICBiYWNrZ3JvdW5kOiAjMWE0ZjlmO1xufVxuXG4vKiBsaWdodCB0aGVtZSBidG4gKi9cbmJ1dHRvbi5saWdodCB7XG4gIGNvbG9yOiAjMmU2OGMwO1xuICBiYWNrZ3JvdW5kOiAjZTFlZmZlO1xufVxuXG5idXR0b24ubGlnaHQ6aG92ZXIge1xuICBiYWNrZ3JvdW5kOiAjYzNkZGZkO1xufVxuXG5zdmcge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuICB3aWR0aDogMjBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBtYXJnaW4tdG9wOiBhdXRvO1xuICBtYXJnaW4tYm90dG9tOiBhdXRvO1xufVxuXG5zcGFuIHtcbiAgbWFyZ2luLXRvcDogYXV0bztcbiAgbWFyZ2luLWJvdHRvbTogYXV0bztcbn0iOwoKICAgIHZhciBJQ09OOwogICAgKGZ1bmN0aW9uIChJQ09OKSB7CiAgICAgICAgSUNPTlsiRE9XTkxPQUQiXSA9ICJNOS42IDIuNGg0LjhWMTJoMi43ODRsLTUuMTggNS4xOEw2LjgyMyAxMkg5LjZWMi40ek0xOS4yIDE5LjJINC44djIuNGgxNC40di0yLjR6IjsKICAgICAgICBJQ09OWyJMSUJSRVNDT1JFIl0gPSAibTUuNDgzNyA0LjQ3MzV2MTAuNDA1Yy0xLjI1LTAuODk5MzYtMy4wMjg1LTAuNDA4OTYtNC4xNjU4IDAuNDU4MTYtMS4wMDUyIDAuNzY2NTktMS43ODgxIDIuMzMxNi0wLjk4MzY1IDMuNDk0MyAxIDEuMTM0NiAyLjc3MDIgMC43MDQwMiAzLjg4MTctMC4wMjgwOSAxLjA4OTYtMC42NjMyMyAxLjk2NjctMS44NTY5IDEuODEyNS0zLjE4MTR2LTUuNDgyMmg4LjMyNzh2OS4zODY1aDkuNjQzOHYtMi42MjgyaC02LjQ1Njd2LTEyLjQxN2MtNC4wMDY0LTAuMDE1MTgxLTguMDQyNC0wLjAwMjctMTIuMDYtMC4wMDY3NnptMC41NDQ3NyAyLjI2OTdoOC4zMjc4djEuMTI1OGgtOC4zMjc4di0xLjEyNTh6IjsKICAgIH0pKElDT04gfHwgKElDT04gPSB7fSkpOwogICAgY29uc3QgZ2V0QnRuQ29udGFpbmVyID0gKCkgPT4gewogICAgICAgIHZhciBfYTsKICAgICAgICBjb25zdCBlbHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbicpXTsKICAgICAgICBjb25zdCBlbCA9IGVscy5maW5kKGIgPT4gewogICAgICAgICAgICB2YXIgX2E7CiAgICAgICAgICAgIGNvbnN0IHRleHQgPSAoKF9hID0gYiA9PT0gbnVsbCB8fCBiID09PSB2b2lkIDAgPyB2b2lkIDAgOiBiLnRleHRDb250ZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVwbGFjZSgvXHMvZywgJycpKSB8fCAnJzsKICAgICAgICAgICAgcmV0dXJuIHRleHQuaW5jbHVkZXMoJ0Rvd25sb2FkJykgfHwgdGV4dC5pbmNsdWRlcygnUHJpbnQnKTsKICAgICAgICB9KTsKICAgICAgICBjb25zdCBidG5QYXJlbnQgPSAoX2EgPSBlbCA9PT0gbnVsbCB8fCBlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZWwucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhcmVudEVsZW1lbnQ7CiAgICAgICAgaWYgKCFidG5QYXJlbnQgfHwgIShidG5QYXJlbnQgaW5zdGFuY2VvZiBIVE1MRGl2RWxlbWVudCkpCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYnRuIHBhcmVudCBub3QgZm91bmQnKTsKICAgICAgICByZXR1cm4gYnRuUGFyZW50OwogICAgfTsKICAgIGNvbnN0IGJ1aWxkRG93bmxvYWRCdG4gPSAoaWNvbiwgbGlnaHRUaGVtZSA9IGZhbHNlKSA9PiB7CiAgICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgICAgICAgYnRuLnR5cGUgPSAnYnV0dG9uJzsKICAgICAgICBpZiAobGlnaHRUaGVtZSkKICAgICAgICAgICAgYnRuLmNsYXNzTmFtZSA9ICdsaWdodCc7CiAgICAgICAgLy8gYnVpbGQgaWNvbiBzdmcgZWxlbWVudAogICAgICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7CiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMjQgMjQnKTsKICAgICAgICBjb25zdCBzdmdQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7CiAgICAgICAgc3ZnUGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCBpY29uKTsKICAgICAgICBzdmdQYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsIGxpZ2h0VGhlbWUgPyAnIzJlNjhjMCcgOiAnI2ZmZicpOwogICAgICAgIHN2Zy5hcHBlbmQoc3ZnUGF0aCk7CiAgICAgICAgY29uc3QgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgYnRuLmFwcGVuZChzdmcsIHRleHROb2RlKTsKICAgICAgICByZXR1cm4gYnRuOwogICAgfTsKICAgIGNvbnN0IGNsb25lQnRuID0gKGJ0bikgPT4gewogICAgICAgIGNvbnN0IG4gPSBidG4uY2xvbmVOb2RlKHRydWUpOwogICAgICAgIG4ub25jbGljayA9IGJ0bi5vbmNsaWNrOwogICAgICAgIHJldHVybiBuOwogICAgfTsKICAgIGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7CiAgICAgICAgaWYgKG5vZGUuc2Nyb2xsSGVpZ2h0ID4gbm9kZS5jbGllbnRIZWlnaHQpIHsKICAgICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KG5vZGUucGFyZW50Tm9kZSk7CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gb25QYWdlUmVuZGVyZWQoZ2V0RWwpIHsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICAgICAgdmFyIF9hOwogICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBnZXRFbCgpOwogICAgICAgICAgICAgICAgICAgIGlmIChlbCkgewogICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZWwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIChfYSkgeyB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKChfYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpdiA+IHNlY3Rpb24nKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZG9jdW1lbnQuYm9keSwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7CiAgICAgICAgfSk7CiAgICB9CiAgICB2YXIgQnRuTGlzdE1vZGU7CiAgICAoZnVuY3Rpb24gKEJ0bkxpc3RNb2RlKSB7CiAgICAgICAgQnRuTGlzdE1vZGVbQnRuTGlzdE1vZGVbIkluUGFnZSJdID0gMF0gPSAiSW5QYWdlIjsKICAgICAgICBCdG5MaXN0TW9kZVtCdG5MaXN0TW9kZVsiRXh0V2luZG93Il0gPSAxXSA9ICJFeHRXaW5kb3ciOwogICAgfSkoQnRuTGlzdE1vZGUgfHwgKEJ0bkxpc3RNb2RlID0ge30pKTsKICAgIGNsYXNzIEJ0bkxpc3QgewogICAgICAgIGNvbnN0cnVjdG9yKGdldEJ0blBhcmVudCA9IGdldEJ0bkNvbnRhaW5lcikgewogICAgICAgICAgICB0aGlzLmdldEJ0blBhcmVudCA9IGdldEJ0blBhcmVudDsKICAgICAgICAgICAgdGhpcy5saXN0ID0gW107CiAgICAgICAgfQogICAgICAgIGFkZChvcHRpb25zKSB7CiAgICAgICAgICAgIHZhciBfYTsKICAgICAgICAgICAgY29uc3QgYnRuVHBsID0gYnVpbGREb3dubG9hZEJ0bigoX2EgPSBvcHRpb25zLmljb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IElDT04uRE9XTkxPQUQsIG9wdGlvbnMubGlnaHRUaGVtZSk7CiAgICAgICAgICAgIGNvbnN0IHNldFRleHQgPSAoYnRuKSA9PiB7CiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IGJ0bi5xdWVyeVNlbGVjdG9yKCdzcGFuJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gKHN0cikgPT4gewogICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0Tm9kZSkKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGUudGV4dENvbnRlbnQgPSBzdHI7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9OwogICAgICAgICAgICBzZXRUZXh0KGJ0blRwbCkob3B0aW9ucy5uYW1lKTsKICAgICAgICAgICAgYnRuVHBsLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBidG4gPSB0aGlzOwogICAgICAgICAgICAgICAgb3B0aW9ucy5hY3Rpb24ob3B0aW9ucy5uYW1lLCBidG4sIHNldFRleHQoYnRuKSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMubGlzdC5wdXNoKGJ0blRwbCk7CiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpc2FibGVkKSB7CiAgICAgICAgICAgICAgICBidG5UcGwuZGlzYWJsZWQgPSBvcHRpb25zLmRpc2FibGVkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXApIHsKICAgICAgICAgICAgICAgIGJ0blRwbC50aXRsZSA9IG9wdGlvbnMudG9vbHRpcDsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBhZGQgYnV0dG9ucyB0byB0aGUgdXNlcnNjcmlwdCBtYW5hZ2VyIG1lbnUKICAgICAgICAgICAgaWYgKGlzR21BdmFpbGFibGUoJ3JlZ2lzdGVyTWVudUNvbW1hbmQnKSkgewogICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZvaWQKICAgICAgICAgICAgICAgIHZvaWQgX0dNLnJlZ2lzdGVyTWVudUNvbW1hbmQob3B0aW9ucy5uYW1lLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5hY3Rpb24ob3B0aW9ucy5uYW1lLCBidG5UcGwsICgpID0+IHVuZGVmaW5lZCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYnRuVHBsOwogICAgICAgIH0KICAgICAgICBfcG9zaXRpb25CdG5zKGFuY2hvckRpdiwgbmV3UGFyZW50KSB7CiAgICAgICAgICAgIGxldCB7IHRvcCB9ID0gYW5jaG9yRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICB0b3AgKz0gd2luZG93LnNjcm9sbFk7IC8vIHJlbGF0aXZlIHRvIHRoZSBlbnRpcmUgZG9jdW1lbnQgaW5zdGVhZCBvZiB2aWV3cG9ydAogICAgICAgICAgICBpZiAodG9wID4gMCkgewogICAgICAgICAgICAgICAgbmV3UGFyZW50LnN0eWxlLnRvcCA9IGAke3RvcH1weGA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBuZXdQYXJlbnQuc3R5bGUudG9wID0gJzBweCc7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgX2NvbW1pdCgpIHsKICAgICAgICAgICAgY29uc3QgYnRuUGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2Jyk7CiAgICAgICAgICAgIGNvbnN0IHNoYWRvdyA9IGF0dGFjaFNoYWRvdyhidG5QYXJlbnQpOwogICAgICAgICAgICAvLyBzdHlsZSB0aGUgc2hhZG93IERPTQogICAgICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICAgICAgICAgIHN0eWxlLmlubmVyVGV4dCA9IGJ0bkxpc3RDc3M7CiAgICAgICAgICAgIHNoYWRvdy5hcHBlbmQoc3R5bGUpOwogICAgICAgICAgICAvLyBoaWRlIGJ1dHRvbnMgdXNpbmcgdGhlIHNoYWRvdyBET00KICAgICAgICAgICAgY29uc3Qgc2xvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Nsb3QnKTsKICAgICAgICAgICAgc2hhZG93LmFwcGVuZChzbG90KTsKICAgICAgICAgICAgY29uc3QgbmV3UGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgIG5ld1BhcmVudC5hcHBlbmQoLi4udGhpcy5saXN0Lm1hcChlID0+IGNsb25lQnRuKGUpKSk7CiAgICAgICAgICAgIHNoYWRvdy5hcHBlbmQobmV3UGFyZW50KTsKICAgICAgICAgICAgLy8gZGVmYXVsdCBwb3NpdGlvbgogICAgICAgICAgICBuZXdQYXJlbnQuc3R5bGUudG9wID0gYCR7d2luZG93LmlubmVySGVpZ2h0IC0gbmV3UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodH1weGA7CiAgICAgICAgICAgIHZvaWQgb25QYWdlUmVuZGVyZWQodGhpcy5nZXRCdG5QYXJlbnQpLnRoZW4oKGFuY2hvckRpdikgPT4gewogICAgICAgICAgICAgICAgY29uc3QgcG9zID0gKCkgPT4gdGhpcy5fcG9zaXRpb25CdG5zKGFuY2hvckRpdiwgbmV3UGFyZW50KTsKICAgICAgICAgICAgICAgIHBvcygpOwogICAgICAgICAgICAgICAgLy8gcmVwb3NpdGlvbiBidG5zIHdoZW4gd2luZG93IHJlc2l6ZXMKICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBwb3MsIHsgcGFzc2l2ZTogdHJ1ZSB9KTsKICAgICAgICAgICAgICAgIC8vIHJlcG9zaXRpb24gYnRucyB3aGVuIHNjcm9sbGluZwogICAgICAgICAgICAgICAgY29uc3Qgc2Nyb2xsID0gZ2V0U2Nyb2xsUGFyZW50KGFuY2hvckRpdik7CiAgICAgICAgICAgICAgICBzY3JvbGwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgcG9zLCB7IHBhc3NpdmU6IHRydWUgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gYnRuUGFyZW50OwogICAgICAgIH0KICAgICAgICAvKioKICAgICAgICAgKiByZXBsYWNlIHRoZSB0ZW1wbGF0ZSBidXR0b24gd2l0aCB0aGUgbGlzdCBvZiBuZXcgYnV0dG9ucwogICAgICAgICAqLwogICAgICAgIGNvbW1pdChtb2RlID0gQnRuTGlzdE1vZGUuSW5QYWdlKSB7CiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1vZGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIEJ0bkxpc3RNb2RlLkluUGFnZTogewogICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWw7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCA9IHRoaXMuX2NvbW1pdCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChfYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gQnRuTGlzdE1vZGUuRXh0V2luZG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21taXQoQnRuTGlzdE1vZGUuRXh0V2luZG93KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBidXR0b25zIGFyZSBzdGlsbCBpbiBkb2N1bWVudCB3aGVuIGRvbSB1cGRhdGVzIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5jb250YWlucyhlbCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZS1jb21taXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwZXJmb3JtYW5jZSBpc3N1ZT8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCA9IHRoaXMuX2NvbW1pdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXNlIEJ0bkxpc3RNb2RlLkV4dFdpbmRvdzogewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSB0aGlzLl9jb21taXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdyA9IHlpZWxkIHdpbmRvd09wZW5Bc3luYyh1bmRlZmluZWQsICcnLCB1bmRlZmluZWQsICdyZXNpemFibGUsd2lkdGg9MjMwLGhlaWdodD0yNzAnKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucwogICAgICAgICAgICAgICAgICAgICAgICB3ID09PSBudWxsIHx8IHcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHcuZG9jdW1lbnQuYm9keS5hcHBlbmQoZGl2KTsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsICgpID0+IHcgPT09IG51bGwgfHwgdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdy5jbG9zZSgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBCdG5MaXN0TW9kZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZQogICAgdmFyIEJ0bkFjdGlvbjsKICAgIChmdW5jdGlvbiAoQnRuQWN0aW9uKSB7CiAgICAgICAgY29uc3Qgbm9ybWFsaXplVXJsSW5wdXQgPSAodXJsKSA9PiB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdXJsID09PSAnZnVuY3Rpb24nKQogICAgICAgICAgICAgICAgcmV0dXJuIHVybCgpOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gdXJsOwogICAgICAgIH07CiAgICAgICAgQnRuQWN0aW9uLmRvd25sb2FkID0gKHVybCwgZmFsbGJhY2ssIHRpbWVvdXQsIHRhcmdldCkgPT4gewogICAgICAgICAgICByZXR1cm4gQnRuQWN0aW9uLnByb2Nlc3MoKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgICAgICAgICAgY29uc3QgX3VybCA9IHlpZWxkIG5vcm1hbGl6ZVVybElucHV0KHVybCk7CiAgICAgICAgICAgICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgICAgICAgICAgYS5ocmVmID0gX3VybDsKICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpCiAgICAgICAgICAgICAgICAgICAgYS50YXJnZXQgPSB0YXJnZXQ7CiAgICAgICAgICAgICAgICBhLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoJ2NsaWNrJykpOwogICAgICAgICAgICB9KSwgZmFsbGJhY2ssIHRpbWVvdXQpOwogICAgICAgIH07CiAgICAgICAgQnRuQWN0aW9uLm9wZW5VcmwgPSBCdG5BY3Rpb24uZG93bmxvYWQ7CiAgICAgICAgQnRuQWN0aW9uLm1zY29yZVdpbmRvdyA9IChzY29yZWluZm8sIGZuKSA9PiB7CiAgICAgICAgICAgIHJldHVybiAoYnRuTmFtZSwgYnRuLCBzZXRUZXh0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgICAgICAgICAvLyBzYXZlIGJ0biBldmVudCBmb3IgbGF0ZXIgdXNlCiAgICAgICAgICAgICAgICBjb25zdCBfb25jbGljayA9IGJ0bi5vbmNsaWNrOwogICAgICAgICAgICAgICAgLy8gY2xlYXIgYnRuIGV2ZW50CiAgICAgICAgICAgICAgICBidG4ub25jbGljayA9IG51bGw7CiAgICAgICAgICAgICAgICAvLyBzZXQgYnRuIHRleHQgdG8gIlBST0NFU1NJTkciCiAgICAgICAgICAgICAgICBzZXRUZXh0KGkxOG4oJ1BST0NFU1NJTkcnKSgpKTsKICAgICAgICAgICAgICAgIC8vIG9wZW4gYSBuZXcgdGFiCiAgICAgICAgICAgICAgICBjb25zdCB3ID0geWllbGQgd2luZG93T3BlbkFzeW5jKGJ0biwgJycpOwogICAgICAgICAgICAgICAgLy8gYWRkIHRleHRzIHRvIHRoZSBuZXcgdGFiCiAgICAgICAgICAgICAgICBjb25zdCB0eHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpMThuKCdQUk9DRVNTSU5HJykoKSk7CiAgICAgICAgICAgICAgICB3LmRvY3VtZW50LmJvZHkuYXBwZW5kKHR4dCk7CiAgICAgICAgICAgICAgICAvLyBzZXQgcGFnZSBob29rcyB0aGF0IHRoZSBuZXcgdGFiIGFsc28gY2xvc2VzIGFzIHRoZSBvZyB0YWIgY2xvc2VzCiAgICAgICAgICAgICAgICBsZXQgc2NvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWNvbnN0CiAgICAgICAgICAgICAgICBjb25zdCBkZXN0cm95ID0gKCkgPT4gewogICAgICAgICAgICAgICAgICAgIHNjb3JlICYmIHNjb3JlLmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgICAgICB3LmNsb3NlKCk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIGRlc3Ryb3kpOwogICAgICAgICAgICAgICAgdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgc2NvcmUgJiYgc2NvcmUuZGVzdHJveSgpOwogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd1bmxvYWQnLCBkZXN0cm95KTsKICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBidG4gdGV4dAogICAgICAgICAgICAgICAgICAgIHNldFRleHQoYnRuTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgLy8gcmVpbnN0YXRlIGJ0biBldmVudAogICAgICAgICAgICAgICAgICAgIGJ0bi5vbmNsaWNrID0gX29uY2xpY2s7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgLy8gZmV0Y2ggbXNjeiAmIHByb2Nlc3MgdXNpbmcgbXNjb3JlCiAgICAgICAgICAgICAgICAgICAgc2NvcmUgPSB5aWVsZCBsb2FkTXNjb3JlKHNjb3JlaW5mbywgdyk7CiAgICAgICAgICAgICAgICAgICAgZm4odywgc2NvcmUsIHR4dCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZSQxLmVycm9yKGVycik7CiAgICAgICAgICAgICAgICAgICAgLy8gY2xvc2UgdGhlIG5ldyB0YWIgJiBzaG93IGVycm9yIHBvcHVwCiAgICAgICAgICAgICAgICAgICAgdy5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgIEJ0bkFjdGlvbi5lcnJvclBvcHVwKCkoYnRuTmFtZSwgYnRuLCBzZXRUZXh0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICBCdG5BY3Rpb24uZXJyb3JQb3B1cCA9ICgpID0+IHsKICAgICAgICAgICAgcmV0dXJuIChidG5OYW1lLCBidG4sIHNldFRleHQpID0+IHsKICAgICAgICAgICAgICAgIHNldFRleHQoaTE4bignQlROX0VSUk9SJykoKSk7CiAgICAgICAgICAgICAgICAvLyBhc2sgdXNlciB0byBzZW5kIERpc2NvcmQgbWVzc2FnZQogICAgICAgICAgICAgICAgYWxlcnQoJ+KdjERvd25sb2FkIEZhaWxlZCFcblxuJyArCiAgICAgICAgICAgICAgICAgICAgJ1NlbmQgeW91ciBVUkwgdG8gdGhlICNkYXRhc2V0LXBhdGNoZXIgY2hhbm5lbCAnICsKICAgICAgICAgICAgICAgICAgICAnaW4gdGhlIExpYnJlU2NvcmUgQ29tbXVuaXR5IERpc2NvcmQgc2VydmVyOlxuJyArIERJU0NPUkRfVVJMKTsKICAgICAgICAgICAgICAgIC8vIG9wZW4gRGlzY29yZCBvbiAnT0snCiAgICAgICAgICAgICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgICAgICAgICAgYS5ocmVmID0gRElTQ09SRF9VUkw7CiAgICAgICAgICAgICAgICBhLnRhcmdldCA9ICdfYmxhbmsnOwogICAgICAgICAgICAgICAgYS5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdjbGljaycpKTsKICAgICAgICAgICAgfTsKICAgICAgICB9OwogICAgICAgIEJ0bkFjdGlvbi5wcm9jZXNzID0gKGZuLCBmYWxsYmFjaywgdGltZW91dCA9IDEwICogNjAgKiAxMDAwIC8qIDEwbWluICovKSA9PiB7CiAgICAgICAgICAgIHJldHVybiAobmFtZSwgYnRuLCBzZXRUZXh0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBfb25jbGljayA9IGJ0bi5vbmNsaWNrOwogICAgICAgICAgICAgICAgYnRuLm9uY2xpY2sgPSBudWxsOwogICAgICAgICAgICAgICAgc2V0VGV4dChpMThuKCdQUk9DRVNTSU5HJykoKSk7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHlpZWxkIHVzZVRpbWVvdXQoZm4oKSwgdGltZW91dCk7CiAgICAgICAgICAgICAgICAgICAgc2V0VGV4dChuYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlJDEuZXJyb3IoZXJyKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZmFsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIGZhbGxiYWNrCiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIGZhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHQobmFtZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBCdG5BY3Rpb24uZXJyb3JQb3B1cCgpKG5hbWUsIGJ0biwgc2V0VGV4dCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnRuLm9uY2xpY2sgPSBfb25jbGljazsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICBCdG5BY3Rpb24uZGVwcmVjYXRlID0gKGFjdGlvbikgPT4gewogICAgICAgICAgICByZXR1cm4gKG5hbWUsIGJ0biwgc2V0VGV4dCkgPT4gewogICAgICAgICAgICAgICAgYWxlcnQoaTE4bignREVQUkVDQVRJT05fTk9USUNFJykobmFtZSkpOwogICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuCiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uKG5hbWUsIGJ0biwgc2V0VGV4dCk7CiAgICAgICAgICAgIH07CiAgICAgICAgfTsKICAgIH0pKEJ0bkFjdGlvbiB8fCAoQnRuQWN0aW9uID0ge30pKTsKCiAgICBjbGFzcyBTY29yZUluZm8gewogICAgICAgIGNvbnN0cnVjdG9yKCkgewogICAgICAgICAgICB0aGlzLlJBRElYID0gMjA7CiAgICAgICAgICAgIHRoaXMuSU5ERVhfUkFESVggPSAzMjsKICAgICAgICAgICAgdGhpcy5zdG9yZSA9IG5ldyBNYXAoKTsKICAgICAgICB9CiAgICAgICAgZ2V0IGlkTGFzdERpZ2l0KCkgewogICAgICAgICAgICByZXR1cm4gKCt0aGlzLmlkKSAlIHRoaXMuUkFESVg7CiAgICAgICAgfQogICAgICAgIGdldCBmaWxlTmFtZSgpIHsKICAgICAgICAgICAgcmV0dXJuIGVzY2FwZUZpbGVuYW1lKHRoaXMudGl0bGUpOwogICAgICAgIH0KICAgICAgICBnZXRNc2N6SXBmc1JlZihtYWluQ2lkKSB7CiAgICAgICAgICAgIHJldHVybiBgL2lwZnMvJHttYWluQ2lkfS8ke3RoaXMuaWRMYXN0RGlnaXR9LyR7dGhpcy5pZH0ubXNjemA7CiAgICAgICAgfQogICAgICAgIGdldE1zY3pDaWRVcmwobWFpbkNpZCkgewogICAgICAgICAgICByZXR1cm4gYGh0dHBzOi8vaXBmcy5pbmZ1cmEuaW86NTAwMS9hcGkvdjAvYmxvY2svc3RhdD9hcmc9JHt0aGlzLmdldE1zY3pJcGZzUmVmKG1haW5DaWQpfWA7CiAgICAgICAgfQogICAgICAgIGdldFNjb3JlcGFja1JlZihtYWluQ2lkKSB7CiAgICAgICAgICAgIHJldHVybiBgL2lwZnMvJHttYWluQ2lkfS9pbmRleC8keygrdGhpcy5pZCkgJSB0aGlzLklOREVYX1JBRElYfS8ke3RoaXMuaWR9YDsKICAgICAgICB9CiAgICB9CiAgICBjbGFzcyBTY29yZUluZm9JblBhZ2UgZXh0ZW5kcyBTY29yZUluZm8gewogICAgICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50KSB7CiAgICAgICAgICAgIHN1cGVyKCk7CiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDsKICAgICAgICB9CiAgICAgICAgZ2V0IGlkKCkgewogICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcigibWV0YVtwcm9wZXJ0eT0nYWw6aW9zOnVybCddIik7CiAgICAgICAgICAgIGNvbnN0IG0gPSBlbC5jb250ZW50Lm1hdGNoKC8oXGQrKSQvKTsKICAgICAgICAgICAgcmV0dXJuICttWzFdOwogICAgICAgIH0KICAgICAgICBnZXQgdGl0bGUoKSB7CiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJtZXRhW3Byb3BlcnR5PSdvZzp0aXRsZSddIik7CiAgICAgICAgICAgIHJldHVybiBlbC5jb250ZW50OwogICAgICAgIH0KICAgICAgICBnZXQgYmFzZVVybCgpIHsKICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIm1ldGFbcHJvcGVydHk9J29nOmltYWdlJ10iKTsKICAgICAgICAgICAgY29uc3QgbSA9IGVsLmNvbnRlbnQubWF0Y2goL14oLitcLylzY29yZV8vKTsKICAgICAgICAgICAgcmV0dXJuIG1bMV07CiAgICAgICAgfQogICAgfQogICAgY2xhc3MgU2hlZXRJbmZvIHsKICAgICAgICBnZXQgaW1nVHlwZSgpIHsKICAgICAgICAgICAgY29uc3QgdGh1bWJuYWlsID0gdGhpcy50aHVtYm5haWxVcmw7CiAgICAgICAgICAgIGNvbnN0IGltZ3R5cGUgPSB0aHVtYm5haWwubWF0Y2goL3Njb3JlXzBcLihcdyspLylbMV07CiAgICAgICAgICAgIHJldHVybiBpbWd0eXBlOwogICAgICAgIH0KICAgIH0KICAgIGNsYXNzIFNoZWV0SW5mb0luUGFnZSBleHRlbmRzIFNoZWV0SW5mbyB7CiAgICAgICAgY29uc3RydWN0b3IoZG9jdW1lbnQpIHsKICAgICAgICAgICAgc3VwZXIoKTsKICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50OwogICAgICAgIH0KICAgICAgICBnZXQgc2hlZXQwSW1nKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbWdbc3JjKj1zY29yZV9dJyk7CiAgICAgICAgfQogICAgICAgIGdldCBwYWdlQ291bnQoKSB7CiAgICAgICAgICAgIHZhciBfYTsKICAgICAgICAgICAgY29uc3Qgc2hlZXQwRGl2ID0gKF9hID0gdGhpcy5zaGVldDBJbWcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnRFbGVtZW50OwogICAgICAgICAgICBpZiAoIXNoZWV0MERpdikgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBzaGVldCBpbWFnZXMgZm91bmQnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHNoZWV0MERpdi5jbGFzc05hbWUpLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgZ2V0IHRodW1ibmFpbFVybCgpIHsKICAgICAgICAgICAgdmFyIF9hOwogICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGlua1thcz1pbWFnZV0nKTsKICAgICAgICAgICAgY29uc3QgdXJsID0gKChlbCA9PT0gbnVsbCB8fCBlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZWwuaHJlZikgfHwgKChfYSA9IHRoaXMuc2hlZXQwSW1nKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3JjKSk7CiAgICAgICAgICAgIHJldHVybiB1cmwuc3BsaXQoJ0AnKVswXTsKICAgICAgICB9CiAgICAgICAgZ2V0IGRpbWVuc2lvbnMoKSB7CiAgICAgICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiB3aWR0aCwgbmF0dXJhbEhlaWdodDogaGVpZ2h0IH0gPSB0aGlzLnNoZWV0MEltZzsKICAgICAgICAgICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9OwogICAgICAgIH0KICAgIH0KICAgIGNvbnN0IGdldEFjdHVhbElkID0gKHNjb3JlaW5mbywgX2ZldGNoID0gZ2V0RmV0Y2goKSkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgaWYgKHNjb3JlaW5mby5pZCA8PSAxMDAwMDAwMDAwMDAwKSB7CiAgICAgICAgICAgIC8vIGFjdHVhbCBpZCBhbHJlYWR5CiAgICAgICAgICAgIHJldHVybiBzY29yZWluZm8uaWQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1haW5DaWQgPSB5aWVsZCBnZXRNYWluQ2lkKHNjb3JlaW5mbywgX2ZldGNoKTsKICAgICAgICBjb25zdCByZWYgPSBgJHttYWluQ2lkfS9zaWQyaWQvJHtzY29yZWluZm8uaWR9YDsKICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9pcGZzLmluZnVyYS5pbzo1MDAxL2FwaS92MC9kYWcvZ2V0P2FyZz0ke3JlZn1gOwogICAgICAgIGNvbnN0IHIwID0geWllbGQgX2ZldGNoKHVybCk7CiAgICAgICAgaWYgKHIwLnN0YXR1cyAhPT0gNTAwKSB7CiAgICAgICAgICAgIGFzc2VydFJlcyhyMCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIHIwLmpzb24oKTsKICAgICAgICBpZiAodHlwZW9mIHJlcyAhPT0gJ251bWJlcicpIHsKICAgICAgICAgICAgLy8gcmVhZCBmdXJ0aGVyIGVycm9yIG1zZwogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzLk1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgICAvLyBhc3NpZ24gdGhlIGFjdHVhbCBpZCBiYWNrIHRvIHNjb3JlaW5mbwogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzY29yZWluZm8sICdpZCcsIHsKICAgICAgICAgICAgZ2V0KCkgeyByZXR1cm4gcmVzOyB9LAogICAgICAgIH0pOwogICAgICAgIHJldHVybiByZXM7CiAgICB9KTsKCiAgICBjb25zdCB7IHNhdmVBcyB9ID0gRmlsZVNhdmVyX21pbjsKICAgIGNvbnN0IG1haW4gPSAoKSA9PiB7CiAgICAgICAgY29uc3QgYnRuTGlzdCA9IG5ldyBCdG5MaXN0KCk7CiAgICAgICAgY29uc3Qgc2NvcmVpbmZvID0gbmV3IFNjb3JlSW5mb0luUGFnZShkb2N1bWVudCk7CiAgICAgICAgY29uc3QgeyBmaWxlTmFtZSB9ID0gc2NvcmVpbmZvOwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12b2lkCiAgICAgICAgdm9pZCBnZXRBY3R1YWxJZChzY29yZWluZm8pOwogICAgICAgIGxldCBpbmR2UGFydEJ0biA9IG51bGw7CiAgICAgICAgY29uc3QgZmFsbGJhY2sgPSAoKSA9PiB7CiAgICAgICAgICAgIC8vIGJ0bnMgZmFsbGJhY2sgdG8gbG9hZCBmcm9tIE1TQ1ogZmlsZSAoYEluZGl2aWR1YWwgUGFydHNgKQogICAgICAgICAgICByZXR1cm4gaW5kdlBhcnRCdG4gPT09IG51bGwgfHwgaW5kdlBhcnRCdG4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluZHZQYXJ0QnRuLmNsaWNrKCk7CiAgICAgICAgfTsKICAgICAgICBidG5MaXN0LmFkZCh7CiAgICAgICAgICAgIG5hbWU6IGkxOG4oJ0RPV05MT0FEJykoJ01TQ1onKSwKICAgICAgICAgICAgYWN0aW9uOiBCdG5BY3Rpb24ucHJvY2VzcygoKSA9PiBkb3dubG9hZE1zY3ooc2NvcmVpbmZvLCBzYXZlQXMpKSwKICAgICAgICB9KTsKICAgICAgICBidG5MaXN0LmFkZCh7CiAgICAgICAgICAgIG5hbWU6IGkxOG4oJ0RPV05MT0FEJykoJ1BERicpLAogICAgICAgICAgICBhY3Rpb246IEJ0bkFjdGlvbi5wcm9jZXNzKCgpID0+IGRvd25sb2FkUERGKHNjb3JlaW5mbywgbmV3IFNoZWV0SW5mb0luUGFnZShkb2N1bWVudCksIHNhdmVBcyksIGZhbGxiYWNrLCAzICogNjAgKiAxMDAwIC8qIDNtaW4gKi8pLAogICAgICAgIH0pOwogICAgICAgIGJ0bkxpc3QuYWRkKHsKICAgICAgICAgICAgbmFtZTogaTE4bignRE9XTkxPQUQnKSgnTVhMJyksCiAgICAgICAgICAgIGFjdGlvbjogQnRuQWN0aW9uLm1zY29yZVdpbmRvdyhzY29yZWluZm8sICh3LCBzY29yZSkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBteGwgPSB5aWVsZCBzY29yZS5zYXZlTXhsKCk7CiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IEJsb2IoW214bF0pOwogICAgICAgICAgICAgICAgc2F2ZUFzKGRhdGEsIGAke2ZpbGVOYW1lfS5teGxgKTsKICAgICAgICAgICAgICAgIHcuY2xvc2UoKTsKICAgICAgICAgICAgfSkpLAogICAgICAgIH0pOwogICAgICAgIGJ0bkxpc3QuYWRkKHsKICAgICAgICAgICAgbmFtZTogaTE4bignRE9XTkxPQUQnKSgnTUlESScpLAogICAgICAgICAgICBhY3Rpb246IEJ0bkFjdGlvbi5kb3dubG9hZCgoKSA9PiBnZXRGaWxlVXJsKHNjb3JlaW5mby5pZCwgJ21pZGknKSwgZmFsbGJhY2ssIDMwICogMTAwMCAvKiAzMHMgKi8pLAogICAgICAgIH0pOwogICAgICAgIGJ0bkxpc3QuYWRkKHsKICAgICAgICAgICAgbmFtZTogaTE4bignRE9XTkxPQUQnKSgnTVAzJyksCiAgICAgICAgICAgIGFjdGlvbjogQnRuQWN0aW9uLmRvd25sb2FkKCgpID0+IGdldEZpbGVVcmwoc2NvcmVpbmZvLmlkLCAnbXAzJyksIGZhbGxiYWNrLCAzMCAqIDEwMDAgLyogMzBzICovKSwKICAgICAgICB9KTsKICAgICAgICBpbmR2UGFydEJ0biA9IGJ0bkxpc3QuYWRkKHsKICAgICAgICAgICAgbmFtZTogaTE4bignSU5EX1BBUlRTJykoKSwKICAgICAgICAgICAgdG9vbHRpcDogaTE4bignSU5EX1BBUlRTX1RPT0xUSVAnKSgpLAogICAgICAgICAgICBhY3Rpb246IEJ0bkFjdGlvbi5tc2NvcmVXaW5kb3coc2NvcmVpbmZvLCAodywgc2NvcmUsIHR4dCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHlpZWxkIHNjb3JlLm1ldGFkYXRhKCk7CiAgICAgICAgICAgICAgICBjb25zb2xlJDEubG9nKCdzY29yZSBtZXRhZGF0YSBsb2FkZWQgYnkgd2VibXNjb3JlJywgbWV0YWRhdGEpOwogICAgICAgICAgICAgICAgLy8gYWRkIHRoZSAiZnVsbCBzY29yZSIgb3B0aW9uIGFzIGEgInBhcnQiIAogICAgICAgICAgICAgICAgbWV0YWRhdGEuZXhjZXJwdHMudW5zaGlmdCh7IGlkOiAtMSwgdGl0bGU6IGkxOG4oJ0ZVTExfU0NPUkUnKSgpLCBwYXJ0czogW10gfSk7CiAgICAgICAgICAgICAgICAvLyByZW5kZXIgdGhlIHBhcnQgc2VsZWN0aW9uIHBhZ2UKICAgICAgICAgICAgICAgIHR4dC5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkc2V0ID0gdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmaWVsZHNldCcpOwogICAgICAgICAgICAgICAgdy5kb2N1bWVudC5ib2R5LmFwcGVuZChmaWVsZHNldCk7CiAgICAgICAgICAgICAgICBjb25zdCBkb3dubG9hZHMgPSBJTkRWX0RPV05MT0FEUzsKICAgICAgICAgICAgICAgIC8vIHBhcnQgc2VsZWN0aW9uCiAgICAgICAgICAgICAgICBjb25zdCBERUZBVUxUX1BBUlQgPSAtMTsgLy8gaW5pdGlhbGx5IHNlbGVjdCAiZnVsbCBzY29yZSIKICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZXhjZXJwdCBvZiBtZXRhZGF0YS5leGNlcnB0cykgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZXhjZXJwdC5pZDsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0TmFtZSA9IGV4Y2VycHQudGl0bGU7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHcuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgICAgICAgICAgICAgICBlLm5hbWUgPSAnc2NvcmUtcGFydCc7CiAgICAgICAgICAgICAgICAgICAgZS50eXBlID0gJ3JhZGlvJzsKICAgICAgICAgICAgICAgICAgICBlLmFsdCA9IHBhcnROYW1lOwogICAgICAgICAgICAgICAgICAgIGUuY2hlY2tlZCA9IGlkID09PSBERUZBVUxUX1BBUlQ7CiAgICAgICAgICAgICAgICAgICAgZS5vbmNsaWNrID0gKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcmUuc2V0RXhjZXJwdElkKGlkKTsgLy8gc2V0IHNlbGVjdGVkIHBhcnQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpOwogICAgICAgICAgICAgICAgICAgIGxhYmVsLmlubmVyVGV4dCA9IHBhcnROYW1lOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpOwogICAgICAgICAgICAgICAgICAgIGZpZWxkc2V0LmFwcGVuZChlLCBsYWJlbCwgYnIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgeWllbGQgc2NvcmUuc2V0RXhjZXJwdElkKERFRkFVTFRfUEFSVCk7CiAgICAgICAgICAgICAgICAvLyBzdWJtaXQgYnV0dG9ucwogICAgICAgICAgICAgICAgZm9yIChjb25zdCBkIG9mIGRvd25sb2FkcykgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Ym1pdEJ0biA9IHcuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdG4udHlwZSA9ICdzdWJtaXQnOwogICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ0bi5zdHlsZS5tYXJnaW4gPSAnMC41ZW0nOwogICAgICAgICAgICAgICAgICAgIGZpZWxkc2V0LmFwcGVuZChzdWJtaXRCdG4pOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGluaXRCdG4gPSAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ0bi5vbmNsaWNrID0gb25TdWJtaXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdG4udmFsdWUgPSBkLm5hbWU7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBvblN1Ym1pdCA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2NrIHRoZSBidXR0b24gd2hlbiBwcm9jZXNzaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ0bi5vbmNsaWNrID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnRuLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnRuLnZhbHVlID0gaTE4bignUFJPQ0VTU0lORycpKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBmaWVsZHNldC5xdWVyeVNlbGVjdG9yKCdpbnB1dDpjaGVja2VkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnROYW1lID0gY2hlY2tlZC5hbHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgQmxvYihbeWllbGQgZC5hY3Rpb24oc2NvcmUpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVBcyhkYXRhLCBgJHtmaWxlTmFtZX0gLSAke3BhcnROYW1lfS4ke2QuZmlsZUV4dH1gKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gdW5sb2NrIGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICBpbml0QnRuKCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgaW5pdEJ0bigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSksCiAgICAgICAgfSk7CiAgICAgICAgYnRuTGlzdC5hZGQoewogICAgICAgICAgICBuYW1lOiBpMThuKCdWSUVXX0lOX0xJQlJFU0NPUkUnKSgpLAogICAgICAgICAgICBhY3Rpb246IEJ0bkFjdGlvbi5vcGVuVXJsKCgpID0+IGdldExpYnJlU2NvcmVMaW5rKHNjb3JlaW5mbykpLAogICAgICAgICAgICB0b29sdGlwOiAnQkVUQScsCiAgICAgICAgICAgIGljb246IElDT04uTElCUkVTQ09SRSwKICAgICAgICAgICAgbGlnaHRUaGVtZTogdHJ1ZSwKICAgICAgICB9KTsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzCiAgICAgICAgYnRuTGlzdC5jb21taXQoQnRuTGlzdE1vZGUuSW5QYWdlKTsKICAgIH07CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzCiAgICB3YWl0Rm9yU2hlZXRMb2FkZWQoKS50aGVuKG1haW4pOwoKICAgIH0udG9TdHJpbmcoKSArICcpKCknKX0pCgp9KCkpOwo="},{"name":"Amazon Smile Redirect","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["http://www.amazon.com/*","http://www.amazon.co.uk/*","http://www.amazon.de/*","https://www.amazon.com/*","https://www.amazon.co.uk/*","https://www.amazon.de/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["http://smile.amazon.com/*","http://smile.amazon.co.uk/*","http://smile.amazon.de/*","https://smile.amazon.com/*","https://smile.amazon.co.uk/*","https://smile.amazon.de/*","https://www.amazon.com/ap/*","https://www.amazon.co.uk/ap/*","https://www.amazon.de/ap/*","https://www.amazon.com/gp/css/*","https://www.amazon.co.uk/gp/css/*","https://www.amazon.de/gp/css/*"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1657661984778,"data":{}},"enabled":false,"position":6,"file_url":"https://openuserjs.org/install/mscarchilli/Amazon_Smile_Redirect.user.js","uuid":"1d3797d7-6779-4a08-8cf9-a61110c64f74","source":"Ly8gPT1Vc2VyU2NyaXB0PT0NCi8vIEBuYW1lICAgICAgIAlBbWF6b24gU21pbGUgUmVkaXJlY3QNCi8vIEBuYW1lc3BhY2UgIAlodHRwczovL3dlYmRldm5lcmRzdHVmZi5jb20NCi8vIEB2ZXJzaW9uICAgIAkxLjUNCi8vIEBkZXNjcmlwdGlvbiBUaGlzIHNjcmlwdCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVkaXJlY3QgeW91IHRvIHRoZSBjb3JyZXNwb25kaW5nIEFtYXpvbiBTbWlsZSBwYWdlIGluIHRoZSBVUywgVUssIGFuZCBERS4NCi8vIEBpbmNsdWRlICAgICBodHRwOi8vd3d3LmFtYXpvbi5jb20vKg0KLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly93d3cuYW1hem9uLmNvLnVrLyoNCi8vIEBpbmNsdWRlICAgICBodHRwOi8vd3d3LmFtYXpvbi5kZS8qDQovLyBAaW5jbHVkZSAgICAgaHR0cHM6Ly93d3cuYW1hem9uLmNvbS8qDQovLyBAaW5jbHVkZSAgICAgaHR0cHM6Ly93d3cuYW1hem9uLmNvLnVrLyoNCi8vIEBpbmNsdWRlICAgICBodHRwczovL3d3dy5hbWF6b24uZGUvKg0KLy8gQGV4Y2x1ZGUgICAgIGh0dHA6Ly9zbWlsZS5hbWF6b24uY29tLyoNCi8vIEBleGNsdWRlICAgICBodHRwOi8vc21pbGUuYW1hem9uLmNvLnVrLyoNCi8vIEBleGNsdWRlICAgICBodHRwOi8vc21pbGUuYW1hem9uLmRlLyoNCi8vIEBleGNsdWRlICAgICBodHRwczovL3NtaWxlLmFtYXpvbi5jb20vKg0KLy8gQGV4Y2x1ZGUgICAgIGh0dHBzOi8vc21pbGUuYW1hem9uLmNvLnVrLyoNCi8vIEBleGNsdWRlICAgICBodHRwczovL3NtaWxlLmFtYXpvbi5kZS8qDQovLyBAZXhjbHVkZSAgICAgaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9hcC8qDQovLyBAZXhjbHVkZSAgICAgaHR0cHM6Ly93d3cuYW1hem9uLmNvLnVrL2FwLyoNCi8vIEBleGNsdWRlICAgICBodHRwczovL3d3dy5hbWF6b24uZGUvYXAvKg0KLy8gQGV4Y2x1ZGUgICAgIGh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZ3AvY3NzLyoNCi8vIEBleGNsdWRlICAgICBodHRwczovL3d3dy5hbWF6b24uY28udWsvZ3AvY3NzLyoNCi8vIEBleGNsdWRlICAgICBodHRwczovL3d3dy5hbWF6b24uZGUvZ3AvY3NzLyoNCi8vIEBjb3B5cmlnaHQgICAyMDE0Kw0KLy8gQHVwZGF0ZVVSTCAgIGh0dHBzOi8vb3BlbnVzZXJqcy5vcmcvbWV0YS9tc2NhcmNoaWxsaS9BbWF6b25fU21pbGVfUmVkaXJlY3QubWV0YS5qcw0KLy8gQGRvd25sb2FkVVJMIGh0dHBzOi8vb3BlbnVzZXJqcy5vcmcvaW5zdGFsbC9tc2NhcmNoaWxsaS9BbWF6b25fU21pbGVfUmVkaXJlY3QudXNlci5qcw0KLy8gQGljb24gICAgICAgIGh0dHA6Ly93d3cuYW1hem9uLmNvbS9mYXZpY29uLmljbw0KLy8gQGdyYW50ICAgICAgIG5vbmUNCi8vIEBsaWNlbnNlICAgICBNSVQNCi8vID09L1VzZXJTY3JpcHQ9PQ0KDQoNCi8vIENoZWNrIHRvIHNlZSBpZiAjbmF2LXRvb2xzIGV4aXN0cyB0byBjaGVjayBpZiB1c2VyIGlzIGxvZ2dlZCBpbiAvLw0KdmFyIG5hdlRvb2xzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hdi10b29scycpOw0KdmFyIG5hdkxpbmU7DQp2YXIgbmF2bGluZVRleHQ7DQoNCmlmICh0eXBlb2YobmF2VG9vbHMpICE9PSAndW5kZWZpbmVkJyAmJiBuYXZUb29scyAhPSBudWxsKSB7DQogIGZldGNoTmF2TGluZXMoKTsNCn0NCg0KLy8gRmV0Y2ggbmF2LWxpbmUtMSBlbG1zIC8vDQpmdW5jdGlvbiBmZXRjaE5hdkxpbmVzKCkgew0KICB2YXIgbmF2TGluZXMgICAgICAgID0gbmF2VG9vbHMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmF2LWxpbmUtMScpOw0KICB2YXIgZG9tYWluRXh0ZW5zaW9uID0gd2luZG93LmxvY2F0aW9uLmhvc3Quc3BsaXQoJy5hbWF6b24uJylbMV07DQoNCiAgZm9yICggdmFyIGkgPSAwOyBpIDwgbmF2TGluZXMubGVuZ3RoOyBpKysgKQ0KICB7DQogICAgaWYgKG5hdkxpbmVzW2ldLmlubmVySFRNTC5pbmNsdWRlcyggJ0hlbGxvLicpIHx8IG5hdkxpbmVzW2ldLmlubmVySFRNTC5pbmNsdWRlcyggJ0hlbGxvLCcpIHx8IG5hdkxpbmVzW2ldLmlubmVySFRNTC5pbmNsdWRlcyggJ0hhbGxvIScpKQ0KICAgIHsNCiAgICAgIG5hdkxpbmUgICAgID0gbmF2TGluZXNbaV07DQogICAgICBuYXZsaW5lVGV4dCA9IG5hdkxpbmVzW2ldLmlubmVySFRNTDsNCg0KICAgICAgYnJlYWs7DQogICAgfQ0KICB9DQoNCiAgLy8gUmVkaXJlY3QgdXNlciB0byBjb3JyZXNwb25kaW5nIHBhZ2Ugb24gQW1hem9uIFNtaWxlIC8vDQogIGlmIChuYXZsaW5lVGV4dCAhPT0gJ0hlbGxvLiBTaWduIGluJyAmJiBuYXZsaW5lVGV4dCAhPT0gJ0hlbGxvLCBTaWduIGluJyAmJiBuYXZsaW5lVGV4dCAhPT0gJ0hhbGxvISBBbm1lbGRlbicpIHsNCiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgnaHR0cHM6Ly9zbWlsZS5hbWF6b24uJyArIGRvbWFpbkV4dGVuc2lvbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCk7DQogIH0NCiAgLy8gUmVkaXJlY3QgdXNlciB0byBsb2dpbiBwYWdlIHdpdGggcmV0dXJuX3RvIFVSTCAvLw0KICBlbHNlIHsNCiAgICB2YXIgcmVkaXJlY3RVUkwgICAgID0gZW5jb2RlVVJJQ29tcG9uZW50KCdodHRwczovL3NtaWxlLmFtYXpvbi4nICsgZG9tYWluRXh0ZW5zaW9uICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTsNCiAgICB2YXIgcmVkaXJlY3RTZWFyY2ggID0gZW5jb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLnNlYXJjaCk7DQoNCiAgICBpZiAoIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PSAnd3d3LmFtYXpvbi5jb20nICkgew0KICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoJ2h0dHBzOi8vd3d3LmFtYXpvbi4nICsgZG9tYWluRXh0ZW5zaW9uICsgJy9hcC9zaWduaW4/X2VuY29kaW5nPVVURjgmb3BlbmlkLmFzc29jX2hhbmRsZT11c2ZsZXgmb3BlbmlkLmNsYWltZWRfaWQ9aHR0cCUzQSUyRiUyRnNwZWNzLm9wZW5pZC5uZXQlMkZhdXRoJTJGMi4wJTJGaWRlbnRpZmllcl9zZWxlY3Qmb3BlbmlkLmlkZW50aXR5PWh0dHAlM0ElMkYlMkZzcGVjcy5vcGVuaWQubmV0JTJGYXV0aCUyRjIuMCUyRmlkZW50aWZpZXJfc2VsZWN0Jm9wZW5pZC5tb2RlPWNoZWNraWRfc2V0dXAmb3BlbmlkLm5zPWh0dHAlM0ElMkYlMkZzcGVjcy5vcGVuaWQubmV0JTJGYXV0aCUyRjIuMCZvcGVuaWQubnMucGFwZT1odHRwJTNBJTJGJTJGc3BlY3Mub3BlbmlkLm5ldCUyRmV4dGVuc2lvbnMlMkZwYXBlJTJGMS4wJm9wZW5pZC5wYXBlLm1heF9hdXRoX2FnZT0wJm9wZW5pZC5yZXR1cm5fdG89JyArIHJlZGlyZWN0VVJMICsgcmVkaXJlY3RTZWFyY2gpOw0KICAgIH0NCiAgICBlbHNlIGlmICggd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09ICd3d3cuYW1hem9uLmNvLnVrJyApIHsNCiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKCdodHRwczovL3d3dy5hbWF6b24uJyArIGRvbWFpbkV4dGVuc2lvbiArICcvYXAvc2lnbmluP19lbmNvZGluZz1VVEY4Jmlnbm9yZUF1dGhTdGF0ZT0xJm9wZW5pZC5hc3NvY19oYW5kbGU9Z2JmbGV4Jm9wZW5pZC5jbGFpbWVkX2lkPWh0dHAlM0ElMkYlMkZzcGVjcy5vcGVuaWQubmV0JTJGYXV0aCUyRjIuMCUyRmlkZW50aWZpZXJfc2VsZWN0Jm9wZW5pZC5pZGVudGl0eT1odHRwJTNBJTJGJTJGc3BlY3Mub3BlbmlkLm5ldCUyRmF1dGglMkYyLjAlMkZpZGVudGlmaWVyX3NlbGVjdCZvcGVuaWQubW9kZT1jaGVja2lkX3NldHVwJm9wZW5pZC5ucz1odHRwJTNBJTJGJTJGc3BlY3Mub3BlbmlkLm5ldCUyRmF1dGglMkYyLjAmb3BlbmlkLm5zLnBhcGU9aHR0cCUzQSUyRiUyRnNwZWNzLm9wZW5pZC5uZXQlMkZleHRlbnNpb25zJTJGcGFwZSUyRjEuMCZvcGVuaWQucGFwZS5tYXhfYXV0aF9hZ2U9MCZvcGVuaWQucmV0dXJuX3RvPScgKyByZWRpcmVjdFVSTCArIHJlZGlyZWN0U2VhcmNoKTsNCiAgICB9DQogICAgZWxzZSBpZiAoIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PSAnd3d3LmFtYXpvbi5kZScgKSB7DQogICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgnaHR0cHM6Ly93d3cuYW1hem9uLicgKyBkb21haW5FeHRlbnNpb24gKyAnL2FwL3NpZ25pbj9fZW5jb2Rpbmc9VVRGOCZpZ25vcmVBdXRoU3RhdGU9MSZvcGVuaWQuYXNzb2NfaGFuZGxlPWRlZmxleCZvcGVuaWQuY2xhaW1lZF9pZD1odHRwJTNBJTJGJTJGc3BlY3Mub3BlbmlkLm5ldCUyRmF1dGglMkYyLjAlMkZpZGVudGlmaWVyX3NlbGVjdCZvcGVuaWQuaWRlbnRpdHk9aHR0cCUzQSUyRiUyRnNwZWNzLm9wZW5pZC5uZXQlMkZhdXRoJTJGMi4wJTJGaWRlbnRpZmllcl9zZWxlY3Qmb3BlbmlkLm1vZGU9Y2hlY2tpZF9zZXR1cCZvcGVuaWQubnM9aHR0cCUzQSUyRiUyRnNwZWNzLm9wZW5pZC5uZXQlMkZhdXRoJTJGMi4wJm9wZW5pZC5ucy5wYXBlPWh0dHAlM0ElMkYlMkZzcGVjcy5vcGVuaWQubmV0JTJGZXh0ZW5zaW9ucyUyRnBhcGUlMkYxLjAmb3BlbmlkLnBhcGUubWF4X2F1dGhfYWdlPTAmb3BlbmlkLnJldHVybl90bz0nICsgcmVkaXJlY3RVUkwgKyByZWRpcmVjdFNlYXJjaCk7DQogICAgfQ0KICB9DQp9DQo="}]}